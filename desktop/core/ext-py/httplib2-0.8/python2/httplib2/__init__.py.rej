--- __init__.py
+++ __init__.py
@@ -1058,15 +1062,26 @@
 
 # Use a different connection object for Google App Engine
 try:
-  from google.appengine.api import apiproxy_stub_map
-  if apiproxy_stub_map.apiproxy.GetStub('urlfetch') is None:
-    raise ImportError  # Bail out; we're not actually running on App Engine.
-  from google.appengine.api.urlfetch import fetch
-  from google.appengine.api.urlfetch import InvalidURLError
+  try:
+    from google.appengine.api import apiproxy_stub_map
+    if apiproxy_stub_map.apiproxy.GetStub('urlfetch') is None:
+      raise ImportError  # Bail out; we're not actually running on App Engine.
+    from google.appengine.api.urlfetch import fetch
+    from google.appengine.api.urlfetch import InvalidURLError
+  except ImportError:
+    from google3.apphosting.api import apiproxy_stub_map
+    if apiproxy_stub_map.apiproxy.GetStub('urlfetch') is None:
+      raise ImportError  # Bail out; we're not actually running on App Engine.
+    from google3.apphosting.api.urlfetch import fetch
+    from google3.apphosting.api.urlfetch import InvalidURLError
 
   def _new_fixed_fetch(validate_certificate):
-    def fixed_fetch(url, payload=None, method="GET", headers={}, allow_truncated=False, follow_redirects=True, deadline=5):
-      return fetch(url, payload=payload, method=method, headers=header, allow_truncated=allow_truncated, follow_redirects=follow_redirects, deadline=deadline, validate_certificate=validate_certificate)
+    def fixed_fetch(url, payload=None, method="GET", headers={},
+                    allow_truncated=False, follow_redirects=True, deadline=5):
+      return fetch(url, payload=payload, method=method, headers=header,
+                   allow_truncated=allow_truncated,
+                   follow_redirects=follow_redirects, deadline=deadline,
+                   validate_certificate=validate_certificate)
     return fixed_fetch
 
   class AppEngineHttpConnection(httplib.HTTPConnection):
