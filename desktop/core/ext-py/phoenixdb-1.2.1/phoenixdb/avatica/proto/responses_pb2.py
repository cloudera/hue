# -*- coding: utf-8 -*-
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: responses.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from . import common_pb2 as common__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x0fresponses.proto\x1a\x0c\x63ommon.proto\"\xc9\x01\n\x11ResultSetResponse\x12\x15\n\rconnection_id\x18\x01 \x01(\t\x12\x14\n\x0cstatement_id\x18\x02 \x01(\r\x12\x15\n\rown_statement\x18\x03 \x01(\x08\x12\x1d\n\tsignature\x18\x04 \x01(\x0b\x32\n.Signature\x12\x1b\n\x0b\x66irst_frame\x18\x05 \x01(\x0b\x32\x06.Frame\x12\x14\n\x0cupdate_count\x18\x06 \x01(\x04\x12\x1e\n\x08metadata\x18\x07 \x01(\x0b\x32\x0c.RpcMetadata\"q\n\x0f\x45xecuteResponse\x12#\n\x07results\x18\x01 \x03(\x0b\x32\x12.ResultSetResponse\x12\x19\n\x11missing_statement\x18\x02 \x01(\x08\x12\x1e\n\x08metadata\x18\x03 \x01(\x0b\x32\x0c.RpcMetadata\"V\n\x0fPrepareResponse\x12#\n\tstatement\x18\x01 \x01(\x0b\x32\x10.StatementHandle\x12\x1e\n\x08metadata\x18\x02 \x01(\x0b\x32\x0c.RpcMetadata\"z\n\rFetchResponse\x12\x15\n\x05\x66rame\x18\x01 \x01(\x0b\x32\x06.Frame\x12\x19\n\x11missing_statement\x18\x02 \x01(\x08\x12\x17\n\x0fmissing_results\x18\x03 \x01(\x08\x12\x1e\n\x08metadata\x18\x04 \x01(\x0b\x32\x0c.RpcMetadata\"f\n\x17\x43reateStatementResponse\x12\x15\n\rconnection_id\x18\x01 \x01(\t\x12\x14\n\x0cstatement_id\x18\x02 \x01(\r\x12\x1e\n\x08metadata\x18\x03 \x01(\x0b\x32\x0c.RpcMetadata\"8\n\x16\x43loseStatementResponse\x12\x1e\n\x08metadata\x18\x01 \x01(\x0b\x32\x0c.RpcMetadata\"8\n\x16OpenConnectionResponse\x12\x1e\n\x08metadata\x18\x01 \x01(\x0b\x32\x0c.RpcMetadata\"9\n\x17\x43loseConnectionResponse\x12\x1e\n\x08metadata\x18\x01 \x01(\x0b\x32\x0c.RpcMetadata\"c\n\x16\x43onnectionSyncResponse\x12)\n\nconn_props\x18\x01 \x01(\x0b\x32\x15.ConnectionProperties\x12\x1e\n\x08metadata\x18\x02 \x01(\x0b\x32\x0c.RpcMetadata\"u\n\x17\x44\x61tabasePropertyElement\x12\x1e\n\x03key\x18\x01 \x01(\x0b\x32\x11.DatabaseProperty\x12\x1a\n\x05value\x18\x02 \x01(\x0b\x32\x0b.TypedValue\x12\x1e\n\x08metadata\x18\x03 \x01(\x0b\x32\x0c.RpcMetadata\"c\n\x18\x44\x61tabasePropertyResponse\x12\'\n\x05props\x18\x01 \x03(\x0b\x32\x18.DatabasePropertyElement\x12\x1e\n\x08metadata\x18\x02 \x01(\x0b\x32\x0c.RpcMetadata\"\xb6\x01\n\rErrorResponse\x12\x12\n\nexceptions\x18\x01 \x03(\t\x12\x16\n\x0ehas_exceptions\x18\x07 \x01(\x08\x12\x15\n\rerror_message\x18\x02 \x01(\t\x12\x1b\n\x08severity\x18\x03 \x01(\x0e\x32\t.Severity\x12\x12\n\nerror_code\x18\x04 \x01(\r\x12\x11\n\tsql_state\x18\x05 \x01(\t\x12\x1e\n\x08metadata\x18\x06 \x01(\x0b\x32\x0c.RpcMetadata\"f\n\x13SyncResultsResponse\x12\x19\n\x11missing_statement\x18\x01 \x01(\x08\x12\x14\n\x0cmore_results\x18\x02 \x01(\x08\x12\x1e\n\x08metadata\x18\x03 \x01(\x0b\x32\x0c.RpcMetadata\"%\n\x0bRpcMetadata\x12\x16\n\x0eserver_address\x18\x01 \x01(\t\"\x10\n\x0e\x43ommitResponse\"\x12\n\x10RollbackResponse\"\x95\x01\n\x14\x45xecuteBatchResponse\x12\x15\n\rconnection_id\x18\x01 \x01(\t\x12\x14\n\x0cstatement_id\x18\x02 \x01(\r\x12\x15\n\rupdate_counts\x18\x03 \x03(\x04\x12\x19\n\x11missing_statement\x18\x04 \x01(\x08\x12\x1e\n\x08metadata\x18\x05 \x01(\x0b\x32\x0c.RpcMetadataB\"\n org.apache.calcite.avatica.protob\x06proto3')



_RESULTSETRESPONSE = DESCRIPTOR.message_types_by_name['ResultSetResponse']
_EXECUTERESPONSE = DESCRIPTOR.message_types_by_name['ExecuteResponse']
_PREPARERESPONSE = DESCRIPTOR.message_types_by_name['PrepareResponse']
_FETCHRESPONSE = DESCRIPTOR.message_types_by_name['FetchResponse']
_CREATESTATEMENTRESPONSE = DESCRIPTOR.message_types_by_name['CreateStatementResponse']
_CLOSESTATEMENTRESPONSE = DESCRIPTOR.message_types_by_name['CloseStatementResponse']
_OPENCONNECTIONRESPONSE = DESCRIPTOR.message_types_by_name['OpenConnectionResponse']
_CLOSECONNECTIONRESPONSE = DESCRIPTOR.message_types_by_name['CloseConnectionResponse']
_CONNECTIONSYNCRESPONSE = DESCRIPTOR.message_types_by_name['ConnectionSyncResponse']
_DATABASEPROPERTYELEMENT = DESCRIPTOR.message_types_by_name['DatabasePropertyElement']
_DATABASEPROPERTYRESPONSE = DESCRIPTOR.message_types_by_name['DatabasePropertyResponse']
_ERRORRESPONSE = DESCRIPTOR.message_types_by_name['ErrorResponse']
_SYNCRESULTSRESPONSE = DESCRIPTOR.message_types_by_name['SyncResultsResponse']
_RPCMETADATA = DESCRIPTOR.message_types_by_name['RpcMetadata']
_COMMITRESPONSE = DESCRIPTOR.message_types_by_name['CommitResponse']
_ROLLBACKRESPONSE = DESCRIPTOR.message_types_by_name['RollbackResponse']
_EXECUTEBATCHRESPONSE = DESCRIPTOR.message_types_by_name['ExecuteBatchResponse']
ResultSetResponse = _reflection.GeneratedProtocolMessageType('ResultSetResponse', (_message.Message,), {
  'DESCRIPTOR' : _RESULTSETRESPONSE,
  '__module__' : 'responses_pb2'
  # @@protoc_insertion_point(class_scope:ResultSetResponse)
  })
_sym_db.RegisterMessage(ResultSetResponse)

ExecuteResponse = _reflection.GeneratedProtocolMessageType('ExecuteResponse', (_message.Message,), {
  'DESCRIPTOR' : _EXECUTERESPONSE,
  '__module__' : 'responses_pb2'
  # @@protoc_insertion_point(class_scope:ExecuteResponse)
  })
_sym_db.RegisterMessage(ExecuteResponse)

PrepareResponse = _reflection.GeneratedProtocolMessageType('PrepareResponse', (_message.Message,), {
  'DESCRIPTOR' : _PREPARERESPONSE,
  '__module__' : 'responses_pb2'
  # @@protoc_insertion_point(class_scope:PrepareResponse)
  })
_sym_db.RegisterMessage(PrepareResponse)

FetchResponse = _reflection.GeneratedProtocolMessageType('FetchResponse', (_message.Message,), {
  'DESCRIPTOR' : _FETCHRESPONSE,
  '__module__' : 'responses_pb2'
  # @@protoc_insertion_point(class_scope:FetchResponse)
  })
_sym_db.RegisterMessage(FetchResponse)

CreateStatementResponse = _reflection.GeneratedProtocolMessageType('CreateStatementResponse', (_message.Message,), {
  'DESCRIPTOR' : _CREATESTATEMENTRESPONSE,
  '__module__' : 'responses_pb2'
  # @@protoc_insertion_point(class_scope:CreateStatementResponse)
  })
_sym_db.RegisterMessage(CreateStatementResponse)

CloseStatementResponse = _reflection.GeneratedProtocolMessageType('CloseStatementResponse', (_message.Message,), {
  'DESCRIPTOR' : _CLOSESTATEMENTRESPONSE,
  '__module__' : 'responses_pb2'
  # @@protoc_insertion_point(class_scope:CloseStatementResponse)
  })
_sym_db.RegisterMessage(CloseStatementResponse)

OpenConnectionResponse = _reflection.GeneratedProtocolMessageType('OpenConnectionResponse', (_message.Message,), {
  'DESCRIPTOR' : _OPENCONNECTIONRESPONSE,
  '__module__' : 'responses_pb2'
  # @@protoc_insertion_point(class_scope:OpenConnectionResponse)
  })
_sym_db.RegisterMessage(OpenConnectionResponse)

CloseConnectionResponse = _reflection.GeneratedProtocolMessageType('CloseConnectionResponse', (_message.Message,), {
  'DESCRIPTOR' : _CLOSECONNECTIONRESPONSE,
  '__module__' : 'responses_pb2'
  # @@protoc_insertion_point(class_scope:CloseConnectionResponse)
  })
_sym_db.RegisterMessage(CloseConnectionResponse)

ConnectionSyncResponse = _reflection.GeneratedProtocolMessageType('ConnectionSyncResponse', (_message.Message,), {
  'DESCRIPTOR' : _CONNECTIONSYNCRESPONSE,
  '__module__' : 'responses_pb2'
  # @@protoc_insertion_point(class_scope:ConnectionSyncResponse)
  })
_sym_db.RegisterMessage(ConnectionSyncResponse)

DatabasePropertyElement = _reflection.GeneratedProtocolMessageType('DatabasePropertyElement', (_message.Message,), {
  'DESCRIPTOR' : _DATABASEPROPERTYELEMENT,
  '__module__' : 'responses_pb2'
  # @@protoc_insertion_point(class_scope:DatabasePropertyElement)
  })
_sym_db.RegisterMessage(DatabasePropertyElement)

DatabasePropertyResponse = _reflection.GeneratedProtocolMessageType('DatabasePropertyResponse', (_message.Message,), {
  'DESCRIPTOR' : _DATABASEPROPERTYRESPONSE,
  '__module__' : 'responses_pb2'
  # @@protoc_insertion_point(class_scope:DatabasePropertyResponse)
  })
_sym_db.RegisterMessage(DatabasePropertyResponse)

ErrorResponse = _reflection.GeneratedProtocolMessageType('ErrorResponse', (_message.Message,), {
  'DESCRIPTOR' : _ERRORRESPONSE,
  '__module__' : 'responses_pb2'
  # @@protoc_insertion_point(class_scope:ErrorResponse)
  })
_sym_db.RegisterMessage(ErrorResponse)

SyncResultsResponse = _reflection.GeneratedProtocolMessageType('SyncResultsResponse', (_message.Message,), {
  'DESCRIPTOR' : _SYNCRESULTSRESPONSE,
  '__module__' : 'responses_pb2'
  # @@protoc_insertion_point(class_scope:SyncResultsResponse)
  })
_sym_db.RegisterMessage(SyncResultsResponse)

RpcMetadata = _reflection.GeneratedProtocolMessageType('RpcMetadata', (_message.Message,), {
  'DESCRIPTOR' : _RPCMETADATA,
  '__module__' : 'responses_pb2'
  # @@protoc_insertion_point(class_scope:RpcMetadata)
  })
_sym_db.RegisterMessage(RpcMetadata)

CommitResponse = _reflection.GeneratedProtocolMessageType('CommitResponse', (_message.Message,), {
  'DESCRIPTOR' : _COMMITRESPONSE,
  '__module__' : 'responses_pb2'
  # @@protoc_insertion_point(class_scope:CommitResponse)
  })
_sym_db.RegisterMessage(CommitResponse)

RollbackResponse = _reflection.GeneratedProtocolMessageType('RollbackResponse', (_message.Message,), {
  'DESCRIPTOR' : _ROLLBACKRESPONSE,
  '__module__' : 'responses_pb2'
  # @@protoc_insertion_point(class_scope:RollbackResponse)
  })
_sym_db.RegisterMessage(RollbackResponse)

ExecuteBatchResponse = _reflection.GeneratedProtocolMessageType('ExecuteBatchResponse', (_message.Message,), {
  'DESCRIPTOR' : _EXECUTEBATCHRESPONSE,
  '__module__' : 'responses_pb2'
  # @@protoc_insertion_point(class_scope:ExecuteBatchResponse)
  })
_sym_db.RegisterMessage(ExecuteBatchResponse)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n org.apache.calcite.avatica.proto'
  _RESULTSETRESPONSE._serialized_start=34
  _RESULTSETRESPONSE._serialized_end=235
  _EXECUTERESPONSE._serialized_start=237
  _EXECUTERESPONSE._serialized_end=350
  _PREPARERESPONSE._serialized_start=352
  _PREPARERESPONSE._serialized_end=438
  _FETCHRESPONSE._serialized_start=440
  _FETCHRESPONSE._serialized_end=562
  _CREATESTATEMENTRESPONSE._serialized_start=564
  _CREATESTATEMENTRESPONSE._serialized_end=666
  _CLOSESTATEMENTRESPONSE._serialized_start=668
  _CLOSESTATEMENTRESPONSE._serialized_end=724
  _OPENCONNECTIONRESPONSE._serialized_start=726
  _OPENCONNECTIONRESPONSE._serialized_end=782
  _CLOSECONNECTIONRESPONSE._serialized_start=784
  _CLOSECONNECTIONRESPONSE._serialized_end=841
  _CONNECTIONSYNCRESPONSE._serialized_start=843
  _CONNECTIONSYNCRESPONSE._serialized_end=942
  _DATABASEPROPERTYELEMENT._serialized_start=944
  _DATABASEPROPERTYELEMENT._serialized_end=1061
  _DATABASEPROPERTYRESPONSE._serialized_start=1063
  _DATABASEPROPERTYRESPONSE._serialized_end=1162
  _ERRORRESPONSE._serialized_start=1165
  _ERRORRESPONSE._serialized_end=1347
  _SYNCRESULTSRESPONSE._serialized_start=1349
  _SYNCRESULTSRESPONSE._serialized_end=1451
  _RPCMETADATA._serialized_start=1453
  _RPCMETADATA._serialized_end=1490
  _COMMITRESPONSE._serialized_start=1492
  _COMMITRESPONSE._serialized_end=1508
  _ROLLBACKRESPONSE._serialized_start=1510
  _ROLLBACKRESPONSE._serialized_end=1528
  _EXECUTEBATCHRESPONSE._serialized_start=1531
  _EXECUTEBATCHRESPONSE._serialized_end=1680
# @@protoc_insertion_point(module_scope)
