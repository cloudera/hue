{"body":"<div><div>\n        <div id=\"title\">\n                        <h1 class=\"hue-doc-title-hive\">Explain</h1>\n        </div>\n\n        <!--<div id=\"toc\" class=\"content prepend-top\">\n            <h1>Table of Contents</h1>\n            $replacement.render(\"toc\")\n        </div>-->\n\n        <div id=\"src-27362037\">\n            <p>\n                </p>\n    <ul><li>            <p>\n    <a data-doc-anchor-id=\"src-27362037_LanguageManualExplain-EXPLAINSyntax\" class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"_27362037\">EXPLAIN Syntax</a>            </p>\n    <ul><li>            <p>\n    <a data-doc-anchor-id=\"src-27362037_LanguageManualExplain-Example\" class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"_27362037\">Example</a>            </p>\n    </li><li>            <p>\n    <a data-doc-anchor-id=\"src-27362037_LanguageManualExplain-TheCBOClause\" class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"_27362037\">The CBO Clause</a>            </p>\n    </li><li>            <p>\n    <a data-doc-anchor-id=\"src-27362037_LanguageManualExplain-TheASTClause\" class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"_27362037\">The AST Clause</a>            </p>\n    </li><li>            <p>\n    <a data-doc-anchor-id=\"src-27362037_LanguageManualExplain-TheDEPENDENCYClause\" class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"_27362037\">The DEPENDENCY Clause</a>            </p>\n    </li><li>            <p>\n    <a data-doc-anchor-id=\"src-27362037_LanguageManualExplain-TheAUTHORIZATIONClause\" class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"_27362037\">The AUTHORIZATION Clause</a>            </p>\n    </li><li>            <p>\n    <a data-doc-anchor-id=\"src-27362037_LanguageManualExplain-TheLOCKSClause\" class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"_27362037\">The LOCKS Clause</a>            </p>\n    </li><li>            <p>\n    <a data-doc-anchor-id=\"src-27362037_LanguageManualExplain-TheVECTORIZATIONClause\" class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"_27362037\">The VECTORIZATION Clause</a>            </p>\n    </li><li>            <p>\n    <a data-doc-anchor-id=\"src-27362037_LanguageManualExplain-TheANALYZEClause\" class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"_27362037\">The ANALYZE Clause</a>            </p>\n    </li><li>            <p>\n    <a data-doc-anchor-id=\"src-27362037_LanguageManualExplain-User-levelExplainOutput\" class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"_27362037\">User-level Explain Output</a>            </p>\n    </li></ul></li></ul>    <div id=\"src-27362037_LanguageManualExplain-EXPLAINSyntax\">\n        <h2><span>EXPLAIN Syntax</span></h2>\n            <p>\n    Hive provides an <tt>EXPLAIN</tt> command that shows the execution plan for a query. The syntax for this statement is as follows:            </p>\n        <div style=\"counter-reset: scroll-code-numbering 1\">\n                <div class=\"hue-doc-codeblock\">EXPLAIN [EXTENDED|CBO|AST|DEPENDENCY|AUTHORIZATION|LOCKS|VECTORIZATION|ANALYZE] query\n</div>\n    </div>\n            <p>\n    <tt>AUTHORIZATION</tt> is supported from HIVE 0.14.0 via <a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/HIVE-5961\" target=\"_blank\">HIVE-5961</a>. <tt>VECTORIZATION</tt> is supported from Hive 2.3.0 via <a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/HIVE-11394\" target=\"_blank\">HIVE-11394</a>. <tt>LOCKS</tt> is supported from Hive 3.2.0 via <a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/HIVE-17683\" target=\"_blank\">HIVE-17683</a>.            </p>\n                <p>\n    AST was removed from EXPLAIN EXTENDED in <a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/HIVE-13533\" target=\"_blank\">HIVE-13533</a> and reinstated as a separate command in <a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/HIVE-15932\" target=\"_blank\">HIVE-15932</a>.            </p>\n                <p>\n    The use of <tt>EXTENDED</tt> in the <tt>EXPLAIN</tt> statement produces extra information about the operators in the plan. This is typically physical information like file names.            </p>\n                <p>\n    A Hive query gets converted into a sequence (it is more a Directed Acyclic Graph) of stages. These stages may be map/reduce stages or they may even be stages that do metastore or file system operations like move and rename. The explain output has three parts:            </p>\n    <ul><li>            <p>\n    The Abstract Syntax Tree for the query            </p>\n    </li><li>            <p>\n    The dependencies between the different stages of the plan            </p>\n    </li><li>            <p>\n    The description of each of the stages            </p>\n    </li></ul>            <p>\n    The description of the stages itself shows a sequence of operators with the metadata associated with the operators. The metadata may comprise things like filter expressions for the FilterOperator or the select expressions for the SelectOperator or the output file names for the FileSinkOperator.            </p>\n        <div id=\"src-27362037_LanguageManualExplain-Example\">\n        <h3><span>Example</span></h3>\n            <p>\n    As an example, consider the following <tt>EXPLAIN</tt> query:            </p>\n        <div style=\"counter-reset: scroll-code-numbering 1\">\n                <div class=\"hue-doc-codeblock\">EXPLAIN\nFROM src INSERT OVERWRITE TABLE dest_g1 SELECT src.key, sum(substr(src.value,<span class=\"hue-doc-varname\">4</span>)) GROUP BY src.key;\n</div>\n    </div>\n            <p>\n    The output of this statement contains the following parts:            </p>\n    <ul><li>            <p>\n    The Dependency Graph            </p>\n        <div style=\"counter-reset: scroll-code-numbering 1\">\n                <div class=\"hue-doc-codeblock\">STAGE DEPENDENCIES:\n  Stage-<span class=\"hue-doc-varname\">1</span> is a root stage\n  Stage-<span class=\"hue-doc-varname\">2</span> depends on stages: Stage-<span class=\"hue-doc-varname\">1</span>\n  Stage-<span class=\"hue-doc-varname\">0</span> depends on stages: Stage-<span class=\"hue-doc-varname\">2</span>\n</div>\n    </div>\n            <p>\n    This shows that Stage-1 is the root stage, Stage-2 is executed after Stage-1 is done and Stage-0 is executed after Stage-2 is done.            </p>\n    </li></ul><ul><li>            <p>\n    The plans of each Stage            </p>\n        <div style=\"counter-reset: scroll-code-numbering 1\">\n                <div class=\"hue-doc-codeblock\">STAGE PLANS:\n  Stage: Stage-<span class=\"hue-doc-varname\">1</span>\n    Map Reduce\n      Alias -&gt; Map Operator Tree:\n        src\n            Reduce Output Operator\n              key expressions:\n                    expr: key\n                    type: string\n              sort order: +\n              Map-reduce partition columns:\n                    expr: rand()\n                    type: double\n              tag: -<span class=\"hue-doc-varname\">1</span>\n              value expressions:\n                    expr: substr(value, <span class=\"hue-doc-varname\">4</span>)\n                    type: string\n      Reduce Operator Tree:\n        Group By Operator\n          aggregations:\n                expr: sum(UDFToDouble(VALUE.<span class=\"hue-doc-varname\">0</span>))\n          keys:\n                expr: KEY.<span class=\"hue-doc-varname\">0</span>\n                type: string\n          mode: partial1\n          File Output Operator\n            compressed: false\n            table:\n                input format: org.apache.hadoop.mapred.SequenceFileInputFormat\n                output format: org.apache.hadoop.mapred.SequenceFileOutputFormat\n                name: binary_table\nÂ \n  Stage: Stage-<span class=\"hue-doc-varname\">2</span>\n    Map Reduce\n      Alias -&gt; Map Operator Tree:\n        /tmp/hive-zshao/<span class=\"hue-doc-varname\">67494501</span>/<span class=\"hue-doc-varname\">106593589.10001</span>\n          Reduce Output Operator\n            key expressions:\n                  expr: <span class=\"hue-doc-varname\">0</span>\n                  type: string\n            sort order: +\n            Map-reduce partition columns:\n                  expr: <span class=\"hue-doc-varname\">0</span>\n                  type: string\n            tag: -<span class=\"hue-doc-varname\">1</span>\n            value expressions:\n                  expr: <span class=\"hue-doc-varname\">1</span>\n                  type: double\n      Reduce Operator Tree:\n        Group By Operator\n          aggregations:\n                expr: sum(VALUE.<span class=\"hue-doc-varname\">0</span>)\n          keys:\n                expr: KEY.<span class=\"hue-doc-varname\">0</span>\n                type: string\n          mode: final\n          Select Operator\n            expressions:\n                  expr: <span class=\"hue-doc-varname\">0</span>\n                  type: string\n                  expr: <span class=\"hue-doc-varname\">1</span>\n                  type: double\n            Select Operator\n              expressions:\n                    expr: UDFToInteger(<span class=\"hue-doc-varname\">0</span>)\n                    type: int\n                    expr: <span class=\"hue-doc-varname\">1</span>\n                    type: double\n              File Output Operator\n                compressed: false\n                table:\n                    input format: org.apache.hadoop.mapred.TextInputFormat\n                    output format: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat\n                    serde: org.apache.hadoop.hive.serde2.dynamic_type.DynamicSerDe\n                    name: dest_g1\nÂ \n  Stage: Stage-<span class=\"hue-doc-varname\">0</span>\n    Move Operator\n      tables:\n            replace: true\n            table:\n                input format: org.apache.hadoop.mapred.TextInputFormat\n                output format: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat\n                serde: org.apache.hadoop.hive.serde2.dynamic_type.DynamicSerDe\n                name: dest_g1\n</div>\n    </div>\n            <p>\n    In this example there are 2 map/reduce stages (Stage-1 and Stage-2) and 1 File System related stage (Stage-0). Stage-0 basically moves the results from a temporary directory to the directory corresponding to the table dest_g1.<br><tt>Sort order</tt> indicates the number of columns in key expressions that are used for sorting. Each \"<tt>+</tt>\" represents one column sorted in ascending order, and each \"<tt>-</tt>\" represents a column sorted in descending order.            </p>\n    </li></ul>            <p>\n    A map/reduce stage itself has 2 parts:            </p>\n    <ul><li>            <p>\n    A mapping from table alias to Map Operator Tree â This mapping tells the mappers which operator tree to call in order to process the rows from a particular table or result of a previous map/reduce stage. In Stage-1 in the above example, the rows from src table are processed by the operator tree rooted at a Reduce Output Operator. Similarly, in Stage-2 the rows of the results of Stage-1 are processed by another operator tree rooted at another Reduce Output Operator. Each of these Reduce Output Operators partitions the data to the reducers according to the criteria shown in the metadata.            </p>\n    </li><li>            <p>\n    A Reduce Operator Tree â This is the operator tree which processes all the rows on the reducer of the map/reduce job. In Stage-1 for example, the Reducer Operator Tree is carrying out a partial aggregation whereas the Reducer Operator Tree in Stage-2 computes the final aggregation from the partial aggregates computed in Stage-1.            </p>\n    </li></ul>    </div>\n    <div id=\"src-27362037_LanguageManualExplain-TheCBOClause\">\n        <h3><span>The CBO Clause</span></h3>\n            <p>\n    The CBO clause outputs the plan generated by Calcite optimizer. It can optionally include information about the cost of the plan using Calcite default cost model and cost model used for join reordering. Since Hive release 4.0.0 (<a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/HIVE-17503\" target=\"_blank\">HIVE-17503</a> / <a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/HIVE-21184\" target=\"_blank\">HIVE-21184</a>).            </p>\n                <p>\n    Syntax: EXPLAIN [FORMATTED] CBO [COST|JOINCOST]            </p>\n    <ul><li>            <p>\n    <i>COST</i> option prints the plan and cost calculated using Calcite default cost model.            </p>\n    </li><li>            <p>\n    <i>JOINCOST</i> option prints the plan and cost calculated using the cost model used for join reordering.            </p>\n    </li></ul>            <p>\n    For example, we can execute the following statement:            </p>\n        <div style=\"counter-reset: scroll-code-numbering 1\">\n                <div class=\"hue-doc-codeblock\">EXPLAIN CBO\nWITH customer_total_return AS\n(SELECT sr_customer_sk AS ctr_customer_sk,\n  sr_store_sk AS ctr_store_sk,\n  SUM(SR_FEE) AS ctr_total_return\n  FROM store_returns, date_dim\n  WHERE sr_returned_date_sk = d_date_sk\n    AND d_year =<span class=\"hue-doc-varname\">2000</span>\n  GROUP BY sr_customer_sk, sr_store_sk)\nSELECT c_customer_id\nFROM customer_total_return ctr1, store, customer\nWHERE ctr1.ctr_total_return &gt; (SELECT AVG(ctr_total_return)*<span class=\"hue-doc-varname\">1.2</span>\nFROM customer_total_return ctr2\nWHERE ctr1.ctr_store_sk = ctr2.ctr_store_sk)\n  AND s_store_sk = ctr1.ctr_store_sk\n  AND s_state = 'NM'\n  AND ctr1.ctr_customer_sk = c_customer_sk\nORDER BY c_customer_id\nLIMIT <span class=\"hue-doc-varname\">100</span>\n</div>\n    </div>\n            <p>\n    The query will be optimized and Hive produces the following output:            </p>\n        <div style=\"counter-reset: scroll-code-numbering 1\">\n                <div class=\"hue-doc-codeblock\">CBO PLAN:\nHiveSortLimit(sort0=[$<span class=\"hue-doc-varname\">0</span>], dir0=[ASC], fetch=[<span class=\"hue-doc-varname\">100</span>])\n  HiveProject(c_customer_id=[$<span class=\"hue-doc-varname\">1</span>])\n    HiveJoin(condition=[AND(=($<span class=\"hue-doc-varname\">3</span>, $<span class=\"hue-doc-varname\">7</span>), &gt;($<span class=\"hue-doc-varname\">4</span>, $<span class=\"hue-doc-varname\">6</span>))], joinType=[inner], algorithm=[none], cost=[not available])\n      HiveJoin(condition=[=($<span class=\"hue-doc-varname\">2</span>, $<span class=\"hue-doc-varname\">0</span>)], joinType=[inner], algorithm=[none], cost=[not available])\n        HiveProject(c_customer_sk=[$<span class=\"hue-doc-varname\">0</span>], c_customer_id=[$<span class=\"hue-doc-varname\">1</span>])\n          HiveFilter(condition=[IS NOT NULL($<span class=\"hue-doc-varname\">0</span>)])\n            HiveTableScan(table=[[default, customer]], table:alias=[customer])\n        HiveJoin(condition=[=($<span class=\"hue-doc-varname\">3</span>, $<span class=\"hue-doc-varname\">1</span>)], joinType=[inner], algorithm=[none], cost=[not available])\n          HiveProject(sr_customer_sk=[$<span class=\"hue-doc-varname\">0</span>], sr_store_sk=[$<span class=\"hue-doc-varname\">1</span>], $f2=[$<span class=\"hue-doc-varname\">2</span>])\n            HiveAggregate(group=[{<span class=\"hue-doc-varname\">1</span>, <span class=\"hue-doc-varname\">2</span>}], agg#<span class=\"hue-doc-varname\">0</span>=[sum($<span class=\"hue-doc-varname\">3</span>)])\n              HiveJoin(condition=[=($<span class=\"hue-doc-varname\">0</span>, $<span class=\"hue-doc-varname\">4</span>)], joinType=[inner], algorithm=[none], cost=[not available])\n                HiveProject(sr_returned_date_sk=[$<span class=\"hue-doc-varname\">0</span>], sr_customer_sk=[$<span class=\"hue-doc-varname\">3</span>], sr_store_sk=[$<span class=\"hue-doc-varname\">7</span>], sr_fee=[$<span class=\"hue-doc-varname\">14</span>])\n                  HiveFilter(condition=[AND(IS NOT NULL($<span class=\"hue-doc-varname\">0</span>), IS NOT NULL($<span class=\"hue-doc-varname\">7</span>), IS NOT NULL($<span class=\"hue-doc-varname\">3</span>))])\n                    HiveTableScan(table=[[default, store_returns]], table:alias=[store_returns])\n                HiveProject(d_date_sk=[$<span class=\"hue-doc-varname\">0</span>])\n                  HiveFilter(condition=[AND(=($<span class=\"hue-doc-varname\">6</span>, <span class=\"hue-doc-varname\">2000</span>), IS NOT NULL($<span class=\"hue-doc-varname\">0</span>))])\n                    HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])\n          HiveProject(s_store_sk=[$<span class=\"hue-doc-varname\">0</span>])\n            HiveFilter(condition=[AND(=($<span class=\"hue-doc-varname\">24</span>, _UTF-16LE'NM'), IS NOT NULL($<span class=\"hue-doc-varname\">0</span>))])\n              HiveTableScan(table=[[default, store]], table:alias=[store])\n      HiveProject(_o__c0=[*(/($<span class=\"hue-doc-varname\">1</span>, $<span class=\"hue-doc-varname\">2</span>), <span class=\"hue-doc-varname\">1.2</span>)], ctr_store_sk=[$<span class=\"hue-doc-varname\">0</span>])\n        HiveAggregate(group=[{<span class=\"hue-doc-varname\">1</span>}], agg#<span class=\"hue-doc-varname\">0</span>=[sum($<span class=\"hue-doc-varname\">2</span>)], agg#<span class=\"hue-doc-varname\">1</span>=[count($<span class=\"hue-doc-varname\">2</span>)])\n          HiveProject(sr_customer_sk=[$<span class=\"hue-doc-varname\">0</span>], sr_store_sk=[$<span class=\"hue-doc-varname\">1</span>], $f2=[$<span class=\"hue-doc-varname\">2</span>])\n            HiveAggregate(group=[{<span class=\"hue-doc-varname\">1</span>, <span class=\"hue-doc-varname\">2</span>}], agg#<span class=\"hue-doc-varname\">0</span>=[sum($<span class=\"hue-doc-varname\">3</span>)])\n              HiveJoin(condition=[=($<span class=\"hue-doc-varname\">0</span>, $<span class=\"hue-doc-varname\">4</span>)], joinType=[inner], algorithm=[none], cost=[not available])\n                HiveProject(sr_returned_date_sk=[$<span class=\"hue-doc-varname\">0</span>], sr_customer_sk=[$<span class=\"hue-doc-varname\">3</span>], sr_store_sk=[$<span class=\"hue-doc-varname\">7</span>], sr_fee=[$<span class=\"hue-doc-varname\">14</span>])\n                  HiveFilter(condition=[AND(IS NOT NULL($<span class=\"hue-doc-varname\">0</span>), IS NOT NULL($<span class=\"hue-doc-varname\">7</span>))])\n                    HiveTableScan(table=[[default, store_returns]], table:alias=[store_returns])\n                HiveProject(d_date_sk=[$<span class=\"hue-doc-varname\">0</span>])\n                  HiveFilter(condition=[AND(=($<span class=\"hue-doc-varname\">6</span>, <span class=\"hue-doc-varname\">2000</span>), IS NOT NULL($<span class=\"hue-doc-varname\">0</span>))])\n                    HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])\n</div>\n    </div>\n            <p>\n    In turn, we can execute the following command:            </p>\n        <div style=\"counter-reset: scroll-code-numbering 1\">\n                <div class=\"hue-doc-codeblock\">EXPLAIN CBO COST\nWITH customer_total_return AS\n(SELECT sr_customer_sk AS ctr_customer_sk,\n  sr_store_sk AS ctr_store_sk,\n  SUM(SR_FEE) AS ctr_total_return\n  FROM store_returns, date_dim\n  WHERE sr_returned_date_sk = d_date_sk\n    AND d_year =<span class=\"hue-doc-varname\">2000</span>\n  GROUP BY sr_customer_sk, sr_store_sk)\nSELECT c_customer_id\nFROM customer_total_return ctr1, store, customer\nWHERE ctr1.ctr_total_return &gt; (SELECT AVG(ctr_total_return)*<span class=\"hue-doc-varname\">1.2</span>\nFROM customer_total_return ctr2\nWHERE ctr1.ctr_store_sk = ctr2.ctr_store_sk)\n  AND s_store_sk = ctr1.ctr_store_sk\n  AND s_state = 'NM'\n  AND ctr1.ctr_customer_sk = c_customer_sk\nORDER BY c_customer_id\nLIMIT <span class=\"hue-doc-varname\">100</span>\n</div>\n    </div>\n            <p>\n    It will produce a similar plan, but the cost for each operator will be embedded next to the operator descriptors:            </p>\n        <div style=\"counter-reset: scroll-code-numbering 1\">\n                <div class=\"hue-doc-codeblock\">CBO PLAN:\nHiveSortLimit(sort0=[$<span class=\"hue-doc-varname\">0</span>], dir0=[ASC], fetch=[<span class=\"hue-doc-varname\">100</span>]): rowcount = <span class=\"hue-doc-varname\">100.0</span>, cumulative cost = {<span class=\"hue-doc-varname\">2</span>.395588892021712E26 rows, <span class=\"hue-doc-varname\">1</span>.197794434438787E26 cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1683</span>\n  HiveProject(c_customer_id=[$<span class=\"hue-doc-varname\">1</span>]): rowcount = <span class=\"hue-doc-varname\">1</span>.1977944344387866E26, cumulative cost = {<span class=\"hue-doc-varname\">2</span>.395588892021712E26 rows, <span class=\"hue-doc-varname\">1</span>.197794434438787E26 cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1681</span>\n    HiveJoin(condition=[AND(=($<span class=\"hue-doc-varname\">3</span>, $<span class=\"hue-doc-varname\">7</span>), &gt;($<span class=\"hue-doc-varname\">4</span>, $<span class=\"hue-doc-varname\">6</span>))], joinType=[inner], algorithm=[none], cost=[not available]): rowcount = <span class=\"hue-doc-varname\">1</span>.1977944344387866E26, cumulative cost = {<span class=\"hue-doc-varname\">1</span>.1977944575829254E26 rows, <span class=\"hue-doc-varname\">4</span>.160211553874922E10 cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1679</span>\n      HiveJoin(condition=[=($<span class=\"hue-doc-varname\">2</span>, $<span class=\"hue-doc-varname\">0</span>)], joinType=[inner], algorithm=[none], cost=[not available]): rowcount = <span class=\"hue-doc-varname\">2</span>.3144135067474273E18, cumulative cost = {<span class=\"hue-doc-varname\">2</span>.3144137967122499E18 rows, <span class=\"hue-doc-varname\">1</span>.921860676139634E10 cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1663</span>\n        HiveProject(c_customer_sk=[$<span class=\"hue-doc-varname\">0</span>], c_customer_id=[$<span class=\"hue-doc-varname\">1</span>]): rowcount = <span class=\"hue-doc-varname\">7</span>.2E7, cumulative cost = {<span class=\"hue-doc-varname\">2</span>.24E8 rows, <span class=\"hue-doc-varname\">3</span>.04000001E8 cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1640</span>\n          HiveFilter(condition=[IS NOT NULL($<span class=\"hue-doc-varname\">0</span>)]): rowcount = <span class=\"hue-doc-varname\">7</span>.2E7, cumulative cost = {<span class=\"hue-doc-varname\">1</span>.52E8 rows, <span class=\"hue-doc-varname\">1</span>.60000001E8 cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1638</span>\n            HiveTableScan(table=[[default, customer]], table:alias=[customer]): rowcount = <span class=\"hue-doc-varname\">8</span>.0E7, cumulative cost = {<span class=\"hue-doc-varname\">8</span>.0E7 rows, <span class=\"hue-doc-varname\">8</span>.0000001E7 cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1055</span>\n        HiveJoin(condition=[=($<span class=\"hue-doc-varname\">3</span>, $<span class=\"hue-doc-varname\">1</span>)], joinType=[inner], algorithm=[none], cost=[not available]): rowcount = <span class=\"hue-doc-varname\">2</span>.1429754692105807E11, cumulative cost = {<span class=\"hue-doc-varname\">2</span>.897408225471977E11 rows, <span class=\"hue-doc-varname\">1</span>.891460676039634E10 cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1661</span>\n          HiveProject(sr_customer_sk=[$<span class=\"hue-doc-varname\">0</span>], sr_store_sk=[$<span class=\"hue-doc-varname\">1</span>], $f2=[$<span class=\"hue-doc-varname\">2</span>]): rowcount = <span class=\"hue-doc-varname\">6</span>.210443022113779E9, cumulative cost = {<span class=\"hue-doc-varname\">7</span>.544327346205959E10 rows, <span class=\"hue-doc-varname\">1</span>.891460312135634E10 cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1685</span>\n            HiveAggregate(group=[{<span class=\"hue-doc-varname\">1</span>, <span class=\"hue-doc-varname\">2</span>}], agg#<span class=\"hue-doc-varname\">0</span>=[sum($<span class=\"hue-doc-varname\">3</span>)]): rowcount = <span class=\"hue-doc-varname\">6</span>.210443022113779E9, cumulative cost = {<span class=\"hue-doc-varname\">6</span>.92328304399458E10 rows, <span class=\"hue-doc-varname\">2</span>.8327405501500005E8 cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1654</span>\n              HiveJoin(condition=[=($<span class=\"hue-doc-varname\">0</span>, $<span class=\"hue-doc-varname\">4</span>)], joinType=[inner], algorithm=[none], cost=[not available]): rowcount = <span class=\"hue-doc-varname\">6</span>.2104430221137794E10, cumulative cost = {<span class=\"hue-doc-varname\">6</span>.2246082040067795E10 rows, <span class=\"hue-doc-varname\">2</span>.8327405501500005E8 cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1652</span>\n                HiveProject(sr_returned_date_sk=[$<span class=\"hue-doc-varname\">0</span>], sr_customer_sk=[$<span class=\"hue-doc-varname\">3</span>], sr_store_sk=[$<span class=\"hue-doc-varname\">7</span>], sr_fee=[$<span class=\"hue-doc-varname\">14</span>]): rowcount = <span class=\"hue-doc-varname\">4</span>.198394835000001E7, cumulative cost = {<span class=\"hue-doc-varname\">1</span>.4155904670000002E8 rows, <span class=\"hue-doc-varname\">2</span>.8311809440000004E8 cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1645</span>\n                  HiveFilter(condition=[AND(IS NOT NULL($<span class=\"hue-doc-varname\">0</span>), IS NOT NULL($<span class=\"hue-doc-varname\">7</span>), IS NOT NULL($<span class=\"hue-doc-varname\">3</span>))]): rowcount = <span class=\"hue-doc-varname\">4</span>.198394835000001E7, cumulative cost = {<span class=\"hue-doc-varname\">9</span>.957509835000001E7 rows, <span class=\"hue-doc-varname\">1</span>.15182301E8 cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1643</span>\n                    HiveTableScan(table=[[default, store_returns]], table:alias=[store_returns]): rowcount = <span class=\"hue-doc-varname\">5</span>.759115E7, cumulative cost = {<span class=\"hue-doc-varname\">5</span>.759115E7 rows, <span class=\"hue-doc-varname\">5</span>.7591151E7 cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1040</span>\n                HiveProject(d_date_sk=[$<span class=\"hue-doc-varname\">0</span>]): rowcount = <span class=\"hue-doc-varname\">9861.615</span>, cumulative cost = {<span class=\"hue-doc-varname\">92772.23000000001</span> rows, <span class=\"hue-doc-varname\">155960.615</span> cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1650</span>\n                  HiveFilter(condition=[AND(=($<span class=\"hue-doc-varname\">6</span>, <span class=\"hue-doc-varname\">2000</span>), IS NOT NULL($<span class=\"hue-doc-varname\">0</span>))]): rowcount = <span class=\"hue-doc-varname\">9861.615</span>, cumulative cost = {<span class=\"hue-doc-varname\">82910.615</span> rows, <span class=\"hue-doc-varname\">146099.0</span> cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1648</span>\n                    HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim]): rowcount = <span class=\"hue-doc-varname\">73049.0</span>, cumulative cost = {<span class=\"hue-doc-varname\">73049.0</span> rows, <span class=\"hue-doc-varname\">73050.0</span> cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1043</span>\n          HiveProject(s_store_sk=[$<span class=\"hue-doc-varname\">0</span>]): rowcount = <span class=\"hue-doc-varname\">230.04000000000002</span>, cumulative cost = {<span class=\"hue-doc-varname\">2164.08</span> rows, <span class=\"hue-doc-varname\">3639.04</span> cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1659</span>\n            HiveFilter(condition=[AND(=($<span class=\"hue-doc-varname\">24</span>, _UTF-16LE'NM'), IS NOT NULL($<span class=\"hue-doc-varname\">0</span>))]): rowcount = <span class=\"hue-doc-varname\">230.04000000000002</span>, cumulative cost = {<span class=\"hue-doc-varname\">1934.04</span> rows, <span class=\"hue-doc-varname\">3409.0</span> cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1657</span>\n              HiveTableScan(table=[[default, store]], table:alias=[store]): rowcount = <span class=\"hue-doc-varname\">1704.0</span>, cumulative cost = {<span class=\"hue-doc-varname\">1704.0</span> rows, <span class=\"hue-doc-varname\">1705.0</span> cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1050</span>\n      HiveProject(_o__c0=[*(/($<span class=\"hue-doc-varname\">1</span>, $<span class=\"hue-doc-varname\">2</span>), <span class=\"hue-doc-varname\">1.2</span>)], ctr_store_sk=[$<span class=\"hue-doc-varname\">0</span>]): rowcount = <span class=\"hue-doc-varname\">6</span>.900492246793088E8, cumulative cost = {<span class=\"hue-doc-varname\">8</span>.537206083312463E10 rows, <span class=\"hue-doc-varname\">2</span>.2383508777352882E10 cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1677</span>\n        HiveAggregate(group=[{<span class=\"hue-doc-varname\">1</span>}], agg#<span class=\"hue-doc-varname\">0</span>=[sum($<span class=\"hue-doc-varname\">2</span>)], agg#<span class=\"hue-doc-varname\">1</span>=[count($<span class=\"hue-doc-varname\">2</span>)]): rowcount = <span class=\"hue-doc-varname\">6</span>.900492246793088E8, cumulative cost = {<span class=\"hue-doc-varname\">8</span>.468201160844533E10 rows, <span class=\"hue-doc-varname\">2</span>.1003410327994267E10 cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1675</span>\n          HiveProject(sr_customer_sk=[$<span class=\"hue-doc-varname\">0</span>], sr_store_sk=[$<span class=\"hue-doc-varname\">1</span>], $f2=[$<span class=\"hue-doc-varname\">2</span>]): rowcount = <span class=\"hue-doc-varname\">6</span>.900492246793088E9, cumulative cost = {<span class=\"hue-doc-varname\">8</span>.381945007759619E10 rows, <span class=\"hue-doc-varname\">2</span>.1003410327994267E10 cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1686</span>\n            HiveAggregate(group=[{<span class=\"hue-doc-varname\">1</span>, <span class=\"hue-doc-varname\">2</span>}], agg#<span class=\"hue-doc-varname\">0</span>=[sum($<span class=\"hue-doc-varname\">3</span>)]): rowcount = <span class=\"hue-doc-varname\">6</span>.900492246793088E9, cumulative cost = {<span class=\"hue-doc-varname\">7</span>.69189578308031E10 rows, <span class=\"hue-doc-varname\">3</span>.01933587615E8 cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1673</span>\n              HiveJoin(condition=[=($<span class=\"hue-doc-varname\">0</span>, $<span class=\"hue-doc-varname\">4</span>)], joinType=[inner], algorithm=[none], cost=[not available]): rowcount = <span class=\"hue-doc-varname\">6</span>.900492246793088E10, cumulative cost = {<span class=\"hue-doc-varname\">6</span>.915590405316087E10 rows, <span class=\"hue-doc-varname\">3</span>.01933587615E8 cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1671</span>\n                HiveProject(sr_returned_date_sk=[$<span class=\"hue-doc-varname\">0</span>], sr_customer_sk=[$<span class=\"hue-doc-varname\">3</span>], sr_store_sk=[$<span class=\"hue-doc-varname\">7</span>], sr_fee=[$<span class=\"hue-doc-varname\">14</span>]): rowcount = <span class=\"hue-doc-varname\">4</span>.66488315E7, cumulative cost = {<span class=\"hue-doc-varname\">1</span>.50888813E8 rows, <span class=\"hue-doc-varname\">3</span>.01777627E8 cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1667</span>\n                  HiveFilter(condition=[AND(IS NOT NULL($<span class=\"hue-doc-varname\">0</span>), IS NOT NULL($<span class=\"hue-doc-varname\">7</span>))]): rowcount = <span class=\"hue-doc-varname\">4</span>.66488315E7, cumulative cost = {<span class=\"hue-doc-varname\">1</span>.042399815E8 rows, <span class=\"hue-doc-varname\">1</span>.15182301E8 cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1665</span>\n                    HiveTableScan(table=[[default, store_returns]], table:alias=[store_returns]): rowcount = <span class=\"hue-doc-varname\">5</span>.759115E7, cumulative cost = {<span class=\"hue-doc-varname\">5</span>.759115E7 rows, <span class=\"hue-doc-varname\">5</span>.7591151E7 cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1040</span>\n                HiveProject(d_date_sk=[$<span class=\"hue-doc-varname\">0</span>]): rowcount = <span class=\"hue-doc-varname\">9861.615</span>, cumulative cost = {<span class=\"hue-doc-varname\">92772.23000000001</span> rows, <span class=\"hue-doc-varname\">155960.615</span> cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1650</span>\n                  HiveFilter(condition=[AND(=($<span class=\"hue-doc-varname\">6</span>, <span class=\"hue-doc-varname\">2000</span>), IS NOT NULL($<span class=\"hue-doc-varname\">0</span>))]): rowcount = <span class=\"hue-doc-varname\">9861.615</span>, cumulative cost = {<span class=\"hue-doc-varname\">82910.615</span> rows, <span class=\"hue-doc-varname\">146099.0</span> cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1648</span>\n                    HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim]): rowcount = <span class=\"hue-doc-varname\">73049.0</span>, cumulative cost = {<span class=\"hue-doc-varname\">73049.0</span> rows, <span class=\"hue-doc-varname\">73050.0</span> cpu, <span class=\"hue-doc-varname\">0.0</span> io}, id = <span class=\"hue-doc-varname\">1043</span>\n</div>\n    </div>\n    </div>\n    <div id=\"src-27362037_LanguageManualExplain-TheASTClause\">\n        <h3><span>The AST Clause</span></h3>\n            <p>\n    Outputs the query's Abstract Syntax Tree.            </p>\n                <p>\n    Example:            </p>\n        <div style=\"counter-reset: scroll-code-numbering 1\">\n                <div class=\"hue-doc-codeblock\">EXPLAIN AST\nFROM src INSERT OVERWRITE TABLE dest_g1 SELECT src.key, sum(substr(src.value,<span class=\"hue-doc-varname\">4</span>)) GROUP BY src.key;\n</div>\n    </div>\n            <p>\n    Outputs:            </p>\n        <div style=\"counter-reset: scroll-code-numbering 1\">\n                <div class=\"hue-doc-codeblock\">ABSTRACT SYNTAX TREE:\n  (TOK_QUERY (TOK_FROM (TOK_TABREF src)) (TOK_INSERT (TOK_DESTINATION (TOK_TAB dest_g1)) (TOK_SELECT (TOK_SELEXPR (TOK_COLREF src key)) (TOK_SELEXPR (TOK_FUNCTION sum (TOK_FUNCTION substr (TOK_COLREF src value) <span class=\"hue-doc-varname\">4</span>)))) (TOK_GROUPBY (TOK_COLREF src key))))\n</div>\n    </div>\n    </div>\n    <div id=\"src-27362037_LanguageManualExplain-TheDEPENDENCYClause\">\n        <h3><span>The DEPENDENCY Clause</span></h3>\n            <p>\n    The use of <tt>DEPENDENCY</tt> in the <tt>EXPLAIN</tt> statement produces extra information about the inputs in the plan. It shows various attributes for the inputs. For example, for a query like:            </p>\n        <div style=\"counter-reset: scroll-code-numbering 1\">\n                <div class=\"hue-doc-codeblock\">EXPLAIN DEPENDENCY\n  SELECT key, count(<span class=\"hue-doc-varname\">1</span>) FROM srcpart WHERE ds IS NOT NULL GROUP BY key\n</div>\n    </div>\n            <p>\n    the following output is produced:            </p>\n        <div style=\"counter-reset: scroll-code-numbering 1\">\n                <div class=\"hue-doc-codeblock\">{\"input_partitions\":[{\"partitionName\":\"default<var at:name=\"srcpart\"></var>ds=2008-04-08/hr=11\"},{\"partitionName\":\"default<var at:name=\"srcpart\"></var>ds=2008-04-08/hr=12\"},{\"partitionName\":\"default<var at:name=\"srcpart\"></var>ds=2008-04-09/hr=11\"},{\"partitionName\":\"default<var at:name=\"srcpart\"></var>ds=2008-04-09/hr=12\"}],\"input_tables\":[{\"tablename\":\"default@srcpart\",\"tabletype\":\"MANAGED_TABLE\"}]}\n</div>\n    </div>\n            <p>\n    The inputs contain both the tables and the partitions. Note that the table is present even if none of the partitions is accessed in the query.            </p>\n                <p>\n    The dependencies show the parents in case a table is accessed via a view. Consider the following queries:            </p>\n        <div style=\"counter-reset: scroll-code-numbering 1\">\n                <div class=\"hue-doc-codeblock\">CREATE VIEW V1 AS SELECT key, value from src;\nEXPLAIN DEPENDENCY SELECT * FROM V1;\n</div>\n    </div>\n            <p>\n    The following output is produced:            </p>\n        <div style=\"counter-reset: scroll-code-numbering 1\">\n                <div class=\"hue-doc-codeblock\">{\"input_partitions\":[],\"input_tables\":[{\"tablename\":\"default@v1\",\"tabletype\":\"VIRTUAL_VIEW\"},{\"tablename\":\"default@src\",\"tabletype\":\"MANAGED_TABLE\",\"tableParents\":\"[default@v1]\"}]}\n</div>\n    </div>\n            <p>\n    As above, the inputs contain the view V1 and the table 'src' that the view V1 refers to.            </p>\n                <p>\n    All the outputs are shown if a table is being accessed via multiple parents.            </p>\n        <div style=\"counter-reset: scroll-code-numbering 1\">\n                <div class=\"hue-doc-codeblock\">CREATE VIEW V2 AS SELECT ds, key, value FROM srcpart WHERE ds IS NOT NULL;\nCREATE VIEW V4 AS\n  SELECT src1.key, src2.value as value1, src3.value as value2\n  FROM V1 src1 JOIN V2 src2 on src1.key = src2.key JOIN src src3 ON src2.key = src3.key;\nEXPLAIN DEPENDENCY SELECT * FROM V4;\n</div>\n    </div>\n            <p>\n    The following output is produced.            </p>\n        <div style=\"counter-reset: scroll-code-numbering 1\">\n                <div class=\"hue-doc-codeblock\">{\"input_partitions\":[{\"partitionParents\":\"[default@v2]\",\"partitionName\":\"default<var at:name=\"srcpart\"></var>ds=2008-04-08/hr=11\"},{\"partitionParents\":\"[default@v2]\",\"partitionName\":\"default<var at:name=\"srcpart\"></var>ds=2008-04-08/hr=12\"},{\"partitionParents\":\"[default@v2]\",\"partitionName\":\"default<var at:name=\"srcpart\"></var>ds=2008-04-09/hr=11\"},{\"partitionParents\":\"[default@v2]\",\"partitionName\":\"default<var at:name=\"srcpart\"></var>ds=2008-04-09/hr=12\"}],\"input_tables\":[{\"tablename\":\"default@v4\",\"tabletype\":\"VIRTUAL_VIEW\"},{\"tablename\":\"default@v2\",\"tabletype\":\"VIRTUAL_VIEW\",\"tableParents\":\"[default@v4]\"},{\"tablename\":\"default@v1\",\"tabletype\":\"VIRTUAL_VIEW\",\"tableParents\":\"[default@v4]\"},{\"tablename\":\"default@src\",\"tabletype\":\"MANAGED_TABLE\",\"tableParents\":\"[default@v4, default@v1]\"},{\"tablename\":\"default@srcpart\",\"tabletype\":\"MANAGED_TABLE\",\"tableParents\":\"[default@v2]\"}]}\n</div>\n    </div>\n            <p>\n    As can be seen, src is being accessed via parents v1 and v4.            </p>\n        </div>\n    <div id=\"src-27362037_LanguageManualExplain-TheAUTHORIZATIONClause\">\n        <h3><span>The AUTHORIZATION Clause</span></h3>\n            <p>\n    The use of <tt>AUTHORIZATION</tt> in the <tt>EXPLAIN</tt> statement shows all entities needed to be authorized to execute the query and authorization failures if any exist. For example, for a query like:            </p>\n        <div style=\"counter-reset: scroll-code-numbering 1\">\n                <div class=\"hue-doc-codeblock\">EXPLAIN AUTHORIZATION\n  SELECT * FROM src JOIN srcpart;\n</div>\n    </div>\n            <p>\n    the following output is produced:            </p>\n        <div style=\"counter-reset: scroll-code-numbering 1\">\n                <div class=\"hue-doc-codeblock\">INPUTS: \n  default@srcpart\n  default@src\n  default@srcpart@ds=<span class=\"hue-doc-varname\">2008</span>-<span class=\"hue-doc-varname\">04</span>-<span class=\"hue-doc-varname\">08</span>/hr=<span class=\"hue-doc-varname\">11</span>\n  default@srcpart@ds=<span class=\"hue-doc-varname\">2008</span>-<span class=\"hue-doc-varname\">04</span>-<span class=\"hue-doc-varname\">08</span>/hr=<span class=\"hue-doc-varname\">12</span>\n  default@srcpart@ds=<span class=\"hue-doc-varname\">2008</span>-<span class=\"hue-doc-varname\">04</span>-<span class=\"hue-doc-varname\">09</span>/hr=<span class=\"hue-doc-varname\">11</span>\n  default@srcpart@ds=<span class=\"hue-doc-varname\">2008</span>-<span class=\"hue-doc-varname\">04</span>-<span class=\"hue-doc-varname\">09</span>/hr=<span class=\"hue-doc-varname\">12</span>\nOUTPUTS: \n  hdfs://localhost:9000/tmp/.../-mr-10000\nCURRENT_USER: \n  navis\nOPERATION: \n  QUERY\nAUTHORIZATION_FAILURES: \n  Permission denied: Principal [name=navis, type=USER] does not have following privileges for operation QUERY [[SELECT] on Object [type=TABLE_OR_VIEW, name=default.src], [SELECT] on Object [type=TABLE_OR_VIEW, name=default.srcpart]]\n</div>\n    </div>\n            <p>\n    With the <tt>FORMATTED</tt> keyword, it will be returned in JSON format.            </p>\n    <pre><br></pre>    <div style=\"counter-reset: scroll-code-numbering 1\">\n                <div class=\"hue-doc-codeblock\">\"OUTPUTS\":[\"hdfs://localhost:9000/tmp/.../-mr-10000\"],\"INPUTS\":[\"default@srcpart\",\"default@src\",\"default@srcpart@ds=2008-04-08/hr=11\",\"default@srcpart@ds=2008-04-08/hr=12\",\"default@srcpart@ds=2008-04-09/hr=11\",\"default@srcpart@ds=2008-04-09/hr=12\"],\"OPERATION\":\"QUERY\",\"CURRENT_USER\":\"navis\",\"AUTHORIZATION_FAILURES\":[\"Permission denied: Principal [name=navis, type=USER] does not have following privileges for operation QUERY [[SELECT] on Object [type=TABLE_OR_VIEW, name=default.src], [SELECT] on Object [type=TABLE_OR_VIEW, name=default.srcpart]]\"]}\n</div>\n    </div>\n    </div>\n    <div id=\"src-27362037_LanguageManualExplain-TheLOCKSClause\">\n        <h3><span>The LOCKS Clause</span></h3>\n            <p>\n    This is useful to understand what locks the system will acquire to run the specified query. Since Hive release 3.2.0 (<a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/HIVE-17683\" target=\"_blank\">HIVE-17683</a>).            </p>\n                <p>\n    For example            </p>\n        <div style=\"counter-reset: scroll-code-numbering 1\">\n                <div class=\"hue-doc-codeblock\">EXPLAIN LOCKS UPDATE target SET b = <span class=\"hue-doc-varname\">1</span> WHERE p IN (SELECT t.q1 FROM source t WHERE t.a1=<span class=\"hue-doc-varname\">5</span>)\n</div>\n    </div>\n            <p>\n    Will produce output like this.            </p>\n        <div style=\"counter-reset: scroll-code-numbering 1\">\n                <div class=\"hue-doc-codeblock\">LOCK INFORMATION:\ndefault.source -&gt; SHARED_READ\ndefault.target.p=<span class=\"hue-doc-varname\">1</span>/q=<span class=\"hue-doc-varname\">2</span> -&gt; SHARED_READ\ndefault.target.p=<span class=\"hue-doc-varname\">1</span>/q=<span class=\"hue-doc-varname\">3</span> -&gt; SHARED_READ\ndefault.target.p=<span class=\"hue-doc-varname\">2</span>/q=<span class=\"hue-doc-varname\">2</span> -&gt; SHARED_READ\ndefault.target.p=<span class=\"hue-doc-varname\">2</span>/q=<span class=\"hue-doc-varname\">2</span> -&gt; SHARED_WRITE\ndefault.target.p=<span class=\"hue-doc-varname\">1</span>/q=<span class=\"hue-doc-varname\">3</span> -&gt; SHARED_WRITE\ndefault.target.p=<span class=\"hue-doc-varname\">1</span>/q=<span class=\"hue-doc-varname\">2</span> -&gt; SHARED_WRITE\n</div>\n    </div>\n<pre><br></pre>    <div style=\"counter-reset: scroll-code-numbering 1\">\n                <div class=\"hue-doc-codeblock\">EXPLAIN FORMATTED LOCKS <sql>\n</sql></div>\n    </div>\n            <p>\n    is also supported which will produce JSON encoded output.            </p>\n        </div>\n    <div id=\"src-27362037_LanguageManualExplain-TheVECTORIZATIONClause\">\n        <h3><span>The VECTORIZATION Clause</span></h3>\n            <p>\n    Adds detail to the EXPLAIN output showing why Map and Reduce work is not vectorized. Since Hive release 2.3.0 (<a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/HIVE-11394\" target=\"_blank\">HIVE-11394</a>).            </p>\n                <p>\n    Syntax: EXPLAIN VECTORIZATION [ONLY] [SUMMARY|OPERATOR|EXPRESSION|DETAIL]            </p>\n    <ul><li>            <p>\n    <i>ONLY</i> option suppresses most non-vectorization elements.            </p>\n    </li><li>            <p>\n    <i>SUMMARY</i> (default) shows vectorization information for the PLAN (is vectorization enabled) and a summary of Map and Reduce work.            </p>\n    </li><li>            <p>\n    <i>OPERATOR</i> shows vectorization information for operators. E.g. Filter Vectorization. Includes all information of SUMMARY.            </p>\n    </li><li>            <p>\n    <i>EXPRESSION</i> shows vectorization information for expressions. E.g. predicateExpression. Includes all information of SUMMARY and OPERATOR.            </p>\n    </li><li>            <p>\n    <i>DETAIL</i> shows detail-level vectorization information. It includes all information of SUMMARY, OPERATOR, and EXPRESSION.            </p>\n    </li></ul>            <p>\n    The optional clause defaults are not ONLY and SUMMARY.            </p>\n                <p>\n    See <a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/HIVE-11394\" target=\"_blank\">HIVE-11394</a> for more details and examples.            </p>\n                <p>\n                </p>\n        </div>\n    <div id=\"src-27362037_LanguageManualExplain-TheANALYZEClause\">\n        <h3><span>The ANALYZE Clause</span></h3>\n            <p>\n    Annotates the plan with actual row counts. Since in Hive 2.2.0 (<a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/HIVE-14362\" target=\"_blank\">HIVE-14362</a>)            </p>\n                <p>\n    Format is: (estimated row count) / (actual row count)            </p>\n                <p>\n    Example:            </p>\n                <p>\n    For the below tablescan; the estimation was 500 rows; but actually the scan only yielded 13 rows.            </p>\n        <div style=\"counter-reset: scroll-code-numbering 1\">\n                <div class=\"hue-doc-codeblock\">[...]\n              TableScan [TS_13] (rows=<span class=\"hue-doc-varname\">500</span>/<span class=\"hue-doc-varname\">13</span> width=<span class=\"hue-doc-varname\">178</span>)\n                Output:[\"key\",\"value\"]\n[...]\n</div>\n    </div>\n    </div>\n    <div id=\"src-27362037_LanguageManualExplain-User-levelExplainOutput\">\n        <h3><span>User-level Explain Output</span></h3>\n            <p>\n    Since <a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/HIVE-8600\" target=\"_blank\">HIVE-8600</a> in Hive 1.1.0, we support a user-level explain extended output for any query at the log4j INFO level after <strong>set <a data-doc-anchor-id=\"src-27842758_ConfigurationProperties-hive.log.explain.output\" class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"_27842758\"><strong>h</strong>ive.log.explain.output</a></strong><strong>=true</strong> (default is <strong>false</strong>).            </p>\n                <p>\n    Since <a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/HIVE-18469\" target=\"_blank\">HIVE-18469</a> in Hive 3.1.0, the user-level explain extended output for any query will be shown in the WebUI / Drilldown / Query Plan after <strong>set <a data-doc-anchor-id=\"src-27842758_ConfigurationProperties-hive.server2.webui.explain.output\" class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"_27842758\">hive.server2.webui.explain.output</a>=true</strong> (default is <strong>false</strong>).            </p>\n                <p>\n    Since <a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/HIVE-9780\" target=\"_blank\">HIVE-9780</a> in Hive 1.2.0, we support a user-level explain for Hive on Tez users. After <strong>set <a data-doc-anchor-id=\"src-27842758_ConfigurationProperties-hive.explain.user\" class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"_27842758\">hive.explain.user</a>=true </strong>(default is<strong> false</strong>) if the following query is sent, the user can see a much more clearly readable tree of operations.            </p>\n                <p>\n    Since <a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/HIVE-11133\" target=\"_blank\">HIVE-11133</a> in Hive 3.0.0, we support a user-level explain for Hive on Spark users. A separate configuration is used for Hive-on-Spark, <strong><a data-doc-anchor-id=\"src-27842758_ConfigurationProperties-hive.spark.explain.user\" class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"_27842758\">hive.spark.explain.user</a></strong> which is set to false by default.            </p>\n        <div style=\"counter-reset: scroll-code-numbering 1\">\n                <div class=\"hue-doc-codeblock\">EXPLAIN select sum(hash(key)), sum(hash(value)) from src_orc_merge_test_part where ds='2012-01-03' and ts='2012-01-03+14:46:31'\n</div>\n    </div>\n    <div style=\"counter-reset: scroll-code-numbering 1\">\n                <div class=\"hue-doc-codeblock\">Plan optimized by CBO.\nVertex dependency in root stage\nReducer <span class=\"hue-doc-varname\">2</span> 1 (SIMPLE_EDGE)\nStage-<span class=\"hue-doc-varname\">0</span>\n   Fetch Operator\n      limit:-<span class=\"hue-doc-varname\">1</span>\n      Stage-<span class=\"hue-doc-varname\">1</span>\n         Reducer <span class=\"hue-doc-varname\">2</span>\n         File Output Operator [FS_8]\n            compressed:false\n            Statistics:Num rows: <span class=\"hue-doc-varname\">1</span> Data size: <span class=\"hue-doc-varname\">16</span> Basic stats: COMPLETE Column stats: NONE\n            table:{\"serde:\":\"org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\",\"input format:\":\"org.apache.hadoop.mapred.TextInputFormat\",\"output format:\":\"org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\"}\n            Group By Operator [GBY_6]\n            |  aggregations:[\"sum(VALUE._col0)\",\"sum(VALUE._col1)\"]\n            |  outputColumnNames:[\"_col0\",\"_col1\"]\n            |  Statistics:Num rows: <span class=\"hue-doc-varname\">1</span> Data size: <span class=\"hue-doc-varname\">16</span> Basic stats: COMPLETE Column stats: NONE\n            |1 [SIMPLE_EDGE]\n               Reduce Output Operator [RS_5]\n                  sort order:\n                  Statistics:Num rows: <span class=\"hue-doc-varname\">1</span> Data size: <span class=\"hue-doc-varname\">16</span> Basic stats: COMPLETE Column stats: NONE\n                  value expressions:_col0 (type: bigint), _col1 (type: bigint)\n                  Group By Operator [GBY_4]\n                     aggregations:[\"sum(_col0)\",\"sum(_col1)\"]\n                     outputColumnNames:[\"_col0\",\"_col1\"]\n                     Statistics:Num rows: <span class=\"hue-doc-varname\">1</span> Data size: <span class=\"hue-doc-varname\">16</span> Basic stats: COMPLETE Column stats: NONE\n                     Select Operator [SEL_2]\n                        outputColumnNames:[\"_col0\",\"_col1\"]\n                        Statistics:Num rows: <span class=\"hue-doc-varname\">500</span> Data size: <span class=\"hue-doc-varname\">47000</span> Basic stats: COMPLETE Column stats: NONE\n                        TableScan [TS_0]\n                           alias:src_orc_merge_test_part\n                           Statistics:Num rows: <span class=\"hue-doc-varname\">500</span> Data size: <span class=\"hue-doc-varname\">47000</span> Basic stats: COMPLETE Column stats: NONE\n</div>\n    </div>\n            <p>\n                </p>\n                <p>\n                </p>\n        </div>\n    </div>\n        </div>\n    </div></div>","title":"Explain"}