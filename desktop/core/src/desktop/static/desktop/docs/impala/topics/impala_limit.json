{"body":"<div><div id=\"limit\"><div class=\"hue-doc-title\">LIMIT Clause</div><div><p>\n      The <span class=\"hue-doc-codeph\">LIMIT</span> clause in a <span class=\"hue-doc-codeph\">SELECT</span> query sets a maximum number of rows for the\n      result set. Pre-selecting the maximum size of the result set helps Impala to optimize memory usage while\n      processing a distributed query.\n    </p><p id=\"syntax_blurb\"><b>Syntax:</b></p><div class=\"hue-doc-codeblock\">LIMIT <span class=\"hue-doc-varname\">constant_integer_expression</span></div><p>\n      The argument to the <span class=\"hue-doc-codeph\">LIMIT</span> clause must evaluate to a constant value. It can be a numeric\n      literal, or another kind of numeric expression involving operators, casts, and function return values. You\n      cannot refer to a column or use a subquery.\n    </p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n      This clause is useful in contexts such as:\n    </p><ul><li>\n        To return exactly N items from a top-N query, such as the 10 highest-rated items in a shopping category or\n        the 50 hostnames that refer the most traffic to a web site.\n      </li><li>\n        To demonstrate some sample values from a table or a particular query. (To display some arbitrary items, use\n        a query with no <span class=\"hue-doc-codeph\">ORDER BY</span> clause. An <span class=\"hue-doc-codeph\">ORDER BY</span> clause causes additional\n        memory and/or disk usage during the query.)\n      </li><li>\n        To keep queries from returning huge result sets by accident if a table is larger than expected, or a\n        <span class=\"hue-doc-codeph\">WHERE</span> clause matches more rows than expected.\n      </li></ul><p>\n      Originally, the value for the <span class=\"hue-doc-codeph\">LIMIT</span> clause had to be a numeric literal. In Impala 1.2.1 and\n      higher, it can be a numeric expression.\n    </p><p id=\"order_by_limit\">\n        Prior to Impala 1.4.0, Impala required any query including an\n        <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_order_by.xml\" data-doc-anchor-id=\"order_by\">ORDER BY</a></span>\n        clause to also use a\n        <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_limit.xml\" data-doc-anchor-id=\"limit\">LIMIT</a></span> clause. In\n        Impala 1.4.0 and higher, the <span class=\"hue-doc-codeph\">LIMIT</span> clause is optional for <span class=\"hue-doc-codeph\">ORDER\n        BY</span> queries. In cases where sorting a huge result set requires enough memory to\n        exceed the Impala memory limit for a particular executor Impala daemon, Impala\n        automatically uses a temporary disk work area to perform the sort operation.\n      </p><p>\n      See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_order_by.xml\" data-doc-anchor-id=\"order_by\">ORDER BY Clause</a> for details.\n    </p><p id=\"limit_and_offset\">\n        In Impala 1.2.1 and higher, you can combine a <span class=\"hue-doc-codeph\">LIMIT</span> clause with an\n        <span class=\"hue-doc-codeph\">OFFSET</span> clause to produce a small result set that is different from a\n        top-N query, for example, to return items 11 through 20. This technique can be used to\n        simulate <q>paged</q> results. Because Impala queries typically involve substantial\n        amounts of I/O, use this technique only for compatibility in cases where you cannot\n        rewrite the application logic. For best performance and scalability, wherever practical,\n        query as many items as you expect to need, cache them on the application side, and\n        display small groups of results to users using application logic.\n      </p><p id=\"restrictions_blurb\"><b>Restrictions:</b></p><p id=\"subquery_no_limit\">\n        Correlated subqueries used in <span class=\"hue-doc-codeph\">EXISTS</span> and <span class=\"hue-doc-codeph\">IN</span> operators\n        cannot include a <span class=\"hue-doc-codeph\">LIMIT</span> clause.\n      </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n      The following example shows how the <span class=\"hue-doc-codeph\">LIMIT</span> clause caps the size of the result set, with the\n      limit being applied after any other clauses such as <span class=\"hue-doc-codeph\">WHERE</span>.\n    </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; create database limits;\n[localhost:21000] &gt; use limits;\n[localhost:21000] &gt; create table numbers (x int);\n[localhost:21000] &gt; insert into numbers values (1), (3), (4), (5), (2);\nInserted 5 rows in 1.34s\n[localhost:21000] &gt; select x from numbers limit 100;\n+---+\n| x |\n+---+\n| 1 |\n| 3 |\n| 4 |\n| 5 |\n| 2 |\n+---+\nReturned 5 row(s) in 0.26s\n[localhost:21000] &gt; select x from numbers limit 3;\n+---+\n| x |\n+---+\n| 1 |\n| 3 |\n| 4 |\n+---+\nReturned 3 row(s) in 0.27s\n[localhost:21000] &gt; select x from numbers where x &gt; 2 limit 2;\n+---+\n| x |\n+---+\n| 3 |\n| 4 |\n+---+\nReturned 2 row(s) in 0.27s</div><p>\n      For top-N and bottom-N queries, you use the <span class=\"hue-doc-codeph\">ORDER BY</span> and <span class=\"hue-doc-codeph\">LIMIT</span> clauses\n      together:\n    </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; select x as \"Top 3\" from numbers order by x desc limit 3;\n+-------+\n| top 3 |\n+-------+\n| 5     |\n| 4     |\n| 3     |\n+-------+\n[localhost:21000] &gt; select x as \"Bottom 3\" from numbers order by x limit 3;\n+----------+\n| bottom 3 |\n+----------+\n| 1        |\n| 2        |\n| 3        |\n+----------+\n</div><p>\n      You can use constant values besides integer literals as the <span class=\"hue-doc-codeph\">LIMIT</span> argument:\n    </p><div class=\"hue-doc-codeblock\">-- Other expressions that yield constant integer values work too.\nSELECT x FROM t1 LIMIT 1e6;                        -- Limit is one million.\nSELECT x FROM t1 LIMIT length('hello world');      -- Limit is 11.\nSELECT x FROM t1 LIMIT 2+2;                        -- Limit is 4.\nSELECT x FROM t1 LIMIT cast(truncate(9.9) AS INT); -- Limit is 9.\n</div></div></div></div>","title":"LIMIT Clause"}