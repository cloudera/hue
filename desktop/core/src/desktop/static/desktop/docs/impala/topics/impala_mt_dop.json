{"body":"<div><div id=\"mt_dop\"><div class=\"hue-doc-title\">MT_DOP Query Option</div><div><p>\n      Sets the degree of intra-node parallelism used for certain operations that\n      can benefit from multithreaded execution. You can specify values\n      higher than zero to find the ideal balance of response time,\n      memory usage, and CPU usage during statement processing.\n    </p><div class=\"hue-doc-note\"><p>\n        The Impala execution engine is being revamped incrementally to add\n        additional parallelism within a single host for certain statements and\n        kinds of operations. The setting <span class=\"hue-doc-codeph\">MT_DOP=0</span> uses the\n        <q>old</q> code path with limited intra-node parallelism.\n      </p><p>\n        Currently, <span class=\"hue-doc-codeph\">MT_DOP</span> support varies by statement type:\n      </p><ul><li><p><span class=\"hue-doc-codeph\">COMPUTE [INCREMENTAL] STATS</span>. Impala automatically sets\n            <span class=\"hue-doc-codeph\">MT_DOP=4</span> for <span class=\"hue-doc-codeph\">COMPUTE STATS</span> and\n            <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span> statements on Parquet tables.\n          </p></li><li><p><span class=\"hue-doc-codeph\">SELECT</span> statements. <span class=\"hue-doc-codeph\">MT_DOP</span> is 0 by default\n            for <span class=\"hue-doc-codeph\">SELECT</span> statements but can be set to a value greater\n            than 0 to control intra-node parallelism. This may be useful to tune\n            query performance and in particular to reduce execution time of\n            long-running, CPU-intensive queries.\n          </p></li><li><p><span class=\"hue-doc-codeph\">DML</span> statements. <span class=\"hue-doc-codeph\">MT_DOP</span> values greater\n            than zero are not currently supported for DML statements. DML statements\n            will produce an error if <span class=\"hue-doc-codeph\">MT_DOP</span> is set to a non-zero value.\n          </p></li><li><p>\n            In Impala 3.4 and earlier, not all <span class=\"hue-doc-codeph\">SELECT</span>\n            statements support setting <span class=\"hue-doc-codeph\">MT_DOP</span>. Specifically, only\n            scan and aggregation operators, and\n            local joins that do not need data exchanges (such as for nested types) are\n            supported. Other <span class=\"hue-doc-codeph\">SELECT</span> statements produce an error if\n            <span class=\"hue-doc-codeph\">MT_DOP</span> is set to a non-zero value.\n          </p></li></ul></div><p id=\"type_integer\"><b>Type:</b> integer\n      </p><p id=\"default_0\"><b>Default:</b><span class=\"hue-doc-codeph\">0</span></p><p>\n      Because <span class=\"hue-doc-codeph\">COMPUTE STATS</span> and <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span>\n      statements for Parquet tables benefit substantially from extra intra-node\n      parallelism, Impala automatically sets <span class=\"hue-doc-codeph\">MT_DOP=4</span> when computing stats\n      for Parquet tables.\n    </p><p><b>Range:</b> 0 to 64\n    </p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-note\"><p>\n        Any timing figures in the following examples are on a small, lightly loaded development cluster.\n        Your mileage may vary. Speedups depend on many factors, including the number of rows, columns, and\n        partitions within each table.\n      </p></div><p>\n      The following example shows how to run a <span class=\"hue-doc-codeph\">COMPUTE STATS</span>\n      statement against a Parquet table with or without an explicit <span class=\"hue-doc-codeph\">MT_DOP</span>\n      setting:\n    </p><div class=\"hue-doc-codeblock\">-- Explicitly setting MT_DOP to 0 selects the old code path.\nset mt_dop = 0;\nMT_DOP set to 0\n\n-- The analysis for the billion rows is distributed among hosts,\n-- but uses only a single core on each host.\ncompute stats billion_rows_parquet;\n+-----------------------------------------+\n| summary                                 |\n+-----------------------------------------+\n| Updated 1 partition(s) and 2 column(s). |\n+-----------------------------------------+\n\ndrop stats billion_rows_parquet;\n\n-- Using 4 logical processors per host is faster.\nset mt_dop = 4;\nMT_DOP set to 4\n\ncompute stats billion_rows_parquet;\n+-----------------------------------------+\n| summary                                 |\n+-----------------------------------------+\n| Updated 1 partition(s) and 2 column(s). |\n+-----------------------------------------+\n\ndrop stats billion_rows_parquet;\n\n-- Unsetting the option reverts back to its default.\n-- Which for COMPUTE STATS and a Parquet table is 4,\n-- so again it uses the fast path.\nunset MT_DOP;\nUnsetting option MT_DOP\n\ncompute stats billion_rows_parquet;\n+-----------------------------------------+\n| summary                                 |\n+-----------------------------------------+\n| Updated 1 partition(s) and 2 column(s). |\n+-----------------------------------------+\n</div><p>\n      The following example shows the effects of setting <span class=\"hue-doc-codeph\">MT_DOP</span>\n      for a query on a Parquet table:\n    </p><div class=\"hue-doc-codeblock\">set mt_dop = 0;\nMT_DOP set to 0\n\n-- COUNT(DISTINCT) for a unique column is CPU-intensive.\nselect count(distinct id) from billion_rows_parquet;\n+--------------------+\n| count(distinct id) |\n+--------------------+\n| 1000000000         |\n+--------------------+\nFetched 1 row(s) in 67.20s\n\nset mt_dop = 16;\nMT_DOP set to 16\n\n-- Introducing more intra-node parallelism for the aggregation\n-- speeds things up, and potentially reduces memory overhead by\n-- reducing the number of scanner threads.\nselect count(distinct id) from billion_rows_parquet;\n+--------------------+\n| count(distinct id) |\n+--------------------+\n| 1000000000         |\n+--------------------+\nFetched 1 row(s) in 17.19s\n</div><p>\n      The following example shows how queries that are not compatible with non-zero\n      <span class=\"hue-doc-codeph\">MT_DOP</span> settings produce an error when <span class=\"hue-doc-codeph\">MT_DOP</span>\n      is set:\n    </p><div class=\"hue-doc-codeblock\">set mt_dop=1;\nMT_DOP set to 1\n\ninsert into a1\nselect * from a2;\nERROR: NotImplementedException: MT_DOP not supported for DML statements.\n</div><p id=\"related_info\"><b>Related information:</b></p><p><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_compute_stats.xml\" data-doc-anchor-id=\"compute_stats\">COMPUTE STATS Statement</a>,\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_aggregate_functions.xml\" data-doc-anchor-id=\"aggregate_functions\">Impala Aggregate Functions</a></p></div></div></div>","title":"MT_DOP Query Option"}