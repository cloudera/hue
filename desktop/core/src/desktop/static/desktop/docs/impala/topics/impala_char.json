{"body":"<div><div id=\"char\"><div class=\"hue-doc-title\">CHAR Data Type (Impala 2.0 or higher only)</div><div><p>\n      A fixed-length character type, padded with trailing spaces if necessary to achieve the\n      specified length. If values are longer than the specified length, Impala truncates any\n      trailing characters.\n    </p><p id=\"syntax_blurb\"><b>Syntax:</b></p><p>\n      In the column definition of a <span class=\"hue-doc-codeph\">CREATE TABLE</span> statement:\n    </p><div class=\"hue-doc-codeblock\"><span class=\"hue-doc-varname\">column_name</span> CHAR(<span class=\"hue-doc-varname\">length</span>)</div><p>\n      The maximum <span class=\"hue-doc-varname\">length</span> you can specify is 255.\n    </p><p><b>Semantics of trailing spaces:</b></p><ul><li>\n        When you store a <span class=\"hue-doc-codeph\">CHAR</span> value shorter than the specified length in a\n        table, queries return the value padded with trailing spaces if necessary; the resulting\n        value has the same length as specified in the column definition.\n      </li><li>\n        Leading spaces in <span class=\"hue-doc-codeph\">CHAR</span> are preserved within the data file.\n      </li><li>\n        If you store a <span class=\"hue-doc-codeph\">CHAR</span> value containing trailing spaces in a table, those\n        trailing spaces are not stored in the data file. When the value is retrieved by a query,\n        the result could have a different number of trailing spaces. That is, the value includes\n        however many spaces are needed to pad it to the specified length of the column.\n      </li><li>\n        If you compare two <span class=\"hue-doc-codeph\">CHAR</span> values that differ only in the number of\n        trailing spaces, those values are considered identical.\n      </li><li>\n        When comparing or processing <span class=\"hue-doc-codeph\">CHAR</span> values:\n        <ul><li><span class=\"hue-doc-codeph\">CAST()</span> truncates any longer string to fit within\n            the defined length. For example:\n<div class=\"hue-doc-codeblock\">SELECT CAST('x' AS CHAR(4)) = CAST('x        ' AS CHAR(4)); -- Returns TRUE.\n</div></li><li>\n            If a <span class=\"hue-doc-codeph\">CHAR</span> value is shorter than the specified\n            length, it is padded on the right with spaces until it matches the\n            specified length.\n          </li><li><span class=\"hue-doc-codeph\">CHAR_LENGTH()</span> returns the length including any\n            trailing spaces.\n          </li><li><span class=\"hue-doc-codeph\">LENGTH()</span> returns the length excluding trailing\n            spaces.\n          </li><li><span class=\"hue-doc-codeph\">CONCAT()</span> returns the length including trailing\n            spaces.\n          </li></ul></li></ul><p id=\"partitioning_bad\"><b>Partitioning:</b> This type can be used for partition key columns. Because of the\n        efficiency advantage of numeric values over character-based values, if the partition key\n        is a string representation of a number, prefer to use an integer type with sufficient\n        range (<span class=\"hue-doc-codeph\">INT</span>, <span class=\"hue-doc-codeph\">BIGINT</span>, and so on) where practical.\n      </p><p id=\"hbase_no\"><b>HBase considerations:</b> This data type cannot be used with HBase tables.\n      </p><p id=\"parquet_blurb\"><b>Parquet considerations:</b></p><ul><li>\n        This type can be read from and written to Parquet files.\n      </li><li>\n        There is no requirement for a particular level of Parquet.\n      </li><li>\n        Parquet files generated by Impala and containing this type can be freely interchanged\n        with other components such as Hive and MapReduce.\n      </li><li>\n        Any trailing spaces, whether implicitly or explicitly specified, are not written to the\n        Parquet data files.\n      </li><li>\n        Parquet data files might contain values that are longer than allowed by the\n        <span class=\"hue-doc-codeph\">CHAR(<span class=\"hue-doc-varname\">n</span>)</span> length limit. Impala ignores any extra\n        trailing characters when it processes those values during a query.\n      </li></ul><p id=\"text_blurb\"><b>Text table considerations:</b></p><p>\n      Text data files might contain values that are longer than allowed for a particular\n      <span class=\"hue-doc-codeph\">CHAR(<span class=\"hue-doc-varname\">n</span>)</span> column. Any extra trailing characters are\n      ignored when Impala processes those values during a query. Text data files can also\n      contain values that are shorter than the defined length limit, and Impala pads them with\n      trailing spaces up to the specified length. Any text data files produced by Impala\n      <span class=\"hue-doc-codeph\">INSERT</span> statements do not include any trailing blanks for\n      <span class=\"hue-doc-codeph\">CHAR</span> columns.\n    </p><p><b>Avro considerations:</b></p><p id=\"avro_2gb_strings\">\n        The Avro specification allows string values up to 2**64 bytes in length. Impala queries\n        for Avro tables use 32-bit integers to hold string lengths. In\n        Impala 2.5 and higher, Impala truncates <span class=\"hue-doc-codeph\">CHAR</span> and\n        <span class=\"hue-doc-codeph\">VARCHAR</span> values in Avro tables to (2**31)-1 bytes. If a query encounters\n        a <span class=\"hue-doc-codeph\">STRING</span> value longer than (2**31)-1 bytes in an Avro table, the query\n        fails. In earlier releases, encountering such long values in an Avro table could cause a\n        crash.\n      </p><p id=\"compatibility_blurb\"><b>Compatibility:</b></p><p>\n      This type is available using Impala 2.0 or higher.\n    </p><p>\n      Some other database systems make the length specification optional. For Impala, the length\n      is required.\n    </p><p id=\"internals_max_bytes\"><b>Internal details:</b> Represented in memory as a byte array with the same size as the\n        length specification. Values that are shorter than the specified length are padded on\n        the right with trailing spaces.\n      </p><p id=\"added_in_20\"><b>Added in:</b>Impala 2.0.0</p><p id=\"column_stats_constant\"><b>Column statistics considerations:</b> Because this type has a fixed size, the maximum\n        and average size fields are always filled in for column statistics, even before you run\n        the <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement.\n      </p><p id=\"udf_blurb_no\"><b>UDF considerations:</b> This type cannot be used for the argument or return type of a\n        user-defined function (UDF) or user-defined aggregate function (UDA).\n      </p><p id=\"kudu_blurb\"><b>Kudu considerations:</b></p><p id=\"kudu_unsupported_data_type\"> Currently, the data types\n        <span class=\"hue-doc-codeph\">CHAR</span>, <span class=\"hue-doc-codeph\">ARRAY</span>, <span class=\"hue-doc-codeph\">MAP</span>, and\n          <span class=\"hue-doc-codeph\">STRUCT</span> cannot be used with Kudu tables.\n      </p><p><b>Performance consideration:</b></p><p>\n      The <span class=\"hue-doc-codeph\">CHAR</span> type currently does not have the Impala Codegen support, and we\n      recommend using <span class=\"hue-doc-codeph\">VARCHAR</span> or <span class=\"hue-doc-codeph\">STRING</span> over\n      <span class=\"hue-doc-codeph\">CHAR</span> as the performance gain of Codegen outweighs the benefits of fixed\n      width <span class=\"hue-doc-codeph\">CHAR</span>.\n    </p><p id=\"restrictions_blurb\"><b>Restrictions:</b></p><p>\n      Because the blank-padding behavior requires allocating the maximum length for each value\n      in memory, for scalability reasons, you should avoid declaring <span class=\"hue-doc-codeph\">CHAR</span>\n      columns that are much longer than typical values in that column.\n    </p><p id=\"blobs_are_strings\">\n        All data in <span class=\"hue-doc-codeph\">CHAR</span> and <span class=\"hue-doc-codeph\">VARCHAR</span> columns must be in a\n        character encoding that is compatible with UTF-8. If you have binary data from another\n        database system (that is, a BLOB type), use a <span class=\"hue-doc-codeph\">STRING</span> column to hold it.\n      </p><p>\n      When an expression compares a <span class=\"hue-doc-codeph\">CHAR</span> with a <span class=\"hue-doc-codeph\">STRING</span> or\n      <span class=\"hue-doc-codeph\">VARCHAR</span>, the <span class=\"hue-doc-codeph\">CHAR</span> value is implicitly converted to\n      <span class=\"hue-doc-codeph\">STRING</span> first, with trailing spaces preserved.\n    </p><p>\n      This behavior differs from other popular database systems. To get the expected result of\n      <span class=\"hue-doc-codeph\">TRUE</span>, cast the expressions on both sides to <span class=\"hue-doc-codeph\">CHAR</span> values\n      of the appropriate length. For example:\n    </p><div class=\"hue-doc-codeblock\">SELECT CAST(\"foo  \" AS CHAR(5)) = CAST('foo' AS CHAR(3)); -- Returns TRUE.</div><p>\n      This behavior is subject to change in future releases.\n    </p><p id=\"related_info\"><b>Related information:</b></p><p><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string.xml\" data-doc-anchor-id=\"string\">STRING Data Type</a>, <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_varchar.xml\" data-doc-anchor-id=\"varchar\">VARCHAR Data Type (Impala 2.0 or higher only)</a>,\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_literals.xml\" data-doc-anchor-id=\"string_literals\">String Literals</a>,\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions\">Impala String Functions</a></p></div></div></div>","title":"CHAR Data Type (Impala 2.0 or higher only)"}