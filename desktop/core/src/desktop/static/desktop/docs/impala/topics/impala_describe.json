{"body":"<div><div id=\"describe\"><div class=\"hue-doc-title\" id=\"desc\">DESCRIBE Statement</div><div><p>\n      The <span class=\"hue-doc-codeph\">DESCRIBE</span> statement displays metadata about a table, such as the column names and their\n      data types.\n      <span class=\"hue-doc-ph\">In Impala 2.3 and higher, you can specify the name of a complex type column, which takes\n      the form of a dotted path. The path might include multiple components in the case of a nested type definition.</span><span class=\"hue-doc-ph\">In Impala 2.5 and higher, the <span class=\"hue-doc-codeph\">DESCRIBE DATABASE</span> form can display\n      information about a database.</span></p><p id=\"syntax_blurb\"><b>Syntax:</b></p><div class=\"hue-doc-codeblock\">DESCRIBE [DATABASE] [FORMATTED|EXTENDED] <span class=\"hue-doc-varname\">object_name</span>\n\nobject_name ::=\n    [<span class=\"hue-doc-varname\">db_name</span>.]<span class=\"hue-doc-varname\">table_name</span>[.<span class=\"hue-doc-varname\">complex_col_name</span> ...]\n  | <span class=\"hue-doc-varname\">db_name</span></div><p>\n      You can use the abbreviation <span class=\"hue-doc-codeph\">DESC</span> for the <span class=\"hue-doc-codeph\">DESCRIBE</span> statement.\n    </p><p>\n      The <span class=\"hue-doc-codeph\">DESCRIBE FORMATTED</span> variation displays additional information, in a format familiar to\n      users of Apache Hive. The extra information includes low-level details such as whether the table is internal\n      or external, when it was created, the file format, the location of the data in HDFS, whether the object is a\n      table or a view, and (for views) the text of the query from the view definition.\n    </p><div class=\"hue-doc-note\">      The <span class=\"hue-doc-codeph\">Compressed</span> field is not a reliable indicator of whether the table contains compressed\n      data. It typically always shows <span class=\"hue-doc-codeph\">No</span>, because the compression settings only apply during the\n      session that loads data and are not stored persistently with the table metadata.\n    </div><p><b>Describing databases:</b></p><p>\n  By default, the <span class=\"hue-doc-codeph\">DESCRIBE</span> output for a database includes the location\n  and the comment, which can be set by the <span class=\"hue-doc-codeph\">LOCATION</span> and <span class=\"hue-doc-codeph\">COMMENT</span>\n  clauses on the <span class=\"hue-doc-codeph\">CREATE DATABASE</span> statement.\n</p><p>\n  The additional information displayed by the <span class=\"hue-doc-codeph\">FORMATTED</span> or <span class=\"hue-doc-codeph\">EXTENDED</span>\n  keyword includes the HDFS user ID that is considered the owner of the database, and any\n  optional database properties. The properties could be specified by the <span class=\"hue-doc-codeph\">WITH DBPROPERTIES</span>\n  clause if the database is created using a Hive <span class=\"hue-doc-codeph\">CREATE DATABASE</span> statement.\n  Impala currently does not set or do any special processing based on those properties.\n</p><p>\nThe following examples show the variations in syntax and output for\ndescribing databases. This feature is available in Impala 2.5\nand higher.\n</p><div class=\"hue-doc-codeblock\">describe database default;\n+---------+----------------------+-----------------------+\n| name    | location             | comment               |\n+---------+----------------------+-----------------------+\n| default | /user/hive/warehouse | Default Hive database |\n+---------+----------------------+-----------------------+\n\ndescribe database formatted default;\n+---------+----------------------+-----------------------+\n| name    | location             | comment               |\n+---------+----------------------+-----------------------+\n| default | /user/hive/warehouse | Default Hive database |\n| Owner:  |                      |                       |\n|         | public               | ROLE                  |\n+---------+----------------------+-----------------------+\n\ndescribe database extended default;\n+---------+----------------------+-----------------------+\n| name    | location             | comment               |\n+---------+----------------------+-----------------------+\n| default | /user/hive/warehouse | Default Hive database |\n| Owner:  |                      |                       |\n|         | public               | ROLE                  |\n+---------+----------------------+-----------------------+\n</div><p><b>Describing tables:</b></p><p>\n  If the <span class=\"hue-doc-codeph\">DATABASE</span> keyword is omitted, the default\n  for the <span class=\"hue-doc-codeph\">DESCRIBE</span> statement is to refer to a table.\n</p><p>\n      If you have the <span class=\"hue-doc-codeph\">SELECT</span> privilege on a subset of the table\n      columns and no other relevant table/database/server-level privileges,\n      <span class=\"hue-doc-codeph\">DESCRIBE</span> returns the data from the columns you have\n      access to.\n    </p><p>\n      If you have the <span class=\"hue-doc-codeph\">SELECT</span> privilege on a subset of the table\n      columns and no other relevant table/database/server-level privileges,\n      <span class=\"hue-doc-codeph\">DESCRIBE FORMATTED/EXTENDED</span> does not return\n      the <span class=\"hue-doc-codeph\">LOCATION</span> field. The <span class=\"hue-doc-codeph\">LOCATION</span> data\n      is shown if you have any privilege on the table, the containing database\n      or the server.\n    </p><div class=\"hue-doc-codeblock\">-- By default, the table is assumed to be in the current database.\ndescribe my_table;\n+------+--------+---------+\n| name | type   | comment |\n+------+--------+---------+\n| x    | int    |         |\n| s    | string |         |\n+------+--------+---------+\n\n-- Use a fully qualified table name to specify a table in any database.\ndescribe my_database.my_table;\n+------+--------+---------+\n| name | type   | comment |\n+------+--------+---------+\n| x    | int    |         |\n| s    | string |         |\n+------+--------+---------+\n\n-- The formatted or extended output includes additional useful information.\n-- The LOCATION field is especially useful to know for DDL statements and HDFS commands\n-- during ETL jobs. (The LOCATION includes a full hdfs:// URL, omitted here for readability.)\ndescribe formatted my_table;\n+------------------------------+----------------------------------------------+----------------------+\n| name                         | type                                         | comment              |\n+------------------------------+----------------------------------------------+----------------------+\n| # col_name                   | data_type                                    | comment              |\n|                              | NULL                                         | NULL                 |\n| x                            | int                                          | NULL                 |\n| s                            | string                                       | NULL                 |\n|                              | NULL                                         | NULL                 |\n| # Detailed Table Information | NULL                                         | NULL                 |\n| Database:                    | my_database                                  | NULL                 |\n| Owner:                       | jrussell                                     | NULL                 |\n| CreateTime:                  | Fri Mar 18 15:58:00 PDT 2016                 | NULL                 |\n| LastAccessTime:              | UNKNOWN                                      | NULL                 |\n| Protect Mode:                | None                                         | NULL                 |\n| Retention:                   | 0                                            | NULL                 |\n| Location:                    | /user/hive/warehouse/my_database.db/my_table | NULL                 |\n| Table Type:                  | MANAGED_TABLE                                | NULL                 |\n| Table Parameters:            | NULL                                         | NULL                 |\n|                              | transient_lastDdlTime                        | 1458341880           |\n|                              | NULL                                         | NULL                 |\n| # Storage Information        | NULL                                         | NULL                 |\n| SerDe Library:               | org. ... .LazySimpleSerDe                    | NULL                 |\n| InputFormat:                 | org.apache.hadoop.mapred.TextInputFormat     | NULL                 |\n| OutputFormat:                | org. ... .HiveIgnoreKeyTextOutputFormat      | NULL                 |\n| Compressed:                  | No                                           | NULL                 |\n| Num Buckets:                 | 0                                            | NULL                 |\n| Bucket Columns:              | []                                           | NULL                 |\n| Sort Columns:                | []                                           | NULL                 |\n+------------------------------+----------------------------------------------+----------------------+\n</div><p id=\"complex_types_blurb\"><b>Complex type considerations:</b></p><p>\n      Because the column definitions for complex types can become long, particularly when such types are nested,\n      the <span class=\"hue-doc-codeph\">DESCRIBE</span> statement uses special formatting for complex type columns to make the output readable.\n    </p><p>\n      For the <span class=\"hue-doc-codeph\">ARRAY</span>, <span class=\"hue-doc-codeph\">STRUCT</span>, and <span class=\"hue-doc-codeph\">MAP</span> types available in\n      Impala 2.3 and higher, the <span class=\"hue-doc-codeph\">DESCRIBE</span> output is formatted to avoid\n      excessively long lines for multiple fields within a <span class=\"hue-doc-codeph\">STRUCT</span>, or a nested sequence of\n      complex types.\n    </p><p id=\"complex_types_describe\">\n        You can pass a multi-part qualified name to <span class=\"hue-doc-codeph\">DESCRIBE</span> to specify an\n        <span class=\"hue-doc-codeph\">ARRAY</span>, <span class=\"hue-doc-codeph\">STRUCT</span>, or <span class=\"hue-doc-codeph\">MAP</span> column and\n        visualize its structure as if it were a table. For example, if table <span class=\"hue-doc-codeph\">T1</span>\n        contains an <span class=\"hue-doc-codeph\">ARRAY</span> column <span class=\"hue-doc-codeph\">A1</span>, you could issue the\n        statement <span class=\"hue-doc-codeph\">DESCRIBE t1.a1</span>. If table <span class=\"hue-doc-codeph\">T1</span> contained a\n        <span class=\"hue-doc-codeph\">STRUCT</span> column <span class=\"hue-doc-codeph\">S1</span>, and a field <span class=\"hue-doc-codeph\">F1</span>\n        within the <span class=\"hue-doc-codeph\">STRUCT</span> was a <span class=\"hue-doc-codeph\">MAP</span>, you could issue the\n        statement <span class=\"hue-doc-codeph\">DESCRIBE t1.s1.f1</span>. An <span class=\"hue-doc-codeph\">ARRAY</span> is shown as a\n        two-column table, with <span class=\"hue-doc-codeph\">ITEM</span> and <span class=\"hue-doc-codeph\">POS</span> columns. A\n        <span class=\"hue-doc-codeph\">STRUCT</span> is shown as a table with each field representing a column in the\n        table. A <span class=\"hue-doc-codeph\">MAP</span> is shown as a two-column table, with <span class=\"hue-doc-codeph\">KEY</span>\n        and <span class=\"hue-doc-codeph\">VALUE</span> columns.\n      </p><p>\n      For example, here is the <span class=\"hue-doc-codeph\">DESCRIBE</span> output for a table containing a single top-level column\n      of each complex type:\n    </p><div class=\"hue-doc-codeblock\">create table t1 (x int, a array&lt;int&gt;, s struct&lt;f1: string, f2: bigint&gt;, m map&lt;string,int&gt;) stored as parquet;\n\ndescribe t1;\n+------+-----------------+---------+\n| name | type            | comment |\n+------+-----------------+---------+\n| x    | int             |         |\n| a    | array&lt;int&gt;      |         |\n| s    | struct&lt;         |         |\n|      |   f1:string,    |         |\n|      |   f2:bigint     |         |\n|      | &gt;               |         |\n| m    | map&lt;string,int&gt; |         |\n+------+-----------------+---------+\n</div><p>\n      Here are examples showing how to <q>drill down</q> into the layouts of complex types, including\n      using multi-part names to examine the definitions of nested types.\n      The <span class=\"hue-doc-codeph\">&lt; &gt;</span> delimiters identify the columns with complex types;\n      these are the columns where you can descend another level to see the parts that make up\n      the complex type.\n      This technique helps you to understand the multi-part names you use as table references in queries\n      involving complex types, and the corresponding column names you refer to in the <span class=\"hue-doc-codeph\">SELECT</span> list.\n      These tables are from the <q>nested TPC-H</q> schema, shown in detail in\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_complex_types.xml\" data-doc-anchor-id=\"complex_sample_schema\">Sample Schema and Data for Experimenting with Impala Complex Types</a>.\n    </p><p>\n      The <span class=\"hue-doc-codeph\">REGION</span> table contains an <span class=\"hue-doc-codeph\">ARRAY</span> of <span class=\"hue-doc-codeph\">STRUCT</span>\n      elements:\n    </p><ul><li><p>\n          The first <span class=\"hue-doc-codeph\">DESCRIBE</span> specifies the table name, to display the definition\n          of each top-level column.\n        </p></li><li><p>\n          The second <span class=\"hue-doc-codeph\">DESCRIBE</span> specifies the name of a complex\n          column, <span class=\"hue-doc-codeph\">REGION.R_NATIONS</span>, showing that when you include the name of an <span class=\"hue-doc-codeph\">ARRAY</span>\n          column in a <span class=\"hue-doc-codeph\">FROM</span> clause, that table reference acts like a two-column table with\n          columns <span class=\"hue-doc-codeph\">ITEM</span> and <span class=\"hue-doc-codeph\">POS</span>.\n        </p></li><li><p>\n          The final <span class=\"hue-doc-codeph\">DESCRIBE</span> specifies the fully qualified name of the <span class=\"hue-doc-codeph\">ITEM</span> field,\n          to display the layout of its underlying <span class=\"hue-doc-codeph\">STRUCT</span> type in table format, with the fields\n          mapped to column names.\n        </p></li></ul><div class=\"hue-doc-codeblock\">-- #1: The overall layout of the entire table.\ndescribe region;\n+-------------+-------------------------+---------+\n| name        | type                    | comment |\n+-------------+-------------------------+---------+\n| r_regionkey | smallint                |         |\n| r_name      | string                  |         |\n| r_comment   | string                  |         |\n| r_nations   | array&lt;struct&lt;           |         |\n|             |   n_nationkey:smallint, |         |\n|             |   n_name:string,        |         |\n|             |   n_comment:string      |         |\n|             | &gt;&gt;                      |         |\n+-------------+-------------------------+---------+\n\n-- #2: The ARRAY column within the table.\ndescribe region.r_nations;\n+------+-------------------------+---------+\n| name | type                    | comment |\n+------+-------------------------+---------+\n| item | struct&lt;                 |         |\n|      |   n_nationkey:smallint, |         |\n|      |   n_name:string,        |         |\n|      |   n_comment:string      |         |\n|      | &gt;                       |         |\n| pos  | bigint                  |         |\n+------+-------------------------+---------+\n\n-- #3: The STRUCT that makes up each ARRAY element.\n--     The fields of the STRUCT act like columns of a table.\ndescribe region.r_nations.item;\n+-------------+----------+---------+\n| name        | type     | comment |\n+-------------+----------+---------+\n| n_nationkey | smallint |         |\n| n_name      | string   |         |\n| n_comment   | string   |         |\n+-------------+----------+---------+\n</div><p>\n      The <span class=\"hue-doc-codeph\">CUSTOMER</span> table contains an <span class=\"hue-doc-codeph\">ARRAY</span> of <span class=\"hue-doc-codeph\">STRUCT</span>\n      elements, where one field in the <span class=\"hue-doc-codeph\">STRUCT</span> is another <span class=\"hue-doc-codeph\">ARRAY</span> of\n      <span class=\"hue-doc-codeph\">STRUCT</span> elements:\n    </p><ul><li><p>\n          Again, the initial <span class=\"hue-doc-codeph\">DESCRIBE</span> specifies only the table name.\n        </p></li><li><p>\n          The second <span class=\"hue-doc-codeph\">DESCRIBE</span> specifies the qualified name of the complex\n          column, <span class=\"hue-doc-codeph\">CUSTOMER.C_ORDERS</span>, showing how an <span class=\"hue-doc-codeph\">ARRAY</span>\n          is represented as a two-column table with columns <span class=\"hue-doc-codeph\">ITEM</span> and <span class=\"hue-doc-codeph\">POS</span>.\n        </p></li><li><p>\n          The third <span class=\"hue-doc-codeph\">DESCRIBE</span> specifies the qualified name of the <span class=\"hue-doc-codeph\">ITEM</span>\n          of the <span class=\"hue-doc-codeph\">ARRAY</span> column, to see the structure of the nested <span class=\"hue-doc-codeph\">ARRAY</span>.\n          Again, it has has two parts, <span class=\"hue-doc-codeph\">ITEM</span> and <span class=\"hue-doc-codeph\">POS</span>. Because the\n          <span class=\"hue-doc-codeph\">ARRAY</span> contains a <span class=\"hue-doc-codeph\">STRUCT</span>, the layout of the <span class=\"hue-doc-codeph\">STRUCT</span>\n          is shown.\n        </p></li><li><p>\n          The fourth and fifth <span class=\"hue-doc-codeph\">DESCRIBE</span> statements drill down into a <span class=\"hue-doc-codeph\">STRUCT</span> field that\n          is itself a complex type, an <span class=\"hue-doc-codeph\">ARRAY</span> of <span class=\"hue-doc-codeph\">STRUCT</span>.\n          The <span class=\"hue-doc-codeph\">ITEM</span> portion of the qualified name is only required when the <span class=\"hue-doc-codeph\">ARRAY</span>\n          elements are anonymous. The fields of the <span class=\"hue-doc-codeph\">STRUCT</span> give names to any other complex types\n          nested inside the <span class=\"hue-doc-codeph\">STRUCT</span>. Therefore, the <span class=\"hue-doc-codeph\">DESCRIBE</span> parameters\n          <span class=\"hue-doc-codeph\">CUSTOMER.C_ORDERS.ITEM.O_LINEITEMS</span> and <span class=\"hue-doc-codeph\">CUSTOMER.C_ORDERS.O_LINEITEMS</span>\n          are equivalent. (For brevity, leave out the <span class=\"hue-doc-codeph\">ITEM</span> portion of\n          a qualified name when it is not required.)\n        </p></li><li><p>\n          The final <span class=\"hue-doc-codeph\">DESCRIBE</span> shows the layout of the deeply nested <span class=\"hue-doc-codeph\">STRUCT</span> type.\n          Because there are no more complex types nested inside this <span class=\"hue-doc-codeph\">STRUCT</span>, this is as far\n          as you can drill down into the layout for this table.\n        </p></li></ul><div class=\"hue-doc-codeblock\">-- #1: The overall layout of the entire table.\ndescribe customer;\n+--------------+------------------------------------+\n| name         | type                               |\n+--------------+------------------------------------+\n| c_custkey    | bigint                             |\n... more scalar columns ...\n| c_orders     | array&lt;struct&lt;                      |\n|              |   o_orderkey:bigint,               |\n|              |   o_orderstatus:string,            |\n|              |   o_totalprice:decimal(12,2),      |\n|              |   o_orderdate:string,              |\n|              |   o_orderpriority:string,          |\n|              |   o_clerk:string,                  |\n|              |   o_shippriority:int,              |\n|              |   o_comment:string,                |\n|              |   o_lineitems:array&lt;struct&lt;        |\n|              |     l_partkey:bigint,              |\n|              |     l_suppkey:bigint,              |\n|              |     l_linenumber:int,              |\n|              |     l_quantity:decimal(12,2),      |\n|              |     l_extendedprice:decimal(12,2), |\n|              |     l_discount:decimal(12,2),      |\n|              |     l_tax:decimal(12,2),           |\n|              |     l_returnflag:string,           |\n|              |     l_linestatus:string,           |\n|              |     l_shipdate:string,             |\n|              |     l_commitdate:string,           |\n|              |     l_receiptdate:string,          |\n|              |     l_shipinstruct:string,         |\n|              |     l_shipmode:string,             |\n|              |     l_comment:string               |\n|              |   &gt;&gt;                               |\n|              | &gt;&gt;                                 |\n+--------------+------------------------------------+\n\n-- #2: The ARRAY column within the table.\ndescribe customer.c_orders;\n+------+------------------------------------+\n| name | type                               |\n+------+------------------------------------+\n| item | struct&lt;                            |\n|      |   o_orderkey:bigint,               |\n|      |   o_orderstatus:string,            |\n... more struct fields ...\n|      |   o_lineitems:array&lt;struct&lt;        |\n|      |     l_partkey:bigint,              |\n|      |     l_suppkey:bigint,              |\n... more nested struct fields ...\n|      |     l_comment:string               |\n|      |   &gt;&gt;                               |\n|      | &gt;                                  |\n| pos  | bigint                             |\n+------+------------------------------------+\n\n-- #3: The STRUCT that makes up each ARRAY element.\n--     The fields of the STRUCT act like columns of a table.\ndescribe customer.c_orders.item;\n+-----------------+----------------------------------+\n| name            | type                             |\n+-----------------+----------------------------------+\n| o_orderkey      | bigint                           |\n| o_orderstatus   | string                           |\n| o_totalprice    | decimal(12,2)                    |\n| o_orderdate     | string                           |\n| o_orderpriority | string                           |\n| o_clerk         | string                           |\n| o_shippriority  | int                              |\n| o_comment       | string                           |\n| o_lineitems     | array&lt;struct&lt;                    |\n|                 |   l_partkey:bigint,              |\n|                 |   l_suppkey:bigint,              |\n... more struct fields ...\n|                 |   l_comment:string               |\n|                 | &gt;&gt;                               |\n+-----------------+----------------------------------+\n\n-- #4: The ARRAY nested inside the STRUCT elements of the first ARRAY.\ndescribe customer.c_orders.item.o_lineitems;\n+------+----------------------------------+\n| name | type                             |\n+------+----------------------------------+\n| item | struct&lt;                          |\n|      |   l_partkey:bigint,              |\n|      |   l_suppkey:bigint,              |\n... more struct fields ...\n|      |   l_comment:string               |\n|      | &gt;                                |\n| pos  | bigint                           |\n+------+----------------------------------+\n\n-- #5: Shorter form of the previous DESCRIBE. Omits the .ITEM portion of the name\n--     because O_LINEITEMS and other field names provide a way to refer to things\n--     inside the ARRAY element.\ndescribe customer.c_orders.o_lineitems;\n+------+----------------------------------+\n| name | type                             |\n+------+----------------------------------+\n| item | struct&lt;                          |\n|      |   l_partkey:bigint,              |\n|      |   l_suppkey:bigint,              |\n... more struct fields ...\n|      |   l_comment:string               |\n|      | &gt;                                |\n| pos  | bigint                           |\n+------+----------------------------------+\n\n-- #6: The STRUCT representing ARRAY elements nested inside\n--     another ARRAY of STRUCTs. The lack of any complex types\n--     in this output means this is as far as DESCRIBE can\n--     descend into the table layout.\ndescribe customer.c_orders.o_lineitems.item;\n+-----------------+---------------+\n| name            | type          |\n+-----------------+---------------+\n| l_partkey       | bigint        |\n| l_suppkey       | bigint        |\n... more scalar columns ...\n| l_comment       | string        |\n+-----------------+---------------+\n</div><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n  After the <span class=\"hue-doc-cmdname\">impalad</span> daemons are restarted, the first query against a table can take longer\n  than subsequent queries, because the metadata for the table is loaded before the query is processed. This\n  one-time delay for each table can cause misleading results in benchmark tests or cause unnecessary concern.\n  To <q>warm up</q> the Impala metadata cache, you can issue a <span class=\"hue-doc-codeph\">DESCRIBE</span> statement in advance\n  for each table you intend to access later.\n</p><p>\n  When you are dealing with data files stored in HDFS, sometimes it is important to know details such as the\n  path of the data files for an Impala table, and the hostname for the namenode. You can get this information\n  from the <span class=\"hue-doc-codeph\">DESCRIBE FORMATTED</span> output. You specify HDFS URIs or path specifications with\n  statements such as <span class=\"hue-doc-codeph\">LOAD DATA</span> and the <span class=\"hue-doc-codeph\">LOCATION</span> clause of <span class=\"hue-doc-codeph\">CREATE\n  TABLE</span> or <span class=\"hue-doc-codeph\">ALTER TABLE</span>. You might also use HDFS URIs or paths with Linux commands\n  such as <span class=\"hue-doc-cmdname\">hadoop</span> and <span class=\"hue-doc-cmdname\">hdfs</span> to copy, rename, and so on, data files in HDFS.\n</p><p id=\"sync_ddl_blurb\">\n        If you connect to different Impala nodes within an <span class=\"hue-doc-cmdname\">impala-shell</span>\n        session for load-balancing purposes, you can enable the <span class=\"hue-doc-codeph\">SYNC_DDL</span> query\n        option to make each DDL statement wait before returning, until the new or changed\n        metadata has been received by all the Impala nodes. See\n        <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_sync_ddl.xml\" data-doc-anchor-id=\"sync_ddl\">SYNC_DDL Query Option</a> for details.\n      </p><p>\n  Each table can also have associated table statistics and column statistics. To see these categories of\n  information, use the <span class=\"hue-doc-codeph\">SHOW TABLE STATS <span class=\"hue-doc-varname\">table_name</span></span> and <span class=\"hue-doc-codeph\">SHOW COLUMN\n  STATS <span class=\"hue-doc-varname\">table_name</span></span> statements.\n\n  See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_show.xml\" data-doc-anchor-id=\"show\">SHOW Statement</a> for details.\n</p><div class=\"hue-doc-note\" id=\"compute_stats_next\">        After adding or replacing data in a table used in performance-critical queries, issue a\n        <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement to make sure all statistics are up-to-date.\n        Consider updating statistics for a table after any <span class=\"hue-doc-codeph\">INSERT</span>, <span class=\"hue-doc-codeph\">LOAD\n        DATA</span>, or <span class=\"hue-doc-codeph\">CREATE TABLE AS SELECT</span> statement in Impala, or after\n        loading data through Hive and doing a <span class=\"hue-doc-codeph\">REFRESH\n        <span class=\"hue-doc-varname\">table_name</span></span> in Impala. This technique is especially important\n        for tables that are very large, used in join queries, or both.\n      </div><p id=\"example_blurb\"><b>Examples:</b></p><p>\n  The following example shows the results of both a standard <span class=\"hue-doc-codeph\">DESCRIBE</span> and <span class=\"hue-doc-codeph\">DESCRIBE\n  FORMATTED</span> for different kinds of schema objects:\n</p><ul><li><span class=\"hue-doc-codeph\">DESCRIBE</span> for a table or a view returns the name, type, and comment for each of the\n      columns. For a view, if the column value is computed by an expression, the column name is automatically\n      generated as <span class=\"hue-doc-codeph\">_c0</span>, <span class=\"hue-doc-codeph\">_c1</span>, and so on depending on the ordinal number of the\n      column.\n    </li><li>\n      A table created with no special format or storage clauses is designated as a <span class=\"hue-doc-codeph\">MANAGED_TABLE</span>\n      (an <q>internal table</q> in Impala terminology). Its data files are stored in an HDFS directory under the\n      default Hive data directory. By default, it uses Text data format.\n    </li><li>\n      A view is designated as <span class=\"hue-doc-codeph\">VIRTUAL_VIEW</span> in <span class=\"hue-doc-codeph\">DESCRIBE FORMATTED</span> output. Some\n      of its properties are <span class=\"hue-doc-codeph\">NULL</span> or blank because they are inherited from the base table. The\n      text of the query that defines the view is part of the <span class=\"hue-doc-codeph\">DESCRIBE FORMATTED</span> output.\n    </li><li>\n      A table with additional clauses in the <span class=\"hue-doc-codeph\">CREATE TABLE</span> statement has differences in\n      <span class=\"hue-doc-codeph\">DESCRIBE FORMATTED</span> output. The output for <span class=\"hue-doc-codeph\">T2</span> includes the\n      <span class=\"hue-doc-codeph\">EXTERNAL_TABLE</span> keyword because of the <span class=\"hue-doc-codeph\">CREATE EXTERNAL TABLE</span> syntax, and\n      different <span class=\"hue-doc-codeph\">InputFormat</span> and <span class=\"hue-doc-codeph\">OutputFormat</span> fields to reflect the Parquet file\n      format.\n    </li></ul><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; create table t1 (x int, y int, s string);\nQuery: create table t1 (x int, y int, s string)\n[localhost:21000] &gt; describe t1;\nQuery: describe t1\nQuery finished, fetching results ...\n+------+--------+---------+\n| name | type   | comment |\n+------+--------+---------+\n| x    | int    |         |\n| y    | int    |         |\n| s    | string |         |\n+------+--------+---------+\nReturned 3 row(s) in 0.13s\n[localhost:21000] &gt; describe formatted t1;\nQuery: describe formatted t1\nQuery finished, fetching results ...\n+------------------------------+--------------------------------------------+------------+\n| name                         | type                                       | comment    |\n+------------------------------+--------------------------------------------+------------+\n| # col_name                   | data_type                                  | comment    |\n|                              | NULL                                       | NULL       |\n| x                            | int                                        | None       |\n| y                            | int                                        | None       |\n| s                            | string                                     | None       |\n|                              | NULL                                       | NULL       |\n| # Detailed Table Information | NULL                                       | NULL       |\n| Database:                    | describe_formatted                         | NULL       |\n| Owner:                       | doc_demo                                   | NULL       |\n| CreateTime:                  | Mon Jul 22 17:03:16 EDT 2013               | NULL       |\n| LastAccessTime:              | UNKNOWN                                    | NULL       |\n| Protect Mode:                | None                                       | NULL       |\n| Retention:                   | 0                                          | NULL       |\n| Location:                    | hdfs://127.0.0.1:8020/user/hive/warehouse/ |            |\n|                              |   describe_formatted.db/t1                 | NULL       |\n| Table Type:                  | MANAGED_TABLE                              | NULL       |\n| Table Parameters:            | NULL                                       | NULL       |\n|                              | transient_lastDdlTime                      | 1374526996 |\n|                              | NULL                                       | NULL       |\n| # Storage Information        | NULL                                       | NULL       |\n| SerDe Library:               | org.apache.hadoop.hive.serde2.lazy.        |            |\n|                              |   LazySimpleSerDe                          | NULL       |\n| InputFormat:                 | org.apache.hadoop.mapred.TextInputFormat   | NULL       |\n| OutputFormat:                | org.apache.hadoop.hive.ql.io.              |            |\n|                              |   HiveIgnoreKeyTextOutputFormat            | NULL       |\n| Compressed:                  | No                                         | NULL       |\n| Num Buckets:                 | 0                                          | NULL       |\n| Bucket Columns:              | []                                         | NULL       |\n| Sort Columns:                | []                                         | NULL       |\n+------------------------------+--------------------------------------------+------------+\nReturned 26 row(s) in 0.03s\n[localhost:21000] &gt; create view v1 as select x, upper(s) from t1;\nQuery: create view v1 as select x, upper(s) from t1\n[localhost:21000] &gt; describe v1;\nQuery: describe v1\nQuery finished, fetching results ...\n+------+--------+---------+\n| name | type   | comment |\n+------+--------+---------+\n| x    | int    |         |\n| _c1  | string |         |\n+------+--------+---------+\nReturned 2 row(s) in 0.10s\n[localhost:21000] &gt; describe formatted v1;\nQuery: describe formatted v1\nQuery finished, fetching results ...\n+------------------------------+------------------------------+----------------------+\n| name                         | type                         | comment              |\n+------------------------------+------------------------------+----------------------+\n| # col_name                   | data_type                    | comment              |\n|                              | NULL                         | NULL                 |\n| x                            | int                          | None                 |\n| _c1                          | string                       | None                 |\n|                              | NULL                         | NULL                 |\n| # Detailed Table Information | NULL                         | NULL                 |\n| Database:                    | describe_formatted           | NULL                 |\n| Owner:                       | doc_demo                     | NULL                 |\n| CreateTime:                  | Mon Jul 22 16:56:38 EDT 2013 | NULL                 |\n| LastAccessTime:              | UNKNOWN                      | NULL                 |\n| Protect Mode:                | None                         | NULL                 |\n| Retention:                   | 0                            | NULL                 |\n| Table Type:                  | VIRTUAL_VIEW                 | NULL                 |\n| Table Parameters:            | NULL                         | NULL                 |\n|                              | transient_lastDdlTime        | 1374526598           |\n|                              | NULL                         | NULL                 |\n| # Storage Information        | NULL                         | NULL                 |\n| SerDe Library:               | null                         | NULL                 |\n| InputFormat:                 | null                         | NULL                 |\n| OutputFormat:                | null                         | NULL                 |\n| Compressed:                  | No                           | NULL                 |\n| Num Buckets:                 | 0                            | NULL                 |\n| Bucket Columns:              | []                           | NULL                 |\n| Sort Columns:                | []                           | NULL                 |\n|                              | NULL                         | NULL                 |\n| # View Information           | NULL                         | NULL                 |\n| View Original Text:          | SELECT x, upper(s) FROM t1   | NULL                 |\n| View Expanded Text:          | SELECT x, upper(s) FROM t1   | NULL                 |\n+------------------------------+------------------------------+----------------------+\nReturned 28 row(s) in 0.03s\n[localhost:21000] &gt; create external table t2 (x int, y int, s string) stored as parquet location '/user/doc_demo/sample_data';\n[localhost:21000] &gt; describe formatted t2;\nQuery: describe formatted t2\nQuery finished, fetching results ...\n+------------------------------+----------------------------------------------------+------------+\n| name                         | type                                               | comment    |\n+------------------------------+----------------------------------------------------+------------+\n| # col_name                   | data_type                                          | comment    |\n|                              | NULL                                               | NULL       |\n| x                            | int                                                | None       |\n| y                            | int                                                | None       |\n| s                            | string                                             | None       |\n|                              | NULL                                               | NULL       |\n| # Detailed Table Information | NULL                                               | NULL       |\n| Database:                    | describe_formatted                                 | NULL       |\n| Owner:                       | doc_demo                                           | NULL       |\n| CreateTime:                  | Mon Jul 22 17:01:47 EDT 2013                       | NULL       |\n| LastAccessTime:              | UNKNOWN                                            | NULL       |\n| Protect Mode:                | None                                               | NULL       |\n| Retention:                   | 0                                                  | NULL       |\n| Location:                    | hdfs://127.0.0.1:8020/user/doc_demo/sample_data    | NULL       |\n| Table Type:                  | EXTERNAL_TABLE                                     | NULL       |\n| Table Parameters:            | NULL                                               | NULL       |\n|                              | EXTERNAL                                           | TRUE       |\n|                              | transient_lastDdlTime                              | 1374526907 |\n|                              | NULL                                               | NULL       |\n| # Storage Information        | NULL                                               | NULL       |\n| SerDe Library:               | org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe | NULL       |\n| InputFormat:                 | org.apache.impala.hive.serde.ParquetInputFormat    | NULL       |\n| OutputFormat:                | org.apache.impala.hive.serde.ParquetOutputFormat   | NULL       |\n| Compressed:                  | No                                                 | NULL       |\n| Num Buckets:                 | 0                                                  | NULL       |\n| Bucket Columns:              | []                                                 | NULL       |\n| Sort Columns:                | []                                                 | NULL       |\n+------------------------------+----------------------------------------------------+------------+\nReturned 27 row(s) in 0.17s</div><p id=\"cancel_blurb_no\"><b>Cancellation:</b> Cannot be cancelled.\n      </p><p id=\"permissions_blurb\"><b>HDFS permissions:</b></p><p>\n      The user ID that the <span class=\"hue-doc-cmdname\">impalad</span> daemon runs under,\n      typically the <span class=\"hue-doc-codeph\">impala</span> user, must have read and execute\n      permissions for all directories that are part of the table.\n      (A table could span multiple different HDFS directories if it is partitioned.\n      The directories could be widely scattered because a partition can reside\n      in an arbitrary HDFS directory based on its <span class=\"hue-doc-codeph\">LOCATION</span> attribute.)\n    </p><p id=\"kudu_blurb\"><b>Kudu considerations:</b></p><p>\n      The information displayed for Kudu tables includes the additional attributes\n      that are only applicable for Kudu tables:\n    </p><ul><li>\n        Whether or not the column is part of the primary key. Every Kudu table\n        has a <span class=\"hue-doc-codeph\">true</span> value here for at least one column. There\n        could be multiple <span class=\"hue-doc-codeph\">true</span> values, for tables with\n        composite primary keys.\n      </li><li>\n        Whether or not the column is nullable. Specified by the <span class=\"hue-doc-codeph\">NULL</span>\n        or <span class=\"hue-doc-codeph\">NOT NULL</span> attributes on the <span class=\"hue-doc-codeph\">CREATE TABLE</span> statement.\n        Columns that are part of the primary key are automatically non-nullable.\n      </li><li>\n        The default value, if any, for the column. Specified by the <span class=\"hue-doc-codeph\">DEFAULT</span>\n        attribute on the <span class=\"hue-doc-codeph\">CREATE TABLE</span> statement. If the default value is\n        <span class=\"hue-doc-codeph\">NULL</span>, that is not indicated in this column. It is implied by\n        <span class=\"hue-doc-codeph\">nullable</span> being true and no other default value specified.\n      </li><li>\n        The encoding used for values in the column. Specified by the <span class=\"hue-doc-codeph\">ENCODING</span>\n        attribute on the <span class=\"hue-doc-codeph\">CREATE TABLE</span> statement.\n      </li><li>\n        The compression used for values in the column. Specified by the <span class=\"hue-doc-codeph\">COMPRESSION</span>\n        attribute on the <span class=\"hue-doc-codeph\">CREATE TABLE</span> statement.\n      </li><li>\n        The block size (in bytes) used for the underlying Kudu storage layer for the column.\n        Specified by the <span class=\"hue-doc-codeph\">BLOCK_SIZE</span> attribute on the <span class=\"hue-doc-codeph\">CREATE TABLE</span>\n        statement.\n      </li></ul><p>\n      The following example shows <span class=\"hue-doc-codeph\">DESCRIBE</span> output for a simple Kudu table, with\n      a single-column primary key and all column attributes left with their default values:\n    </p><div class=\"hue-doc-codeblock\">describe million_rows;\n+------+--------+---------+-------------+----------+---------------+---------------+---------------------+------------+\n| name | type   | comment | primary_key | nullable | default_value | encoding      | compression         | block_size |\n+------+--------+---------+-------------+----------+---------------+---------------+---------------------+------------+\n| id   | string |         | true        | false    |               | AUTO_ENCODING | DEFAULT_COMPRESSION | 0          |\n| s    | string |         | false       | false    |               | AUTO_ENCODING | DEFAULT_COMPRESSION | 0          |\n+------+--------+---------+-------------+----------+---------------+---------------+---------------------+------------+\n</div><p>\n      The following example shows <span class=\"hue-doc-codeph\">DESCRIBE</span> output for a Kudu table with a\n      two-column primary key, and Kudu-specific attributes applied to some columns:\n    </p><div class=\"hue-doc-codeblock\">create table kudu_describe_example\n(\n  c1 int, c2 int,\n  c3 string, c4 string not null, c5 string default 'n/a', c6 string default '',\n  c7 bigint not null, c8 bigint null default null, c9 bigint default -1 encoding bit_shuffle,\n  primary key(c1,c2)\n)\npartition by hash (c1, c2) partitions 10 stored as kudu;\n\ndescribe kudu_describe_example;\n+------+--------+---------+-------------+----------+---------------+---------------+---------------------+------------+\n| name | type   | comment | primary_key | nullable | default_value | encoding      | compression         | block_size |\n+------+--------+---------+-------------+----------+---------------+---------------+---------------------+------------+\n| c1   | int    |         | true        | false    |               | AUTO_ENCODING | DEFAULT_COMPRESSION | 0          |\n| c2   | int    |         | true        | false    |               | AUTO_ENCODING | DEFAULT_COMPRESSION | 0          |\n| c3   | string |         | false       | true     |               | AUTO_ENCODING | DEFAULT_COMPRESSION | 0          |\n| c4   | string |         | false       | false    |               | AUTO_ENCODING | DEFAULT_COMPRESSION | 0          |\n| c5   | string |         | false       | true     | n/a           | AUTO_ENCODING | DEFAULT_COMPRESSION | 0          |\n| c6   | string |         | false       | true     |               | AUTO_ENCODING | DEFAULT_COMPRESSION | 0          |\n| c7   | bigint |         | false       | false    |               | AUTO_ENCODING | DEFAULT_COMPRESSION | 0          |\n| c8   | bigint |         | false       | true     |               | AUTO_ENCODING | DEFAULT_COMPRESSION | 0          |\n| c9   | bigint |         | false       | true     | -1            | BIT_SHUFFLE   | DEFAULT_COMPRESSION | 0          |\n+------+--------+---------+-------------+----------+---------------+---------------+---------------------+------------+\n</div><p id=\"related_info\"><b>Related information:</b></p><p><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_tables.xml\" data-doc-anchor-id=\"tables\">Overview of Impala Tables</a>, <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_create_table.xml\" data-doc-anchor-id=\"create_table\">CREATE TABLE Statement</a>,\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_show.xml\" data-doc-anchor-id=\"show_tables\">SHOW TABLES Statement</a>, <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_show.xml\" data-doc-anchor-id=\"show_create_table\">SHOW CREATE TABLE Statement</a></p></div></div></div>","title":"DESCRIBE Statement"}