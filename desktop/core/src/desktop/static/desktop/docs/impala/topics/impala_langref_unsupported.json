{"body":"<div><div id=\"langref_hiveql_delta\"><div class=\"hue-doc-title\">SQL Differences Between Impala and Hive</div><div><p>\n      Impala's SQL syntax follows the SQL-92 standard, and includes many industry extensions in areas such as\n      built-in functions. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_porting.xml\" data-doc-anchor-id=\"porting\">Porting SQL from Other Database Systems to Impala</a> for a general discussion of adapting SQL\n      code from a variety of database systems to Impala.\n    </p><p>\n      Because Impala and Hive share the same metastore database and their tables are often used interchangeably,\n      the following section covers differences between Impala and Hive in detail.\n    </p><p/></div><div id=\"langref_hiveql_unsupported\"><div class=\"hue-doc-title\">HiveQL Features not Available in Impala</div><div><p>\n        The current release of Impala does not support the following SQL features that you might be familiar with\n        from HiveQL:\n      </p><ul><li>\n          Extensibility mechanisms such as <span class=\"hue-doc-codeph\">TRANSFORM</span>, custom file formats, or custom SerDes.\n        </li><li>\n          The <span class=\"hue-doc-codeph\">DATE</span> data type.\n        </li><li> XML functions. </li><li>\n          Certain aggregate functions from HiveQL: <span class=\"hue-doc-codeph\">covar_pop</span>, <span class=\"hue-doc-codeph\">covar_samp</span>,\n          <span class=\"hue-doc-codeph\">corr</span>, <span class=\"hue-doc-codeph\">percentile</span>, <span class=\"hue-doc-codeph\">percentile_approx</span>,\n          <span class=\"hue-doc-codeph\">histogram_numeric</span>, <span class=\"hue-doc-codeph\">collect_set</span>; Impala supports the set of aggregate\n          functions listed in <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_aggregate_functions.xml\" data-doc-anchor-id=\"aggregate_functions\">Impala Aggregate Functions</a> and analytic\n          functions listed in <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_analytic_functions.xml\" data-doc-anchor-id=\"analytic_functions\">Impala Analytic Functions</a>.\n        </li><li>\n          Sampling.\n        </li><li>\n          Lateral views. In Impala 2.3 and higher, Impala supports queries on complex types\n          (<span class=\"hue-doc-codeph\">STRUCT</span>, <span class=\"hue-doc-codeph\">ARRAY</span>, or <span class=\"hue-doc-codeph\">MAP</span>), using join notation\n          rather than the <span class=\"hue-doc-codeph\">EXPLODE()</span> keyword.\n          See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_complex_types.xml\" data-doc-anchor-id=\"complex_types\">Complex Types (Impala 2.3 or higher only)</a> for details about Impala support for complex types.\n        </li></ul><p>\n        User-defined functions (UDFs) are supported starting in Impala 1.2. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_udf.xml\" data-doc-anchor-id=\"udfs\">User-Defined Functions (UDFs)</a>\n        for full details on Impala UDFs.\n        <ul><li><p>\n              Impala supports high-performance UDFs written in C++, as well as reusing some Java-based Hive UDFs.\n            </p></li><li><p>\n              Impala supports scalar UDFs and user-defined aggregate functions (UDAFs). Impala does not currently\n              support user-defined table generating functions (UDTFs).\n            </p></li><li><p>\n              Only Impala-supported column types are supported in Java-based UDFs.\n            </p></li><li><p id=\"current_user_caveat\">\n        The Hive <span class=\"hue-doc-codeph\">current_user()</span> function cannot be called from a Java UDF\n        through Impala.\n      </p></li></ul></p><p>\n        Impala does not currently support these HiveQL statements:\n      </p><ul><li><span class=\"hue-doc-codeph\">ANALYZE TABLE</span> (the Impala equivalent is <span class=\"hue-doc-codeph\">COMPUTE STATS</span>)\n        </li><li><span class=\"hue-doc-codeph\">DESCRIBE COLUMN</span></li><li><span class=\"hue-doc-codeph\">DESCRIBE DATABASE</span></li><li><span class=\"hue-doc-codeph\">EXPORT TABLE</span></li><li><span class=\"hue-doc-codeph\">IMPORT TABLE</span></li><li><span class=\"hue-doc-codeph\">SHOW TABLE EXTENDED</span></li><li><span class=\"hue-doc-codeph\">SHOW TBLPROPERTIES</span></li><li><span class=\"hue-doc-codeph\">SHOW INDEXES</span></li><li><span class=\"hue-doc-codeph\">SHOW COLUMNS</span></li><li><span class=\"hue-doc-codeph\">INSERT OVERWRITE DIRECTORY</span>; use <span class=\"hue-doc-codeph\">INSERT OVERWRITE <span class=\"hue-doc-varname\">table_name</span></span>\n          or <span class=\"hue-doc-codeph\">CREATE TABLE AS SELECT</span> to materialize query results into the HDFS directory associated\n          with an Impala table.\n        </li></ul><p>\n        Impala respects the <span class=\"hue-doc-codeph\">serialization.null.format</span> table\n        property only for TEXT tables and ignores the property for Parquet and\n        other formats. Hive respects the <span class=\"hue-doc-codeph\">serialization.null.format</span>\n        property for Parquet and other formats and converts matching values\n        to NULL during the scan. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_txtfile.xml\" data-doc-anchor-id=\"text_data_files\">Data Files for Text Tables</a> for\n        using the table property in Impala.\n      </p></div></div><div id=\"langref_hiveql_semantics\"><div class=\"hue-doc-title\">Semantic Differences Between Impala and HiveQL Features</div><div><p>\n        This section covers instances where Impala and Hive have similar functionality, sometimes including the\n        same syntax, but there are differences in the runtime semantics of those features.\n      </p><p><b>Security:</b></p><p>\n        Impala utilizes the <a class=\"hue-doc-external-link\" href=\"http://sentry.apache.org/\" target=\"_blank\">Apache\n        Ranger </a> authorization framework, which provides fine-grained role-based access control\n        to protect data against unauthorized access or tampering.\n      </p><p>\n        The Hive component now includes Ranger-enabled <span class=\"hue-doc-codeph\">GRANT</span>,\n        <span class=\"hue-doc-codeph\">REVOKE</span>, and <span class=\"hue-doc-codeph\">CREATE/DROP ROLE</span> statements. Earlier Hive releases had a\n        privilege system with <span class=\"hue-doc-codeph\">GRANT</span> and <span class=\"hue-doc-codeph\">REVOKE</span> statements that were primarily\n        intended to prevent accidental deletion of data, rather than a security mechanism to protect against\n        malicious users.\n      </p><p>\n        Impala can make use of privileges set up through Hive <span class=\"hue-doc-codeph\">GRANT</span> and <span class=\"hue-doc-codeph\">REVOKE</span> statements.\n        Impala has its own <span class=\"hue-doc-codeph\">GRANT</span> and <span class=\"hue-doc-codeph\">REVOKE</span> statements in Impala 2.0 and higher.\n        See <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_authorization.html#authorization\" target=\"_blank\">Impala Authorization</a> for the details of authorization in Impala.\n      </p><p><b>SQL statements and clauses:</b></p><p>\n        The semantics of Impala SQL statements varies from HiveQL in some cases where they use similar SQL\n        statement and clause names:\n      </p><ul><li>\n          Impala uses different syntax and names for query hints, <span class=\"hue-doc-codeph\">[SHUFFLE]</span> and\n          <span class=\"hue-doc-codeph\">[NOSHUFFLE]</span> rather than <span class=\"hue-doc-codeph\">MapJoin</span> or <span class=\"hue-doc-codeph\">StreamJoin</span>. See\n          <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_joins.xml\" data-doc-anchor-id=\"joins\">Joins in Impala SELECT Statements</a> for the Impala details.\n        </li><li>\n          Impala does not expose MapReduce specific features of <span class=\"hue-doc-codeph\">SORT BY</span>, <span class=\"hue-doc-codeph\">DISTRIBUTE\n          BY</span>, or <span class=\"hue-doc-codeph\">CLUSTER BY</span>.\n        </li><li>\n          Impala does not require queries to include a <span class=\"hue-doc-codeph\">FROM</span> clause.\n        </li></ul><p><b>Data types:</b></p><ul><li> Impala supports a limited set of implicit casts. This can help\n          avoid undesired results from unexpected casting behavior. <ul><li> Impala does not implicitly cast between string and numeric or\n              Boolean types. Always use <span class=\"hue-doc-codeph\">CAST()</span> for these\n              conversions. </li><li> Impala does perform implicit casts among the numeric types,\n              when going from a smaller or less precise type to a larger or more\n              precise one. For example, Impala will implicitly convert a\n                <span class=\"hue-doc-codeph\">SMALLINT</span> to a <span class=\"hue-doc-codeph\">BIGINT</span> or\n                <span class=\"hue-doc-codeph\">FLOAT</span>, but to convert from\n                <span class=\"hue-doc-codeph\">DOUBLE</span> to <span class=\"hue-doc-codeph\">FLOAT</span> or\n                <span class=\"hue-doc-codeph\">INT</span> to <span class=\"hue-doc-codeph\">TINYINT</span> requires a call\n              to <span class=\"hue-doc-codeph\">CAST()</span> in the query. </li><li> Impala does perform implicit casts from string to timestamp.\n              Impala has a restricted set of literal formats for the\n                <span class=\"hue-doc-codeph\">TIMESTAMP</span> data type and the\n                <span class=\"hue-doc-codeph\">from_unixtime()</span> format string; see <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a> for details. </li></ul><p> See the topics under <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datatypes.xml\" data-doc-anchor-id=\"datatypes\">Data Types</a> for full details on\n            implicit and explicit casting for each data type, and <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_conversion_functions.xml\" data-doc-anchor-id=\"conversion_functions\">Impala Type Conversion Functions</a> for\n            details about the <span class=\"hue-doc-codeph\">CAST()</span> function. </p></li><li>\n          Impala does not store or interpret timestamps using the local timezone, to avoid undesired results from\n          unexpected time zone issues. Timestamps are stored and interpreted relative to UTC. This difference can\n          produce different results for some calls to similarly named date/time functions between Impala and Hive.\n          See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions\">Impala Date and Time Functions</a> for details about the Impala\n          functions. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a> for a discussion of how Impala handles\n          time zones, and configuration options you can use to make Impala match the Hive behavior more closely\n          when dealing with Parquet-encoded <span class=\"hue-doc-codeph\">TIMESTAMP</span> data or when converting between\n          the local time zone and UTC.\n        </li><li>\n          The Impala <span class=\"hue-doc-codeph\">TIMESTAMP</span> type can represent dates ranging from 1400-01-01 to 9999-12-31.\n          This is different from the Hive date range, which is 0000-01-01 to 9999-12-31.\n        </li><li><p id=\"int_overflow_behavior\">\n        Impala does not return column overflows as <span class=\"hue-doc-codeph\">NULL</span>, so that customers can\n        distinguish between <span class=\"hue-doc-codeph\">NULL</span> data and overflow conditions similar to how\n        they do so with traditional database systems. Impala returns the largest or smallest\n        value in the range for the type. For example, valid values for a\n        <span class=\"hue-doc-codeph\">tinyint</span> range from -128 to 127. In Impala, a <span class=\"hue-doc-codeph\">tinyint</span>\n        with a value of -200 returns -128 rather than <span class=\"hue-doc-codeph\">NULL</span>. A\n        <span class=\"hue-doc-codeph\">tinyint</span> with a value of 200 returns 127.\n      </p></li></ul><p><b>Miscellaneous features:</b></p><ul><li>\n          Impala does not provide virtual columns.\n        </li><li>\n          Impala does not expose locking.\n        </li><li>\n          Impala does not expose some configuration properties.\n        </li></ul></div></div></div></div>","title":"SQL Differences Between Impala and Hive"}