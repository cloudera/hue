{"body":"<div><div id=\"tablesample\"><div class=\"hue-doc-title\">TABLESAMPLE Clause</div><div><p>\n      Specify the <span class=\"hue-doc-codeph\">TABLESAMPLE</span> clause in cases where you need to explore the\n      data distribution within the table, the table is very large, and it is impractical or\n      unnecessary to process all the data from the table or selected partitions.\n    </p><p>\n      The clause makes the query process a randomized set of data files from the table, so that\n      the total volume of data is greater than or equal to the specified percentage of data\n      bytes within that table. (Or the data bytes within the set of partitions that remain after\n      partition pruning is performed.)\n    </p><p id=\"syntax_blurb\"><b>Syntax:</b></p><div class=\"hue-doc-codeblock\"><span class=\"hue-doc-ph\">TABLESAMPLE SYSTEM(<span class=\"hue-doc-varname\">percentage</span>) [REPEATABLE(<span class=\"hue-doc-varname\">seed</span>)]</span></div><p>\n      The <span class=\"hue-doc-codeph\">TABLESAMPLE</span> clause comes immediately after a table name or table\n      alias.\n    </p><p>\n      The <span class=\"hue-doc-codeph\">SYSTEM</span> keyword represents the sampling method. Currently, Impala only\n      supports a single sampling method named <span class=\"hue-doc-codeph\">SYSTEM</span>.\n    </p><p>\n      The <span class=\"hue-doc-varname\">percentage</span> argument is an integer literal from 0 to 100. A\n      percentage of 0 produces an empty result set for a particular table reference, while a\n      percentage of 100 uses the entire contents. Because the sampling works by selecting a\n      random set of data files, the proportion of sampled data from the table may be greater\n      than the specified percentage, based on the number and sizes of the underlying data files.\n      See the usage notes for details.\n    </p><p>\n      The optional <span class=\"hue-doc-codeph\">REPEATABLE</span> keyword lets you specify an arbitrary positive\n      integer seed value that ensures that when the query is run again, the sampling selects the\n      same set of data files each time. <span class=\"hue-doc-codeph\">REPEATABLE</span> does not have a default\n      value. If you omit the <span class=\"hue-doc-codeph\">REPEATABLE</span> keyword, the random seed is derived\n      from the current time.\n    </p><p id=\"added_in_290\"><b>Added in:</b>Impala 2.9.0</p><p>\n      See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_compute_stats.xml\" data-doc-anchor-id=\"compute_stats\">COMPUTE STATS Statement</a> for the <span class=\"hue-doc-codeph\">TABLESAMPLE</span> clause used in\n      the <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement.\n    </p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n      You might use this clause with aggregation queries, such as finding the approximate\n      average, minimum, or maximum where exact precision is not required. You can use these\n      findings to plan the most effective strategy for constructing queries against the full\n      table or designing a partitioning strategy for the data.\n    </p><p>\n      Some other database systems have a <span class=\"hue-doc-codeph\">TABLESAMPLE</span> clause. The Impala syntax\n      for this clause is modeled on the syntax for popular relational databases, not the Hive\n      <span class=\"hue-doc-codeph\">TABLESAMPLE</span> clause. For example, there is no <span class=\"hue-doc-codeph\">BUCKETS</span>\n      keyword as in HiveQL.\n    </p><p>\n      The precision of the <span class=\"hue-doc-varname\">percentage</span> threshold depends on the number and\n      sizes of the underlying data files. Impala brings in additional data files, one at a time,\n      until the number of bytes exceeds the specified percentage based on the total number of\n      bytes for the entire set of table data. The precision of the percentage threshold is\n      higher when the table contains many data files with consistent sizes. See the code\n      listings later in this section for examples.\n    </p><p>\n      When you estimate characteristics of the data distribution based on sampling a percentage\n      of the table data, be aware that the data might be unevenly distributed between different\n      files. Do not assume that the percentage figure reflects the percentage of rows in the\n      table. For example, one file might contain all blank values for a <span class=\"hue-doc-codeph\">STRING</span>\n      column, while another file contains long strings in that column; therefore, one file could\n      contain many more rows than another. Likewise, a table created with the <span class=\"hue-doc-codeph\">SORT\n      BY</span> clause might contain narrow ranges of values for the sort columns, making it\n      impractical to extrapolate the number of distinct values for those columns based on\n      sampling only some of the data files.\n    </p><p>\n      Because a sample of the table data might not contain all values for a particular column,\n      if the <span class=\"hue-doc-codeph\">TABLESAMPLE</span> is used in a join query, the key relationships between\n      the tables might produce incomplete result sets compared to joins using all the table\n      data. For example, if you join 50% of table A with 50% of table B, some values in the join\n      columns might not match between the two tables, even though overall there is a 1:1\n      relationship between the tables.\n    </p><p>\n      The <span class=\"hue-doc-codeph\">REPEATABLE</span> keyword makes identical queries use a consistent set of\n      data files when the query is repeated. You specify an arbitrary integer key that acts as a\n      seed value when Impala randomly selects the set of data files to use in the query. This\n      technique lets you verify correctness, examine performance, and so on for queries using\n      the <span class=\"hue-doc-codeph\">TABLESAMPLE</span> clause without the sampled data being different each\n      time. The repeatable aspect is reset (that is, the set of selected data files may change)\n      any time the contents of the table change. The statements or operations that can make\n      sampling results non-repeatable are:\n    </p><ul><li><span class=\"hue-doc-codeph\">INSERT</span>.\n      </li><li><span class=\"hue-doc-codeph\">TRUNCATE TABLE</span>.\n      </li><li><span class=\"hue-doc-codeph\">LOAD DATA</span>.\n      </li><li><span class=\"hue-doc-codeph\">REFRESH</span> or <span class=\"hue-doc-codeph\">INVALIDATE METADATA</span> after files are added\n        or removed by a non-Impala mechanism.\n      </li><li/></ul><p>\n      This clause is similar in some ways to the <span class=\"hue-doc-codeph\">LIMIT</span> clause, because both\n      serve to limit the size of the intermediate data and final result set. <span class=\"hue-doc-codeph\">LIMIT\n      0</span> is more efficient than <span class=\"hue-doc-codeph\">TABLESAMPLE SYSTEM(0)</span> for verifying\n      that a query can execute without producing any results. <span class=\"hue-doc-codeph\">TABLESAMPLE\n      SYSTEM(<span class=\"hue-doc-varname\">n</span>)</span> often makes query processing more efficient than\n      using a <span class=\"hue-doc-codeph\">LIMIT</span> clause by itself, because all phases of query execution use\n      less data overall. If the intent is to retrieve some representative values from the table\n      in an efficient way, you might combine <span class=\"hue-doc-codeph\">TABLESAMPLE</span>, <span class=\"hue-doc-codeph\">ORDER\n      BY</span>, and <span class=\"hue-doc-codeph\">LIMIT</span> clauses within a single query.\n    </p><p id=\"partitioning_blurb\"><b>Partitioning:</b></p><p>\n      When you query a partitioned table, any partition pruning happens before Impala selects\n      the data files to sample. For example, in a table partitioned by year, a query with\n      <span class=\"hue-doc-codeph\">WHERE year = 2017</span> and a <span class=\"hue-doc-codeph\">TABLESAMPLE SYSTEM(10)</span> clause\n      would sample data files representing at least 10% of the bytes present in the 2017\n      partition.\n    </p><p id=\"s3_blurb\"><b>Amazon S3 considerations:</b></p><p>\n      This clause applies to S3 tables the same way as tables with data files stored on HDFS.\n    </p><p id=\"adls_blurb\"><b>ADLS considerations:</b></p><p>\n      This clause applies to ADLS tables the same way as tables with data files stored on HDFS.\n    </p><p id=\"kudu_blurb\"><b>Kudu considerations:</b></p><p>\n      This clause does not apply to Kudu tables.\n    </p><p id=\"hbase_blurb\"><b>HBase considerations:</b></p><p>\n      This clause does not apply to HBase tables.\n    </p><p id=\"performance_blurb\"><b>Performance considerations:</b></p><p>\n      From a performance perspective, the <span class=\"hue-doc-codeph\">TABLESAMPLE</span> clause is especially\n      valuable for exploratory queries on text, Avro, or other file formats other than Parquet.\n      Text-based or row-oriented file formats must process substantial amounts of redundant data\n      for queries that derive aggregate results such as <span class=\"hue-doc-codeph\">MAX()</span>,\n      <span class=\"hue-doc-codeph\">MIN()</span>, or <span class=\"hue-doc-codeph\">AVG()</span> for a single column. Therefore, you\n      might use <span class=\"hue-doc-codeph\">TABLESAMPLE</span> early in the ETL pipeline, when data is still in\n      raw text format and has not been converted to Parquet or moved into a partitioned table.\n    </p><p id=\"restrictions_blurb\"><b>Restrictions:</b></p><p>\n      This clause applies only to tables that use a storage layer with underlying raw data\n      files, such as HDFS, Amazon S3, or Microsoft ADLS.\n    </p><p>\n      This clause does not apply to table references that represent views. A query that applies\n      the <span class=\"hue-doc-codeph\">TABLESAMPLE</span> clause to a view or a subquery fails with a semantic\n      error.\n    </p><p>\n      Because the sampling works at the level of entire data files, it is by nature\n      coarse-grained. It is possible to specify a small sample percentage but still process a\n      substantial portion of the table data if the table contains relatively few data files, if\n      each data file is very large, or if the data files vary substantially in size. Be sure\n      that you understand the data distribution and physical file layout so that you can verify\n      if the results are suitable for extrapolation. For example, if the table contains only a\n      single data file, the <q>sample</q> will consist of all the table data regardless of the\n      percentage you specify. If the table contains data files of 1 GiB, 1 GiB, and 1 KiB, when\n      you specify a sampling percentage of 50 you would either process slightly more than 50% of\n      the table (1 GiB + 1 KiB) or almost the entire table (1 GiB + 1 GiB), depending on which\n      data files were selected for sampling.\n    </p><p>\n      If data files are added by a non-Impala mechanism, and the table metadata is not updated\n      by a <span class=\"hue-doc-codeph\">REFRESH</span> or <span class=\"hue-doc-codeph\">INVALIDATE METADATA</span> statement, the\n      <span class=\"hue-doc-codeph\">TABLESAMPLE</span> clause does not consider those new files when computing the\n      number of bytes in the table or selecting which files to sample.\n    </p><p>\n      If data files are removed by a non-Impala mechanism, and the table metadata is not updated\n      by a <span class=\"hue-doc-codeph\">REFRESH</span> or <span class=\"hue-doc-codeph\">INVALIDATE METADATA</span> statement, the query\n      fails if the <span class=\"hue-doc-codeph\">TABLESAMPLE</span> clause attempts to reference any of the missing\n      files.\n    </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n      The following examples demonstrate the <span class=\"hue-doc-codeph\">TABLESAMPLE</span> clause. These examples\n      intentionally use very small data sets to illustrate how the number of files, size of each\n      file, and overall size of data in the table interact with the percentage specified in the\n      clause.\n    </p><p>\n      These examples use an unpartitioned table, containing several files of roughly the same\n      size:\n    </p><div class=\"hue-doc-codeblock\">create table sample_demo (x int, s string);\n\ninsert into sample_demo values (1, 'one');\ninsert into sample_demo values (2, 'two');\ninsert into sample_demo values (3, 'three');\ninsert into sample_demo values (4, 'four');\ninsert into sample_demo values (5, 'five');\n\nshow files in sample_demo;\n+---------------------+------+-----------+\n| Path                | Size | Partition |\n+---------------------+------+-----------+\n| 991213608_data.0.   | 7B   |           |\n| 982196806_data.0.   | 6B   |           |\n| _2122096884_data.0. | 8B   |           |\n| _586325431_data.0.  | 6B   |           |\n| 1894746258_data.0.  | 7B   |           |\n+---------------------+------+-----------+\n\nshow table stats sample_demo;\n+-------+--------+------+--------+-------------------------+\n| #Rows | #Files | Size | Format | Location                |\n+-------+--------+------+--------+-------------------------+\n| -1    | 5      | 34B  | TEXT   | /tsample.db/sample_demo |\n+-------+--------+------+--------+-------------------------+</div><p>\n      A query that samples 50% of the table must process at least 17 bytes of data. Based on the\n      sizes of the data files, we can predict that each such query uses 3 arbitrary files. Any 1\n      or 2 files are not enough to reach 50% of the total data in the table (34 bytes), so the\n      query adds more files until it passes the 50% threshold:\n    </p><div class=\"hue-doc-codeblock\">select distinct x from sample_demo tablesample system(50);\n+---+\n| x |\n+---+\n| 4 |\n| 1 |\n| 5 |\n+---+\n\nselect distinct x from sample_demo tablesample system(50);\n+---+\n| x |\n+---+\n| 5 |\n| 4 |\n| 2 |\n+---+\n\nselect distinct x from sample_demo tablesample system(50);\n+---+\n| x |\n+---+\n| 5 |\n| 3 |\n| 2 |\n+---+</div><p>\n      To help run reproducible experiments, the <span class=\"hue-doc-codeph\">REPEATABLE</span> clause causes Impala\n      to choose the same set of files for each query. Although the data set being considered is\n      deterministic, the order of results varies (in the absence of an <span class=\"hue-doc-codeph\">ORDER BY</span>\n      clause) because of the way distributed queries are processed:\n    </p><div class=\"hue-doc-codeblock\">select distinct x from sample_demo\n  tablesample system(50) repeatable (12345);\n+---+\n| x |\n+---+\n| 3 |\n| 2 |\n| 1 |\n+---+\n\nselect distinct x from sample_demo\n  tablesample system(50) repeatable (12345);\n+---+\n| x |\n+---+\n| 2 |\n| 1 |\n| 3 |\n+---+\n</div><p>\n      The following examples show how uneven data distribution affects which data is sampled.\n      Adding another data file containing a long string value changes the threshold for 50% of\n      the total data in the table:\n    </p><div class=\"hue-doc-codeblock\">insert into sample_demo values\n(1000, 'Boyhood is the longest time in life for a boy. The last term of the school-year is made of decades, not of weeks, and living through them is like waiting for the millennium. Booth Tarkington');\n\nshow files in sample_demo;\n+---------------------+------+-----------+\n| Path                | Size | Partition |\n+---------------------+------+-----------+\n| 991213608_data.0.   | 7B   |           |\n| 982196806_data.0.   | 6B   |           |\n| _253317650_data.0.  | 196B |           |\n| _2122096884_data.0. | 8B   |           |\n| _586325431_data.0.  | 6B   |           |\n| 1894746258_data.0.  | 7B   |           |\n+---------------------+------+-----------+\n\nshow table stats sample_demo;\n+-------+--------+------+--------+-------------------------+\n| #Rows | #Files | Size | Format | Location                |\n+-------+--------+------+--------+-------------------------+\n| -1    | 6      | 230B | TEXT   | /tsample.db/sample_demo |\n+-------+--------+------+--------+-------------------------+\n</div><p>\n      Even though the queries do not refer to the <span class=\"hue-doc-codeph\">S</span> column containing the long\n      value, all the sampling queries include the data file containing the column value\n      <span class=\"hue-doc-codeph\">X=1000</span>, because the query cannot reach the 50% threshold (115 bytes)\n      without including that file. The large file might be considered first, in which case it is\n      the only file processed by the query. Or an arbitrary set of other files might be\n      considered first.\n    </p><div class=\"hue-doc-codeblock\">select distinct x from sample_demo tablesample system(50);\n+------+\n| x    |\n+------+\n| 1000 |\n| 3    |\n| 1    |\n+------+\n\nselect distinct x from sample_demo tablesample system(50);\n+------+\n| x    |\n+------+\n| 1000 |\n+------+\n\nselect distinct x from sample_demo tablesample system(50);\n+------+\n| x    |\n+------+\n| 1000 |\n| 4    |\n| 2    |\n| 1    |\n+------+</div><p>\n      The following examples demonstrate how the <span class=\"hue-doc-codeph\">TABLESAMPLE</span> clause interacts\n      with other table aspects, such as partitioning and file format:\n    </p><div class=\"hue-doc-codeblock\">create table sample_demo_partitions (x int, s string) partitioned by (n int) stored as parquet;\n\ninsert into sample_demo_partitions partition (n = 1) select * from sample_demo;\ninsert into sample_demo_partitions partition (n = 2) select * from sample_demo;\ninsert into sample_demo_partitions partition (n = 3) select * from sample_demo;\n\nshow files in sample_demo_partitions;\n+--------------------------------+--------+-----------+\n| Path                           | Size   | Partition |\n+--------------------------------+--------+-----------+\n| 000000_364262785_data.0.parq   | 1.24KB | n=1       |\n| 000001_973526736_data.0.parq   | 566B   | n=1       |\n| 0000000_1300598134_data.0.parq | 1.24KB | n=2       |\n| 0000001_689099063_data.0.parq  | 568B   | n=2       |\n| 0000000_1861371709_data.0.parq | 1.24KB | n=3       |\n| 0000001_1065507912_data.0.parq | 566B   | n=3       |\n+--------------------------------+--------+-----------+\n\nshow table stats tablesample_demo_partitioned;\n+-------+-------+--------+--------+---------+----------------------------------------------+\n| n     | #Rows | #Files | Size   | Format  | Location                                     |\n+-------+-------+--------+--------+---------+----------------------------------------------+\n| 1     | -1    | 2      | 1.79KB | PARQUET | /tsample.db/tablesample_demo_partitioned/n=1 |\n| 2     | -1    | 2      | 1.80KB | PARQUET | /tsample.db/tablesample_demo_partitioned/n=2 |\n| 3     | -1    | 2      | 1.79KB | PARQUET | /tsample.db/tablesample_demo_partitioned/n=3 |\n| Total | -1    | 6      | 5.39KB |         |                                              |\n+-------+-------+--------+--------+---------+----------------------------------------------+\n</div><p>\n      If the query does not involve any partition pruning, the sampling applies to the data\n      volume of the entire table:\n    </p><div class=\"hue-doc-codeblock\">-- 18 rows total.\nselect count(*) from sample_demo_partitions;\n+----------+\n| count(*) |\n+----------+\n| 18       |\n+----------+\n\n-- The number of rows per data file is not\n-- perfectly balanced, therefore the count\n-- is different depending on which set of files\n-- is considered.\nselect count(*) from sample_demo_partitions\n  tablesample system(75);\n+----------+\n| count(*) |\n+----------+\n| 14       |\n+----------+\n\nselect count(*) from sample_demo_partitions\n  tablesample system(75);\n+----------+\n| count(*) |\n+----------+\n| 16       |\n+----------+</div><p>\n      If the query only processes certain partitions, the query computes the sampling threshold\n      based on the data size and set of files only from the relevant partitions:\n    </p><div class=\"hue-doc-codeblock\">select count(*) from sample_demo_partitions\n  tablesample system(50) where n = 1;\n+----------+\n| count(*) |\n+----------+\n| 6        |\n+----------+\n\nselect count(*) from sample_demo_partitions\n  tablesample system(50) where n = 1;\n+----------+\n| count(*) |\n+----------+\n| 2        |\n+----------+\n</div><p id=\"related_info\"><b>Related information:</b></p><p><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_select.xml\" data-doc-anchor-id=\"select\">SELECT Statement</a></p></div></div></div>","title":"TABLESAMPLE Clause"}