{"body":"<div><div><div class=\"hue-doc-title\">MEM_LIMIT Query Option</div><div><p>\n      The MEM_LIMIT query option defines the maximum amount of memory a query\n      can allocate on each node. The total memory that can be used by a query is\n      the <span class=\"hue-doc-codeph\">MEM_LIMIT</span> times the number of nodes.\n    </p><p>\n      There are two levels of memory limit for Impala.\n      The <span class=\"hue-doc-codeph\">-mem_limit</span> startup option sets an overall limit for the <span class=\"hue-doc-cmdname\">impalad</span> process\n      (which handles multiple queries concurrently).\n      That limit is typically expressed in terms of a percentage of the RAM available on the host, such as <span class=\"hue-doc-codeph\">-mem_limit=70%</span>.\n      The <span class=\"hue-doc-codeph\">MEM_LIMIT</span> query option, which you set through <span class=\"hue-doc-cmdname\">impala-shell</span>\n      or the <span class=\"hue-doc-codeph\">SET</span> statement in a JDBC or ODBC application, applies to each individual query.\n      The <span class=\"hue-doc-codeph\">MEM_LIMIT</span> query option is usually expressed as a fixed size such as <span class=\"hue-doc-codeph\">10gb</span>,\n      and must always be less than the <span class=\"hue-doc-cmdname\">impalad</span> memory limit.\n    </p><p>\n      If query processing exceeds the specified memory limit on any node, either the per-query limit or the\n      <span class=\"hue-doc-cmdname\">impalad</span> limit, Impala cancels the query automatically.\n      Memory limits are checked periodically during query processing, so the actual memory in use\n      might briefly exceed the limit without the query being cancelled.\n    </p><p><b>Type:</b> numeric\n    </p><p><b>Units:</b> A numeric argument represents memory size in bytes; you can also use a suffix of <span class=\"hue-doc-codeph\">m</span> or <span class=\"hue-doc-codeph\">mb</span>\n      for megabytes, or more commonly <span class=\"hue-doc-codeph\">g</span> or <span class=\"hue-doc-codeph\">gb</span> for gigabytes. If you specify a value with unrecognized\n      formats, subsequent queries fail with an error.\n    </p><p><b>Default:</b> 0 (unlimited)\n    </p><p><b>Usage notes:</b></p><p>\n      The <span class=\"hue-doc-codeph\">MEM_LIMIT</span> setting is primarily useful in a high-concurrency setting,\n      or on a cluster with a workload shared between Impala and other data processing components.\n      You can prevent any query from accidentally using much more memory than expected,\n      which could negatively impact other Impala queries.\n    </p><p>\n      Use the output of the <span class=\"hue-doc-codeph\">SUMMARY</span> command in <span class=\"hue-doc-cmdname\">impala-shell</span>\n      to get a report of memory used for each phase of your most heavyweight queries on each node,\n      and then set a <span class=\"hue-doc-codeph\">MEM_LIMIT</span> somewhat higher than that.\n      See <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_explain_plan.html#perf_summary\" target=\"_blank\">Using the SUMMARY Report for Performance Tuning</a> for usage information about\n      the <span class=\"hue-doc-codeph\">SUMMARY</span> command.\n    </p><p><b>Examples:</b></p><p>\n      The following examples show how to set the <span class=\"hue-doc-codeph\">MEM_LIMIT</span> query option\n      using a fixed number of bytes, or suffixes representing gigabytes or megabytes.\n    </p><div class=\"hue-doc-codeblock\">\n[localhost:21000] &gt; set mem_limit=3000000000;\nMEM_LIMIT set to 3000000000\n[localhost:21000] &gt; select 5;\nQuery: select 5\n+---+\n| 5 |\n+---+\n| 5 |\n+---+\n\n[localhost:21000] &gt; set mem_limit=3g;\nMEM_LIMIT set to 3g\n[localhost:21000] &gt; select 5;\nQuery: select 5\n+---+\n| 5 |\n+---+\n| 5 |\n+---+\n\n[localhost:21000] &gt; set mem_limit=3gb;\nMEM_LIMIT set to 3gb\n[localhost:21000] &gt; select 5;\n+---+\n| 5 |\n+---+\n| 5 |\n+---+\n\n[localhost:21000] &gt; set mem_limit=3m;\nMEM_LIMIT set to 3m\n[localhost:21000] &gt; select 5;\n+---+\n| 5 |\n+---+\n| 5 |\n+---+\n[localhost:21000] &gt; set mem_limit=3mb;\nMEM_LIMIT set to 3mb\n[localhost:21000] &gt; select 5;\n+---+\n| 5 |\n+---+\n</div><p>\n      The following examples show how unrecognized <span class=\"hue-doc-codeph\">MEM_LIMIT</span>\n      values lead to errors for subsequent queries.\n    </p><div class=\"hue-doc-codeblock\">\n[localhost:21000] &gt; set mem_limit=3tb;\nMEM_LIMIT set to 3tb\n[localhost:21000] &gt; select 5;\nERROR: Failed to parse query memory limit from '3tb'.\n\n[localhost:21000] &gt; set mem_limit=xyz;\nMEM_LIMIT set to xyz\n[localhost:21000] &gt; select 5;\nQuery: select 5\nERROR: Failed to parse query memory limit from 'xyz'.\n</div><p>\n      The following examples shows the automatic query cancellation\n      when the <span class=\"hue-doc-codeph\">MEM_LIMIT</span> value is exceeded\n      on any host involved in the Impala query. First it runs a\n      successful query and checks the largest amount of memory\n      used on any node for any stage of the query.\n      Then it sets an artificially low <span class=\"hue-doc-codeph\">MEM_LIMIT</span>\n      setting so that the same query cannot run.\n    </p><div class=\"hue-doc-codeblock\">\n[localhost:21000] &gt; select count(*) from customer;\nQuery: select count(*) from customer\n+----------+\n| count(*) |\n+----------+\n| 150000   |\n+----------+\n\n[localhost:21000] &gt; select count(distinct c_name) from customer;\nQuery: select count(distinct c_name) from customer\n+------------------------+\n| count(distinct c_name) |\n+------------------------+\n| 150000                 |\n+------------------------+\n\n[localhost:21000] &gt; summary;\n+--------------+--------+----------+----------+---------+------------+----------+---------------+---------------+\n| Operator     | #Hosts | Avg Time | Max Time | #Rows   | Est. #Rows | Peak Mem | Est. Peak Mem | Detail        |\n+--------------+--------+----------+----------+---------+------------+----------+---------------+---------------+\n| 06:AGGREGATE | 1      | 230.00ms | 230.00ms | 1       | 1          | 16.00 KB | -1 B          | FINALIZE      |\n| 05:EXCHANGE  | 1      | 43.44us  | 43.44us  | 1       | 1          | 0 B      | -1 B          | UNPARTITIONED |\n| 02:AGGREGATE | 1      | 227.14ms | 227.14ms | 1       | 1          | 12.00 KB | 10.00 MB      |               |\n| 04:AGGREGATE | 1      | 126.27ms | 126.27ms | 150.00K | 150.00K    | 15.17 MB | 10.00 MB      |               |\n| 03:EXCHANGE  | 1      | 44.07ms  | 44.07ms  | 150.00K | 150.00K    | 0 B      | 0 B           | HASH(c_name)  |\n<b>| 01:AGGREGATE | 1      | 361.94ms | 361.94ms | 150.00K | 150.00K    | 23.04 MB | 10.00 MB      |               |</b>\n| 00:SCAN HDFS | 1      | 43.64ms  | 43.64ms  | 150.00K | 150.00K    | 24.19 MB | 64.00 MB      | tpch.customer |\n+--------------+--------+----------+----------+---------+------------+----------+---------------+---------------+\n\n[localhost:21000] &gt; set mem_limit=15mb;\nMEM_LIMIT set to 15mb\n[localhost:21000] &gt; select count(distinct c_name) from customer;\nQuery: select count(distinct c_name) from customer\nERROR:\nMemory limit exceeded\nQuery did not have enough memory to get the minimum required buffers in the block manager.\n</div></div></div></div>","title":"MEM_LIMIT Query Option"}