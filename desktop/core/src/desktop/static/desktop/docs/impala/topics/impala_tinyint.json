{"body":"<div><div id=\"tinyint\"><div class=\"hue-doc-title\">TINYINT Data Type</div><div><p>\n      A 1-byte integer data type used in <span class=\"hue-doc-codeph\">CREATE TABLE</span> and <span class=\"hue-doc-codeph\">ALTER TABLE</span> statements.\n    </p><p id=\"syntax_blurb\"><b>Syntax:</b></p><p>\n      In the column definition of a <span class=\"hue-doc-codeph\">CREATE TABLE</span> statement:\n    </p><div class=\"hue-doc-codeblock\"><span class=\"hue-doc-varname\">column_name</span> TINYINT</div><p><b>Range:</b> -128 .. 127. There is no <span class=\"hue-doc-codeph\">UNSIGNED</span> subtype.\n    </p><p><b>Conversions:</b> Impala automatically converts to a larger integer type (<span class=\"hue-doc-codeph\">SMALLINT</span>,\n      <span class=\"hue-doc-codeph\">INT</span>, or <span class=\"hue-doc-codeph\">BIGINT</span>) or a floating-point type (<span class=\"hue-doc-codeph\">FLOAT</span> or\n      <span class=\"hue-doc-codeph\">DOUBLE</span>) automatically. Use <span class=\"hue-doc-codeph\">CAST()</span> to convert to <span class=\"hue-doc-codeph\">STRING</span> or\n      <span class=\"hue-doc-codeph\">TIMESTAMP</span>.\n      <span class=\"hue-doc-ph\" id=\"cast_int_to_timestamp\"> Casting an integer or floating-point value\n        <span class=\"hue-doc-codeph\">N</span> to <span class=\"hue-doc-codeph\">TIMESTAMP</span> produces a value that is\n        <span class=\"hue-doc-codeph\">N</span> seconds past the start of the epoch date (January 1, 1970). By\n        default, the result value represents a date and time in the UTC time zone. If the\n        setting <span class=\"hue-doc-codeph\">‑‑use_local_tz_for_unix_timestamp_conversions=true</span>\n        is in effect, the resulting <span class=\"hue-doc-codeph\">TIMESTAMP</span> represents a date and time in the\n        local time zone. </span></p><p id=\"int_overflow_behavior\">\n        Impala does not return column overflows as <span class=\"hue-doc-codeph\">NULL</span>, so that customers can\n        distinguish between <span class=\"hue-doc-codeph\">NULL</span> data and overflow conditions similar to how\n        they do so with traditional database systems. Impala returns the largest or smallest\n        value in the range for the type. For example, valid values for a\n        <span class=\"hue-doc-codeph\">tinyint</span> range from -128 to 127. In Impala, a <span class=\"hue-doc-codeph\">tinyint</span>\n        with a value of -200 returns -128 rather than <span class=\"hue-doc-codeph\">NULL</span>. A\n        <span class=\"hue-doc-codeph\">tinyint</span> with a value of 200 returns 127.\n      </p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n      For a convenient and automated way to check the bounds of the <span class=\"hue-doc-codeph\">TINYINT</span> type, call the\n      functions <span class=\"hue-doc-codeph\">MIN_TINYINT()</span> and <span class=\"hue-doc-codeph\">MAX_TINYINT()</span>.\n    </p><p>\n      If an integer value is too large to be represented as a <span class=\"hue-doc-codeph\">TINYINT</span>, use a\n      <span class=\"hue-doc-codeph\">SMALLINT</span> instead.\n    </p><p id=\"null_bad_numeric_cast\"><b>NULL considerations:</b> Casting any non-numeric value to this type produces a\n        <span class=\"hue-doc-codeph\">NULL</span> value.\n      </p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">CREATE TABLE t1 (x TINYINT);\nSELECT CAST(100 AS TINYINT);\n</div><p id=\"parquet_blurb\"><b>Parquet considerations:</b></p><p>\n      Physically, Parquet files represent <span class=\"hue-doc-codeph\">TINYINT</span> and <span class=\"hue-doc-codeph\">SMALLINT</span> values as 32-bit\n      integers. Although Impala rejects attempts to insert out-of-range values into such columns, if you create a\n      new table with the <span class=\"hue-doc-codeph\">CREATE TABLE ... LIKE PARQUET</span> syntax, any <span class=\"hue-doc-codeph\">TINYINT</span> or\n      <span class=\"hue-doc-codeph\">SMALLINT</span> columns in the original table turn into <span class=\"hue-doc-codeph\">INT</span> columns in the new\n      table.\n    </p><p id=\"hbase_ok\"><b>HBase considerations:</b> This data type is fully compatible with HBase tables.\n      </p><p id=\"text_bulky\"><b>Text table considerations:</b> Values of this type are potentially larger in text\n        tables than in tables using Parquet or other binary formats.\n      </p><p id=\"internals_1_bytes\"><b>Internal details:</b> Represented in memory as a 1-byte value.\n      </p><p id=\"added_forever\"><b>Added in:</b> Available in all versions of Impala.\n      </p><p id=\"column_stats_constant\"><b>Column statistics considerations:</b> Because this type has a fixed size, the maximum\n        and average size fields are always filled in for column statistics, even before you run\n        the <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement.\n      </p><p id=\"related_info\"><b>Related information:</b></p><p><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_literals.xml\" data-doc-anchor-id=\"numeric_literals\">Numeric Literals</a>, <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_tinyint.xml\" data-doc-anchor-id=\"tinyint\">TINYINT Data Type</a>,\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_smallint.xml\" data-doc-anchor-id=\"smallint\">SMALLINT Data Type</a>, <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_int.xml\" data-doc-anchor-id=\"int\">INT Data Type</a>,\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_bigint.xml\" data-doc-anchor-id=\"bigint\">BIGINT Data Type</a>, <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_decimal.xml\" data-doc-anchor-id=\"decimal\">DECIMAL Data Type (Impala 3.0 or higher only)</a>,\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions\">Impala Mathematical Functions</a></p></div></div></div>","title":"TINYINT Data Type"}