{"body":"<div><div><div class=\"hue-doc-title\">Impala Conditional Functions</div><div><p>\n      Impala supports the following conditional functions for testing equality, comparison operators, and nullity:\n    </p><dl><dt><span class=\"hue-doc-codeph\">CASE a WHEN b THEN c [WHEN d THEN e]... [ELSE f] END</span></dt><dd><b>Purpose:</b> Compares an expression to one or more possible values, and returns a corresponding result\n          when a match is found.\n          <p><b>Return type:</b> same as the initial argument value, except that integer values are promoted to\n        <span class=\"hue-doc-codeph\">BIGINT</span> and floating-point values are promoted to <span class=\"hue-doc-codeph\">DOUBLE</span>; use\n        <span class=\"hue-doc-codeph\">CAST()</span> when inserting into a smaller numeric column\n      </p><p><b>Usage notes:</b></p><p>\n            In this form of the <span class=\"hue-doc-codeph\">CASE</span> expression, the initial value <span class=\"hue-doc-codeph\">A</span>\n            being evaluated for each row it typically a column reference, or an expression involving\n            a column. This form can only compare against a set of specified values, not ranges,\n            multi-value comparisons such as <span class=\"hue-doc-codeph\">BETWEEN</span> or <span class=\"hue-doc-codeph\">IN</span>,\n            regular expressions, or <span class=\"hue-doc-codeph\">NULL</span>.\n          </p><p><b>Examples:</b></p><p>\n            Although this example is split across multiple lines, you can put any or all parts of a <span class=\"hue-doc-codeph\">CASE</span> expression\n            on a single line, with no punctuation or other separators between the <span class=\"hue-doc-codeph\">WHEN</span>,\n            <span class=\"hue-doc-codeph\">ELSE</span>, and <span class=\"hue-doc-codeph\">END</span> clauses.\n          </p><div class=\"hue-doc-codeblock\">select case x\n    when 1 then 'one'\n    when 2 then 'two'\n    when 0 then 'zero'\n    else 'out of range'\n  end\n    from t1;\n</div></dd><dt><span class=\"hue-doc-codeph\">CASE WHEN a THEN b [WHEN c THEN d]... [ELSE e] END</span></dt><dd><b>Purpose:</b> Tests whether any of a sequence of expressions is true, and returns a corresponding\n          result for the first true expression.\n          <p><b>Return type:</b> same as the initial argument value, except that integer values are promoted to\n        <span class=\"hue-doc-codeph\">BIGINT</span> and floating-point values are promoted to <span class=\"hue-doc-codeph\">DOUBLE</span>; use\n        <span class=\"hue-doc-codeph\">CAST()</span> when inserting into a smaller numeric column\n      </p><p><b>Usage notes:</b></p><p><span class=\"hue-doc-codeph\">CASE</span> expressions without an initial test value have more flexibility.\n            For example, they can test different columns in different <span class=\"hue-doc-codeph\">WHEN</span> clauses,\n            or use comparison operators such as <span class=\"hue-doc-codeph\">BETWEEN</span>, <span class=\"hue-doc-codeph\">IN</span> and <span class=\"hue-doc-codeph\">IS NULL</span>\n            rather than comparing against discrete values.\n          </p><p><span class=\"hue-doc-codeph\">CASE</span> expressions are often the foundation of long queries that\n            summarize and format results for easy-to-read reports. For example, you might\n            use a <span class=\"hue-doc-codeph\">CASE</span> function call to turn values from a numeric column\n            into category strings corresponding to integer values, or labels such as <q>Small</q>,\n            <q>Medium</q> and <q>Large</q> based on ranges. Then subsequent parts of the\n            query might aggregate based on the transformed values, such as how many\n            values are classified as small, medium, or large. You can also use <span class=\"hue-doc-codeph\">CASE</span>\n            to signal problems with out-of-bounds values, <span class=\"hue-doc-codeph\">NULL</span> values,\n            and so on.\n          </p><p>\n            By using operators such as <span class=\"hue-doc-codeph\">OR</span>, <span class=\"hue-doc-codeph\">IN</span>,\n            <span class=\"hue-doc-codeph\">REGEXP</span>, and so on in <span class=\"hue-doc-codeph\">CASE</span> expressions,\n            you can build extensive tests and transformations into a single query.\n            Therefore, applications that construct SQL statements often rely heavily on <span class=\"hue-doc-codeph\">CASE</span>\n            calls in the generated SQL code.\n          </p><p>\n            Because this flexible form of the <span class=\"hue-doc-codeph\">CASE</span> expressions allows you to perform\n            many comparisons and call multiple functions when evaluating each row, be careful applying\n            elaborate <span class=\"hue-doc-codeph\">CASE</span> expressions to queries that process large amounts of data.\n            For example, when practical, evaluate and transform values through <span class=\"hue-doc-codeph\">CASE</span>\n            after applying operations such as aggregations that reduce the size of the result set;\n            transform numbers to strings after performing joins with the original numeric values.\n          </p><p><b>Examples:</b></p><p>\n            Although this example is split across multiple lines, you can put any or all parts of a <span class=\"hue-doc-codeph\">CASE</span> expression\n            on a single line, with no punctuation or other separators between the <span class=\"hue-doc-codeph\">WHEN</span>,\n            <span class=\"hue-doc-codeph\">ELSE</span>, and <span class=\"hue-doc-codeph\">END</span> clauses.\n          </p><div class=\"hue-doc-codeblock\">select case\n    when dayname(now()) in ('Saturday','Sunday') then 'result undefined on weekends'\n    when x &gt; y then 'x greater than y'\n    when x = y then 'x and y are equal'\n    when x is null or y is null then 'one of the columns is null'\n    else null\n  end\n    from t1;\n</div></dd><dt><span class=\"hue-doc-codeph\">coalesce(type v1, type v2, ...)</span></dt><dd><b>Purpose:</b> Returns the first specified argument that is not <span class=\"hue-doc-codeph\">NULL</span>, or\n          <span class=\"hue-doc-codeph\">NULL</span> if all arguments are <span class=\"hue-doc-codeph\">NULL</span>.\n          <p><b>Return type:</b> same as the initial argument value, except that integer values are promoted to\n        <span class=\"hue-doc-codeph\">BIGINT</span> and floating-point values are promoted to <span class=\"hue-doc-codeph\">DOUBLE</span>; use\n        <span class=\"hue-doc-codeph\">CAST()</span> when inserting into a smaller numeric column\n      </p></dd><dt><span class=\"hue-doc-codeph\">decode(type expression, type search1, type result1 [, type search2, type result2 ...] [, type\n          default] )</span></dt><dd><b>Purpose:</b> Compares an expression to one or more possible values, and returns a corresponding result\n          when a match is found.\n          <p><b>Return type:</b> same as the initial argument value, except that integer values are promoted to\n        <span class=\"hue-doc-codeph\">BIGINT</span> and floating-point values are promoted to <span class=\"hue-doc-codeph\">DOUBLE</span>; use\n        <span class=\"hue-doc-codeph\">CAST()</span> when inserting into a smaller numeric column\n      </p><p><b>Usage notes:</b></p><p>\n            Can be used as shorthand for a <span class=\"hue-doc-codeph\">CASE</span> expression.\n          </p><p>\n            The original expression and the search expressions must of the same type or convertible types. The\n            result expression can be a different type, but all result expressions must be of the same type.\n          </p><p>\n            Returns a successful match If the original expression is <span class=\"hue-doc-codeph\">NULL</span> and a search expression\n            is also <span class=\"hue-doc-codeph\">NULL</span>. the\n          </p><p>\n            Returns <span class=\"hue-doc-codeph\">NULL</span> if the final <span class=\"hue-doc-codeph\">default</span> value is omitted and none of the\n            search expressions match the original expression.\n          </p><p><b>Examples:</b></p><p>\n            The following example translates numeric day values into descriptive names:\n          </p><div class=\"hue-doc-codeblock\">SELECT event, decode(day_of_week, 1, \"Monday\", 2, \"Tuesday\", 3, \"Wednesday\",\n  4, \"Thursday\", 5, \"Friday\", 6, \"Saturday\", 7, \"Sunday\", \"Unknown day\")\n  FROM calendar;\n</div></dd><dt><span class=\"hue-doc-codeph\">if(boolean condition, type ifTrue, type ifFalseOrNull)</span></dt><dd><b>Purpose:</b> Tests an expression and returns a corresponding result depending on whether the result is\n          true, false, or <span class=\"hue-doc-codeph\">NULL</span>.\n          <p><b>Return type:</b> Same as the <span class=\"hue-doc-codeph\">ifTrue</span> argument value\n          </p></dd><dt><span class=\"hue-doc-codeph\">ifnull(type a, type ifNull)</span></dt><dd><b>Purpose:</b> Alias for the <span class=\"hue-doc-codeph\">isnull()</span> function, with the same behavior. To simplify\n          porting SQL with vendor extensions to Impala.\n          <p><b>Added in:</b> Impala 1.3.0\n      </p></dd><dt><span class=\"hue-doc-codeph\">isfalse(<span class=\"hue-doc-varname\">boolean</span>)</span></dt><dd><b>Purpose:</b> Tests if a Boolean expression is <span class=\"hue-doc-codeph\">false</span> or not.\n          Returns <span class=\"hue-doc-codeph\">true</span> if so.\n          If the argument is <span class=\"hue-doc-codeph\">NULL</span>, returns <span class=\"hue-doc-codeph\">false</span>.\n          Identical to <span class=\"hue-doc-codeph\">isnottrue()</span>, except it returns the opposite value for a <span class=\"hue-doc-codeph\">NULL</span> argument.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">BOOLEAN</span></p><p><b>Added in:</b>Impala 2.2.0</p><p><b>Usage notes:</b></p><p>\n        In Impala 2.11 and higher, you can use\n        the operators <span class=\"hue-doc-codeph\">IS [NOT] TRUE</span> and\n        <span class=\"hue-doc-codeph\">IS [NOT] FALSE</span> as equivalents for the built-in\n        functions <span class=\"hue-doc-codeph\">istrue()</span>, <span class=\"hue-doc-codeph\">isnottrue()</span>,\n        <span class=\"hue-doc-codeph\">isfalse()</span>, and <span class=\"hue-doc-codeph\">isnotfalse()</span>.\n      </p></dd><dt><span class=\"hue-doc-codeph\">isnotfalse(<span class=\"hue-doc-varname\">boolean</span>)</span></dt><dd><b>Purpose:</b> Tests if a Boolean expression is not <span class=\"hue-doc-codeph\">false</span> (that is, either <span class=\"hue-doc-codeph\">true</span> or <span class=\"hue-doc-codeph\">NULL</span>).\n          Returns <span class=\"hue-doc-codeph\">true</span> if so.\n          If the argument is <span class=\"hue-doc-codeph\">NULL</span>, returns <span class=\"hue-doc-codeph\">true</span>.\n          Identical to <span class=\"hue-doc-codeph\">istrue()</span>, except it returns the opposite value for a <span class=\"hue-doc-codeph\">NULL</span> argument.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">BOOLEAN</span></p><p><b>Usage notes:</b> Primarily for compatibility with code containing industry extensions to SQL.\n      </p><p><b>Added in:</b>Impala 2.2.0</p><p><b>Usage notes:</b></p><p>\n        In Impala 2.11 and higher, you can use\n        the operators <span class=\"hue-doc-codeph\">IS [NOT] TRUE</span> and\n        <span class=\"hue-doc-codeph\">IS [NOT] FALSE</span> as equivalents for the built-in\n        functions <span class=\"hue-doc-codeph\">istrue()</span>, <span class=\"hue-doc-codeph\">isnottrue()</span>,\n        <span class=\"hue-doc-codeph\">isfalse()</span>, and <span class=\"hue-doc-codeph\">isnotfalse()</span>.\n      </p></dd><dt><span class=\"hue-doc-codeph\">isnottrue(<span class=\"hue-doc-varname\">boolean</span>)</span></dt><dd><b>Purpose:</b> Tests if a Boolean expression is not <span class=\"hue-doc-codeph\">true</span> (that is, either <span class=\"hue-doc-codeph\">false</span> or <span class=\"hue-doc-codeph\">NULL</span>).\n          Returns <span class=\"hue-doc-codeph\">true</span> if so.\n          If the argument is <span class=\"hue-doc-codeph\">NULL</span>, returns <span class=\"hue-doc-codeph\">true</span>.\n          Identical to <span class=\"hue-doc-codeph\">isfalse()</span>, except it returns the opposite value for a <span class=\"hue-doc-codeph\">NULL</span> argument.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">BOOLEAN</span></p><p><b>Added in:</b>Impala 2.2.0</p><p><b>Usage notes:</b></p><p>\n        In Impala 2.11 and higher, you can use\n        the operators <span class=\"hue-doc-codeph\">IS [NOT] TRUE</span> and\n        <span class=\"hue-doc-codeph\">IS [NOT] FALSE</span> as equivalents for the built-in\n        functions <span class=\"hue-doc-codeph\">istrue()</span>, <span class=\"hue-doc-codeph\">isnottrue()</span>,\n        <span class=\"hue-doc-codeph\">isfalse()</span>, and <span class=\"hue-doc-codeph\">isnotfalse()</span>.\n      </p></dd><dt><span class=\"hue-doc-codeph\">isnull(type a, type ifNull)</span></dt><dd><b>Purpose:</b> Tests if an expression is <span class=\"hue-doc-codeph\">NULL</span>, and returns the expression result value\n          if not. If the first argument is <span class=\"hue-doc-codeph\">NULL</span>, returns the second argument.\n          <p><b>Compatibility notes:</b> Equivalent to the <span class=\"hue-doc-codeph\">nvl()</span> function from Oracle Database or\n            <span class=\"hue-doc-codeph\">ifnull()</span> from MySQL. The <span class=\"hue-doc-codeph\">nvl()</span> and <span class=\"hue-doc-codeph\">ifnull()</span>\n            functions are also available in Impala.\n          </p><p><b>Return type:</b> Same as the first argument value\n          </p></dd><dt><span class=\"hue-doc-codeph\">istrue(<span class=\"hue-doc-varname\">boolean</span>)</span></dt><dd><b>Purpose:</b> Tests if a Boolean expression is <span class=\"hue-doc-codeph\">true</span> or not.\n          Returns <span class=\"hue-doc-codeph\">true</span> if so.\n          If the argument is <span class=\"hue-doc-codeph\">NULL</span>, returns <span class=\"hue-doc-codeph\">false</span>.\n          Identical to <span class=\"hue-doc-codeph\">isnotfalse()</span>, except it returns the opposite value for a <span class=\"hue-doc-codeph\">NULL</span> argument.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">BOOLEAN</span></p><p><b>Usage notes:</b> Primarily for compatibility with code containing industry extensions to SQL.\n      </p><p><b>Added in:</b>Impala 2.2.0</p><p><b>Usage notes:</b></p><p>\n        In Impala 2.11 and higher, you can use\n        the operators <span class=\"hue-doc-codeph\">IS [NOT] TRUE</span> and\n        <span class=\"hue-doc-codeph\">IS [NOT] FALSE</span> as equivalents for the built-in\n        functions <span class=\"hue-doc-codeph\">istrue()</span>, <span class=\"hue-doc-codeph\">isnottrue()</span>,\n        <span class=\"hue-doc-codeph\">isfalse()</span>, and <span class=\"hue-doc-codeph\">isnotfalse()</span>.\n      </p></dd><dt><span class=\"hue-doc-codeph\">nonnullvalue(<span class=\"hue-doc-varname\">expression</span>)</span></dt><dd><b>Purpose:</b> Tests if an expression (of any type) is <span class=\"hue-doc-codeph\">NULL</span> or not.\n          Returns <span class=\"hue-doc-codeph\">false</span> if so.\n          The converse of <span class=\"hue-doc-codeph\">nullvalue()</span>.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">BOOLEAN</span></p><p><b>Usage notes:</b> Primarily for compatibility with code containing industry extensions to SQL.\n      </p><p><b>Added in:</b>Impala 2.2.0</p></dd><dt><span class=\"hue-doc-codeph\">nullif(<span class=\"hue-doc-varname\">expr1</span>,<span class=\"hue-doc-varname\">expr2</span>)</span></dt><dd><b>Purpose:</b> Returns <span class=\"hue-doc-codeph\">NULL</span> if the two specified arguments are equal. If the specified\n          arguments are not equal, returns the value of <span class=\"hue-doc-varname\">expr1</span>. The data types of the expressions\n          must be compatible, according to the conversion rules from <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datatypes.xml\" data-doc-anchor-id=\"datatypes\">Data Types</a>.\n          You cannot use an expression that evaluates to <span class=\"hue-doc-codeph\">NULL</span> for <span class=\"hue-doc-varname\">expr1</span>; that\n          way, you can distinguish a return value of <span class=\"hue-doc-codeph\">NULL</span> from an argument value of\n          <span class=\"hue-doc-codeph\">NULL</span>, which would never match <span class=\"hue-doc-varname\">expr2</span>.\n          <p><b>Usage notes:</b> This function is effectively shorthand for a <span class=\"hue-doc-codeph\">CASE</span> expression of\n            the form:\n          </p><div class=\"hue-doc-codeblock\">CASE\n  WHEN <span class=\"hue-doc-varname\">expr1</span> = <span class=\"hue-doc-varname\">expr2</span> THEN NULL\n  ELSE <span class=\"hue-doc-varname\">expr1</span>\nEND</div><p>\n            It is commonly used in division expressions, to produce a <span class=\"hue-doc-codeph\">NULL</span> result instead of a\n            divide-by-zero error when the divisor is equal to zero:\n          </p><div class=\"hue-doc-codeblock\">select 1.0 / nullif(c1,0) as reciprocal from t1;</div><p>\n            You might also use it for compatibility with other database systems that support the same\n            <span class=\"hue-doc-codeph\">NULLIF()</span> function.\n          </p><p><b>Return type:</b> same as the initial argument value, except that integer values are promoted to\n        <span class=\"hue-doc-codeph\">BIGINT</span> and floating-point values are promoted to <span class=\"hue-doc-codeph\">DOUBLE</span>; use\n        <span class=\"hue-doc-codeph\">CAST()</span> when inserting into a smaller numeric column\n      </p><p><b>Added in:</b> Impala 1.3.0\n      </p></dd><dt><span class=\"hue-doc-codeph\">nullifzero(<span class=\"hue-doc-varname\">numeric_expr</span>)</span></dt><dd><b>Purpose:</b> Returns <span class=\"hue-doc-codeph\">NULL</span> if the numeric expression evaluates to 0, otherwise returns\n          the result of the expression.\n          <p><b>Usage notes:</b> Used to avoid error conditions such as divide-by-zero in numeric calculations.\n            Serves as shorthand for a more elaborate <span class=\"hue-doc-codeph\">CASE</span> expression, to simplify porting SQL with\n            vendor extensions to Impala.\n          </p><p><b>Return type:</b> same as the initial argument value, except that integer values are promoted to\n        <span class=\"hue-doc-codeph\">BIGINT</span> and floating-point values are promoted to <span class=\"hue-doc-codeph\">DOUBLE</span>; use\n        <span class=\"hue-doc-codeph\">CAST()</span> when inserting into a smaller numeric column\n      </p><p><b>Added in:</b> Impala 1.3.0\n      </p></dd><dt><span class=\"hue-doc-codeph\">nullvalue(<span class=\"hue-doc-varname\">expression</span>)</span></dt><dd><b>Purpose:</b> Tests if an expression (of any type) is <span class=\"hue-doc-codeph\">NULL</span> or not.\n          Returns <span class=\"hue-doc-codeph\">true</span> if so.\n          The converse of <span class=\"hue-doc-codeph\">nonnullvalue()</span>.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">BOOLEAN</span></p><p><b>Usage notes:</b> Primarily for compatibility with code containing industry extensions to SQL.\n      </p><p><b>Added in:</b>Impala 2.2.0</p></dd><dt><span class=\"hue-doc-codeph\">nvl(type a, type ifNull)</span></dt><dd><b>Purpose:</b> Alias for the <span class=\"hue-doc-codeph\">isnull()</span> function. Tests if an expression is\n          <span class=\"hue-doc-codeph\">NULL</span>, and returns the expression result value if not. If the first argument is\n          <span class=\"hue-doc-codeph\">NULL</span>, returns the second argument. Equivalent to the <span class=\"hue-doc-codeph\">nvl()</span> function\n          from Oracle Database or <span class=\"hue-doc-codeph\">ifnull()</span> from MySQL.\n          <p><b>Return type:</b> Same as the first argument value\n          </p><p><b>Added in:</b> Impala 1.1\n      </p></dd><dt><span class=\"hue-doc-codeph\">nvl2(type a, type ifNull, type ifNotNull)</span></dt><dd><b>Purpose:</b> Enhanced variant of the <span class=\"hue-doc-codeph\">nvl()</span> function. Tests an expression\n          and returns different result values depending on whether it is <span class=\"hue-doc-codeph\">NULL</span> or not.\n          If the first argument is <span class=\"hue-doc-codeph\">NULL</span>, returns the second argument.\n          If the first argument is not <span class=\"hue-doc-codeph\">NULL</span>, returns the third argument.\n          Equivalent to the <span class=\"hue-doc-codeph\">nvl2()</span> function from Oracle Database.\n          <p><b>Return type:</b> Same as the first argument value\n          </p><p><b>Added in:</b>Impala 2.9.0</p><p><b>Examples:</b></p><p>\n            The following examples show how a query can use special indicator values\n            to represent null and not-null expression values. The first example tests\n            an <span class=\"hue-doc-codeph\">INT</span> column and so uses special integer values.\n            The second example tests a <span class=\"hue-doc-codeph\">STRING</span> column and so uses\n            special string values.\n          </p><div class=\"hue-doc-codeblock\">\nselect x, nvl2(x, 999, 0) from nvl2_demo;\n+------+---------------------------+\n| x    | if(x is not null, 999, 0) |\n+------+---------------------------+\n| NULL | 0                         |\n| 1    | 999                       |\n| NULL | 0                         |\n| 2    | 999                       |\n+------+---------------------------+\n\nselect s, nvl2(s, 'is not null', 'is null') from nvl2_demo;\n+------+---------------------------------------------+\n| s    | if(s is not null, 'is not null', 'is null') |\n+------+---------------------------------------------+\n| NULL | is null                                     |\n| one  | is not null                                 |\n| NULL | is null                                     |\n| two  | is not null                                 |\n+------+---------------------------------------------+\n</div></dd><dt><span class=\"hue-doc-codeph\">zeroifnull(<span class=\"hue-doc-varname\">numeric_expr</span>)</span></dt><dd><b>Purpose:</b> Returns 0 if the numeric expression evaluates to <span class=\"hue-doc-codeph\">NULL</span>, otherwise returns\n          the result of the expression.\n          <p><b>Usage notes:</b> Used to avoid unexpected results due to unexpected propagation of\n            <span class=\"hue-doc-codeph\">NULL</span> values in numeric calculations. Serves as shorthand for a more elaborate\n            <span class=\"hue-doc-codeph\">CASE</span> expression, to simplify porting SQL with vendor extensions to Impala.\n          </p><p><b>Return type:</b> same as the initial argument value, except that integer values are promoted to\n        <span class=\"hue-doc-codeph\">BIGINT</span> and floating-point values are promoted to <span class=\"hue-doc-codeph\">DOUBLE</span>; use\n        <span class=\"hue-doc-codeph\">CAST()</span> when inserting into a smaller numeric column\n      </p><p><b>Added in:</b> Impala 1.3.0\n      </p></dd></dl></div></div></div>","title":"Impala Conditional Functions"}