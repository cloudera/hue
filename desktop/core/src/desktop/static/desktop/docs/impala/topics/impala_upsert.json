{"body":"<div><div id=\"upsert\"><div class=\"hue-doc-title\">UPSERT Statement (Impala 2.8 or higher only)</div><div><p>\n      Acts as a combination of the <span class=\"hue-doc-codeph\">INSERT</span>\n      and <span class=\"hue-doc-codeph\">UPDATE</span> statements.\n      For each row processed by the <span class=\"hue-doc-codeph\">UPSERT</span>\n      statement:\n      <ul><li><p>\n            If another row already exists with the same set of primary key\n            values, the other columns are updated to match the values\n            from the row being <q>UPSERTed</q>.\n          </p></li><li><p>\n            If there is not any row with the same set of primary key values,\n            the row is created, the same as if the <span class=\"hue-doc-codeph\">INSERT</span>\n            statement was used.\n          </p></li></ul></p><p>\n      This statement only works for Impala tables that use the Kudu storage engine.\n    </p><p id=\"syntax_blurb\"><b>Syntax:</b></p><div class=\"hue-doc-codeblock\">UPSERT <span class=\"hue-doc-ph\">[<span class=\"hue-doc-varname\">hint_clause</span>]</span> INTO [TABLE] [<span class=\"hue-doc-varname\">db_name</span>.]<span class=\"hue-doc-varname\">table_name</span>\n  [(<span class=\"hue-doc-varname\">column_list</span>)]\n{\n    [<span class=\"hue-doc-varname\">hint_clause</span>] <span class=\"hue-doc-varname\">select_statement</span>\n  | VALUES (<span class=\"hue-doc-varname\">value</span> [, <span class=\"hue-doc-varname\">value</span> ...]) [, (<span class=\"hue-doc-varname\">value</span> [, <span class=\"hue-doc-varname\">value</span> ...]) ...]\n}\n\nhint_clause ::= [SHUFFLE] | [NOSHUFFLE]\n  (Note: the square brackets are part of the syntax.)\n</div><p>\n      The <span class=\"hue-doc-varname\">select_statement</span> clause can use the full syntax, such as\n      <span class=\"hue-doc-codeph\">WHERE</span> and join clauses, as <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_select.xml\" data-doc-anchor-id=\"select\">SELECT Statement</a>.\n    </p><p id=\"dml_blurb_kudu\"><b>Statement type:</b> DML\n      </p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n      If you specify a column list, any omitted columns in the inserted or updated rows are\n      set to their default value (if the column has one) or <span class=\"hue-doc-codeph\">NULL</span> (if the\n      column does not have a default value). Therefore, if a column is not nullable and\n      has no default value, it must be included in the column list for any <span class=\"hue-doc-codeph\">UPSERT</span>\n      statement. Because all primary key columns meet these conditions, all the primary key\n      columns must be specified in every <span class=\"hue-doc-codeph\">UPSERT</span> statement.\n    </p><p>\n      Because Kudu tables can efficiently handle small incremental changes, the <span class=\"hue-doc-codeph\">VALUES</span>\n      clause is more practical to use with Kudu tables than with HDFS-based tables.\n    </p><div class=\"hue-doc-note\" id=\"compute_stats_next\">        After adding or replacing data in a table used in performance-critical queries, issue a\n        <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement to make sure all statistics are up-to-date.\n        Consider updating statistics for a table after any <span class=\"hue-doc-codeph\">INSERT</span>, <span class=\"hue-doc-codeph\">LOAD\n        DATA</span>, or <span class=\"hue-doc-codeph\">CREATE TABLE AS SELECT</span> statement in Impala, or after\n        loading data through Hive and doing a <span class=\"hue-doc-codeph\">REFRESH\n        <span class=\"hue-doc-varname\">table_name</span></span> in Impala. This technique is especially important\n        for tables that are very large, used in join queries, or both.\n      </div><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">UPSERT INTO kudu_table (pk, c1, c2, c3) VALUES (0, 'hello', 50, true), (1, 'world', -1, false);\nUPSERT INTO production_table SELECT * FROM staging_table;\nUPSERT INTO production_table SELECT * FROM staging_table WHERE c1 IS NOT NULL AND c2 &gt; 0;\n</div><p id=\"related_info\"><b>Related information:</b></p><p><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_kudu.xml\" data-doc-anchor-id=\"impala_kudu\">Using Impala to Query Kudu Tables</a>,\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_insert.xml\" data-doc-anchor-id=\"insert\">INSERT Statement</a>,\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_update.xml\" data-doc-anchor-id=\"update\">UPDATE Statement (Impala 2.8 or higher only)</a></p></div></div></div>","title":"UPSERT Statement (Impala 2.8 or higher only)"}