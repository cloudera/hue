{"body":"<div><div><div class=\"hue-doc-title\">EXEC_SINGLE_NODE_ROWS_THRESHOLD Query Option (Impala 2.1 or higher only)</div><div><p>\n      This setting controls the cutoff point (in terms of number of rows scanned) below which Impala treats a query\n      as a <q>small</q> query, turning off optimizations such as parallel execution and native code generation. The\n      overhead for these optimizations is applicable for queries involving substantial amounts of data, but it\n      makes sense to skip them for queries involving tiny amounts of data. Reducing the overhead for small queries\n      allows Impala to complete them more quickly, keeping YARN resources, admission control slots, and so on\n      available for data-intensive queries.\n    </p><p><b>Syntax:</b></p><div class=\"hue-doc-codeblock\">SET EXEC_SINGLE_NODE_ROWS_THRESHOLD=<span class=\"hue-doc-varname\">number_of_rows</span></div><p><b>Type:</b> numeric\n    </p><p><b>Default:</b> 100\n    </p><p><b>Usage notes:</b> Typically, you increase the default value to make this optimization apply to more queries.\n      If incorrect or corrupted table and column statistics cause Impala to apply this optimization\n      incorrectly to queries that actually involve substantial work, you might see the queries being slower as a\n      result of remote reads. In that case, recompute statistics with the <span class=\"hue-doc-codeph\">COMPUTE STATS</span>\n      or <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span> statement. If there is a problem collecting accurate\n      statistics, you can turn this feature off by setting the value to -1.\n    </p><p><b>Internal details:</b></p><p>\n      This setting applies to query fragments where the amount of data to scan can be accurately determined, either\n      through table and column statistics, or by the presence of a <span class=\"hue-doc-codeph\">LIMIT</span> clause. If Impala cannot\n      accurately estimate the size of the input data, this setting does not apply.\n    </p><p>\n      In Impala 2.3 and higher, where Impala supports the complex data types <span class=\"hue-doc-codeph\">STRUCT</span>,\n      <span class=\"hue-doc-codeph\">ARRAY</span>, and <span class=\"hue-doc-codeph\">MAP</span>, if a query refers to any column of those types,\n      the small-query optimization is turned off for that query regardless of the\n      <span class=\"hue-doc-codeph\">EXEC_SINGLE_NODE_ROWS_THRESHOLD</span> setting.\n    </p><p>\n      For a query that is determined to be <q>small</q>, all work is performed on the coordinator node. This might\n      result in some I/O being performed by remote reads. The savings from not distributing the query work and not\n      generating native code are expected to outweigh any overhead from the remote reads.\n    </p><p><b>Added in:</b>Impala 2.10</p><p><b>Examples:</b></p><p>\n      A common use case is to query just a few rows from a table to inspect typical data values. In this example,\n      Impala does not parallelize the query or perform native code generation because the result set is guaranteed\n      to be smaller than the threshold value from this query option:\n    </p><div class=\"hue-doc-codeblock\">SET EXEC_SINGLE_NODE_ROWS_THRESHOLD=500;\nSELECT * FROM enormous_table LIMIT 300;\n</div></div></div></div>","title":"EXEC_SINGLE_NODE_ROWS_THRESHOLD Query Option (Impala 2.1 or higher only)"}