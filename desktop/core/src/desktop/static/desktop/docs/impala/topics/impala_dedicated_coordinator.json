{"body":"<div><div id=\"scalability\"><div class=\"hue-doc-title\">How to Configure Impala with Dedicated Coordinators</div><div><p>\n      Each host that runs the Impala Daemon acts as both a coordinator and as an executor, by\n      default, managing metadata caching, query compilation, and query execution. In this\n      configuration, Impala clients can connect to any Impala daemon and send query requests.\n    </p><p>\n      During highly concurrent workloads for large-scale queries, the dual roles can cause\n      scalability issues because:\n    </p><ul><li><p>\n          The extra work required for a host to act as the coordinator could interfere with its\n          capacity to perform other work for the later phases of the query. For example,\n          coordinators can experience significant network and CPU overhead with queries\n          containing a large number of query fragments. Each coordinator caches metadata for all\n          table partitions and data files, which requires coordinators to be configured with a\n          large JVM heap. Executor-only Impala daemons should be configured with the default JVM\n          heaps, which leaves more memory available to process joins, aggregations, and other\n          operations performed by query executors.\n        </p></li><li><p>\n          Having a large number of hosts act as coordinators can cause unnecessary network\n          overhead, or even timeout errors, as each of those hosts communicates with the\n          Statestored daemon for metadata updates.\n        </p></li><li><p>\n          The \"soft limits\" imposed by the admission control feature are more likely to be\n          exceeded when there are a large number of heavily loaded hosts acting as coordinators.\n          Check\n          <a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/IMPALA-3649\" target=\"_blank\"><u>IMPALA-3649</u></a> and\n          <a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/IMPALA-6437\" target=\"_blank\"><u>IMPALA-6437</u></a> to see the status of the enhancements to mitigate this issue.\n        </p></li></ul><p>\n      The following factors can further exacerbate the above issues:\n    </p><ul><li><p>\n          High number of concurrent query fragments due to query concurrency and/or query\n          complexity\n        </p></li><li><p>\n          Large metadata topic size related to the number of partitions/files/blocks\n        </p></li><li><p>\n          High number of coordinator nodes\n        </p></li><li><p>\n          High number of coordinators used in the same resource pool\n        </p></li></ul><p>\n      If such scalability bottlenecks occur, in Impala 2.9 and higher, you can assign one\n      dedicated role to each Impala daemon host, either as a coordinator or as an executor, to\n      address the issues.\n    </p><ul><li><p>\n          All explicit or load-balanced client connections must go to the coordinator hosts.\n          These hosts perform the network communication to keep metadata up-to-date and route\n          query results to the appropriate clients. The dedicated coordinator hosts do not\n          participate in I/O-intensive operations such as scans, and CPU-intensive operations\n          such as aggregations.\n        </p></li><li><p>\n          The executor hosts perform the intensive I/O, CPU, and memory operations that make up\n          the bulk of the work for each query. The executors do communicate with the Statestored\n          daemon for membership status, but the dedicated executor hosts do not process the\n          final result sets for queries.\n        </p></li></ul><p>\n      Using dedicated coordinators offers the following benefits:\n    </p><ul><li><p>\n          Reduces memory usage by limiting the number of Impala nodes that need to cache\n          metadata.\n        </p></li><li><p>\n          Provides better concurrency by avoiding coordinator bottleneck.\n        </p></li><li><p>\n          Eliminates query over-admission.\n        </p></li><li><p>\n          Reduces resource, especially network, utilization on the Statestored daemon by\n          limiting metadata broadcast to a subset of nodes.\n        </p></li><li><p>\n          Improves reliability and performance for highly concurrent workloads by reducing\n          workload stress on coordinators. Dedicated coordinators require 50% or fewer\n          connections and threads.\n        </p></li><li><p>\n          Reduces the number of explicit metadata refreshes required.\n        </p></li><li><p>\n          Improves diagnosability if a bottleneck or other performance issue arises on a\n          specific host, you can narrow down the cause more easily because each host is\n          dedicated to specific operations within the overall Impala workload.\n        </p></li></ul><p>\n      In this configuration with dedicated coordinators / executors, you cannot connect to the\n      dedicated executor hosts through clients such as impala-shell or business intelligence\n      tools as only the coordinator nodes support client connections.\n    </p></div><div id=\"concept_vhv_4b1_n2b\"><div class=\"hue-doc-title\">Determining the Optimal Number of Dedicated Coordinators</div><div><p>\n        You should have the smallest number of coordinators that will still satisfy your\n        workload requirements in a cluster. A rough estimation is 1 coordinator for every 50\n        executors.\n      </p><p>\n        To maintain a healthy state and optimal performance, it is recommended that you keep the\n        peak utilization of all resources used by Impala, including CPU, the number of threads,\n        the number of connections, and RPCs, under 80%.\n      </p><p>\n        Consider the following factors to determine the right number of coordinators in your\n        cluster:\n      </p><ul><li><p>\n            What is the number of concurrent queries?\n          </p></li><li><p>\n            What percentage of the workload is DDL?\n          </p></li><li><p>\n            What is the average query resource usage at the various stages (merge, runtime\n            filter, result set size, etc.)?\n          </p></li><li><p>\n            How many Impala Daemons (impalad) is in the cluster?\n          </p></li><li><p>\n            Is there a high availability requirement?\n          </p></li><li><p>\n            Compute/storage capacity reduction factor\n          </p></li></ul><p>\n        Start with the below set of steps to determine the initial number of coordinators:\n      </p><ol><li>\n          If your cluster has less than 10 nodes, we recommend that you configure one dedicated\n          coordinator. Deploy the dedicated coordinator on a DataNode to avoid losing storage\n          capacity. In most of cases, one dedicated coordinator is enough to support all\n          workloads on a cluster.\n        </li><li>\n          Add more coordinators if the dedicated coordinator CPU or network peak utilization is\n          80% or higher. You might need 1 coordinator for every 50 executors.\n        </li><li>\n          If the Impala service is shared by multiple workgroups with a dynamic resource pool\n          assigned, use one coordinator per pool to avoid admission control over admission.\n        </li><li>\n          If high availability is required, double the number of coordinators. One set as an\n          active set and the other as a backup set.\n        </li></ol></div><div id=\"concept_y4k_rc1_n2b\"><div class=\"hue-doc-title\">Advanced Tuning</div><div><p>\n          Use the following guidelines to further tune the throughput and stability.\n          <ol><li>\n              The concurrency of DML statements does not typically depend on the number of\n              coordinators or size of the cluster. Queries that return large result sets\n              (10,000+ rows) consume more CPU and memory resources on the coordinator. Add one\n              or two coordinators if the workload has many such queries.\n            </li><li>\n              DDL queries, excluding <span class=\"hue-doc-codeph\">COMPUTE STATS</span> and <span class=\"hue-doc-codeph\">CREATE TABLE AS\n              SELECT</span>, are executed only on coordinators. If your workload contains many\n              DDL queries running concurrently, you could add one coordinator.\n            </li><li>\n              The CPU contention on coordinators can slow down query executions when concurrency\n              is high, especially for very short queries (&lt;10s). Add more coordinators to\n              avoid CPU contention.\n            </li><li>\n              On a large cluster with 50+ nodes, the number of network connections from a\n              coordinator to executors can grow quickly as query complexity increases. The\n              growth is much greater on coordinators than executors. Add a few more coordinators\n              if workloads are complex, i.e. (an average number of fragments * number of\n              Impalad) &gt; 500, but with the low memory/CPU usage to share the load. Watch\n              IMPALA-4603 and IMPALA-7213 to track the progress on fixing this issue.\n            </li><li>\n              When using multiple coordinators for DML statements, divide queries to different\n              groups (number of groups = number of coordinators). Configure a separate dynamic\n              resource pool for each group and direct each group of query requests to a specific\n              coordinator. This is to avoid query over admission.\n            </li><li>\n              The front-end connection requirement is not a factor in determining the number of\n              dedicated coordinators. Consider setting up a connection pool at the client side\n              instead of adding coordinators. For a short-term solution, you could increase the\n              value of <span class=\"hue-doc-codeph\">fe_service_threads</span> on coordinators to allow more client\n              connections.\n            </li><li>\n              In general, you should have a very small number of coordinators so storage\n              capacity reduction is not a concern. On a very small cluster (less than 10 nodes),\n              deploy a dedicated coordinator on a DataNode to avoid storage capacity reduction.\n            </li></ol></p></div></div><div id=\"concept_w51_cd1_n2b\"><div class=\"hue-doc-title\">Estimating Coordinator Resource Usage</div><div><p><table id=\"table_kh3_d31_n2b\"><tbody><tr><td><b>Resource</b></td><td><b>Safe range</b></td><td><b>Notes / CM tsquery to monitor</b></td></tr><tr><td>\n                    Memory\n                  </td><td><p>\n                      (Max JVM heap setting +\n                    </p><p>\n                      query concurrency *\n                    </p><p>\n                      query mem_limit)\n                    </p><p>\n                      &lt;=\n                    </p><p>\n                      80% of Impala process memory allocation\n                    </p></td><td><p><i>Memory usage</i>:\n                    </p><p>\n                      SELECT mem_rss WHERE entityName = \"Coordinator Instance ID\" AND category =\n                      ROLE\n                    </p><p><i>JVM heap usage (metadata cache)</i>:\n                    </p><p>\n                      SELECT impala_jvm_heap_current_usage_bytes WHERE entityName = \"Coordinator\n                      Instance ID\" AND category = ROLE (only in release 5.15 and above)\n                    </p></td></tr><tr><td>\n                    TCP Connection\n                  </td><td>\n                    Incoming + outgoing &lt; 16K\n                  </td><td><p><i>Incoming connection usage</i>:\n                    </p><p>\n                      SELECT thrift_server_backend_connections_in_use WHERE entityName =\n                      \"Coordinator Instance ID\" AND category = ROLE\n                    </p><p><i>Outgoing connection usage</i>:\n                    </p><p>\n                      SELECT backends_client_cache_clients_in_use WHERE entityName =\n                      \"Coordinator Instance ID\" AND category = ROLE\n                    </p></td></tr><tr><td>\n                    Threads\n                  </td><td>\n                    &lt; 32K\n                  </td><td>\n                    SELECT thread_manager_running_threads WHERE entityName = \"Coordinator\n                    Instance ID\" AND category = ROLE\n                  </td></tr><tr><td>\n                    CPU\n                  </td><td><p>\n                      Concurrency =\n                    </p><p>\n                      non-DDL query concurrency &lt;=\n                    </p><p>\n                      number of virtual cores allocated to Impala per node\n                    </p></td><td><p>\n                      CPU usage estimation should be based on how many cores are allocated to\n                      Impala per node, not a sum of all cores of the cluster.\n                    </p><p>\n                      It is recommended that concurrency should not be more than the number of\n                      virtual cores allocated to Impala per node.\n                    </p><p/><p><i>Query concurrency:</i></p><p>\n                      SELECT total_impala_num_queries_registered_across_impalads WHERE\n                      entityName = \"IMPALA-1\" AND category = SERVICE\n                    </p><p/></td></tr></tbody></table></p><p>\n          If usage of any of the above resources exceeds the safe range, add one more\n          coordinator.\n        </p></div></div></div><div id=\"concept_omm_gf1_n2b\"><div class=\"hue-doc-title\">Deploying Dedicated Coordinators and Executors</div><div><p>\n        This section describes the process to configure a dedicated coordinator and a dedicated\n        executor roles for Impala.\n      </p><ul><li><p><b>Dedicated coordinator</b>: They should be on edge node with no other services\n            running on it. They don’t need large local disks but still need some that can be\n            used for Spilling. They require at least same or even larger memory allocation.\n          </p></li><li><p><b>(Dedicated) Executors: </b>They should be colocated with DataNodes as usual. The\n            number of hosts with this setting typically increases as the cluster grows larger\n            and handles more table partitions, data files, and concurrent queries.\n          </p></li></ul><p>\n        To configuring dedicated coordinators/executors, you specify one of the following\n        startup flags for the <span class=\"hue-doc-cmdname\">impalad</span> daemon on each host:\n        <ul><li><p><span class=\"hue-doc-codeph\">‑‑is_executor=false</span> for each host that does not act\n              as an executor for Impala queries. These hosts act exclusively as query\n              coordinators. This setting typically applies to a relatively small number of\n              hosts, because the most common topology is to have nearly all DataNodes doing work\n              for query execution.\n            </p></li><li><p><span class=\"hue-doc-codeph\">‑‑is_coordinator=false</span> for each host that does not\n              act as a coordinator for Impala queries. These hosts act exclusively as executors.\n              The number of hosts with this setting typically increases as the cluster grows\n              larger and handles more table partitions, data files, and concurrent queries. As\n              the overhead for query coordination increases, it becomes more important to\n              centralize that work on dedicated hosts.\n            </p></li></ul></p></div></div></div></div>","title":"How to Configure Impala with Dedicated Coordinators"}