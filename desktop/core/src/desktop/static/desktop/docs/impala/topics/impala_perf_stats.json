{"body":"<div><div id=\"perf_stats\"><div class=\"hue-doc-title\">Table and Column Statistics</div><div><p>\n      Impala can do better optimization for complex or multi-table queries when it has access to\n      statistics about the volume of data and how the values are distributed. Impala uses this\n      information to help parallelize and distribute the work for a query. For example,\n      optimizing join queries requires a way of determining if one table is <q>bigger</q> than\n      another, which is a function of the number of rows and the average row size for each\n      table. The following sections describe the categories of statistics Impala can work with,\n      and how to produce them and keep them up to date.\n    </p><p/></div><div id=\"perf_table_stats\"><div class=\"hue-doc-title\" id=\"table_stats\">Overview of Table Statistics</div><div><p>\n        The Impala query planner can make use of statistics about entire tables and partitions.\n        This information includes physical characteristics such as the number of rows, number of\n        data files, the total size of the data files, and the file format. For partitioned\n        tables, the numbers are calculated per partition, and as totals for the whole table.\n        This metadata is stored in the metastore database, and can be updated by either Impala\n        or Hive. If a number is not available, the value -1 is used as a placeholder. Some\n        numbers, such as number and total sizes of data files, are always kept up to date\n        because they can be calculated cheaply, as part of gathering HDFS block metadata.\n      </p><p>\n        The following example shows table stats for an unpartitioned Parquet table. The values\n        for the number and sizes of files are always available. Initially, the number of rows is\n        not known, because it requires a potentially expensive scan through the entire table,\n        and so that value is displayed as -1. The <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement fills\n        in any unknown table stats values.\n      </p><div class=\"hue-doc-codeblock\">show table stats parquet_snappy;\n+-------+--------+---------+--------------+-------------------+---------+-------------------+--------------------------------------------+\n| #Rows | #Files | Size    | Bytes Cached | Cache Replication | Format  | Incremental stats | Location                                   |\n+-------+--------+---------+--------------+-------------------+---------+-------------------+--------------------------------------------+\n| -1    | 96     | 23.35GB | NOT CACHED   | NOT CACHED        | PARQUET | false             | hdfs://&lt;server&gt;:8020/&lt;path&gt;/parquet_snappy |\n+-------+--------+---------+--------------+-------------------+---------+-------------------+--------------------------------------------+\n\ncompute stats parquet_snappy;\n+-----------------------------------------+\n| summary                                 |\n+-----------------------------------------+\n| Updated 1 partition(s) and 6 column(s). |\n+-----------------------------------------+\n\n\nshow table stats parquet_snappy;\n+------------+--------+---------+--------------+-------------------+---------+-------------------+--------------------------------------------+\n| #Rows      | #Files | Size    | Bytes Cached | Cache Replication | Format  | Incremental stats | Location                                   |\n+------------+--------+---------+--------------+-------------------+---------+-------------------+--------------------------------------------+\n| 1000000000 | 96     | 23.35GB | NOT CACHED   | NOT CACHED        | PARQUET | false             | hdfs://&lt;server&gt;:8020/&lt;path&gt;/parquet_snappy |\n+------------+--------+---------+--------------+-------------------+---------+-------------------+--------------------------------------------+\n</div><p>\n        Impala performs some optimizations using this metadata on its own, and other\n        optimizations by using a combination of table and column statistics.\n      </p><p>\n        To check that table statistics are available for a table, and see the details of those\n        statistics, use the statement <span class=\"hue-doc-codeph\">SHOW TABLE STATS\n        <span class=\"hue-doc-varname\">table_name</span></span>. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_show.xml\" data-doc-anchor-id=\"show\">SHOW Statement</a> for\n        details.\n      </p><p>\n        If you use the Hive-based methods of gathering statistics, see\n        <a class=\"hue-doc-external-link\" href=\"https://cwiki.apache.org/confluence/display/Hive/StatsDev\" target=\"_blank\">the\n        Hive wiki</a> for information about the required configuration on the Hive side.\n        Where practical, use the Impala <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement to avoid\n        potential configuration and scalability issues with the statistics-gathering process.\n      </p><p id=\"hive_column_stats_caveat\">\n        If you run the Hive statement <span class=\"hue-doc-codeph\">ANALYZE TABLE COMPUTE STATISTICS FOR\n        COLUMNS</span>, Impala can only use the resulting column statistics if the table is\n        unpartitioned. Impala cannot use Hive-generated column statistics for a partitioned\n        table.\n      </p></div></div><div id=\"perf_column_stats\"><div class=\"hue-doc-title\" id=\"column_stats\">Overview of Column Statistics</div><div><p>\n        The Impala query planner can make use of statistics about individual columns when that\n        metadata is available in the metastore database. This technique is most valuable for\n        columns compared across tables in <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_joins.xml\" data-doc-anchor-id=\"perf_joins\">join\n        queries</a>, to help estimate how many rows the query will retrieve from each table.\n        <span class=\"hue-doc-ph\"> These statistics are also important for correlated subqueries using the\n        <span class=\"hue-doc-codeph\">EXISTS()</span> or <span class=\"hue-doc-codeph\">IN()</span> operators, which are processed\n        internally the same way as join queries.</span></p><p>\n        The following example shows column stats for an unpartitioned Parquet table. The values\n        for the maximum and average sizes of some types are always available, because those\n        figures are constant for numeric and other fixed-size types. Initially, the number of\n        distinct values is not known, because it requires a potentially expensive scan through\n        the entire table, and so that value is displayed as -1. The same applies to maximum and\n        average sizes of variable-sized types, such as <span class=\"hue-doc-codeph\">STRING</span>. The\n        <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement fills in most unknown column stats values. (It\n        does not record the number of <span class=\"hue-doc-codeph\">NULL</span> values, because currently Impala\n        does not use that figure for query optimization.)\n      </p><div class=\"hue-doc-codeblock\">show column stats parquet_snappy;\n+-------------+----------+------------------+--------+----------+----------+\n| Column      | Type     | #Distinct Values | #Nulls | Max Size | Avg Size |\n+-------------+----------+------------------+--------+----------+----------+\n| id          | BIGINT   | -1               | -1     | 8        | 8        |\n| val         | INT      | -1               | -1     | 4        | 4        |\n| zerofill    | STRING   | -1               | -1     | -1       | -1       |\n| name        | STRING   | -1               | -1     | -1       | -1       |\n| assertion   | BOOLEAN  | -1               | -1     | 1        | 1        |\n| location_id | SMALLINT | -1               | -1     | 2        | 2        |\n+-------------+----------+------------------+--------+----------+----------+\n\ncompute stats parquet_snappy;\n+-----------------------------------------+\n| summary                                 |\n+-----------------------------------------+\n| Updated 1 partition(s) and 6 column(s). |\n+-----------------------------------------+\n\nshow column stats parquet_snappy;\n+-------------+----------+------------------+--------+----------+-------------------+\n| Column      | Type     | #Distinct Values | #Nulls | Max Size | Avg Size          |\n+-------------+----------+------------------+--------+----------+-------------------+\n| id          | BIGINT   | 183861280        | -1     | 8        | 8                 |\n| val         | INT      | 139017           | -1     | 4        | 4                 |\n| zerofill    | STRING   | 101761           | -1     | 6        | 6                 |\n| name        | STRING   | 145636240        | -1     | 22       | 13.00020027160645 |\n| assertion   | BOOLEAN  | 2                | -1     | 1        | 1                 |\n| location_id | SMALLINT | 339              | -1     | 2        | 2                 |\n+-------------+----------+------------------+--------+----------+-------------------+\n</div><div class=\"hue-doc-note\"><p>\n          For column statistics to be effective in Impala, you also need to have table\n          statistics for the applicable tables, as described in\n          <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_stats.xml\" data-doc-anchor-id=\"perf_table_stats\">Overview of Table Statistics</a>. When you use the Impala\n          <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement, both table and column statistics are\n          automatically gathered at the same time, for all columns in the table.\n        </p></div><div class=\"hue-doc-note\" id=\"compute_stats_nulls\">        Prior to Impala 1.4.0, <span class=\"hue-doc-codeph\">COMPUTE STATS</span> counted the number of\n        <span class=\"hue-doc-codeph\">NULL</span> values in each column and recorded that figure in the metastore\n        database. Because Impala does not currently use the <span class=\"hue-doc-codeph\">NULL</span> count during\n        query planning, Impala 1.4.0 and higher speeds up the <span class=\"hue-doc-codeph\">COMPUTE STATS</span>\n        statement by skipping this <span class=\"hue-doc-codeph\">NULL</span> counting.\n      </div><p>\n        To check whether column statistics are available for a particular set of columns, use\n        the <span class=\"hue-doc-codeph\">SHOW COLUMN STATS <span class=\"hue-doc-varname\">table_name</span></span> statement, or check\n        the extended <span class=\"hue-doc-codeph\">EXPLAIN</span> output for a query against that table that refers\n        to those columns. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_show.xml\" data-doc-anchor-id=\"show\">SHOW Statement</a> and\n        <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_explain.xml\" data-doc-anchor-id=\"explain\">EXPLAIN Statement</a> for details.\n      </p><p id=\"hive_column_stats_caveat\">\n        If you run the Hive statement <span class=\"hue-doc-codeph\">ANALYZE TABLE COMPUTE STATISTICS FOR\n        COLUMNS</span>, Impala can only use the resulting column statistics if the table is\n        unpartitioned. Impala cannot use Hive-generated column statistics for a partitioned\n        table.\n      </p></div></div><div id=\"perf_stats_partitions\"><div class=\"hue-doc-title\" id=\"stats_partitions\">How Table and Column Statistics Work for Partitioned Tables</div><div><p>\n        When you use Impala for <q>big data</q>, you are highly likely to use partitioning for\n        your biggest tables, the ones representing data that can be logically divided based on\n        dates, geographic regions, or similar criteria. The table and column statistics are\n        especially useful for optimizing queries on such tables. For example, a query involving\n        one year might involve substantially more or less data than a query involving a\n        different year, or a range of several years. Each query might be optimized differently\n        as a result.\n      </p><p>\n        The following examples show how table and column stats work with a partitioned table.\n        The table for this example is partitioned by year, month, and day. For simplicity, the\n        sample data consists of 5 partitions, all from the same year and month. Table stats are\n        collected independently for each partition. (In fact, the <span class=\"hue-doc-codeph\">SHOW\n        PARTITIONS</span> statement displays exactly the same information as <span class=\"hue-doc-codeph\">SHOW\n        TABLE STATS</span> for a partitioned table.) Column stats apply to the entire table,\n        not to individual partitions. Because the partition key column values are represented as\n        HDFS directories, their characteristics are typically known in advance, even when the\n        values for non-key columns are shown as -1.\n      </p><div class=\"hue-doc-codeblock\">show partitions year_month_day;\n+-------+-------+-----+-------+--------+---------+--------------+-------------------+---------+-------------------+--------------------------------------------+\n| year  | month | day | #Rows | #Files | Size    | Bytes Cached | Cache Replication | Format  | Incremental stats | Location                                   |\n+-------+-------+-----+-------+--------+---------+--------------+-------------------+---------+-------------------+--------------------------------------------+\n| 2013  | 12    | 1   | -1    | 1      | 2.51MB  | NOT CACHED   | NOT CACHED        | PARQUET | false             | hdfs://&lt;server&gt;:8020/&lt;path&gt;/parquet_snappy |\n| 2013  | 12    | 2   | -1    | 1      | 2.53MB  | NOT CACHED   | NOT CACHED        | PARQUET | false             | hdfs://&lt;server&gt;:8020/&lt;path&gt;/parquet_snappy |\n| 2013  | 12    | 3   | -1    | 1      | 2.52MB  | NOT CACHED   | NOT CACHED        | PARQUET | false             | hdfs://&lt;server&gt;:8020/&lt;path&gt;/parquet_snappy |\n| 2013  | 12    | 4   | -1    | 1      | 2.51MB  | NOT CACHED   | NOT CACHED        | PARQUET | false             | hdfs://&lt;server&gt;:8020/&lt;path&gt;/parquet_snappy |\n| 2013  | 12    | 5   | -1    | 1      | 2.52MB  | NOT CACHED   | NOT CACHED        | PARQUET | false             | hdfs://&lt;server&gt;:8020/&lt;path&gt;/parquet_snappy |\n| Total |       |     | -1    | 5      | 12.58MB | 0B           |                   |         |                   |                                            |\n+-------+-------+-----+-------+--------+---------+--------------+-------------------+---------+-------------------+--------------------------------------------+\n\nshow table stats year_month_day;\n+-------+-------+-----+-------+--------+---------+--------------+-------------------+---------+-------------------+--------------------------------------------+\n| year  | month | day | #Rows | #Files | Size    | Bytes Cached | Cache Replication | Format  | Incremental stats | Location                                   |\n+-------+-------+-----+-------+--------+---------+--------------+-------------------+---------+-------------------+--------------------------------------------+\n| 2013  | 12    | 1   | -1    | 1      | 2.51MB  | NOT CACHED   | NOT CACHED        | PARQUET | false             | hdfs://&lt;server&gt;:8020/&lt;path&gt;/parquet_snappy |\n| 2013  | 12    | 2   | -1    | 1      | 2.53MB  | NOT CACHED   | NOT CACHED        | PARQUET | false             | hdfs://&lt;server&gt;:8020/&lt;path&gt;/parquet_snappy |\n| 2013  | 12    | 3   | -1    | 1      | 2.52MB  | NOT CACHED   | NOT CACHED        | PARQUET | false             | hdfs://&lt;server&gt;:8020/&lt;path&gt;/parquet_snappy |\n| 2013  | 12    | 4   | -1    | 1      | 2.51MB  | NOT CACHED   | NOT CACHED        | PARQUET | false             | hdfs://&lt;server&gt;:8020/&lt;path&gt;/parquet_snappy |\n| 2013  | 12    | 5   | -1    | 1      | 2.52MB  | NOT CACHED   | NOT CACHED        | PARQUET | false             | hdfs://&lt;server&gt;:8020/&lt;path&gt;/parquet_snappy |\n| Total |       |     | -1    | 5      | 12.58MB | 0B           |                   |         |                   |                                            |\n+-------+-------+-----+-------+--------+---------+--------------+-------------------+---------+-------------------+--------------------------------------------+\n\nshow column stats year_month_day;\n+-----------+---------+------------------+--------+----------+----------+\n| Column    | Type    | #Distinct Values | #Nulls | Max Size | Avg Size |\n+-----------+---------+------------------+--------+----------+----------+\n| id        | INT     | -1               | -1     | 4        | 4        |\n| val       | INT     | -1               | -1     | 4        | 4        |\n| zfill     | STRING  | -1               | -1     | -1       | -1       |\n| name      | STRING  | -1               | -1     | -1       | -1       |\n| assertion | BOOLEAN | -1               | -1     | 1        | 1        |\n| year      | INT     | 1                | 0      | 4        | 4        |\n| month     | INT     | 1                | 0      | 4        | 4        |\n| day       | INT     | 5                | 0      | 4        | 4        |\n+-----------+---------+------------------+--------+----------+----------+\n\ncompute stats year_month_day;\n+-----------------------------------------+\n| summary                                 |\n+-----------------------------------------+\n| Updated 5 partition(s) and 5 column(s). |\n+-----------------------------------------+\n\nshow table stats year_month_day;\n+-------+-------+-----+--------+--------+---------+--------------+-------------------+---------+-------------------+--------------------------------------------+\n| year  | month | day | #Rows  | #Files | Size    | Bytes Cached | Cache Replication | Format  | Incremental stats | Location                                   |\n+-------+-------+-----+--------+--------+---------+--------------+-------------------+---------+-------------------+--------------------------------------------+\n| 2013  | 12    | 1   | 93606  | 1      | 2.51MB  | NOT CACHED   | NOT CACHED        | PARQUET | false             | hdfs://&lt;server&gt;:8020/&lt;path&gt;/parquet_snappy |\n| 2013  | 12    | 2   | 94158  | 1      | 2.53MB  | NOT CACHED   | NOT CACHED        | PARQUET | false             | hdfs://&lt;server&gt;:8020/&lt;path&gt;/parquet_snappy |\n| 2013  | 12    | 3   | 94122  | 1      | 2.52MB  | NOT CACHED   | NOT CACHED        | PARQUET | false             | hdfs://&lt;server&gt;:8020/&lt;path&gt;/parquet_snappy |\n| 2013  | 12    | 4   | 93559  | 1      | 2.51MB  | NOT CACHED   | NOT CACHED        | PARQUET | false             | hdfs://&lt;server&gt;:8020/&lt;path&gt;/parquet_snappy |\n| 2013  | 12    | 5   | 93845  | 1      | 2.52MB  | NOT CACHED   | NOT CACHED        | PARQUET | false             | hdfs://&lt;server&gt;:8020/&lt;path&gt;/parquet_snappy |\n| Total |       |     | 469290 | 5      | 12.58MB | 0B           |                   |         |                   |                                            |\n+-------+-------+-----+--------+--------+---------+--------------+-------------------+---------+-------------------+--------------------------------------------+\n\nshow column stats year_month_day;\n+-----------+---------+------------------+--------+----------+-------------------+\n| Column    | Type    | #Distinct Values | #Nulls | Max Size | Avg Size          |\n+-----------+---------+------------------+--------+----------+-------------------+\n| id        | INT     | 511129           | -1     | 4        | 4                 |\n| val       | INT     | 364853           | -1     | 4        | 4                 |\n| zfill     | STRING  | 311430           | -1     | 6        | 6                 |\n| name      | STRING  | 471975           | -1     | 22       | 13.00160026550293 |\n| assertion | BOOLEAN | 2                | -1     | 1        | 1                 |\n| year      | INT     | 1                | 0      | 4        | 4                 |\n| month     | INT     | 1                | 0      | 4        | 4                 |\n| day       | INT     | 5                | 0      | 4        | 4                 |\n+-----------+---------+------------------+--------+----------+-------------------+\n</div><p id=\"hive_column_stats_caveat\">\n        If you run the Hive statement <span class=\"hue-doc-codeph\">ANALYZE TABLE COMPUTE STATISTICS FOR\n        COLUMNS</span>, Impala can only use the resulting column statistics if the table is\n        unpartitioned. Impala cannot use Hive-generated column statistics for a partitioned\n        table.\n      </p></div></div><div id=\"perf_generating_stats\"><div class=\"hue-doc-title\">Generating Table and Column Statistics</div><div><p>\n        Use the <span class=\"hue-doc-codeph\">COMPUTE STATS</span> family of commands to collect table and\n        column statistics. The <span class=\"hue-doc-codeph\">COMPUTE STATS</span> variants offer\n        different tradeoffs between computation cost, staleness, and maintenance\n        workflows which are explained below.\n      </p><div class=\"hue-doc-note\"><p id=\"cs_or_cis\">\n        For a particular table, use either <span class=\"hue-doc-codeph\">COMPUTE STATS</span> or <span class=\"hue-doc-codeph\">COMPUTE\n        INCREMENTAL STATS</span>, but never combine the two or alternate between them. If you\n        switch from <span class=\"hue-doc-codeph\">COMPUTE STATS</span> to <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span>\n        during the lifetime of a table, or vice versa, drop all statistics by running\n        <span class=\"hue-doc-codeph\">DROP STATS</span> before making the switch.\n      </p></div></div><div id=\"concept_y2f_nfl_mdb\"><div class=\"hue-doc-title\">COMPUTE STATS</div><div><p>\n          The <span class=\"hue-doc-codeph\">COMPUTE STATS</span> command collects and sets the table-level\n          and partition-level row counts as well as all column statistics for a given\n          table. The collection process is CPU-intensive and can take a long time to\n          complete for very large tables.\n        </p><p>\n          To speed up <span class=\"hue-doc-codeph\">COMPUTE STATS</span> consider the following options\n          which can be combined.\n          <ul><li><p>\n              Limit the number of columns for which statistics are collected to increase\n              the efficiency of COMPUTE STATS. Queries benefit from statistics for those\n              columns involved in filters, join conditions, group by or partition by\n              clauses. Other columns are good candidates to exclude from COMPUTE STATS.\n              This feature is available since Impala 2.12.\n            </p></li><li><p>\n              Set the MT_DOP query option to use more threads within each participating\n              impalad to compute the statistics faster - but not more efficiently. Note\n              that computing stats on a large table with a high MT_DOP value can\n              negatively affect other queries running at the same time if the\n              COMPUTE STATS claims most CPU cycles.\n              This feature is available since Impala 2.8.\n            </p></li><li><p>\n              Consider the experimental extrapolation and sampling features (see below)\n              to further increase the efficiency of computing stats.\n            </p></li></ul></p><p><span class=\"hue-doc-codeph\">COMPUTE STATS</span> is intended to be run periodically,\n          e.g. weekly, or on-demand when the contents of a table have changed\n          significantly. Due to the high resource utilization and long repsonse\n          time of t<span class=\"hue-doc-codeph\">COMPUTE STATS</span>, it is most practical to run it\n          in a scheduled maintnance window where the Impala cluster is idle\n          enough to accommodate the expensive operation. The degree of change that\n          qualifies as <q>significant</q> depends on the query workload, but typically,\n          if 30% of the rows have changed then it is recommended to recompute\n          statistics.\n        </p><p>\n          If you reload a complete new set of data for a table, but the number of rows and\n          number of distinct values for each column is relatively unchanged from before, you\n          do not need to recompute stats for the table.\n        </p></div><div id=\"experimental_stats_features\"><div class=\"hue-doc-title\">Experimental: Extrapolation and Sampling</div><div><p>\n            Impala 2.12 and higher includes two experimental features to alleviate\n            common issues for computing and maintaining statistics on very large tables.\n            The following shortcomings are improved upon:\n            <ul><li><p>\n                Newly added partitions do not have row count statistics. Table scans\n                that only access those new partitions are treated as not having stats.\n                Similarly, table scans that access both new and old partitions estimate\n                the scan cardinality based on those old partitions that have stats, and\n                the new partitions without stats are treated as having 0 rows.\n              </p></li><li><p>\n                The row counts of existing partitions become stale when data is added\n                or dropped.\n              </p></li><li><p>\n                Computing stats for tables with a 100,000 or more partitions might fail\n                or be very slow due to the high cost of updating the partition metadata\n                in the Hive Metastore.\n              </p></li><li><p>\n                With transient compute resources it is important to minimize the time\n                from starting a new cluster to successfully running queries.\n                Since the cluster might be relatively short-lived, users might prefer to\n                quickly collect stats that are \"good enough\" as opposed to spending\n                a lot of time and resouces on computing full-fidelity stats.\n              </p></li></ul>\n            For very large tables, it is often wasteful or impractical to run a full\n            COMPUTE STATS to address the scenarios above on a frequent basis.\n          </p><p>\n            The sampling feature makes COMPUTE STATS more efficient by processing a\n            fraction of the table data, and the extrapolation feature aims to reduce\n            the frequency at which COMPUTE STATS needs to be re-run by estimating\n            the row count of new and modified partitions.\n          </p><p>\n            The sampling and extrapolation features are disabled by default.\n            They can be enabled globally or for specific tables, as follows.\n            Set the impalad start-up configuration \"--enable_stats_extrapolation\" to\n            enable the features globally. To enable them only for a specific table, set\n            the \"impala.enable.stats.extrapolation\" table property to \"true\" for the\n            desired table. The table-level property overrides the global setting, so\n            it is also possible to enable sampling and extrapolation globally, but\n            disable it for specific tables by setting the table property to \"false\".\n            Example:\n            ALTER TABLE mytable test_table SET TBLPROPERTIES(\"impala.enable.stats.extrapolation\"=\"true\")\n          </p><div class=\"hue-doc-note\">            Why are these features experimental? Due to their probabilistic nature\n            it is possible that these features perform pathologically poorly on tables\n            with extreme data/file/size distributions. Since it is not feasible for us\n            to test all possible scenarios we only cautiously advertise these new\n            capabilities. That said, the features have been thoroughly tested and\n            are considered functionally stable. If you decide to give these features\n            a try, please tell us about your experience at user@impala.apache.org!\n            We rely on user feedback to guide future inprovements in statistics\n            collection.\n          </div></div><div id=\"experimental_stats_extrapolation\"><div class=\"hue-doc-title\">Stats Extrapolation</div><div><p>\n              The main idea of stats extrapolation is to estimate the row count of new\n              and modified partitions based on the result of the last COMPUTE STATS.\n              Enabling stats extrapolation changes the behavior of COMPUTE STATS,\n              as well as the cardinality estimation of table scans. COMPUTE STATS no\n              longer computes and stores per-partition row counts, and instead, only\n              computes a table-level row count together with the total number of file\n              bytes in the table at that time. No partition metadata is modified. The\n              input cardinality of a table scan is estimated by converting the data\n              volume of relevant partitions to a row count, based on the table-level\n              row count and file bytes statistics. It is assumed that within the same\n              table, different sets of files with the same data volume correspond\n              to the similar number of rows on average. With extrapolation enabled,\n              the scan cardinality estimation ignores per-partition row counts. It\n              only relies on the table-level statistics and the scanned data volume.\n            </p><p>\n              The SHOW TABLE STATS and EXPLAIN commands distinguish between row counts\n              stored in the Hive Metastore, and the row counts extrapolated based on the\n              above process. Consult the SHOW TABLE STATS and EXPLAIN documentation\n              for more details.\n            </p></div></div><div id=\"experimental_stats_sampling\"><div class=\"hue-doc-title\">Sampling</div><div><p>\n              A TABLESAMPLE clause may be added to COMPUTE STATS to limit the\n              percentage of data to be processed. The final statistics are obtained\n              by extrapolating the statistics from the data sample over the entire table.\n              The extrapolated statistics are stored in the Hive Metastore, just as if no\n              sampling was used. The following example runs COMPUTE STATS over a 10 percent\n              data sample: COMPUTE STATS test_table TABLESAMPLE SYSTEM(10)\n            </p><p>\n            We have found that a 10 percent sampling rate typically offers a good\n            tradeoff between statistics accuracy and execution cost. A sampling rate\n            well below 10 percent has shown poor results and is not recommended.\n            </p><div class=\"hue-doc-note\">              Sampling-based techniques sacrifice result accuracy for execution\n              efficiency, so your mileage may vary for different tables and columns\n              depending on their data distribution. The extrapolation procedure Impala\n              uses for estimating the number of distinct values per column is inherently\n              non-detetministic, so your results may even vary between runs of\n              COMPUTE STATS TABLESAMPLE, even if no data has changed.\n            </div></div></div></div></div><div id=\"concept_bmk_pfl_mdb\"><div class=\"hue-doc-title\">COMPUTE INCREMENTAL STATS</div><div><p>\n          In Impala 2.1.0 and higher, you can use the\n          <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span> and\n          <span class=\"hue-doc-codeph\">DROP INCREMENTAL STATS</span> commands.\n          The <span class=\"hue-doc-codeph\">INCREMENTAL</span> clauses work with incremental statistics,\n          a specialized feature for partitioned tables.\n        </p><p>\n          When you compute incremental statistics for a partitioned table, by default Impala only\n          processes those partitions that do not yet have incremental statistics. By processing\n          only newly added partitions, you can keep statistics up to date without incurring the\n          overhead of reprocessing the entire table each time.\n        </p><p>\n          You can also compute or drop statistics for a specified subset of partitions by\n          including a <span class=\"hue-doc-codeph\">PARTITION</span> clause in the\n          <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span> or <span class=\"hue-doc-codeph\">DROP INCREMENTAL STATS</span>\n          statement.\n        </p><div class=\"hue-doc-note\"><p id=\"incremental_stats_caveats\">\n        In Impala 3.0 and lower, approximately 400 bytes of metadata per column per partition\n        are needed for caching. Tables with a big number of partitions and many columns can add\n        up to a significant memory overhead as the metadata must be cached on the\n        <span class=\"hue-doc-cmdname\">catalogd</span> host and on every <span class=\"hue-doc-cmdname\">impalad</span> host that is\n        eligible to be a coordinator. If this metadata for all tables exceeds 2 GB, you might\n        experience service downtime. In Impala 3.1 and higher, the issue was alleviated with an\n        improved handling of incremental stats.\n      </p><p id=\"incremental_stats_after_full\">\n        When you run <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span> on a table for the first time,\n        the statistics are computed again from scratch regardless of whether the table already\n        has statistics. Therefore, expect a one-time resource-intensive operation for scanning\n        the entire table when running <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span> for the first\n        time on a given table.\n      </p></div><p>\n          The metadata for incremental statistics is handled differently from the original style\n          of statistics:\n        </p><ul><li><p>\n              Issuing a <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span> without a partition\n              clause causes Impala to compute incremental stats for all partitions that\n              do not already have incremental stats. This might be the entire table when\n              running the command for the first time, but subsequent runs should only\n              update new partitions. You can force updating a partition that already has\n              incremental stats by issuing a <span class=\"hue-doc-codeph\">DROP INCREMENTAL STATS</span>\n              before running <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span>.\n            </p></li><li><p>\n              The <span class=\"hue-doc-codeph\">SHOW TABLE STATS</span> and <span class=\"hue-doc-codeph\">SHOW PARTITIONS</span>\n              statements now include an additional column showing whether incremental statistics\n              are available for each column. A partition could already be covered by the original\n              type of statistics based on a prior <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement, as\n              indicated by a value other than <span class=\"hue-doc-codeph\">-1</span> under the <span class=\"hue-doc-codeph\">#Rows</span>\n              column. Impala query planning uses either kind of statistics when available.\n            </p></li><li><p><span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span> takes more time than <span class=\"hue-doc-codeph\">COMPUTE\n              STATS</span> for the same volume of data. Therefore it is most suitable for tables\n              with large data volume where new partitions are added frequently, making it\n              impractical to run a full <span class=\"hue-doc-codeph\">COMPUTE STATS</span> operation for each new\n              partition. For unpartitioned tables, or partitioned tables that are loaded once and\n              not updated with new partitions, use the original <span class=\"hue-doc-codeph\">COMPUTE STATS</span>\n              syntax.\n            </p></li><li><p><span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span> uses some memory in the\n                <span class=\"hue-doc-cmdname\">catalogd</span> process, proportional to the number\n              of partitions and number of columns in the applicable table. The\n              memory overhead is approximately 400 bytes for each column in each\n              partition. This memory is reserved in the\n                <span class=\"hue-doc-cmdname\">catalogd</span> daemon, the\n                <span class=\"hue-doc-cmdname\">statestored</span> daemon, and in each instance of\n              the impalad daemon. </p></li><li><p>\n              In cases where new files are added to an existing partition, issue a\n              <span class=\"hue-doc-codeph\">REFRESH</span> statement for the table, followed by a <span class=\"hue-doc-codeph\">DROP\n              INCREMENTAL STATS</span> and <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span> sequence\n              for the changed partition.\n            </p></li><li><p>\n              The <span class=\"hue-doc-codeph\">DROP INCREMENTAL STATS</span> statement operates only on a single\n              partition at a time. To remove statistics (whether incremental or not) from all\n              partitions of a table, issue a <span class=\"hue-doc-codeph\">DROP STATS</span> statement with no\n              <span class=\"hue-doc-codeph\">INCREMENTAL</span> or <span class=\"hue-doc-codeph\">PARTITION</span> clauses.\n            </p></li></ul><p>\n          The following considerations apply to incremental statistics when the structure of an\n          existing table is changed (known as <span class=\"hue-doc-term\">schema evolution</span>):\n        </p><ul><li><p>\n              If you use an <span class=\"hue-doc-codeph\">ALTER TABLE</span> statement to drop a column, the existing\n              statistics remain valid and <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span> does not\n              rescan any partitions.\n            </p></li><li><p>\n              If you use an <span class=\"hue-doc-codeph\">ALTER TABLE</span> statement to add a column, Impala rescans\n              all partitions and fills in the appropriate column-level values the next time you\n              run <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span>.\n            </p></li><li><p>\n              If you use an <span class=\"hue-doc-codeph\">ALTER TABLE</span> statement to change the data type of a\n              column, Impala rescans all partitions and fills in the appropriate column-level\n              values the next time you run <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span>.\n            </p></li><li><p>\n              If you use an <span class=\"hue-doc-codeph\">ALTER TABLE</span> statement to change the file format of a\n              table, the existing statistics remain valid and a subsequent <span class=\"hue-doc-codeph\">COMPUTE\n              INCREMENTAL STATS</span> does not rescan any partitions.\n            </p></li></ul><p>\n          See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_compute_stats.xml\" data-doc-anchor-id=\"compute_stats\">COMPUTE STATS Statement</a> and\n          <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_drop_stats.xml\" data-doc-anchor-id=\"drop_stats\">DROP STATS Statement</a> for syntax details.\n        </p></div><div id=\"inc_stats_size_limit_bytes\"><div class=\"hue-doc-title\">Maximum Serialized Stats Size</div><div><p>In Impala 3.0 and lower, when executing <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL\n              STATS</span> on very large tables, use the configuration setting\n              <span class=\"hue-doc-codeph\">--inc_stats_size_limit_bytes</span> to prevent Impala\n            from running out of memory while updating table metadata. If this\n            limit is reached, Impala will stop loading the table and return an\n            error. The error serves as an indication that <span class=\"hue-doc-codeph\">COMPUTE\n              INCREMENTAL STATS</span> should not be used on the particular\n            table. Consider spitting the table and using regular <span class=\"hue-doc-codeph\">COMPUTE\n              STATS</span> ]if possible. </p><p> The <span class=\"hue-doc-codeph\">--inc_stats_size_limit_bytes</span> limit is set as\n            a safety check, to prevent Impala from hitting the maximum limit for\n            the table metadata. Note that this limit is only one part of the\n            entire table's metadata all of which together must be below 2 GB. </p><p> The default value for\n              <span class=\"hue-doc-codeph\">--inc_stats_size_limit_bytes</span> is 209715200, 200\n            MB. </p><p> To change the <span class=\"hue-doc-codeph\">--inc_stats_size_limit_bytes</span> value,\n            restart impalad and catalogd with the new value specified in bytes,\n            for example, 1048576000 for 1 GB. See <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_config_options.html#config_options\" target=\"_blank\">Modifying Impala Startup Options</a> for the steps to\n            change the option and restart Impala daemons. </p><div class=\"hue-doc-note\"> The\n              <span class=\"hue-doc-codeph\">--inc_stats_size_limit_bytes</span> setting should be\n            increased with care. A big value for the setting, such as 1 GB or\n            more, can result in a spike in heap usage as well as a crash of\n            Impala. </div><p>In Impala 3.1 and higher, Impala improved how metadata is updated\n            when executing <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span>,\n            significantly reducing the need for\n              <span class=\"hue-doc-codeph\">--inc_stats_size_limit_bytes</span>. </p></div></div></div></div><div id=\"perf_stats_checking\"><div class=\"hue-doc-title\">Detecting Missing Statistics</div><div><p>\n        You can check whether a specific table has statistics using the <span class=\"hue-doc-codeph\">SHOW TABLE\n        STATS</span> statement (for any table) or the <span class=\"hue-doc-codeph\">SHOW PARTITIONS</span>\n        statement (for a partitioned table). Both statements display the same information. If a\n        table or a partition does not have any statistics, the <span class=\"hue-doc-codeph\">#Rows</span> field\n        contains <span class=\"hue-doc-codeph\">-1</span>. Once you compute statistics for the table or partition,\n        the <span class=\"hue-doc-codeph\">#Rows</span> field changes to an accurate value.\n      </p><p>\n        The following example shows a table that initially does not have any statistics. The\n        <span class=\"hue-doc-codeph\">SHOW TABLE STATS</span> statement displays different values for\n        <span class=\"hue-doc-codeph\">#Rows</span> before and after the <span class=\"hue-doc-codeph\">COMPUTE STATS</span> operation.\n      </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; create table no_stats (x int);\n[localhost:21000] &gt; show table stats no_stats;\n+-------+--------+------+--------------+--------+-------------------+\n| #Rows | #Files | Size | Bytes Cached | Format | Incremental stats |\n+-------+--------+------+--------------+--------+-------------------+\n| -1    | 0      | 0B   | NOT CACHED   | TEXT   | false             |\n+-------+--------+------+--------------+--------+-------------------+\n[localhost:21000] &gt; compute stats no_stats;\n+-----------------------------------------+\n| summary                                 |\n+-----------------------------------------+\n| Updated 1 partition(s) and 1 column(s). |\n+-----------------------------------------+\n[localhost:21000] &gt; show table stats no_stats;\n+-------+--------+------+--------------+--------+-------------------+\n| #Rows | #Files | Size | Bytes Cached | Format | Incremental stats |\n+-------+--------+------+--------------+--------+-------------------+\n| 0     | 0      | 0B   | NOT CACHED   | TEXT   | false             |\n+-------+--------+------+--------------+--------+-------------------+\n</div><p>\n        The following example shows a similar progression with a partitioned table. Initially,\n        <span class=\"hue-doc-codeph\">#Rows</span> is <span class=\"hue-doc-codeph\">-1</span>. After a <span class=\"hue-doc-codeph\">COMPUTE STATS</span>\n        operation, <span class=\"hue-doc-codeph\">#Rows</span> changes to an accurate value. Any newly added\n        partition starts with no statistics, meaning that you must collect statistics after\n        adding a new partition.\n      </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; create table no_stats_partitioned (x int) partitioned by (year smallint);\n[localhost:21000] &gt; show table stats no_stats_partitioned;\n+-------+-------+--------+------+--------------+--------+-------------------+\n| year  | #Rows | #Files | Size | Bytes Cached | Format | Incremental stats |\n+-------+-------+--------+------+--------------+--------+-------------------+\n| Total | -1    | 0      | 0B   | 0B           |        |                   |\n+-------+-------+--------+------+--------------+--------+-------------------+\n[localhost:21000] &gt; show partitions no_stats_partitioned;\n+-------+-------+--------+------+--------------+--------+-------------------+\n| year  | #Rows | #Files | Size | Bytes Cached | Format | Incremental stats |\n+-------+-------+--------+------+--------------+--------+-------------------+\n| Total | -1    | 0      | 0B   | 0B           |        |                   |\n+-------+-------+--------+------+--------------+--------+-------------------+\n[localhost:21000] &gt; alter table no_stats_partitioned add partition (year=2013);\n[localhost:21000] &gt; compute stats no_stats_partitioned;\n+-----------------------------------------+\n| summary                                 |\n+-----------------------------------------+\n| Updated 1 partition(s) and 1 column(s). |\n+-----------------------------------------+\n[localhost:21000] &gt; alter table no_stats_partitioned add partition (year=2014);\n[localhost:21000] &gt; show partitions no_stats_partitioned;\n+-------+-------+--------+------+--------------+--------+-------------------+\n| year  | #Rows | #Files | Size | Bytes Cached | Format | Incremental stats |\n+-------+-------+--------+------+--------------+--------+-------------------+\n| 2013  | 0     | 0      | 0B   | NOT CACHED   | TEXT   | false             |\n| 2014  | -1    | 0      | 0B   | NOT CACHED   | TEXT   | false             |\n| Total | 0     | 0      | 0B   | 0B           |        |                   |\n+-------+-------+--------+------+--------------+--------+-------------------+\n</div><div class=\"hue-doc-note\">        Because the default <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement creates and updates\n        statistics for all partitions in a table, if you expect to frequently add new\n        partitions, use the <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span> syntax instead, which\n        lets you compute stats for a single specified partition, or only for those partitions\n        that do not already have incremental stats.\n      </div><p>\n        If checking each individual table is impractical, due to a large number of tables or\n        views that hide the underlying base tables, you can also check for missing statistics\n        for a particular query. Use the <span class=\"hue-doc-codeph\">EXPLAIN</span> statement to preview query\n        efficiency before actually running the query. Use the query profile output available\n        through the <span class=\"hue-doc-codeph\">PROFILE</span> command in <span class=\"hue-doc-cmdname\">impala-shell</span> or the\n        web UI to verify query execution and timing after running the query. Both the\n        <span class=\"hue-doc-codeph\">EXPLAIN</span> plan and the <span class=\"hue-doc-codeph\">PROFILE</span> output display a warning\n        if any tables or partitions involved in the query do not have statistics.\n      </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; create table no_stats (x int);\n[localhost:21000] &gt; explain select count(*) from no_stats;\n+------------------------------------------------------------------------------------+\n| Explain String                                                                     |\n+------------------------------------------------------------------------------------+\n| Estimated Per-Host Requirements: Memory=10.00MB VCores=1                           |\n| WARNING: The following tables are missing relevant table and/or column statistics. |\n| incremental_stats.no_stats                                                         |\n|                                                                                    |\n| 03:AGGREGATE [FINALIZE]                                                            |\n| |  output: count:merge(*)                                                          |\n| |                                                                                  |\n| 02:EXCHANGE [UNPARTITIONED]                                                        |\n| |                                                                                  |\n| 01:AGGREGATE                                                                       |\n| |  output: count(*)                                                                |\n| |                                                                                  |\n| 00:SCAN HDFS [incremental_stats.no_stats]                                          |\n|    partitions=1/1 files=0 size=0B                                                  |\n+------------------------------------------------------------------------------------+\n</div><p>\n        Because Impala uses the <span class=\"hue-doc-term\">partition pruning</span> technique when possible to only\n        evaluate certain partitions, if you have a partitioned table with statistics for some\n        partitions and not others, whether or not the <span class=\"hue-doc-codeph\">EXPLAIN</span> statement shows\n        the warning depends on the actual partitions used by the query. For example, you might\n        see warnings or not for different queries against the same table:\n      </p><div class=\"hue-doc-codeblock\">-- No warning because all the partitions for the year 2012 have stats.\nEXPLAIN SELECT ... FROM t1 WHERE year = 2012;\n\n-- Missing stats warning because one or more partitions in this range\n-- do not have stats.\nEXPLAIN SELECT ... FROM t1 WHERE year BETWEEN 2006 AND 2009;\n</div><p>\n        To confirm if any partitions at all in the table are missing statistics, you might\n        explain a query that scans the entire table, such as <span class=\"hue-doc-codeph\">SELECT COUNT(*) FROM\n        <span class=\"hue-doc-varname\">table_name</span></span>.\n      </p></div></div><div id=\"concept_s3c_4gl_mdb\"><div class=\"hue-doc-title\">Manually Setting Table and Column Statistics with ALTER TABLE</div><div id=\"concept_wpt_pgl_mdb\"><div class=\"hue-doc-title\">Setting Table Statistics</div><div><p>\n          The most crucial piece of data in all the statistics is the number of rows in the\n          table (for an unpartitioned or partitioned table) and for each partition (for a\n          partitioned table). The <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement always gathers\n          statistics about all columns, as well as overall table statistics. If it is not\n          practical to do a full <span class=\"hue-doc-codeph\">COMPUTE STATS</span> or <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL\n          STATS</span> operation after adding a partition or inserting data, or if you can see\n          that Impala would produce a more efficient plan if the number of rows was different,\n          you can manually set the number of rows through an <span class=\"hue-doc-codeph\">ALTER TABLE</span>\n          statement:\n        </p><div class=\"hue-doc-codeblock\">-- Set total number of rows. Applies to both unpartitioned and partitioned tables.\nalter table <span class=\"hue-doc-varname\">table_name</span> set tblproperties('numRows'='<span class=\"hue-doc-varname\">new_value</span>', 'STATS_GENERATED_VIA_STATS_TASK'='true');\n\n-- Set total number of rows for a specific partition. Applies to partitioned tables only.\n-- You must specify all the partition key columns in the PARTITION clause.\nalter table <span class=\"hue-doc-varname\">table_name</span> partition (<span class=\"hue-doc-varname\">keycol1</span>=<span class=\"hue-doc-varname\">val1</span>,<span class=\"hue-doc-varname\">keycol2</span>=<span class=\"hue-doc-varname\">val2</span>...) set tblproperties('numRows'='<span class=\"hue-doc-varname\">new_value</span>', 'STATS_GENERATED_VIA_STATS_TASK'='true');\n</div><p>\n          This statement avoids re-scanning any data files. (The requirement to include the\n          <span class=\"hue-doc-codeph\">STATS_GENERATED_VIA_STATS_TASK</span> property is relatively new, as a\n          result of the issue\n          <a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/HIVE-8648\" target=\"_blank\">HIVE-8648</a>\n          for the Hive metastore.)\n        </p><div class=\"hue-doc-codeblock\" id=\"set_numrows_example\">create table analysis_data stored as parquet as select * from raw_data;\nInserted 1000000000 rows in 181.98s\ncompute stats analysis_data;\ninsert into analysis_data select * from smaller_table_we_forgot_before;\nInserted 1000000 rows in 15.32s\n-- Now there are 1001000000 rows. We can update this single data point in the stats.\nalter table analysis_data set tblproperties('numRows'='1001000000', 'STATS_GENERATED_VIA_STATS_TASK'='true');</div><p>\n          For a partitioned table, update both the per-partition number of rows and the number\n          of rows for the whole table:\n        </p><div class=\"hue-doc-codeblock\" id=\"set_numrows_partitioned_example\">-- If the table originally contained 1 million rows, and we add another partition with 30 thousand rows,\n-- change the numRows property for the partition and the overall table.\nalter table partitioned_data partition(year=2009, month=4) set tblproperties ('numRows'='30000', 'STATS_GENERATED_VIA_STATS_TASK'='true');\nalter table partitioned_data set tblproperties ('numRows'='1030000', 'STATS_GENERATED_VIA_STATS_TASK'='true');</div><p>\n          In practice, the <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement, or <span class=\"hue-doc-codeph\">COMPUTE\n          INCREMENTAL STATS</span> for a partitioned table, should be fast and convenient\n          enough that this technique is only useful for the very largest partitioned tables.\n\n          Because the column statistics might be left in a stale state, do not use this\n          technique as a replacement for <span class=\"hue-doc-codeph\">COMPUTE STATS</span>. Only use this technique\n          if all other means of collecting statistics are impractical, or as a low-overhead\n          operation that you run in between periodic <span class=\"hue-doc-codeph\">COMPUTE STATS</span> or\n          <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span> operations.\n        </p></div></div><div id=\"concept_asb_vgl_mdb\"><div class=\"hue-doc-title\">Setting Column Statistics</div><div><p>\n          In Impala 2.6 and higher, you can also use the <span class=\"hue-doc-codeph\">SET\n          COLUMN STATS</span> clause of <span class=\"hue-doc-codeph\">ALTER TABLE</span> to manually set or change\n          column statistics. Only use this technique in cases where it is impractical to run\n          <span class=\"hue-doc-codeph\">COMPUTE STATS</span> or <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span>\n          frequently enough to keep up with data changes for a huge table.\n        </p><p id=\"set_column_stats_example\">\n        You specify a case-insensitive symbolic name for the kind of statistics:\n        <span class=\"hue-doc-codeph\">numDVs</span>, <span class=\"hue-doc-codeph\">numNulls</span>, <span class=\"hue-doc-codeph\">avgSize</span>,\n        <span class=\"hue-doc-codeph\">maxSize</span>. The key names and values are both quoted. This operation\n        applies to an entire table, not a specific partition. For example:\n<div class=\"hue-doc-codeblock\">create table t1 (x int, s string);\ninsert into t1 values (1, 'one'), (2, 'two'), (2, 'deux');\nshow column stats t1;\n+--------+--------+------------------+--------+----------+----------+\n| Column | Type   | #Distinct Values | #Nulls | Max Size | Avg Size |\n+--------+--------+------------------+--------+----------+----------+\n| x      | INT    | -1               | -1     | 4        | 4        |\n| s      | STRING | -1               | -1     | -1       | -1       |\n+--------+--------+------------------+--------+----------+----------+\nalter table t1 set column stats x ('numDVs'='2','numNulls'='0');\nalter table t1 set column stats s ('numdvs'='3','maxsize'='4');\nshow column stats t1;\n+--------+--------+------------------+--------+----------+----------+\n| Column | Type   | #Distinct Values | #Nulls | Max Size | Avg Size |\n+--------+--------+------------------+--------+----------+----------+\n| x      | INT    | 2                | 0      | 4        | 4        |\n| s      | STRING | 3                | -1     | 4        | -1       |\n+--------+--------+------------------+--------+----------+----------+\n</div></p></div></div></div><div id=\"perf_stats_examples\"><div class=\"hue-doc-title\">Examples of Using Table and Column Statistics with Impala</div><div><p>\n        The following examples walk through a sequence of <span class=\"hue-doc-codeph\">SHOW TABLE STATS</span>,\n        <span class=\"hue-doc-codeph\">SHOW COLUMN STATS</span>, <span class=\"hue-doc-codeph\">ALTER TABLE</span>, and\n        <span class=\"hue-doc-codeph\">SELECT</span> and <span class=\"hue-doc-codeph\">INSERT</span> statements to illustrate various\n        aspects of how Impala uses statistics to help optimize queries.\n      </p><p>\n        This example shows table and column statistics for the <span class=\"hue-doc-codeph\">STORE</span> column\n        used in the <a class=\"hue-doc-external-link\" href=\"http://www.tpc.org/tpcds/\" target=\"_blank\">TPC-DS\n        benchmarks for decision support</a> systems. It is a tiny table holding data for 12\n        stores. Initially, before any statistics are gathered by a <span class=\"hue-doc-codeph\">COMPUTE\n        STATS</span> statement, most of the numeric fields show placeholder values of -1,\n        indicating that the figures are unknown. The figures that are filled in are values that\n        are easily countable or deducible at the physical level, such as the number of files,\n        total data size of the files, and the maximum and average sizes for data types that have\n        a constant size such as <span class=\"hue-doc-codeph\">INT</span>, <span class=\"hue-doc-codeph\">FLOAT</span>, and\n        <span class=\"hue-doc-codeph\">TIMESTAMP</span>.\n      </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; show table stats store;\n+-------+--------+--------+--------+\n| #Rows | #Files | Size   | Format |\n+-------+--------+--------+--------+\n| -1    | 1      | 3.08KB | TEXT   |\n+-------+--------+--------+--------+\nReturned 1 row(s) in 0.03s\n[localhost:21000] &gt; show column stats store;\n+--------------------+-----------+------------------+--------+----------+----------+\n| Column             | Type      | #Distinct Values | #Nulls | Max Size | Avg Size |\n+--------------------+-----------+------------------+--------+----------+----------+\n| s_store_sk         | INT       | -1               | -1     | 4        | 4        |\n| s_store_id         | STRING    | -1               | -1     | -1       | -1       |\n| s_rec_start_date   | TIMESTAMP | -1               | -1     | 16       | 16       |\n| s_rec_end_date     | TIMESTAMP | -1               | -1     | 16       | 16       |\n| s_closed_date_sk   | INT       | -1               | -1     | 4        | 4        |\n| s_store_name       | STRING    | -1               | -1     | -1       | -1       |\n| s_number_employees | INT       | -1               | -1     | 4        | 4        |\n| s_floor_space      | INT       | -1               | -1     | 4        | 4        |\n| s_hours            | STRING    | -1               | -1     | -1       | -1       |\n| s_manager          | STRING    | -1               | -1     | -1       | -1       |\n| s_market_id        | INT       | -1               | -1     | 4        | 4        |\n| s_geography_class  | STRING    | -1               | -1     | -1       | -1       |\n| s_market_desc      | STRING    | -1               | -1     | -1       | -1       |\n| s_market_manager   | STRING    | -1               | -1     | -1       | -1       |\n| s_division_id      | INT       | -1               | -1     | 4        | 4        |\n| s_division_name    | STRING    | -1               | -1     | -1       | -1       |\n| s_company_id       | INT       | -1               | -1     | 4        | 4        |\n| s_company_name     | STRING    | -1               | -1     | -1       | -1       |\n| s_street_number    | STRING    | -1               | -1     | -1       | -1       |\n| s_street_name      | STRING    | -1               | -1     | -1       | -1       |\n| s_street_type      | STRING    | -1               | -1     | -1       | -1       |\n| s_suite_number     | STRING    | -1               | -1     | -1       | -1       |\n| s_city             | STRING    | -1               | -1     | -1       | -1       |\n| s_county           | STRING    | -1               | -1     | -1       | -1       |\n| s_state            | STRING    | -1               | -1     | -1       | -1       |\n| s_zip              | STRING    | -1               | -1     | -1       | -1       |\n| s_country          | STRING    | -1               | -1     | -1       | -1       |\n| s_gmt_offset       | FLOAT     | -1               | -1     | 4        | 4        |\n| s_tax_percentage   | FLOAT     | -1               | -1     | 4        | 4        |\n+--------------------+-----------+------------------+--------+----------+----------+\nReturned 29 row(s) in 0.04s</div><p>\n        With the Hive <span class=\"hue-doc-codeph\">ANALYZE TABLE</span> statement for column statistics, you had to\n        specify each column for which to gather statistics. The Impala <span class=\"hue-doc-codeph\">COMPUTE\n        STATS</span> statement automatically gathers statistics for all columns, because it\n        reads through the entire table relatively quickly and can efficiently compute the values\n        for all the columns. This example shows how after running the <span class=\"hue-doc-codeph\">COMPUTE\n        STATS</span> statement, statistics are filled in for both the table and all its\n        columns:\n      </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; compute stats store;\n+------------------------------------------+\n| summary                                  |\n+------------------------------------------+\n| Updated 1 partition(s) and 29 column(s). |\n+------------------------------------------+\nReturned 1 row(s) in 1.88s\n[localhost:21000] &gt; show table stats store;\n+-------+--------+--------+--------+\n| #Rows | #Files | Size   | Format |\n+-------+--------+--------+--------+\n| 12    | 1      | 3.08KB | TEXT   |\n+-------+--------+--------+--------+\nReturned 1 row(s) in 0.02s\n[localhost:21000] &gt; show column stats store;\n+--------------------+-----------+------------------+--------+----------+-------------------+\n| Column             | Type      | #Distinct Values | #Nulls | Max Size | Avg Size          |\n+--------------------+-----------+------------------+--------+----------+-------------------+\n| s_store_sk         | INT       | 12               | -1     | 4        | 4                 |\n| s_store_id         | STRING    | 6                | -1     | 16       | 16                |\n| s_rec_start_date   | TIMESTAMP | 4                | -1     | 16       | 16                |\n| s_rec_end_date     | TIMESTAMP | 3                | -1     | 16       | 16                |\n| s_closed_date_sk   | INT       | 3                | -1     | 4        | 4                 |\n| s_store_name       | STRING    | 8                | -1     | 5        | 4.25              |\n| s_number_employees | INT       | 9                | -1     | 4        | 4                 |\n| s_floor_space      | INT       | 10               | -1     | 4        | 4                 |\n| s_hours            | STRING    | 2                | -1     | 8        | 7.083300113677979 |\n| s_manager          | STRING    | 7                | -1     | 15       | 12                |\n| s_market_id        | INT       | 7                | -1     | 4        | 4                 |\n| s_geography_class  | STRING    | 1                | -1     | 7        | 7                 |\n| s_market_desc      | STRING    | 10               | -1     | 94       | 55.5              |\n| s_market_manager   | STRING    | 7                | -1     | 16       | 14                |\n| s_division_id      | INT       | 1                | -1     | 4        | 4                 |\n| s_division_name    | STRING    | 1                | -1     | 7        | 7                 |\n| s_company_id       | INT       | 1                | -1     | 4        | 4                 |\n| s_company_name     | STRING    | 1                | -1     | 7        | 7                 |\n| s_street_number    | STRING    | 9                | -1     | 3        | 2.833300113677979 |\n| s_street_name      | STRING    | 12               | -1     | 11       | 6.583300113677979 |\n| s_street_type      | STRING    | 8                | -1     | 9        | 4.833300113677979 |\n| s_suite_number     | STRING    | 11               | -1     | 9        | 8.25              |\n| s_city             | STRING    | 2                | -1     | 8        | 6.5               |\n| s_county           | STRING    | 1                | -1     | 17       | 17                |\n| s_state            | STRING    | 1                | -1     | 2        | 2                 |\n| s_zip              | STRING    | 2                | -1     | 5        | 5                 |\n| s_country          | STRING    | 1                | -1     | 13       | 13                |\n| s_gmt_offset       | FLOAT     | 1                | -1     | 4        | 4                 |\n| s_tax_percentage   | FLOAT     | 5                | -1     | 4        | 4                 |\n+--------------------+-----------+------------------+--------+----------+-------------------+\nReturned 29 row(s) in 0.04s</div><p>\n        The following example shows how statistics are represented for a partitioned table. In\n        this case, we have set up a table to hold the world's most trivial census data, a single\n        <span class=\"hue-doc-codeph\">STRING</span> field, partitioned by a <span class=\"hue-doc-codeph\">YEAR</span> column. The table\n        statistics include a separate entry for each partition, plus final totals for the\n        numeric fields. The column statistics include some easily deducible facts for the\n        partitioning column, such as the number of distinct values (the number of partition\n        subdirectories).\n</p><div class=\"hue-doc-codeblock\">localhost:21000] &gt; describe census;\n+------+----------+---------+\n| name | type     | comment |\n+------+----------+---------+\n| name | string   |         |\n| year | smallint |         |\n+------+----------+---------+\nReturned 2 row(s) in 0.02s\n[localhost:21000] &gt; show table stats census;\n+-------+-------+--------+------+---------+\n| year  | #Rows | #Files | Size | Format  |\n+-------+-------+--------+------+---------+\n| 2000  | -1    | 0      | 0B   | TEXT    |\n| 2004  | -1    | 0      | 0B   | TEXT    |\n| 2008  | -1    | 0      | 0B   | TEXT    |\n| 2010  | -1    | 0      | 0B   | TEXT    |\n| 2011  | 0     | 1      | 22B  | TEXT    |\n| 2012  | -1    | 1      | 22B  | TEXT    |\n| 2013  | -1    | 1      | 231B | PARQUET |\n| Total | 0     | 3      | 275B |         |\n+-------+-------+--------+------+---------+\nReturned 8 row(s) in 0.02s\n[localhost:21000] &gt; show column stats census;\n+--------+----------+------------------+--------+----------+----------+\n| Column | Type     | #Distinct Values | #Nulls | Max Size | Avg Size |\n+--------+----------+------------------+--------+----------+----------+\n| name   | STRING   | -1               | -1     | -1       | -1       |\n| year   | SMALLINT | 7                | -1     | 2        | 2        |\n+--------+----------+------------------+--------+----------+----------+\nReturned 2 row(s) in 0.02s</div><p>\n        The following example shows how the statistics are filled in by a <span class=\"hue-doc-codeph\">COMPUTE\n        STATS</span> statement in Impala.\n      </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; compute stats census;\n+-----------------------------------------+\n| summary                                 |\n+-----------------------------------------+\n| Updated 3 partition(s) and 1 column(s). |\n+-----------------------------------------+\nReturned 1 row(s) in 2.16s\n[localhost:21000] &gt; show table stats census;\n+-------+-------+--------+------+---------+\n| year  | #Rows | #Files | Size | Format  |\n+-------+-------+--------+------+---------+\n| 2000  | -1    | 0      | 0B   | TEXT    |\n| 2004  | -1    | 0      | 0B   | TEXT    |\n| 2008  | -1    | 0      | 0B   | TEXT    |\n| 2010  | -1    | 0      | 0B   | TEXT    |\n| 2011  | 4     | 1      | 22B  | TEXT    |\n| 2012  | 4     | 1      | 22B  | TEXT    |\n| 2013  | 1     | 1      | 231B | PARQUET |\n| Total | 9     | 3      | 275B |         |\n+-------+-------+--------+------+---------+\nReturned 8 row(s) in 0.02s\n[localhost:21000] &gt; show column stats census;\n+--------+----------+------------------+--------+----------+----------+\n| Column | Type     | #Distinct Values | #Nulls | Max Size | Avg Size |\n+--------+----------+------------------+--------+----------+----------+\n| name   | STRING   | 4                | -1     | 5        | 4.5      |\n| year   | SMALLINT | 7                | -1     | 2        | 2        |\n+--------+----------+------------------+--------+----------+----------+\nReturned 2 row(s) in 0.02s</div><p>\n        For examples showing how some queries work differently when statistics are available,\n        see <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_joins.xml\" data-doc-anchor-id=\"perf_joins_examples\">Examples of Join Order Optimization</a>. You can see how Impala\n        executes a query differently in each case by observing the <span class=\"hue-doc-codeph\">EXPLAIN</span>\n        output before and after collecting statistics. Measure the before and after query times,\n        and examine the throughput numbers in before and after <span class=\"hue-doc-codeph\">SUMMARY</span> or\n        <span class=\"hue-doc-codeph\">PROFILE</span> output, to verify how much the improved plan speeds up\n        performance.\n      </p></div></div></div></div>","title":"Table and Column Statistics"}