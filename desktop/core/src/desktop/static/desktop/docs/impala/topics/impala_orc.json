{"body":"<div><div id=\"orc\"><div class=\"hue-doc-title\">Using the ORC File Format with Impala Tables</div><div><p> Impala supports using ORC data\n      files. By default, ORC reads are enabled in Impala 3.4.0 and higher.</p><table><div class=\"hue-doc-title\">ORC Format Support in Impala</div><thead><tr><td>\n              File Type\n            </td><td>\n              Format\n            </td><td>\n              Compression Codecs\n            </td><td>\n              Impala Can CREATE?\n            </td><td>\n              Impala Can INSERT?\n            </td></tr></thead><tbody><tr id=\"orc_support\"><td><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_orc.xml\" data-doc-anchor-id=\"orc\">ORC</a></td><td>\n              Structured\n            </td><td>\n              gzip, Snappy, LZO, LZ4; currently gzip by default\n            </td><td> Yes, in Impala 2.12.0 and higher. <p>By default, ORC reads are enabled in Impala\n              3.4.0 and higher. </p></td><td>\n              No. Import data by using <span class=\"hue-doc-codeph\">LOAD DATA</span> on data files already in the\n              right format, or use <span class=\"hue-doc-codeph\">INSERT</span> in Hive followed by <span class=\"hue-doc-codeph\">REFRESH\n              <span class=\"hue-doc-varname\">table_name</span></span> in Impala.\n            </td></tr></tbody></table><p/></div><div id=\"orc_create\"><div class=\"hue-doc-title\">Creating ORC Tables and Loading Data</div><div><p>\n        If you do not have an existing data file to use, begin by creating one in the appropriate format.\n      </p><p><b>To create an ORC table:</b></p><p>\n        In the <span class=\"hue-doc-codeph\">impala-shell</span> interpreter, issue a command similar to:\n      </p><div class=\"hue-doc-codeblock\">CREATE TABLE orc_table (<span class=\"hue-doc-varname\">column_specs</span>) STORED AS ORC;</div><p>\n        Because Impala can query some kinds of tables that it cannot currently write to, after creating tables of\n        certain file formats, you might use the Hive shell to load the data. See\n        <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_file_formats.xml\" data-doc-anchor-id=\"file_formats\">How Impala Works with Hadoop File Formats</a> for details. After loading data into a table through\n        Hive or other mechanism outside of Impala, issue a <span class=\"hue-doc-codeph\">REFRESH <span class=\"hue-doc-varname\">table_name</span></span>\n        statement the next time you connect to the Impala node, before querying the table, to make Impala recognize\n        the new data.\n      </p><p>\n        For example, here is how you might create some ORC tables in Impala (by specifying the columns\n        explicitly, or cloning the structure of another table), load data through Hive, and query them through\n        Impala:\n      </p><div class=\"hue-doc-codeblock\">$ impala-shell -i localhost\n[localhost:21000] default&gt; CREATE TABLE orc_table (x INT) STORED AS ORC;\n[localhost:21000] default&gt; CREATE TABLE orc_clone LIKE some_other_table STORED AS ORC;\n[localhost:21000] default&gt; quit;\n\n$ hive\nhive&gt; INSERT INTO TABLE orc_table SELECT x FROM some_other_table;\n3 Rows loaded to orc_table\nTime taken: 4.169 seconds\nhive&gt; quit;\n\n$ impala-shell -i localhost\n[localhost:21000] default&gt; SELECT * FROM orc_table;\nFetched 0 row(s) in 0.11s\n[localhost:21000] default&gt; -- Make Impala recognize the data loaded through Hive;\n[localhost:21000] default&gt; REFRESH orc_table;\n[localhost:21000] default&gt; SELECT * FROM orc_table;\n+---+\n| x |\n+---+\n| 1 |\n| 2 |\n| 3 |\n+---+\nFetched 3 row(s) in 0.11s</div></div></div><div id=\"orc_compression\"><div class=\"hue-doc-title\">Enabling Compression for ORC Tables</div><div><p>\n        ORC tables are in zlib (Deflate in Impala) compression in default. You may want\n        to use Snappy or LZO compression on existing tables for different balance between\n        compression ratio and decompression speed. In Hive-1.1.0, the supported\n        compressions for ORC tables are NONE, ZLIB, SNAPPY and LZO.\n        For example, to enable Snappy compression, you would specify\n        the following additional settings when loading data through the Hive shell:\n      </p><div class=\"hue-doc-codeblock\">hive&gt; SET hive.exec.compress.output=true;\nhive&gt; SET orc.compress=SNAPPY;\nhive&gt; INSERT OVERWRITE TABLE <span class=\"hue-doc-varname\">new_table</span> SELECT * FROM <span class=\"hue-doc-varname\">old_table</span>;</div><p>\n        If you are converting partitioned tables, you must complete additional steps. In such a case, specify\n        additional settings similar to the following:\n      </p><div class=\"hue-doc-codeblock\">hive&gt; CREATE TABLE <span class=\"hue-doc-varname\">new_table</span> (<span class=\"hue-doc-varname\">your_cols</span>) PARTITIONED BY (<span class=\"hue-doc-varname\">partition_cols</span>) STORED AS <span class=\"hue-doc-varname\">new_format</span>;\nhive&gt; SET hive.exec.dynamic.partition.mode=nonstrict;\nhive&gt; SET hive.exec.dynamic.partition=true;\nhive&gt; INSERT OVERWRITE TABLE <span class=\"hue-doc-varname\">new_table</span> PARTITION(<span class=\"hue-doc-varname\">comma_separated_partition_cols</span>) SELECT * FROM <span class=\"hue-doc-varname\">old_table</span>;</div><p>\n        Remember that Hive does not require that you specify a source format for it. Consider the case of\n        converting a table with two partition columns called <span class=\"hue-doc-codeph\">year</span> and <span class=\"hue-doc-codeph\">month</span> to a\n        Snappy compressed ORC table. Combining the components outlined previously to complete this table conversion,\n        you would specify settings similar to the following:\n      </p><div class=\"hue-doc-codeblock\">hive&gt; CREATE TABLE tbl_orc (int_col INT, string_col STRING) STORED AS ORC;\nhive&gt; SET hive.exec.compress.output=true;\nhive&gt; SET orc.compress=SNAPPY;\nhive&gt; SET hive.exec.dynamic.partition.mode=nonstrict;\nhive&gt; SET hive.exec.dynamic.partition=true;\nhive&gt; INSERT OVERWRITE TABLE tbl_orc SELECT * FROM tbl;</div><p>\n        To complete a similar process for a table that includes partitions, you would specify settings similar to\n        the following:\n      </p><div class=\"hue-doc-codeblock\">hive&gt; CREATE TABLE tbl_orc (int_col INT, string_col STRING) PARTITIONED BY (year INT) STORED AS ORC;\nhive&gt; SET hive.exec.compress.output=true;\nhive&gt; SET orc.compress=SNAPPY;\nhive&gt; SET hive.exec.dynamic.partition.mode=nonstrict;\nhive&gt; SET hive.exec.dynamic.partition=true;\nhive&gt; INSERT OVERWRITE TABLE tbl_orc PARTITION(year) SELECT * FROM tbl;</div><div class=\"hue-doc-note\"><p>\n          The compression type is specified in the following command:\n        </p><div class=\"hue-doc-codeblock\">SET orc.compress=SNAPPY;</div><p>\n          You could elect to specify alternative codecs such as <span class=\"hue-doc-codeph\">NONE, GZIP, LZO</span> here.\n        </p></div></div></div><div id=\"rcfile_performance\"><div class=\"hue-doc-title\">Query Performance for Impala ORC Tables</div><div><p>\n        In general, expect query performance with ORC tables to be\n        faster than with tables using text data, but slower than with\n        Parquet tables since there're bunch of optimizations for Parquet.\n        See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_parquet.xml\" data-doc-anchor-id=\"parquet\">Using the Parquet File Format with Impala Tables</a>\n        for information about using the Parquet file format for\n        high-performance analytic queries.\n      </p><p id=\"s3_block_splitting\">\n        In Impala 2.6 and higher, Impala queries are optimized for files\n        stored in Amazon S3. For Impala tables that use the file formats Parquet, ORC, RCFile,\n        SequenceFile, Avro, and uncompressed text, the setting\n        <span class=\"hue-doc-codeph\">fs.s3a.block.size</span> in the <span class=\"hue-doc-filepath\">core-site.xml</span>\n        configuration file determines how Impala divides the I/O work of reading the data files.\n        This configuration setting is specified in bytes. By default, this value is 33554432 (32\n        MB), meaning that Impala parallelizes S3 read operations on the files as if they were\n        made up of 32 MB blocks. For example, if your S3 queries primarily access Parquet files\n        written by MapReduce or Hive, increase <span class=\"hue-doc-codeph\">fs.s3a.block.size</span> to 134217728\n        (128 MB) to match the row group size of those files. If most S3 queries involve Parquet\n        files written by Impala, increase <span class=\"hue-doc-codeph\">fs.s3a.block.size</span> to 268435456 (256\n        MB) to match the row group size produced by Impala.\n      </p></div></div><div id=\"orc_data_types\"><div class=\"hue-doc-title\">Data Type Considerations for ORC Tables</div><div><p>\n        The ORC format defines a set of data types whose names differ from the names of the corresponding\n        Impala data types. If you are preparing ORC files using other Hadoop components such as Pig or\n        MapReduce, you might need to work with the type names defined by ORC. The following figure lists the\n        ORC-defined types and the equivalent types in Impala.\n      </p><p><b>Primitive types:</b></p><div class=\"hue-doc-codeblock\">BINARY -&gt; STRING\nBOOLEAN -&gt; BOOLEAN\nDOUBLE -&gt; DOUBLE\nFLOAT -&gt; FLOAT\nTINYINT -&gt; TINYINT\nSMALLINT -&gt; SMALLINT\nINT -&gt; INT\nBIGINT -&gt; BIGINT\nTIMESTAMP -&gt; TIMESTAMP\nDATE (not supported)\n</div><p><b>Complex types:</b></p><p id=\"complex_types_short_intro\">\n        In Impala 2.3 and higher, Impala supports the complex types\n        <span class=\"hue-doc-codeph\">ARRAY</span>, <span class=\"hue-doc-codeph\">STRUCT</span>, and <span class=\"hue-doc-codeph\">MAP</span>. In\n        Impala 3.2 and higher, Impala also supports these\n        complex types in ORC. See\n        <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_complex_types.xml\" data-doc-anchor-id=\"complex_types\">Complex Types (Impala 2.3 or higher only)</a> for details.\n        These Complex types are currently supported only for the Parquet or ORC file formats.\n        Because Impala has better performance on Parquet than ORC, if you plan to use complex\n        types, become familiar with the performance and storage aspects of Parquet first.\n      </p></div></div></div></div>","title":"Using the ORC File Format with Impala Tables"}