{"body":"<div><div id=\"literals\"><div class=\"hue-doc-title\">Literals</div><div><p>\n      Each of the Impala data types has corresponding notation for literal values of that type.\n      You specify literal values in SQL statements, such as in the <span class=\"hue-doc-codeph\">SELECT</span> list\n      or <span class=\"hue-doc-codeph\">WHERE</span> clause of a query, or as an argument to a function call. See\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datatypes.xml\" data-doc-anchor-id=\"datatypes\">Data Types</a> for a complete list of types,\n      ranges, and conversion rules.\n    </p><p/></div><div id=\"numeric_literals\"><div class=\"hue-doc-title\">Numeric Literals</div><div><p>\n        To write literals for the integer types (<span class=\"hue-doc-codeph\">TINYINT</span>,\n        <span class=\"hue-doc-codeph\">SMALLINT</span>, <span class=\"hue-doc-codeph\">INT</span>, and <span class=\"hue-doc-codeph\">BIGINT</span>), use a\n        sequence of digits with optional leading zeros.\n      </p><p>\n        To write literals for the floating-point types (<span class=\"hue-doc-codeph\">DECIMAL</span>,\n        <span class=\"hue-doc-codeph\">FLOAT</span>, and <span class=\"hue-doc-codeph\">DOUBLE</span>), use a sequence of digits with an\n        optional decimal point (<span class=\"hue-doc-codeph\">.</span> character). To preserve accuracy during\n        arithmetic expressions, Impala interprets floating-point literals as the\n        <span class=\"hue-doc-codeph\">DECIMAL</span> type with the smallest appropriate precision and scale, until\n        required by the context to convert the result to <span class=\"hue-doc-codeph\">FLOAT</span> or\n        <span class=\"hue-doc-codeph\">DOUBLE</span>.\n      </p><p>\n        Integer values are promoted to floating-point when necessary, based on the context.\n      </p><p>\n        You can also use exponential notation by including an <span class=\"hue-doc-codeph\">e</span> character. For\n        example, <span class=\"hue-doc-codeph\">1e6</span> is 1 times 10 to the power of 6 (1 million). A number in\n        exponential notation is always interpreted as floating-point.\n      </p><p>\n        When Impala encounters a numeric literal, it considers the type to be the\n        <q>smallest</q> that can accurately represent the value. The type is promoted to larger\n        or more accurate types if necessary, based on subsequent parts of an expression.\n      </p><p>\n        For example, you can see by the types Impala defines for the following table columns how\n        it interprets the corresponding numeric literals:\n      </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; create table ten as select 10 as x;\n+-------------------+\n| summary           |\n+-------------------+\n| Inserted 1 row(s) |\n+-------------------+\n[localhost:21000] &gt; desc ten;\n+------+---------+---------+\n| name | type    | comment |\n+------+---------+---------+\n| x    | tinyint |         |\n+------+---------+---------+\n\n[localhost:21000] &gt; create table four_k as select 4096 as x;\n+-------------------+\n| summary           |\n+-------------------+\n| Inserted 1 row(s) |\n+-------------------+\n[localhost:21000] &gt; desc four_k;\n+------+----------+---------+\n| name | type     | comment |\n+------+----------+---------+\n| x    | smallint |         |\n+------+----------+---------+\n\n[localhost:21000] &gt; create table one_point_five as select 1.5 as x;\n+-------------------+\n| summary           |\n+-------------------+\n| Inserted 1 row(s) |\n+-------------------+\n[localhost:21000] &gt; desc one_point_five;\n+------+--------------+---------+\n| name | type         | comment |\n+------+--------------+---------+\n| x    | decimal(2,1) |         |\n+------+--------------+---------+\n\n[localhost:21000] &gt; create table one_point_three_three_three as select 1.333 as x;\n+-------------------+\n| summary           |\n+-------------------+\n| Inserted 1 row(s) |\n+-------------------+\n[localhost:21000] &gt; desc one_point_three_three_three;\n+------+--------------+---------+\n| name | type         | comment |\n+------+--------------+---------+\n| x    | decimal(4,3) |         |\n+------+--------------+---------+\n</div></div></div><div id=\"string_literals\"><div class=\"hue-doc-title\">String Literals</div><div><p>\n        String literals are quoted using either single or double quotation marks. You can use\n        either kind of quotes for string literals, even both kinds for different literals within\n        the same statement.\n      </p><p>\n        Quoted literals are considered to be of type <span class=\"hue-doc-codeph\">STRING</span>. To use quoted\n        literals in contexts requiring a <span class=\"hue-doc-codeph\">CHAR</span> or <span class=\"hue-doc-codeph\">VARCHAR</span>\n        value, <span class=\"hue-doc-codeph\">CAST()</span> the literal to a <span class=\"hue-doc-codeph\">CHAR</span> or\n        <span class=\"hue-doc-codeph\">VARCHAR</span> of the appropriate length.\n      </p><p><b>Escaping special characters:</b></p><p>\n        To encode special characters within a string literal, precede them with the backslash\n        (<span class=\"hue-doc-codeph\">\\</span>) escape character:\n      </p><ul><li><span class=\"hue-doc-codeph\">\\t</span> represents a tab.\n        </li><li><span class=\"hue-doc-codeph\">\\n</span> represents a newline or linefeed. This might cause extra line\n          breaks in <span class=\"hue-doc-cmdname\">impala-shell</span> output.\n        </li><li><span class=\"hue-doc-codeph\">\\r</span> represents a carriage return. This might cause unusual formatting\n          (making it appear that some content is overwritten) in <span class=\"hue-doc-cmdname\">impala-shell</span>\n          output.\n        </li><li><span class=\"hue-doc-codeph\">\\b</span> represents a backspace. This might cause unusual formatting\n          (making it appear that some content is overwritten) in <span class=\"hue-doc-cmdname\">impala-shell</span>\n          output.\n        </li><li><span class=\"hue-doc-codeph\">\\0</span> represents an ASCII <span class=\"hue-doc-codeph\">nul</span> character (not the same\n          as a SQL <span class=\"hue-doc-codeph\">NULL</span>). This might not be visible in\n          <span class=\"hue-doc-cmdname\">impala-shell</span> output.\n        </li><li><span class=\"hue-doc-codeph\">\\Z</span> represents a DOS end-of-file character. This might not be visible\n          in <span class=\"hue-doc-cmdname\">impala-shell</span> output.\n        </li><li><span class=\"hue-doc-codeph\">\\%</span> and <span class=\"hue-doc-codeph\">\\_</span> can be used to escape wildcard characters\n          within the string passed to the <span class=\"hue-doc-codeph\">LIKE</span> operator.\n        </li><li><span class=\"hue-doc-codeph\">\\</span> followed by 3 octal digits represents the ASCII code of a single\n          character; for example, <span class=\"hue-doc-codeph\">\\101</span> is ASCII 65, the character\n          <span class=\"hue-doc-codeph\">A</span>.\n        </li><li>\n          Use two consecutive backslashes (<span class=\"hue-doc-codeph\">\\\\</span>) to prevent the backslash from\n          being interpreted as an escape character.\n        </li><li>\n          Use the backslash to escape single or double quotation mark characters within a string\n          literal, if the literal is enclosed by the same type of quotation mark.\n        </li><li>\n          If the character following the <span class=\"hue-doc-codeph\">\\</span> does not represent the start of a\n          recognized escape sequence, the character is passed through unchanged.\n        </li></ul><p><b>Quotes within quotes:</b></p><p>\n        To include a single quotation character within a string value, enclose the literal with\n        either single or double quotation marks, and optionally escape the single quote as a\n        <span class=\"hue-doc-codeph\">\\'</span> sequence. Earlier releases required escaping a single quote inside\n        double quotes. Continue using escape sequences in this case if you also need to run your\n        SQL code on older versions of Impala.\n      </p><p>\n        To include a double quotation character within a string value, enclose the literal with\n        single quotation marks, no escaping is necessary in this case. Or, enclose the literal\n        with double quotation marks and escape the double quote as a <span class=\"hue-doc-codeph\">\\\"</span>\n        sequence.\n      </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; select \"What\\'s happening?\" as single_within_double,\n                  &gt;        'I\\'m not sure.' as single_within_single,\n                  &gt;        \"Homer wrote \\\"The Iliad\\\".\" as double_within_double,\n                  &gt;        'Homer also wrote \"The Odyssey\".' as double_within_single;\n+----------------------+----------------------+--------------------------+---------------------------------+\n| single_within_double | single_within_single | double_within_double     | double_within_single            |\n+----------------------+----------------------+--------------------------+---------------------------------+\n| What's happening?    | I'm not sure.        | Homer wrote \"The Iliad\". | Homer also wrote \"The Odyssey\". |\n+----------------------+----------------------+--------------------------+---------------------------------+\n</div><p><b>Field terminator character in CREATE TABLE:</b></p><div class=\"hue-doc-note\" id=\"thorn\">        The <span class=\"hue-doc-codeph\">CREATE TABLE</span> clauses <span class=\"hue-doc-codeph\">FIELDS TERMINATED BY</span>,\n        <span class=\"hue-doc-codeph\">ESCAPED BY</span>, and <span class=\"hue-doc-codeph\">LINES TERMINATED BY</span> have special rules\n        for the string literal used for their argument, because they all require a single\n        character. You can use a regular character surrounded by single or double quotation\n        marks, an octal sequence such as <span class=\"hue-doc-codeph\">'\\054'</span> (representing a comma), or an\n        integer in the range '-127'..'128' (with quotation marks but no backslash), which is\n        interpreted as a single-byte ASCII character. Negative values are subtracted from 256;\n        for example, <span class=\"hue-doc-codeph\">FIELDS TERMINATED BY '-2'</span> sets the field delimiter to\n        ASCII code 254, the <q>Icelandic Thorn</q> character used as a delimiter by some data\n        formats.\n      </div><p><b>impala-shell considerations:</b></p><p>\n        When dealing with output that includes non-ASCII or non-printable characters such as\n        linefeeds and backspaces, use the <span class=\"hue-doc-cmdname\">impala-shell</span> options to save to a\n        file, turn off pretty printing, or both rather than relying on how the output appears\n        visually. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_shell_options.xml\" data-doc-anchor-id=\"shell_options\">impala-shell Configuration Options</a> for a list of\n        <span class=\"hue-doc-cmdname\">impala-shell</span> options.\n      </p></div></div><div id=\"boolean_literals\"><div class=\"hue-doc-title\">Boolean Literals</div><div><p>\n        For <span class=\"hue-doc-codeph\">BOOLEAN</span> values, the literals are <span class=\"hue-doc-codeph\">TRUE</span> and\n        <span class=\"hue-doc-codeph\">FALSE</span>, with no quotation marks and case-insensitive.\n      </p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select true;\nselect * from t1 where assertion = false;\nselect case bool_col when true then 'yes' when false 'no' else 'null' end from t1;</div></div></div><div id=\"timestamp_literals\"><div class=\"hue-doc-title\">Timestamp Literals</div><div><p id=\"timestamp_conversions\">\n        Impala automatically converts <span class=\"hue-doc-codeph\">STRING</span> literals of the correct format\n        into <span class=\"hue-doc-codeph\">TIMESTAMP</span> values. Timestamp values are accepted in the format\n        <span class=\"hue-doc-codeph\">'yyyy‑MM‑dd HH:mm:ss.SSSSSS'</span>, and can consist of just the date, or\n        just the time, with or without the fractional second portion. For example, you can\n        specify <span class=\"hue-doc-codeph\">TIMESTAMP</span> values such as <span class=\"hue-doc-codeph\">'1966‑07‑30'</span>,\n        <span class=\"hue-doc-codeph\">'08:30:00'</span>, or <span class=\"hue-doc-codeph\">'1985‑09‑25 17:45:30.005'</span>.\n      </p><p>\n        You can also use <span class=\"hue-doc-codeph\">INTERVAL</span> expressions to add or subtract from timestamp\n        literal values, such as <span class=\"hue-doc-codeph\">CAST('1966‑07‑30' AS\n        TIMESTAMP) + INTERVAL 5 YEARS + INTERVAL 3 DAYS</span>. See\n        <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a> for details.\n      </p><p>\n        Depending on your data pipeline, you might receive date and time data as text, in\n        notation that does not exactly match the format for Impala <span class=\"hue-doc-codeph\">TIMESTAMP</span>\n        literals. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions\">Impala Date and Time Functions</a> for\n        functions that can convert between a variety of string literals (including different\n        field order, separators, and timezone notation) and equivalent\n        <span class=\"hue-doc-codeph\">TIMESTAMP</span> or numeric values.\n      </p></div></div><div id=\"date_literals\"><div class=\"hue-doc-title\">Date Literals</div><div><p>\n        The <span class=\"hue-doc-codeph\">DATE</span> literals are in the form of <span class=\"hue-doc-codeph\">DATE'YYYY-MM-DD'</span>.\n        For example, <span class=\"hue-doc-codeph\">DATE '2013-01-01'</span></p></div></div><div id=\"null\"><div class=\"hue-doc-title\">NULL</div><div><p>\n        The notion of <span class=\"hue-doc-codeph\">NULL</span> values is familiar from all kinds of database\n        systems, but each SQL dialect can have its own behavior and restrictions on\n        <span class=\"hue-doc-codeph\">NULL</span> values. For Big Data processing, the precise semantics of\n        <span class=\"hue-doc-codeph\">NULL</span> values are significant: any misunderstanding could lead to\n        inaccurate results or misformatted data, that could be time-consuming to correct for\n        large data sets.\n      </p><ul><li><span class=\"hue-doc-codeph\">NULL</span> is a different value than an empty string. The empty string is\n          represented by a string literal with nothing inside, <span class=\"hue-doc-codeph\">\"\"</span> or\n          <span class=\"hue-doc-codeph\">''</span>.\n        </li><li>\n          In a delimited text file, the <span class=\"hue-doc-codeph\">NULL</span> value is represented by the\n          special token <span class=\"hue-doc-codeph\">\\N</span>.\n        </li><li>\n          When Impala inserts data into a partitioned table, and the value of one of the\n          partitioning columns is <span class=\"hue-doc-codeph\">NULL</span> or the empty string, the data is placed\n          in a special partition that holds only these two kinds of values. When these values\n          are returned in a query, the result is <span class=\"hue-doc-codeph\">NULL</span> whether the value was\n          originally <span class=\"hue-doc-codeph\">NULL</span> or an empty string. This behavior is compatible with\n          the way Hive treats <span class=\"hue-doc-codeph\">NULL</span> values in partitioned tables. Hive does not\n          allow empty strings as partition keys, and it returns a string value such as\n          <span class=\"hue-doc-codeph\">__HIVE_DEFAULT_PARTITION__</span> instead of <span class=\"hue-doc-codeph\">NULL</span> when such\n          values are returned from a query. For example:\n<div class=\"hue-doc-codeblock\">create table t1 (i int) partitioned by (x int, y string);\n-- Select an INT column from another table, with all rows going into a special HDFS subdirectory\n-- named __HIVE_DEFAULT_PARTITION__. Depending on whether one or both of the partitioning keys\n-- are null, this special directory name occurs at different levels of the physical data directory\n-- for the table.\ninsert into t1 partition(x=NULL, y=NULL) select c1 from some_other_table;\ninsert into t1 partition(x, y=NULL) select c1, c2 from some_other_table;\ninsert into t1 partition(x=NULL, y) select c1, c3  from some_other_table;</div></li><li>\n          There is no <span class=\"hue-doc-codeph\">NOT NULL</span> clause when defining a column to prevent\n          <span class=\"hue-doc-codeph\">NULL</span> values in that column.\n        </li><li>\n          There is no <span class=\"hue-doc-codeph\">DEFAULT</span> clause to specify a non-<span class=\"hue-doc-codeph\">NULL</span>\n          default value.\n        </li><li>\n          If an <span class=\"hue-doc-codeph\">INSERT</span> operation mentions some columns but not others, the\n          unmentioned columns contain <span class=\"hue-doc-codeph\">NULL</span> for all inserted rows.\n        </li><li><p id=\"null_sorting_change\">\n        In Impala 1.2.1 and higher, all <span class=\"hue-doc-codeph\">NULL</span> values come at the end of the\n        result set for <span class=\"hue-doc-codeph\">ORDER BY ... ASC</span> queries, and at the beginning of the\n        result set for <span class=\"hue-doc-codeph\">ORDER BY ... DESC</span> queries. In effect,\n        <span class=\"hue-doc-codeph\">NULL</span> is considered greater than all other values for sorting purposes.\n        The original Impala behavior always put <span class=\"hue-doc-codeph\">NULL</span> values at the end, even\n        for <span class=\"hue-doc-codeph\">ORDER BY ... DESC</span> queries. The new behavior in Impala 1.2.1 makes\n        Impala more compatible with other popular database systems. In Impala 1.2.1 and higher,\n        you can override or specify the sorting behavior for <span class=\"hue-doc-codeph\">NULL</span> by adding the\n        clause <span class=\"hue-doc-codeph\">NULLS FIRST</span> or <span class=\"hue-doc-codeph\">NULLS LAST</span> at the end of the\n        <span class=\"hue-doc-codeph\">ORDER BY</span> clause.\n      </p><div class=\"hue-doc-note\">            Because the <span class=\"hue-doc-codeph\">NULLS FIRST</span> and <span class=\"hue-doc-codeph\">NULLS LAST</span> keywords\n            are not currently available in Hive queries, any views you create using those\n            keywords will not be available through Hive.\n          </div></li><li>\n          In all other contexts besides sorting with <span class=\"hue-doc-codeph\">ORDER BY</span>, comparing a\n          <span class=\"hue-doc-codeph\">NULL</span> to anything else returns <span class=\"hue-doc-codeph\">NULL</span>, making the\n          comparison meaningless. For example, <span class=\"hue-doc-codeph\">10 &gt; NULL</span> produces\n          <span class=\"hue-doc-codeph\">NULL</span>, <span class=\"hue-doc-codeph\">10 &lt; NULL</span> also produces\n          <span class=\"hue-doc-codeph\">NULL</span>, <span class=\"hue-doc-codeph\">5 BETWEEN 1 AND NULL</span> produces\n          <span class=\"hue-doc-codeph\">NULL</span>, and so on.\n        </li></ul><p>\n        Several built-in functions serve as shorthand for evaluating expressions and returning\n        <span class=\"hue-doc-codeph\">NULL</span>, 0, or some other substitution value depending on the expression\n        result: <span class=\"hue-doc-codeph\">ifnull()</span>, <span class=\"hue-doc-codeph\">isnull()</span>, <span class=\"hue-doc-codeph\">nvl()</span>,\n        <span class=\"hue-doc-codeph\">nullif()</span>, <span class=\"hue-doc-codeph\">nullifzero()</span>, and\n        <span class=\"hue-doc-codeph\">zeroifnull()</span>. See\n        <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_conditional_functions.xml\" data-doc-anchor-id=\"conditional_functions\">Impala Conditional Functions</a> for details.\n      </p><p id=\"kudu_blurb\"><b>Kudu considerations:</b></p><p>\n        Columns in Kudu tables have an attribute that specifies whether or not they can contain\n        <span class=\"hue-doc-codeph\">NULL</span> values. A column with a <span class=\"hue-doc-codeph\">NULL</span> attribute can\n        contain nulls. A column with a <span class=\"hue-doc-codeph\">NOT NULL</span> attribute cannot contain any\n        nulls, and an <span class=\"hue-doc-codeph\">INSERT</span>, <span class=\"hue-doc-codeph\">UPDATE</span>, or\n        <span class=\"hue-doc-codeph\">UPSERT</span> statement will skip any row that attempts to store a null in a\n        column designated as <span class=\"hue-doc-codeph\">NOT NULL</span>. Kudu tables default to the\n        <span class=\"hue-doc-codeph\">NULL</span> setting for each column, except columns that are part of the\n        primary key.\n      </p><p>\n        In addition to columns with the <span class=\"hue-doc-codeph\">NOT NULL</span> attribute, Kudu tables also\n        have restrictions on <span class=\"hue-doc-codeph\">NULL</span> values in columns that are part of the\n        primary key for a table. No column that is part of the primary key in a Kudu table can\n        contain any <span class=\"hue-doc-codeph\">NULL</span> values.\n      </p></div></div></div></div>","title":"Literals"}