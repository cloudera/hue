{"body":"<div><div id=\"max_row_size\"><div class=\"hue-doc-title\">MAX_ROW_SIZE Query Option</div><div><p>\n      Ensures that Impala can process rows of at least the specified size. (Larger\n      rows might be successfully processed, but that is not guaranteed.) Applies when\n      constructing intermediate or final rows in the result set. This setting prevents\n      out-of-control memory use when accessing columns containing huge strings.\n    </p><p id=\"type_integer\"><b>Type:</b> integer\n      </p><p id=\"default_blurb\"><b>Default:</b></p><p><span class=\"hue-doc-codeph\">524288</span> (512 KB)\n    </p><p id=\"units_blurb\"><b>Units:</b> A numeric argument represents a size in bytes; you can also use a suffix\n        of <span class=\"hue-doc-codeph\">m</span> or <span class=\"hue-doc-codeph\">mb</span> for megabytes, or <span class=\"hue-doc-codeph\">g</span> or\n        <span class=\"hue-doc-codeph\">gb</span> for gigabytes. If you specify a value with unrecognized formats,\n        subsequent queries fail with an error.\n      </p><p id=\"added_in_2100\"><b>Added in:</b>Impala 2.10.0</p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n      If a query fails because it involves rows with long strings and/or\n      many columns, causing the total row size to exceed <span class=\"hue-doc-codeph\">MAX_ROW_SIZE</span>\n      bytes, increase the <span class=\"hue-doc-codeph\">MAX_ROW_SIZE</span> setting to accommodate\n      the total bytes stored in the largest row. Examine the error messages for any\n      failed queries to see the size of the row that caused the problem.\n    </p><p>\n      Impala attempts to handle rows that exceed the <span class=\"hue-doc-codeph\">MAX_ROW_SIZE</span>\n      value where practical, so in many cases, queries succeed despite having rows\n      that are larger than this setting.\n    </p><p>\n      Specifying a value that is substantially higher than actually needed can cause\n      Impala to reserve more memory than is necessary to execute the query.\n    </p><p>\n      In a Hadoop cluster with highly concurrent workloads and queries that process\n      high volumes of data, traditional SQL tuning advice about minimizing wasted memory\n      is worth remembering. For example, if a table has <span class=\"hue-doc-codeph\">STRING</span> columns\n      where a single value might be multiple megabytes, make sure that the\n      <span class=\"hue-doc-codeph\">SELECT</span> lists in queries only refer to columns that are actually\n      needed in the result set, instead of using the <span class=\"hue-doc-codeph\">SELECT *</span> shorthand.\n    </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n      The following examples show the kinds of situations where it is necessary to\n      adjust the <span class=\"hue-doc-codeph\">MAX_ROW_SIZE</span> setting. First, we create a table\n      containing some very long values in <span class=\"hue-doc-codeph\">STRING</span> columns:\n    </p><div class=\"hue-doc-codeblock\">create table big_strings (s1 string, s2 string, s3 string) stored as parquet;\n\n-- Turn off compression to more easily reason about data volume by doing SHOW TABLE STATS.\n-- Does not actually affect query success or failure, because MAX_ROW_SIZE applies when\n-- column values are materialized in memory.\nset compression_codec=none;\nset;\n...\n  MAX_ROW_SIZE: [524288]\n...\n\n-- A very small row.\ninsert into big_strings values ('one', 'two', 'three');\n-- A row right around the default MAX_ROW_SIZE limit: a 500 KiB string and a 30 KiB string.\ninsert into big_strings values (repeat('12345',100000), 'short', repeat('123',10000));\n-- A row that is too big if the query has to materialize both S1 and S3.\ninsert into big_strings values (repeat('12345',100000), 'short', repeat('12345',100000));\n</div><p>\n      With the default <span class=\"hue-doc-codeph\">MAX_ROW_SIZE</span> setting, different queries succeed\n      or fail based on which column values have to be materialized during query processing:\n    </p><div class=\"hue-doc-codeblock\">-- All the S1 values can be materialized within the 512 KB MAX_ROW_SIZE buffer.\nselect count(distinct s1) from big_strings;\n+--------------------+\n| count(distinct s1) |\n+--------------------+\n| 2                  |\n+--------------------+\n\n-- A row where even the S1 value is too large to materialize within MAX_ROW_SIZE.\ninsert into big_strings values (repeat('12345',1000000), 'short', repeat('12345',1000000));\n\n-- The 5 MiB string is too large to materialize. The message explains the size of the result\n-- set row the query is attempting to materialize.\nselect count(distinct(s1)) from big_strings;\nWARNINGS: Row of size 4.77 MB could not be materialized in plan node with id 1.\n  Increase the max_row_size query option (currently 512.00 KB) to process larger rows.\n\n-- If more columns are involved, the result set row being materialized is bigger.\nselect count(distinct s1, s2, s3) from big_strings;\nWARNINGS: Row of size 9.54 MB could not be materialized in plan node with id 1.\n  Increase the max_row_size query option (currently 512.00 KB) to process larger rows.\n\n-- Column S2, containing only short strings, can still be examined.\nselect count(distinct(s2)) from big_strings;\n+----------------------+\n| count(distinct (s2)) |\n+----------------------+\n| 2                    |\n+----------------------+\n\n-- Queries that do not materialize the big column values are OK.\nselect count(*) from big_strings;\n+----------+\n| count(*) |\n+----------+\n| 4        |\n+----------+\n</div><p>\n      The following examples show how adjusting <span class=\"hue-doc-codeph\">MAX_ROW_SIZE</span> upward\n      allows queries involving the long string columns to succeed:\n    </p><div class=\"hue-doc-codeblock\">-- Boosting MAX_ROW_SIZE moderately allows all S1 values to be materialized.\nset max_row_size=7mb;\n\nselect count(distinct s1) from big_strings;\n+--------------------+\n| count(distinct s1) |\n+--------------------+\n| 3                  |\n+--------------------+\n\n-- But the combination of S1 + S3 strings is still too large.\nselect count(distinct s1, s2, s3) from big_strings;\nWARNINGS: Row of size 9.54 MB could not be materialized in plan node with id 1. Increase the max_row_size query option (currently 7.00 MB) to process larger rows.\n\n-- Boosting MAX_ROW_SIZE to larger than the largest row in the table allows\n-- all queries to complete successfully.\nset max_row_size=12mb;\n\nselect count(distinct s1, s2, s3) from big_strings;\n+----------------------------+\n| count(distinct s1, s2, s3) |\n+----------------------------+\n| 4                          |\n+----------------------------+\n</div><p>\n      The following examples show how to reason about appropriate values for\n      <span class=\"hue-doc-codeph\">MAX_ROW_SIZE</span>, based on the characteristics of the\n      columns containing the long values:\n    </p><div class=\"hue-doc-codeblock\">-- With a large MAX_ROW_SIZE in place, we can examine the columns to\n-- understand the practical lower limit for MAX_ROW_SIZE based on the\n-- table structure and column values.\nselect max(length(s1) + length(s2) + length(s3)) / 1e6 as megabytes from big_strings;\n+-----------+\n| megabytes |\n+-----------+\n| 10.000005 |\n+-----------+\n\n-- We can also examine the 'Max Size' for each column after computing stats.\ncompute stats big_strings;\nshow column stats big_strings;\n+--------+--------+------------------+--------+----------+-----------+\n| Column | Type   | #Distinct Values | #Nulls | Max Size | Avg Size  |\n+--------+--------+------------------+--------+----------+-----------+\n| s1     | STRING | 2                | -1     | 5000000  | 2500002.5 |\n| s2     | STRING | 2                | -1     | 10       | 7.5       |\n| s3     | STRING | 2                | -1     | 5000000  | 2500005   |\n+--------+--------+------------------+--------+----------+-----------+\n</div><p id=\"related_info\"><b>Related information:</b></p><p><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_buffer_pool_limit.xml\" data-doc-anchor-id=\"buffer_pool_limit\">BUFFER_POOL_LIMIT Query Option</a>,\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_default_spillable_buffer_size.xml\" data-doc-anchor-id=\"default_spillable_buffer_size\">DEFAULT_SPILLABLE_BUFFER_SIZE Query Option</a>,\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_min_spillable_buffer_size.xml\" data-doc-anchor-id=\"min_spillable_buffer_size\">MIN_SPILLABLE_BUFFER_SIZE Query Option</a>,\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_scalability.xml\" data-doc-anchor-id=\"scalability_buffer_pool\">Effect of Buffer Pool on Memory Usage (Impala 2.10 and higher)</a></p></div></div></div>","title":"MAX_ROW_SIZE Query Option"}