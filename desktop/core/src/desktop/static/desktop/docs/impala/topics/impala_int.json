{"body":"<div><div><div class=\"hue-doc-title\">INT Data Type</div><div><p>\n      A 4-byte integer data type used in <span class=\"hue-doc-codeph\">CREATE TABLE</span> and <span class=\"hue-doc-codeph\">ALTER TABLE</span> statements.\n    </p><p><b>Syntax:</b></p><p>\n      In the column definition of a <span class=\"hue-doc-codeph\">CREATE TABLE</span> statement:\n    </p><div class=\"hue-doc-codeblock\"><span class=\"hue-doc-varname\">column_name</span> INT</div><p><b>Range:</b> -2147483648 .. 2147483647. There is no <span class=\"hue-doc-codeph\">UNSIGNED</span> subtype.\n    </p><p><b>Conversions:</b> Impala automatically converts to a larger integer type (<span class=\"hue-doc-codeph\">BIGINT</span>) or a\n      floating-point type (<span class=\"hue-doc-codeph\">FLOAT</span> or <span class=\"hue-doc-codeph\">DOUBLE</span>) automatically. Use\n      <span class=\"hue-doc-codeph\">CAST()</span> to convert to <span class=\"hue-doc-codeph\">TINYINT</span>, <span class=\"hue-doc-codeph\">SMALLINT</span>,\n      <span class=\"hue-doc-codeph\">STRING</span>, or <span class=\"hue-doc-codeph\">TIMESTAMP</span>.\n      <span class=\"hue-doc-ph\">\n          Casting an integer or floating-point value <span class=\"hue-doc-codeph\">N</span> to\n        <span class=\"hue-doc-codeph\">TIMESTAMP</span> produces a value that is <span class=\"hue-doc-codeph\">N</span> seconds past the start of the epoch\n        date (January 1, 1970). By default, the result value represents a date and time in the UTC time zone.\n        If the setting <span class=\"hue-doc-codeph\">--use_local_tz_for_unix_timestamp_conversions=true</span> is in effect,\n        the resulting <span class=\"hue-doc-codeph\">TIMESTAMP</span> represents a date and time in the local time zone.\n        </span></p><p><b>Usage notes:</b></p><p>\n      The data type <span class=\"hue-doc-codeph\">INTEGER</span> is an alias for <span class=\"hue-doc-codeph\">INT</span>.\n    </p><p>\n      For a convenient and automated way to check the bounds of the <span class=\"hue-doc-codeph\">INT</span> type, call the functions\n      <span class=\"hue-doc-codeph\">MIN_INT()</span> and <span class=\"hue-doc-codeph\">MAX_INT()</span>.\n    </p><p>\n      If an integer value is too large to be represented as a <span class=\"hue-doc-codeph\">INT</span>, use a <span class=\"hue-doc-codeph\">BIGINT</span>\n      instead.\n    </p><p><b>NULL considerations:</b> Casting any non-numeric value to this type produces a <span class=\"hue-doc-codeph\">NULL</span>\n        value.\n      </p><p><b>Examples:</b></p><div class=\"hue-doc-codeblock\">CREATE TABLE t1 (x INT);\nSELECT CAST(1000 AS INT);\n</div><p><b>Partitioning:</b> Prefer to use this type for a partition key column. Impala can process the numeric\n        type more efficiently than a <span class=\"hue-doc-codeph\">STRING</span> representation of the value.\n      </p><p><b>HBase considerations:</b> This data type is fully compatible with HBase tables.\n      </p><p><b>Parquet considerations:</b></p><p><b>Text table considerations:</b> Values of this type are potentially larger in text tables than in tables\n        using Parquet or other binary formats.\n      </p><p><b>Internal details:</b> Represented in memory as a 4-byte value.\n      </p><p><b>Added in:</b> Available in all versions of Impala.\n      </p><p><b>Column statistics considerations:</b> Because this type has a fixed size, the maximum and average size\n        fields are always filled in for column statistics, even before you run the <span class=\"hue-doc-codeph\">COMPUTE STATS</span>\n        statement.\n      </p><p><b>Related information:</b></p><p><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_literals.xml\" data-doc-anchor-id=\"numeric_literals\">Numeric Literals</a>, <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_tinyint.xml\" data-doc-anchor-id=\"tinyint\">TINYINT Data Type</a>,\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_smallint.xml\" data-doc-anchor-id=\"smallint\">SMALLINT Data Type</a>, <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_int.xml\" data-doc-anchor-id=\"int\">INT Data Type</a>,\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_bigint.xml\" data-doc-anchor-id=\"bigint\">BIGINT Data Type</a>, <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_decimal.xml\" data-doc-anchor-id=\"decimal\">DECIMAL Data Type (Impala 1.4 or higher only)</a>,\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions\">Impala Mathematical Functions</a></p></div></div></div>","title":"INT Data Type"}