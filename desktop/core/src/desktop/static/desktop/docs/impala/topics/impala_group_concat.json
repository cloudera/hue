{"body":"<div><div id=\"group_concat\"><div class=\"hue-doc-title\">GROUP_CONCAT Function</div><div><p>\n      An aggregate function that returns a single string representing the argument value concatenated together for\n      each row of the result set. If the optional separator string is specified, the separator is added between\n      each pair of concatenated values. The default separator is a comma followed by a space.\n    </p><p id=\"syntax_blurb\"><b>Syntax:</b></p><div class=\"hue-doc-codeblock\">GROUP_CONCAT([ALL<span class=\"hue-doc-ph\"> | DISTINCT</span>] <span class=\"hue-doc-varname\">expression</span> [, <span class=\"hue-doc-varname\">separator</span>])</div><p id=\"concat_blurb\"><b>Usage notes:</b><span class=\"hue-doc-codeph\">concat()</span> and <span class=\"hue-doc-codeph\">concat_ws()</span> are\n        appropriate for concatenating the values of multiple columns within the same row, while\n        <span class=\"hue-doc-codeph\">group_concat()</span> joins together values from different rows.\n      </p><p>\n      By default, returns a single string covering the whole result set. To include other columns or values in the\n      result set, or to produce multiple concatenated strings for subsets of rows, include a <span class=\"hue-doc-codeph\">GROUP\n      BY</span> clause in the query.\n    </p><p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p id=\"analytic_not_allowed_caveat\">\n        This function cannot be used in an analytic context. That is, the\n        <span class=\"hue-doc-codeph\">OVER()</span> clause is not allowed at all with this function.\n      </p><p>\n      Currently, Impala returns an error if the result value grows larger than 1 GiB.\n    </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n      The following examples illustrate various aspects of the <span class=\"hue-doc-codeph\">GROUP_CONCAT()</span> function.\n    </p><p>\n      You can call the function directly on a <span class=\"hue-doc-codeph\">STRING</span> column. To use it with a numeric column, cast\n      the value to <span class=\"hue-doc-codeph\">STRING</span>.\n    </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; create table t1 (x int, s string);\n[localhost:21000] &gt; insert into t1 values (1, \"one\"), (3, \"three\"), (2, \"two\"), (1, \"one\");\n[localhost:21000] &gt; select group_concat(s) from t1;\n+----------------------+\n| group_concat(s)      |\n+----------------------+\n| one, three, two, one |\n+----------------------+\n[localhost:21000] &gt; select group_concat(cast(x as string)) from t1;\n+---------------------------------+\n| group_concat(cast(x as string)) |\n+---------------------------------+\n| 1, 3, 2, 1                      |\n+---------------------------------+\n</div><p>\n      Specify the <span class=\"hue-doc-codeph\">DISTINCT</span> keyword to eliminate duplicate values from\n      the concatenated result:\n    </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; select group_concat(distinct s) from t1;\n+--------------------------+\n| group_concat(distinct s) |\n+--------------------------+\n| three, two, one          |\n+--------------------------+\n</div><p>\n      The optional separator lets you format the result in flexible ways. The separator can be an arbitrary string\n      expression, not just a single character.\n    </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; select group_concat(s,\"|\") from t1;\n+----------------------+\n| group_concat(s, '|') |\n+----------------------+\n| one|three|two|one    |\n+----------------------+\n[localhost:21000] &gt; select group_concat(s,'---') from t1;\n+-------------------------+\n| group_concat(s, '---')  |\n+-------------------------+\n| one---three---two---one |\n+-------------------------+\n</div><p>\n      The default separator is a comma followed by a space. To get a comma-delimited result without extra spaces,\n      specify a delimiter character that is only a comma.\n    </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; select group_concat(s,',') from t1;\n+----------------------+\n| group_concat(s, ',') |\n+----------------------+\n| one,three,two,one    |\n+----------------------+\n</div><p>\n      Including a <span class=\"hue-doc-codeph\">GROUP BY</span> clause lets you produce a different concatenated result for each group\n      in the result set. In this example, the only <span class=\"hue-doc-codeph\">X</span> value that occurs more than once is\n      <span class=\"hue-doc-codeph\">1</span>, so that is the only row in the result set where <span class=\"hue-doc-codeph\">GROUP_CONCAT()</span> returns a\n      delimited value. For groups containing a single value, <span class=\"hue-doc-codeph\">GROUP_CONCAT()</span> returns the original\n      value of its <span class=\"hue-doc-codeph\">STRING</span> argument.\n    </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; select x, group_concat(s) from t1 group by x;\n+---+-----------------+\n| x | group_concat(s) |\n+---+-----------------+\n| 2 | two             |\n| 3 | three           |\n| 1 | one, one        |\n+---+-----------------+\n</div></div></div></div>","title":"GROUP_CONCAT Function"}