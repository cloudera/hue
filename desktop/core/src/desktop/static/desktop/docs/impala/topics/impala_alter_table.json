{"body":"<div><div><div class=\"hue-doc-title\">ALTER TABLE Statement</div><div><p>\n      The <span class=\"hue-doc-codeph\">ALTER TABLE</span> statement changes the structure or properties of an existing Impala table.\n    </p><p>\n      In Impala, this is primarily a logical operation that updates the table metadata in the metastore database that Impala\n      shares with Hive. Most <span class=\"hue-doc-codeph\">ALTER TABLE</span> operations do not actually rewrite, move, and so on the actual data\n      files. (The <span class=\"hue-doc-codeph\">RENAME TO</span> clause is the one exception; it can cause HDFS files to be moved to different paths.)\n      When you do an <span class=\"hue-doc-codeph\">ALTER TABLE</span> operation, you typically need to perform corresponding physical filesystem operations,\n      such as rewriting the data files to include extra fields, or converting them to a different file format.\n    </p><p><b>Syntax:</b></p><div class=\"hue-doc-codeblock\">ALTER TABLE [<span class=\"hue-doc-varname\">old_db_name</span>.]<span class=\"hue-doc-varname\">old_table_name</span> RENAME TO [<span class=\"hue-doc-varname\">new_db_name</span>.]<span class=\"hue-doc-varname\">new_table_name</span>\n\nALTER TABLE <span class=\"hue-doc-varname\">name</span> ADD COLUMNS (<span class=\"hue-doc-varname\">col_spec</span>[, <span class=\"hue-doc-varname\">col_spec</span> ...])\nALTER TABLE <span class=\"hue-doc-varname\">name</span> DROP [COLUMN] <span class=\"hue-doc-varname\">column_name</span>\nALTER TABLE <span class=\"hue-doc-varname\">name</span> CHANGE <span class=\"hue-doc-varname\">column_name</span><span class=\"hue-doc-varname\">col_spec</span>\n\nALTER TABLE <span class=\"hue-doc-varname\">name</span> REPLACE COLUMNS (<span class=\"hue-doc-varname\">col_spec</span>[, <span class=\"hue-doc-varname\">col_spec</span> ...])\n\n<span class=\"hue-doc-ph\">-- Kudu tables only.\nALTER TABLE <span class=\"hue-doc-varname\">name</span> ALTER [COLUMN] <span class=\"hue-doc-varname\">column_name</span>\n  { SET <span class=\"hue-doc-varname\">kudu_storage_attr</span><span class=\"hue-doc-varname\">attr_value</span>\n    | DROP DEFAULT }\n\nkudu_storage_attr ::= { DEFAULT | BLOCK_SIZE | ENCODING | COMPRESSION }</span><span class=\"hue-doc-ph\">-- Non-Kudu tables only.\nALTER TABLE <span class=\"hue-doc-varname\">name</span> ALTER [COLUMN] <span class=\"hue-doc-varname\">column_name</span>\n  SET COMMENT '<span class=\"hue-doc-varname\">comment_text</span>'</span>\n\nALTER TABLE <span class=\"hue-doc-varname\">name</span> ADD [IF NOT EXISTS] PARTITION (<span class=\"hue-doc-varname\">partition_spec</span>)\n  <span class=\"hue-doc-ph\">[<span class=\"hue-doc-varname\">location_spec</span>]</span><span class=\"hue-doc-ph\">[<span class=\"hue-doc-varname\">cache_spec</span>]</span><span class=\"hue-doc-ph\">ALTER TABLE <span class=\"hue-doc-varname\">name</span> ADD [IF NOT EXISTS] RANGE PARTITION <span class=\"hue-doc-varname\">kudu_partition_spec</span></span>\n\nALTER TABLE <span class=\"hue-doc-varname\">name</span> DROP [IF EXISTS] PARTITION (<span class=\"hue-doc-varname\">partition_spec</span>)\n  <span class=\"hue-doc-ph\">[PURGE]</span><span class=\"hue-doc-ph\">ALTER TABLE <span class=\"hue-doc-varname\">name</span> DROP [IF EXISTS] RANGE PARTITION <span class=\"hue-doc-varname\">kudu_partition_spec</span></span><span class=\"hue-doc-ph\">ALTER TABLE <span class=\"hue-doc-varname\">name</span> RECOVER PARTITIONS</span>\n\nALTER TABLE <span class=\"hue-doc-varname\">name</span> [PARTITION (<span class=\"hue-doc-varname\">partition_spec</span>)]\n  SET { FILEFORMAT <span class=\"hue-doc-varname\">file_format</span>\n  | ROW FORMAT <span class=\"hue-doc-varname\">row_format</span>\n  | LOCATION '<span class=\"hue-doc-varname\">hdfs_path_of_directory</span>'\n  | TBLPROPERTIES (<span class=\"hue-doc-varname\">table_properties</span>)\n  | SERDEPROPERTIES (<span class=\"hue-doc-varname\">serde_properties</span>) }\n\n<span class=\"hue-doc-ph\">ALTER TABLE <span class=\"hue-doc-varname\">name</span><span class=\"hue-doc-varname\">colname</span>\n  ('<span class=\"hue-doc-varname\">statsKey</span>'='<span class=\"hue-doc-varname\">val</span>, ...)\n\nstatsKey ::= numDVs | numNulls | avgSize | maxSize</span><span class=\"hue-doc-ph\">ALTER TABLE <span class=\"hue-doc-varname\">name</span> [PARTITION (<span class=\"hue-doc-varname\">partition_spec</span>)] SET { CACHED IN '<span class=\"hue-doc-varname\">pool_name</span>' <span class=\"hue-doc-ph\">[WITH REPLICATION = <span class=\"hue-doc-varname\">integer</span>]</span> | UNCACHED }</span><span class=\"hue-doc-varname\">new_name</span> ::= [<span class=\"hue-doc-varname\">new_database</span>.]<span class=\"hue-doc-varname\">new_table_name</span><span class=\"hue-doc-varname\">col_spec</span> ::= <span class=\"hue-doc-varname\">col_name</span><span class=\"hue-doc-varname\">type_name</span><span class=\"hue-doc-ph\"> COMMENT '<span class=\"hue-doc-varname\">column-comment</span>' [<span class=\"hue-doc-varname\">kudu_attributes</span>]</span><span class=\"hue-doc-ph\"><span class=\"hue-doc-varname\">kudu_attributes</span> ::= { [NOT] NULL | ENCODING <span class=\"hue-doc-varname\">codec</span> | COMPRESSION <span class=\"hue-doc-varname\">algorithm</span> |\n  DEFAULT <span class=\"hue-doc-varname\">constant</span> | BLOCK_SIZE <span class=\"hue-doc-varname\">number</span> }</span><span class=\"hue-doc-varname\">partition_spec</span> ::= <span class=\"hue-doc-varname\">simple_partition_spec</span> | <span class=\"hue-doc-ph\"><span class=\"hue-doc-varname\">complex_partition_spec</span></span><span class=\"hue-doc-varname\">simple_partition_spec</span> ::= <span class=\"hue-doc-varname\">partition_col</span>=<span class=\"hue-doc-varname\">constant_value</span><span class=\"hue-doc-ph\"><span class=\"hue-doc-varname\">complex_partition_spec</span> ::= <span class=\"hue-doc-varname\">comparison_expression_on_partition_col</span></span><span class=\"hue-doc-ph\"><span class=\"hue-doc-varname\">kudu_partition_spec</span> ::= <span class=\"hue-doc-varname\">constant</span><span class=\"hue-doc-varname\">range_operator</span> VALUES <span class=\"hue-doc-varname\">range_operator</span><span class=\"hue-doc-varname\">constant</span> | VALUE = <span class=\"hue-doc-varname\">constant</span></span><span class=\"hue-doc-ph\">cache_spec ::= CACHED IN '<span class=\"hue-doc-varname\">pool_name</span>' [WITH REPLICATION = <span class=\"hue-doc-varname\">integer</span>] | UNCACHED</span><span class=\"hue-doc-ph\">location_spec ::= LOCATION '<span class=\"hue-doc-varname\">hdfs_path_of_directory</span>'</span><span class=\"hue-doc-varname\">table_properties</span> ::= '<span class=\"hue-doc-varname\">name</span>'='<span class=\"hue-doc-varname\">value</span>'[, '<span class=\"hue-doc-varname\">name</span>'='<span class=\"hue-doc-varname\">value</span>' ...]\n\n<span class=\"hue-doc-varname\">serde_properties</span> ::= '<span class=\"hue-doc-varname\">name</span>'='<span class=\"hue-doc-varname\">value</span>'[, '<span class=\"hue-doc-varname\">name</span>'='<span class=\"hue-doc-varname\">value</span>' ...]\n\n<span class=\"hue-doc-varname\">file_format</span> ::= { PARQUET | TEXTFILE | RCFILE | SEQUENCEFILE | AVRO }\n\n<span class=\"hue-doc-varname\">row_format</span> ::= DELIMITED\n  [FIELDS TERMINATED BY '<span class=\"hue-doc-varname\">char</span>' [ESCAPED BY '<span class=\"hue-doc-varname\">char</span>']]\n  [LINES TERMINATED BY '<span class=\"hue-doc-varname\">char</span>']</div><p><b>Statement type:</b> DDL\n      </p><p><b>Complex type considerations:</b></p><p>\n      In Impala 2.3 and higher, the <span class=\"hue-doc-codeph\">ALTER TABLE</span> statement can\n      change the metadata for tables containing complex types (<span class=\"hue-doc-codeph\">ARRAY</span>,\n      <span class=\"hue-doc-codeph\">STRUCT</span>, and <span class=\"hue-doc-codeph\">MAP</span>).\n      For example, you can use an <span class=\"hue-doc-codeph\">ADD COLUMNS</span>, <span class=\"hue-doc-codeph\">DROP COLUMN</span>, or <span class=\"hue-doc-codeph\">CHANGE</span>\n      clause to modify the table layout for complex type columns.\n      Although Impala queries only work for complex type columns in Parquet tables, the complex type support in the\n      <span class=\"hue-doc-codeph\">ALTER TABLE</span> statement applies to all file formats.\n      For example, you can use Impala to update metadata for a staging table in a non-Parquet file format where the\n      data is populated by Hive. Or you can use <span class=\"hue-doc-codeph\">ALTER TABLE SET FILEFORMAT</span> to change the format\n      of an existing table to Parquet so that Impala can query it. Remember that changing the file format for a table does\n      not convert the data files within the table; you must prepare any Parquet data files containing complex types\n      outside Impala, and bring them into the table using <span class=\"hue-doc-codeph\">LOAD DATA</span> or updating the table's\n      <span class=\"hue-doc-codeph\">LOCATION</span> property.\n      See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_complex_types.xml\" data-doc-anchor-id=\"complex_types\">Complex Types (Impala 2.3 or higher only)</a> for details about using complex types.\n    </p><p><b>Usage notes:</b></p><p>\n      Whenever you specify partitions in an <span class=\"hue-doc-codeph\">ALTER TABLE</span> statement, through the <span class=\"hue-doc-codeph\">PARTITION\n      (<span class=\"hue-doc-varname\">partition_spec</span>)</span> clause, you must include all the partitioning columns in the\n      specification.\n    </p><p>\n      Most of the <span class=\"hue-doc-codeph\">ALTER TABLE</span> operations work the same for internal tables (managed by Impala) as\n      for external tables (with data files located in arbitrary locations). The exception is renaming a table; for\n      an external table, the underlying data directory is not renamed or moved.\n    </p><p><b>Dropping or altering multiple partitions:</b></p><p>\n      In Impala 2.8 and higher,\n      the expression for the partition clause with a <span class=\"hue-doc-codeph\">DROP</span> or <span class=\"hue-doc-codeph\">SET</span>\n      operation can include comparison operators such as <span class=\"hue-doc-codeph\">&lt;</span>, <span class=\"hue-doc-codeph\">IN</span>,\n      or <span class=\"hue-doc-codeph\">BETWEEN</span>, and Boolean operators such as <span class=\"hue-doc-codeph\">AND</span>\n      and <span class=\"hue-doc-codeph\">OR</span>.\n    </p><p>\n      For example, you might drop a group of partitions corresponding to a particular date\n      range after the data <q>ages out</q>:\n    </p><div class=\"hue-doc-codeblock\">\nalter table historical_data drop partition (year &lt; 1995);\nalter table historical_data drop partition (year = 1996 and month between 1 and 6);\n</div><p>\n      For tables with multiple partition keys columns, you can specify multiple\n      conditions separated by commas, and the operation only applies to the partitions\n      that match all the conditions (similar to using an <span class=\"hue-doc-codeph\">AND</span> clause):\n    </p><div class=\"hue-doc-codeblock\">\nalter table historical_data drop partition (year &lt; 1995, last_name like 'A%');\n</div><p>\n      This technique can also be used to change the file format of groups of partitions,\n      as part of an ETL pipeline that periodically consolidates and rewrites the underlying\n      data files in a different file format:\n    </p><div class=\"hue-doc-codeblock\">\nalter table fast_growing_data partition (year = 2016, month in (10,11,12)) set fileformat parquet;\n</div><div class=\"hue-doc-note\"><p>\n        The extended syntax involving comparison operators and multiple partitions\n        applies to the <span class=\"hue-doc-codeph\">SET FILEFORMAT</span>, <span class=\"hue-doc-codeph\">SET TBLPROPERTIES</span>,\n        <span class=\"hue-doc-codeph\">SET SERDEPROPERTIES</span>, and <span class=\"hue-doc-codeph\">SET [UN]CACHED</span> clauses.\n        You can also use this syntax with the <span class=\"hue-doc-codeph\">PARTITION</span> clause\n        in the <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span> statement, and with the\n        <span class=\"hue-doc-codeph\">PARTITION</span> clause of the <span class=\"hue-doc-codeph\">SHOW FILES</span> statement.\n        Some forms of <span class=\"hue-doc-codeph\">ALTER TABLE</span> still only apply to one partition\n        at a time: the <span class=\"hue-doc-codeph\">SET LOCATION</span> and <span class=\"hue-doc-codeph\">ADD PARTITION</span>\n        clauses. The <span class=\"hue-doc-codeph\">PARTITION</span> clauses in the <span class=\"hue-doc-codeph\">LOAD DATA</span>\n        and <span class=\"hue-doc-codeph\">INSERT</span> statements also only apply to one partition at a time.\n      </p><p>\n        A DDL statement that applies to multiple partitions is considered successful\n        (resulting in no changes) even if no partitions match the conditions.\n        The results are the same as if the <span class=\"hue-doc-codeph\">IF EXISTS</span> clause was specified.\n      </p><p>\n        The performance and scalability of this technique is similar to\n        issuing a sequence of single-partition <span class=\"hue-doc-codeph\">ALTER TABLE</span>\n        statements in quick succession. To minimize bottlenecks due to\n        communication with the metastore database, or causing other\n        DDL operations on the same table to wait, test the effects of\n        performing <span class=\"hue-doc-codeph\">ALTER TABLE</span> statements that affect\n        large numbers of partitions.\n      </p></div><p><b>Amazon S3 considerations:</b></p><p>\n      You can specify an <span class=\"hue-doc-codeph\">s3a://</span> prefix on the <span class=\"hue-doc-codeph\">LOCATION</span> attribute of a table or partition\n      to make Impala query data from the Amazon S3 filesystem. In Impala 2.6 and higher, Impala automatically\n      handles creating or removing the associated folders when you issue <span class=\"hue-doc-codeph\">ALTER TABLE</span> statements\n      with the <span class=\"hue-doc-codeph\">ADD PARTITION</span> or <span class=\"hue-doc-codeph\">DROP PARTITION</span> clauses.\n    </p><p>\n        In Impala 2.6 and higher, Impala DDL statements such as\n        <span class=\"hue-doc-codeph\">CREATE DATABASE</span>, <span class=\"hue-doc-codeph\">CREATE TABLE</span>, <span class=\"hue-doc-codeph\">DROP DATABASE CASCADE</span>,\n        <span class=\"hue-doc-codeph\">DROP TABLE</span>, and <span class=\"hue-doc-codeph\">ALTER TABLE [ADD|DROP] PARTITION</span> can create or remove folders\n        as needed in the Amazon S3 system. Prior to Impala 2.6, you had to create folders yourself and point\n        Impala database, tables, or partitions at them, and manually remove folders when no longer needed.\n        See <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_s3.html#s3\" target=\"_blank\">Using Impala with the Amazon S3 Filesystem</a> for details about reading and writing S3 data with Impala.\n      </p><p><b>HDFS caching (CACHED IN clause):</b></p><p>\n      If you specify the <span class=\"hue-doc-codeph\">CACHED IN</span> clause, any existing or future data files in the table\n      directory or the partition subdirectories are designated to be loaded into memory with the HDFS caching\n      mechanism. See <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_perf_hdfs_caching.html#hdfs_caching\" target=\"_blank\">Using HDFS Caching with Impala (Impala 2.1 or higher only)</a> for details about using the HDFS\n      caching feature.\n    </p><p>\n        In Impala 2.2 and higher, the optional <span class=\"hue-doc-codeph\">WITH REPLICATION</span> clause\n        for <span class=\"hue-doc-codeph\">CREATE TABLE</span> and <span class=\"hue-doc-codeph\">ALTER TABLE</span> lets you specify\n        a <span class=\"hue-doc-term\">replication factor</span>, the number of hosts on which to cache the same data blocks.\n        When Impala processes a cached data block, where the cache replication factor is greater than 1, Impala randomly\n        selects a host that has a cached copy of that data block. This optimization avoids excessive CPU\n        usage on a single host when the same cached data block is processed multiple times.\n        Where practical, specify a value greater than or equal to the HDFS block replication factor.\n      </p><p>\n        If you connect to different Impala nodes within an <span class=\"hue-doc-cmdname\">impala-shell</span> session for\n        load-balancing purposes, you can enable the <span class=\"hue-doc-codeph\">SYNC_DDL</span> query option to make each DDL\n        statement wait before returning, until the new or changed metadata has been received by all the Impala\n        nodes. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_sync_ddl.xml\" data-doc-anchor-id=\"sync_ddl\">SYNC_DDL Query Option</a> for details.\n      </p><p>\n      The following sections show examples of the use cases for various <span class=\"hue-doc-codeph\">ALTER TABLE</span> clauses.\n    </p><p><b>To rename a table (RENAME TO clause):</b></p><p>\n      The <span class=\"hue-doc-codeph\">RENAME TO</span> clause lets you change the name of an existing table, and optionally which\n      database it is located in.\n    </p><p>\n      For internal tables, this operation physically renames the directory within HDFS that contains the data files;\n      the original directory name no longer exists. By qualifying the table names with database names, you can use\n      this technique to move an internal table (and its associated data directory) from one database to another.\n      For example:\n    </p><div class=\"hue-doc-codeblock\">create database d1;\ncreate database d2;\ncreate database d3;\nuse d1;\ncreate table mobile (x int);\nuse d2;\n-- Move table from another database to the current one.\nalter table d1.mobile rename to mobile;\nuse d1;\n-- Move table from one database to another.\nalter table d2.mobile rename to d3.mobile;</div><p>\n      For external tables,\n    </p><p><b>To change the physical location where Impala looks for data files associated with a table or\n      partition:</b></p><div class=\"hue-doc-codeblock\">ALTER TABLE <span class=\"hue-doc-varname\">table_name</span> [PARTITION (<span class=\"hue-doc-varname\">partition_spec</span>)] SET LOCATION '<span class=\"hue-doc-varname\">hdfs_path_of_directory</span>';</div><p>\n      The path you specify is the full HDFS path where the data files reside, or will be created. Impala does not\n      create any additional subdirectory named after the table. Impala does not move any data files to this new\n      location or change any data files that might already exist in that directory.\n    </p><p>\n      To set the location for a single partition, include the <span class=\"hue-doc-codeph\">PARTITION</span> clause. Specify all the\n      same partitioning columns for the table, with a constant value for each, to precisely identify the single\n      partition affected by the statement:\n    </p><div class=\"hue-doc-codeblock\">create table p1 (s string) partitioned by (month int, day int);\n-- Each ADD PARTITION clause creates a subdirectory in HDFS.\nalter table p1 add partition (month=1, day=1);\nalter table p1 add partition (month=1, day=2);\nalter table p1 add partition (month=2, day=1);\nalter table p1 add partition (month=2, day=2);\n-- Redirect queries, INSERT, and LOAD DATA for one partition\n-- to a specific different directory.\nalter table p1 partition (month=1, day=1) set location '/usr/external_data/new_years_day';\n</div><div class=\"hue-doc-note\">\n        If you are creating a partition for the first time and specifying its location, for maximum efficiency, use\n        a single <span class=\"hue-doc-codeph\">ALTER TABLE</span> statement including both the <span class=\"hue-doc-codeph\">ADD PARTITION</span> and\n        <span class=\"hue-doc-codeph\">LOCATION</span> clauses, rather than separate statements with <span class=\"hue-doc-codeph\">ADD PARTITION</span> and\n        <span class=\"hue-doc-codeph\">SET LOCATION</span> clauses.\n      </div><p><b>To automatically detect new partition directories added through Hive or HDFS operations:</b></p><p>\n      In Impala 2.3 and higher, the <span class=\"hue-doc-codeph\">RECOVER PARTITIONS</span> clause scans\n      a partitioned table to detect if any new partition directories were added outside of Impala,\n      such as by Hive <span class=\"hue-doc-codeph\">ALTER TABLE</span> statements or by <span class=\"hue-doc-cmdname\">hdfs dfs</span>\n      or <span class=\"hue-doc-cmdname\">hadoop fs</span> commands. The <span class=\"hue-doc-codeph\">RECOVER PARTITIONS</span> clause\n      automatically recognizes any data files present in these new directories, the same as\n      the <span class=\"hue-doc-codeph\">REFRESH</span> statement does.\n    </p><p>\n      For example, here is a sequence of examples showing how you might create a partitioned table in Impala,\n      create new partitions through Hive, copy data files into the new partitions with the <span class=\"hue-doc-cmdname\">hdfs</span>\n      command, and have Impala recognize the new partitions and new data:\n    </p><p>\n      In Impala, create the table, and a single partition for demonstration purposes:\n    </p><div class=\"hue-doc-codeblock\">\ncreate database recover_partitions;\nuse recover_partitions;\ncreate table t1 (s string) partitioned by (yy int, mm int);\ninsert into t1 partition (yy = 2016, mm = 1) values ('Partition exists');\nshow files in t1;\n+---------------------------------------------------------------------+------+--------------+\n| Path                                                                | Size | Partition    |\n+---------------------------------------------------------------------+------+--------------+\n| /user/hive/warehouse/recover_partitions.db/t1/yy=2016/mm=1/data.txt | 17B  | yy=2016/mm=1 |\n+---------------------------------------------------------------------+------+--------------+\nquit;\n</div><p>\n      In Hive, create some new partitions. In a real use case, you might create the\n      partitions and populate them with data as the final stages of an ETL pipeline.\n    </p><div class=\"hue-doc-codeblock\">\nhive&gt; use recover_partitions;\nOK\nhive&gt; alter table t1 add partition (yy = 2016, mm = 2);\nOK\nhive&gt; alter table t1 add partition (yy = 2016, mm = 3);\nOK\nhive&gt; quit;\n</div><p>\n      For demonstration purposes, manually copy data (a single row) into these\n      new partitions, using manual HDFS operations:\n    </p><div class=\"hue-doc-codeblock\">\n$ hdfs dfs -ls /user/hive/warehouse/recover_partitions.db/t1/yy=2016/\nFound 3 items\ndrwxr-xr-x - impala   hive 0 2016-05-09 16:06 /user/hive/warehouse/recover_partitions.db/t1/yy=2016/mm=1\ndrwxr-xr-x - jrussell hive 0 2016-05-09 16:14 /user/hive/warehouse/recover_partitions.db/t1/yy=2016/mm=2\ndrwxr-xr-x - jrussell hive 0 2016-05-09 16:13 /user/hive/warehouse/recover_partitions.db/t1/yy=2016/mm=3\n\n$ hdfs dfs -cp /user/hive/warehouse/recover_partitions.db/t1/yy=2016/mm=1/data.txt \\\n  /user/hive/warehouse/recover_partitions.db/t1/yy=2016/mm=2/data.txt\n$ hdfs dfs -cp /user/hive/warehouse/recover_partitions.db/t1/yy=2016/mm=1/data.txt \\\n  /user/hive/warehouse/recover_partitions.db/t1/yy=2016/mm=3/data.txt\n</div><div class=\"hue-doc-codeblock\">\nhive&gt; select * from t1;\nOK\nPartition exists  2016  1\nPartition exists  2016  2\nPartition exists  2016  3\nhive&gt; quit;\n</div><p>\n      In Impala, initially the partitions and data are not visible.\n      Running <span class=\"hue-doc-codeph\">ALTER TABLE</span> with the <span class=\"hue-doc-codeph\">RECOVER PARTITIONS</span>\n      clause scans the table data directory to find any new partition directories, and\n      the data files inside them:\n    </p><div class=\"hue-doc-codeblock\">\nselect * from t1;\n+------------------+------+----+\n| s                | yy   | mm |\n+------------------+------+----+\n| Partition exists | 2016 | 1  |\n+------------------+------+----+\n\nalter table t1 recover partitions;\nselect * from t1;\n+------------------+------+----+\n| s                | yy   | mm |\n+------------------+------+----+\n| Partition exists | 2016 | 1  |\n| Partition exists | 2016 | 3  |\n| Partition exists | 2016 | 2  |\n+------------------+------+----+\n</div><p><b>To change the key-value pairs of the TBLPROPERTIES and SERDEPROPERTIES fields:</b></p><div class=\"hue-doc-codeblock\">ALTER TABLE <span class=\"hue-doc-varname\">table_name</span> SET TBLPROPERTIES ('<span class=\"hue-doc-varname\">key1</span>'='<span class=\"hue-doc-varname\">value1</span>', '<span class=\"hue-doc-varname\">key2</span>'='<span class=\"hue-doc-varname\">value2</span>'[, ...]);\nALTER TABLE <span class=\"hue-doc-varname\">table_name</span> SET SERDEPROPERTIES ('<span class=\"hue-doc-varname\">key1</span>'='<span class=\"hue-doc-varname\">value1</span>', '<span class=\"hue-doc-varname\">key2</span>'='<span class=\"hue-doc-varname\">value2</span>'[, ...]);</div><p>\n      The <span class=\"hue-doc-codeph\">TBLPROPERTIES</span> clause is primarily a way to associate arbitrary user-specified data items\n      with a particular table.\n    </p><p>\n      The <span class=\"hue-doc-codeph\">SERDEPROPERTIES</span> clause sets up metadata defining how tables are read or written, needed\n      in some cases by Hive but not used extensively by Impala. You would use this clause primarily to change the\n      delimiter in an existing text table or partition, by setting the <span class=\"hue-doc-codeph\">'serialization.format'</span> and\n      <span class=\"hue-doc-codeph\">'field.delim'</span> property values to the new delimiter character:\n    </p><div class=\"hue-doc-codeblock\">-- This table begins life as pipe-separated text format.\ncreate table change_to_csv (s1 string, s2 string) row format delimited fields terminated by '|';\n-- Then we change it to a CSV table.\nalter table change_to_csv set SERDEPROPERTIES ('serialization.format'=',', 'field.delim'=',');\ninsert overwrite change_to_csv values ('stop','go'), ('yes','no');\n!hdfs dfs -cat 'hdfs://<span class=\"hue-doc-varname\">hostname</span>:8020/<span class=\"hue-doc-varname\">data_directory</span>/<span class=\"hue-doc-varname\">dbname</span>.db/change_to_csv/<span class=\"hue-doc-varname\">data_file</span>';\nstop,go\nyes,no</div><p>\n      Use the <span class=\"hue-doc-codeph\">DESCRIBE FORMATTED</span> statement to see the current values of these properties for an\n      existing table. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_create_table.xml\" data-doc-anchor-id=\"create_table\">CREATE TABLE Statement</a> for more details about these clauses.\n      See <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_perf_stats.html#perf_table_stats_manual\" target=\"_blank\">Table and Column Statistics</a> for an example of using table properties to\n      fine-tune the performance-related table statistics.\n    </p><p><b>To manually set or update table or column statistics:</b></p><p>\n      Although for most tables the <span class=\"hue-doc-codeph\">COMPUTE STATS</span> or <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span>\n      statement is all you need to keep table and column statistics up to date for a table,\n      sometimes for a very large table or one that is updated frequently, the length of time to recompute\n      all the statistics might make it impractical to run those statements as often as needed.\n      As a workaround, you can use the <span class=\"hue-doc-codeph\">ALTER TABLE</span> statement to set table statistics\n      at the level of the entire table or a single partition, or column statistics at the level of\n      the entire table.\n    </p><p>\n      You can set the <span class=\"hue-doc-codeph\">numrows</span> value for table statistics by changing the\n      <span class=\"hue-doc-codeph\">TBLPROPERTIES</span> setting for a table or partition.\n      For example:\n<div class=\"hue-doc-codeblock\">create table analysis_data stored as parquet as select * from raw_data;\nInserted 1000000000 rows in 181.98s\ncompute stats analysis_data;\ninsert into analysis_data select * from smaller_table_we_forgot_before;\nInserted 1000000 rows in 15.32s\n-- Now there are 1001000000 rows. We can update this single data point in the stats.\nalter table analysis_data set tblproperties('numRows'='1001000000', 'STATS_GENERATED_VIA_STATS_TASK'='true');</div><div class=\"hue-doc-codeblock\">-- If the table originally contained 1 million rows, and we add another partition with 30 thousand rows,\n-- change the numRows property for the partition and the overall table.\nalter table partitioned_data partition(year=2009, month=4) set tblproperties ('numRows'='30000', 'STATS_GENERATED_VIA_STATS_TASK'='true');\nalter table partitioned_data set tblproperties ('numRows'='1030000', 'STATS_GENERATED_VIA_STATS_TASK'='true');</div>\n      See <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_perf_stats.html#perf_table_stats_manual\" target=\"_blank\">Table and Column Statistics</a> for details.\n    </p><p>\n      In Impala 2.6 and higher, you can use the <span class=\"hue-doc-codeph\">SET COLUMN STATS</span> clause\n      to set a specific stats value for a particular column.\n    </p><p>\n        You specify a case-insensitive symbolic name for the kind of statistics:\n        <span class=\"hue-doc-codeph\">numDVs</span>, <span class=\"hue-doc-codeph\">numNulls</span>, <span class=\"hue-doc-codeph\">avgSize</span>, <span class=\"hue-doc-codeph\">maxSize</span>.\n        The key names and values are both quoted. This operation applies to an entire table,\n        not a specific partition. For example:\n<div class=\"hue-doc-codeblock\">\ncreate table t1 (x int, s string);\ninsert into t1 values (1, 'one'), (2, 'two'), (2, 'deux');\nshow column stats t1;\n+--------+--------+------------------+--------+----------+----------+\n| Column | Type   | #Distinct Values | #Nulls | Max Size | Avg Size |\n+--------+--------+------------------+--------+----------+----------+\n| x      | INT    | -1               | -1     | 4        | 4        |\n| s      | STRING | -1               | -1     | -1       | -1       |\n+--------+--------+------------------+--------+----------+----------+\nalter table t1 set column stats x ('numDVs'='2','numNulls'='0');\nalter table t1 set column stats s ('numdvs'='3','maxsize'='4');\nshow column stats t1;\n+--------+--------+------------------+--------+----------+----------+\n| Column | Type   | #Distinct Values | #Nulls | Max Size | Avg Size |\n+--------+--------+------------------+--------+----------+----------+\n| x      | INT    | 2                | 0      | 4        | 4        |\n| s      | STRING | 3                | -1     | 4        | -1       |\n+--------+--------+------------------+--------+----------+----------+\n</div></p><p><b>To reorganize columns for a table:</b></p><div class=\"hue-doc-codeblock\">ALTER TABLE <span class=\"hue-doc-varname\">table_name</span> ADD COLUMNS (<span class=\"hue-doc-varname\">column_defs</span>);\nALTER TABLE <span class=\"hue-doc-varname\">table_name</span> REPLACE COLUMNS (<span class=\"hue-doc-varname\">column_defs</span>);\nALTER TABLE <span class=\"hue-doc-varname\">table_name</span> CHANGE <span class=\"hue-doc-varname\">column_name</span><span class=\"hue-doc-varname\">new_name</span><span class=\"hue-doc-varname\">new_type</span>;\nALTER TABLE <span class=\"hue-doc-varname\">table_name</span> DROP <span class=\"hue-doc-varname\">column_name</span>;</div><p>\n      The <span class=\"hue-doc-varname\">column_spec</span> is the same as in the <span class=\"hue-doc-codeph\">CREATE TABLE</span> statement: the column\n      name, then its data type, then an optional comment. You can add multiple columns at a time. The parentheses\n      are required whether you add a single column or multiple columns. When you replace columns, all the original\n      column definitions are discarded. You might use this technique if you receive a new set of data files with\n      different data types or columns in a different order. (The data files are retained, so if the new columns are\n      incompatible with the old ones, use <span class=\"hue-doc-codeph\">INSERT OVERWRITE</span> or <span class=\"hue-doc-codeph\">LOAD DATA OVERWRITE</span>\n      to replace all the data before issuing any further queries.)\n    </p><p>\n      For example, here is how you might add columns to an existing table.\n      The first <span class=\"hue-doc-codeph\">ALTER TABLE</span> adds two new columns, and the second\n      <span class=\"hue-doc-codeph\">ALTER TABLE</span> adds one new column.\n      A single Impala query reads both the old and new data files, containing different numbers of columns.\n      For any columns not present in a particular data file, all the column values are\n      considered to be <span class=\"hue-doc-codeph\">NULL</span>.\n    </p><div class=\"hue-doc-codeblock\">\ncreate table t1 (x int);\ninsert into t1 values (1), (2);\n\nalter table t1 add columns (s string, t timestamp);\ninsert into t1 values (3, 'three', now());\n\nalter table t1 add columns (b boolean);\ninsert into t1 values (4, 'four', now(), true);\n\nselect * from t1 order by x;\n+---+-------+-------------------------------+------+\n| x | s     | t                             | b    |\n+---+-------+-------------------------------+------+\n| 1 | NULL  | NULL                          | NULL |\n| 2 | NULL  | NULL                          | NULL |\n| 3 | three | 2016-05-11 11:19:45.054457000 | NULL |\n| 4 | four  | 2016-05-11 11:20:20.260733000 | true |\n+---+-------+-------------------------------+------+\n</div><p>\n      You might use the <span class=\"hue-doc-codeph\">CHANGE</span> clause to rename a single column, or to treat an existing column as\n      a different type than before, such as to switch between treating a column as <span class=\"hue-doc-codeph\">STRING</span> and\n      <span class=\"hue-doc-codeph\">TIMESTAMP</span>, or between <span class=\"hue-doc-codeph\">INT</span> and <span class=\"hue-doc-codeph\">BIGINT</span>. You can only drop a\n      single column at a time; to drop multiple columns, issue multiple <span class=\"hue-doc-codeph\">ALTER TABLE</span> statements, or\n      define the new set of columns with a single <span class=\"hue-doc-codeph\">ALTER TABLE ... REPLACE COLUMNS</span> statement.\n    </p><p>\n      The following examples show some safe operations to drop or change columns. Dropping the final column\n      in a table lets Impala ignore the data causing any disruption to existing data files. Changing the type\n      of a column works if existing data values can be safely converted to the new type. The type conversion\n      rules depend on the file format of the underlying table. For example, in a text table, the same value\n      can be interpreted as a <span class=\"hue-doc-codeph\">STRING</span> or a numeric value, while in a binary format such as\n      Parquet, the rules are stricter and type conversions only work between certain sizes of integers.\n    </p><div class=\"hue-doc-codeblock\">\ncreate table optional_columns (x int, y int, z int, a1 int, a2 int);\ninsert into optional_columns values (1,2,3,0,0), (2,3,4,100,100);\n\n-- When the last column in the table is dropped, Impala ignores the\n-- values that are no longer needed. (Dropping A1 but leaving A2\n-- would cause problems, as we will see in a subsequent example.)\nalter table optional_columns drop column a2;\nalter table optional_columns drop column a1;\n\nselect * from optional_columns;\n+---+---+---+\n| x | y | z |\n+---+---+---+\n| 1 | 2 | 3 |\n| 2 | 3 | 4 |\n+---+---+---+\n</div><div class=\"hue-doc-codeblock\">\ncreate table int_to_string (s string, x int);\ninsert into int_to_string values ('one', 1), ('two', 2);\n\n-- What was an INT column will now be interpreted as STRING.\n-- This technique works for text tables but not other file formats.\n-- The second X represents the new name of the column, which we keep the same.\nalter table int_to_string change x x string;\n\n-- Once the type is changed, we can insert non-integer values into the X column\n-- and treat that column as a string, for example by uppercasing or concatenating.\ninsert into int_to_string values ('three', 'trois');\nselect s, upper(x) from int_to_string;\n+-------+----------+\n| s     | upper(x) |\n+-------+----------+\n| one   | 1        |\n| two   | 2        |\n| three | TROIS    |\n+-------+----------+\n</div><p>\n      Remember that Impala does not actually do any conversion for the underlying data files as a result of\n      <span class=\"hue-doc-codeph\">ALTER TABLE</span> statements. If you use <span class=\"hue-doc-codeph\">ALTER TABLE</span> to create a table\n      layout that does not agree with the contents of the underlying files, you must replace the files\n      yourself, such as using <span class=\"hue-doc-codeph\">LOAD DATA</span> to load a new set of data files, or\n      <span class=\"hue-doc-codeph\">INSERT OVERWRITE</span> to copy from another table and replace the original data.\n    </p><p>\n      The following example shows what happens if you delete the middle column from a Parquet table containing three columns.\n      The underlying data files still contain three columns of data. Because the columns are interpreted based on their positions in\n      the data file instead of the specific column names, a <span class=\"hue-doc-codeph\">SELECT *</span> query now reads the first and second\n      columns from the data file, potentially leading to unexpected results or conversion errors.\n      For this reason, if you expect to someday drop a column, declare it as the last column in the table, where its data\n      can be ignored by queries after the column is dropped. Or, re-run your ETL process and create new data files\n      if you drop or change the type of a column in a way that causes problems with existing data files.\n    </p><div class=\"hue-doc-codeblock\">\n-- Parquet table showing how dropping a column can produce unexpected results.\ncreate table p1 (s1 string, s2 string, s3 string) stored as parquet;\n\ninsert into p1 values ('one', 'un', 'uno'), ('two', 'deux', 'dos'),\n  ('three', 'trois', 'tres');\nselect * from p1;\n+-------+-------+------+\n| s1    | s2    | s3   |\n+-------+-------+------+\n| one   | un    | uno  |\n| two   | deux  | dos  |\n| three | trois | tres |\n+-------+-------+------+\n\nalter table p1 drop column s2;\n-- The S3 column contains unexpected results.\n-- Because S2 and S3 have compatible types, the query reads\n-- values from the dropped S2, because the existing data files\n-- still contain those values as the second column.\nselect * from p1;\n+-------+-------+\n| s1    | s3    |\n+-------+-------+\n| one   | un    |\n| two   | deux  |\n| three | trois |\n+-------+-------+\n</div><div class=\"hue-doc-codeblock\">\n-- Parquet table showing how dropping a column can produce conversion errors.\ncreate table p2 (s1 string, x int, s3 string) stored as parquet;\n\ninsert into p2 values ('one', 1, 'uno'), ('two', 2, 'dos'), ('three', 3, 'tres');\nselect * from p2;\n+-------+---+------+\n| s1    | x | s3   |\n+-------+---+------+\n| one   | 1 | uno  |\n| two   | 2 | dos  |\n| three | 3 | tres |\n+-------+---+------+\n\nalter table p2 drop column x;\nselect * from p2;\nWARNINGS:\nFile '<span class=\"hue-doc-varname\">hdfs_filename</span>' has an incompatible Parquet schema for column 'add_columns.p2.s3'.\nColumn type: STRING, Parquet schema:\noptional int32 x [i:1 d:1 r:0]\n\nFile '<span class=\"hue-doc-varname\">hdfs_filename</span>' has an incompatible Parquet schema for column 'add_columns.p2.s3'.\nColumn type: STRING, Parquet schema:\noptional int32 x [i:1 d:1 r:0]\n</div><p>\n      In Impala 2.6 and higher, if an Avro table is created without column definitions in the\n      <span class=\"hue-doc-codeph\">CREATE TABLE</span> statement, and columns are later\n      added through <span class=\"hue-doc-codeph\">ALTER TABLE</span>, the resulting\n      table is now queryable. Missing values from the newly added\n      columns now default to <span class=\"hue-doc-codeph\">NULL</span>.\n    </p><p><b>To change the file format that Impala expects data to be in, for a table or partition:</b></p><p>\n      Use an <span class=\"hue-doc-codeph\">ALTER TABLE ... SET FILEFORMAT</span> clause. You can include an optional <span class=\"hue-doc-codeph\">PARTITION\n      (<span class=\"hue-doc-varname\">col1</span>=<span class=\"hue-doc-varname\">val1</span>, <span class=\"hue-doc-varname\">col2</span>=<span class=\"hue-doc-varname\">val2</span>,\n      ...</span> clause so that the file format is changed for a specific partition rather than the entire table.\n    </p><p>\n      Because this operation only changes the table metadata, you must do any conversion of existing data using\n      regular Hadoop techniques outside of Impala. Any new data created by the Impala <span class=\"hue-doc-codeph\">INSERT</span>\n      statement will be in the new format. You cannot specify the delimiter for Text files; the data files must be\n      comma-delimited.\n</p><p>\n      To set the file format for a single partition, include the <span class=\"hue-doc-codeph\">PARTITION</span> clause. Specify all the\n      same partitioning columns for the table, with a constant value for each, to precisely identify the single\n      partition affected by the statement:\n    </p><div class=\"hue-doc-codeblock\">create table p1 (s string) partitioned by (month int, day int);\n-- Each ADD PARTITION clause creates a subdirectory in HDFS.\nalter table p1 add partition (month=1, day=1);\nalter table p1 add partition (month=1, day=2);\nalter table p1 add partition (month=2, day=1);\nalter table p1 add partition (month=2, day=2);\n-- Queries and INSERT statements will read and write files\n-- in this format for this specific partition.\nalter table p1 partition (month=2, day=2) set fileformat parquet;\n</div><p><b>To change the row format with different delimiter characters:</b></p><p> Use the <span class=\"hue-doc-codeph\">SET ROW FORMAT DELIMITED</span> clause to ingest data\n      files that use a different delimiter character or a different line end\n      character. When specifying delimiter and line end characters with the\n        <span class=\"hue-doc-codeph\">FIELDS TERMINATED BY</span>, <span class=\"hue-doc-codeph\">ESCAPED BY</span>, and\n        <span class=\"hue-doc-codeph\">LINES TERMINATED BY</span> clauses, you can use the following:<ul><li>A regular ASCII character surrounded by single or double quotation\n          marks.</li><li>An octal sequence,  such as <span class=\"hue-doc-codeph\">'\\054'</span> representing a\n          comma or <span class=\"hue-doc-codeph\">'\\0'</span> for ASCII null (hex 00).</li><li>Special characters, such as:<ul><li><span class=\"hue-doc-codeph\">'\\t'</span> for tab</li><li><span class=\"hue-doc-codeph\">'\\n'</span> for newline or linefeed</li><li><span class=\"hue-doc-codeph\">'\\r'</span> for carriage return</li></ul></li><li>An integer in the range '-127'..'128' (with quotation marks but no\n            backslash)<p>Negative values are subtracted from 256. For example,\n              <span class=\"hue-doc-codeph\">FIELDS TERMINATED BY '-2'</span> sets the field\n            delimiter to ASCII code 254.</p></li></ul></p><p>For more examples of text tables, see <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_txtfile.html#txtfile\" target=\"_blank\">Using Text Data Files with Impala Tables</a>. </p><p> For the <span class=\"hue-doc-codeph\">ESCAPED BY</span> clause, choose an escape character\n      that is not used anywhere else in the file. The character following the\n      escape character is taken literally as part of a field value. </p><p>Surrounding field values with quotation marks does not help Impala to\n      parse fields with embedded delimiter characters as the quotation marks are\n      considered to be part of the column value. </p><p>If you want to use <span class=\"hue-doc-codeph\">\\</span> as the escape character, specify\n      the clause in <span class=\"hue-doc-cmdname\">impala-shell</span> as <span class=\"hue-doc-codeph\">ESCAPED BY\n        '\\\\'</span>. </p><p><b>To add or drop partitions for a table</b>, the table must already be partitioned (that is, created with a\n      <span class=\"hue-doc-codeph\">PARTITIONED BY</span> clause). The partition is a physical directory in HDFS, with a name that\n      encodes a particular column value (the <b>partition key</b>). The Impala <span class=\"hue-doc-codeph\">INSERT</span> statement\n      already creates the partition if necessary, so the <span class=\"hue-doc-codeph\">ALTER TABLE ... ADD PARTITION</span> is\n      primarily useful for importing data by moving or copying existing data files into the HDFS directory\n      corresponding to a partition. (You can use the <span class=\"hue-doc-codeph\">LOAD DATA</span> statement to move files into the\n      partition directory, or <span class=\"hue-doc-codeph\">ALTER TABLE ... PARTITION (...) SET LOCATION</span> to point a partition at\n      a directory that already contains data files.\n    </p><p>\n      The <span class=\"hue-doc-codeph\">DROP PARTITION</span> clause is used to remove the HDFS directory and associated data files for\n      a particular set of partition key values; for example, if you always analyze the last 3 months worth of data,\n      at the beginning of each month you might drop the oldest partition that is no longer needed. Removing\n      partitions reduces the amount of metadata associated with the table and the complexity of calculating the\n      optimal query plan, which can simplify and speed up queries on partitioned tables, particularly join queries.\n      Here is an example showing the <span class=\"hue-doc-codeph\">ADD PARTITION</span> and <span class=\"hue-doc-codeph\">DROP PARTITION</span> clauses.\n    </p><p>\n      To avoid errors while adding or dropping partitions whose existence is not certain,\n      add the optional <span class=\"hue-doc-codeph\">IF [NOT] EXISTS</span> clause between the <span class=\"hue-doc-codeph\">ADD</span> or\n      <span class=\"hue-doc-codeph\">DROP</span> keyword and the <span class=\"hue-doc-codeph\">PARTITION</span> keyword. That is, the entire\n      clause becomes <span class=\"hue-doc-codeph\">ADD IF NOT EXISTS PARTITION</span> or <span class=\"hue-doc-codeph\">DROP IF EXISTS PARTITION</span>.\n      The following example shows how partitions can be created automatically through <span class=\"hue-doc-codeph\">INSERT</span>\n      statements, or manually through <span class=\"hue-doc-codeph\">ALTER TABLE</span> statements. The <span class=\"hue-doc-codeph\">IF [NOT] EXISTS</span>\n      clauses let the <span class=\"hue-doc-codeph\">ALTER TABLE</span> statements succeed even if a new requested partition already\n      exists, or a partition to be dropped does not exist.\n    </p><p>\nInserting 2 year values creates 2 partitions:\n</p><div class=\"hue-doc-codeblock\">\ncreate table partition_t (s string) partitioned by (y int);\ninsert into partition_t (s,y) values ('two thousand',2000), ('nineteen ninety',1990);\nshow partitions partition_t;\n+-------+-------+--------+------+--------------+-------------------+--------+-------------------+\n| y     | #Rows | #Files | Size | Bytes Cached | Cache Replication | Format | Incremental stats |\n+-------+-------+--------+------+--------------+-------------------+--------+-------+\n| 1990  | -1    | 1      | 16B  | NOT CACHED   | NOT CACHED        | TEXT   | false |\n| 2000  | -1    | 1      | 13B  | NOT CACHED   | NOT CACHED        | TEXT   | false |\n| Total | -1    | 2      | 29B  | 0B           |                   |        |       |\n+-------+-------+--------+------+--------------+-------------------+--------+-------+\n</div><p>\nWithout the <span class=\"hue-doc-codeph\">IF NOT EXISTS</span> clause, an attempt to add a new partition might fail:\n</p><div class=\"hue-doc-codeblock\">\nalter table partition_t add partition (y=2000);\nERROR: AnalysisException: Partition spec already exists: (y=2000).\n</div><p>\nThe <span class=\"hue-doc-codeph\">IF NOT EXISTS</span> clause makes the statement succeed whether or not there was already a\npartition with the specified key value:\n</p><div class=\"hue-doc-codeblock\">\nalter table partition_t add if not exists partition (y=2000);\nalter table partition_t add if not exists partition (y=2010);\nshow partitions partition_t;\n+-------+-------+--------+------+--------------+-------------------+--------+-------------------+\n| y     | #Rows | #Files | Size | Bytes Cached | Cache Replication | Format | Incremental stats |\n+-------+-------+--------+------+--------------+-------------------+--------+-------+\n| 1990  | -1    | 1      | 16B  | NOT CACHED   | NOT CACHED        | TEXT   | false |\n| 2000  | -1    | 1      | 13B  | NOT CACHED   | NOT CACHED        | TEXT   | false |\n| 2010  | -1    | 0      | 0B   | NOT CACHED   | NOT CACHED        | TEXT   | false |\n| Total | -1    | 2      | 29B  | 0B           |                   |        |       |\n+-------+-------+--------+------+--------------+-------------------+--------+-------+\n</div><p>\nLikewise, the <span class=\"hue-doc-codeph\">IF EXISTS</span> clause lets <span class=\"hue-doc-codeph\">DROP PARTITION</span> succeed whether or not the partition is already\nin the table:\n</p><div class=\"hue-doc-codeblock\">\nalter table partition_t drop if exists partition (y=2000);\nalter table partition_t drop if exists partition (y=1950);\nshow partitions partition_t;\n+-------+-------+--------+------+--------------+-------------------+--------+-------------------+\n| y     | #Rows | #Files | Size | Bytes Cached | Cache Replication | Format | Incremental stats |\n+-------+-------+--------+------+--------------+-------------------+--------+-------+\n| 1990  | -1    | 1      | 16B  | NOT CACHED   | NOT CACHED        | TEXT   | false |\n| 2010  | -1    | 0      | 0B   | NOT CACHED   | NOT CACHED        | TEXT   | false |\n| Total | -1    | 1      | 16B  | 0B           |                   |        |       |\n+-------+-------+--------+------+--------------+-------------------+--------+-------+\n</div><p> The optional <span class=\"hue-doc-codeph\">PURGE</span> keyword, available in\n      Impala 2.3 and higher, is used with the <span class=\"hue-doc-codeph\">DROP\n        PARTITION</span> clause to remove associated HDFS data files\n      immediately rather than going through the HDFS trashcan mechanism. Use\n      this keyword when dropping a partition if it is crucial to remove the data\n      as quickly as possible to free up space, or if there is a problem with the\n      trashcan, such as the trash cannot being configured or being in a\n      different HDFS encryption zone than the data files. </p><div class=\"hue-doc-codeblock\">-- Create an empty table and define the partitioning scheme.\ncreate table part_t (x int) partitioned by (month int);\n-- Create an empty partition into which you could copy data files from some other source.\nalter table part_t add partition (month=1);\n-- After changing the underlying data, issue a REFRESH statement to make the data visible in Impala.\nrefresh part_t;\n-- Later, do the same for the next month.\nalter table part_t add partition (month=2);\n\n-- Now you no longer need the older data.\nalter table part_t drop partition (month=1);\n-- If the table was partitioned by month and year, you would issue a statement like:\n-- alter table part_t drop partition (year=2003,month=1);\n-- which would require 12 ALTER TABLE statements to remove a year's worth of data.\n\n-- If the data files for subsequent months were in a different file format,\n-- you could set a different file format for the new partition as you create it.\nalter table part_t add partition (month=3) set fileformat=parquet;\n</div><p>\n      The value specified for a partition key can be an arbitrary constant expression, without any references to\n      columns. For example:\n    </p><div class=\"hue-doc-codeblock\">alter table time_data add partition (month=concat('Decem','ber'));\nalter table sales_data add partition (zipcode = cast(9021 * 10 as string));</div><div class=\"hue-doc-note\"><p>\n        An alternative way to reorganize a table and its associated data files is to use <span class=\"hue-doc-codeph\">CREATE\n        TABLE</span> to create a variation of the original table, then use <span class=\"hue-doc-codeph\">INSERT</span> to copy the\n        transformed or reordered data to the new table. The advantage of <span class=\"hue-doc-codeph\">ALTER TABLE</span> is that it\n        avoids making a duplicate copy of the data files, allowing you to reorganize huge volumes of data in a\n        space-efficient way using familiar Hadoop techniques.\n      </p></div><p><b>To switch a table between internal and external:</b></p><p>\n        You can switch a table from internal to external, or from external to internal, by using the <span class=\"hue-doc-codeph\">ALTER\n        TABLE</span> statement:\n<div class=\"hue-doc-codeblock\">\n-- Switch a table from internal to external.\nALTER TABLE <span class=\"hue-doc-varname\">table_name</span> SET TBLPROPERTIES('EXTERNAL'='TRUE');\n\n-- Switch a table from external to internal.\nALTER TABLE <span class=\"hue-doc-varname\">table_name</span> SET TBLPROPERTIES('EXTERNAL'='FALSE');\n</div></p><p><b>Cancellation:</b> Cannot be cancelled.\n      </p><p><b>HDFS permissions:</b></p><p>\n      Most <span class=\"hue-doc-codeph\">ALTER TABLE</span> clauses do not actually\n      read or write any HDFS files, and so do not depend on\n      specific HDFS permissions. For example, the <span class=\"hue-doc-codeph\">SET FILEFORMAT</span>\n      clause does not actually check the file format existing data files or\n      convert them to the new format, and the <span class=\"hue-doc-codeph\">SET LOCATION</span> clause\n      does not require any special permissions on the new location.\n      (Any permission-related failures would come later, when you\n      actually query or insert into the table.)\n    </p><p>\n      In general, <span class=\"hue-doc-codeph\">ALTER TABLE</span> clauses that do touch\n      HDFS files and directories require the same HDFS permissions\n      as corresponding <span class=\"hue-doc-codeph\">CREATE</span>, <span class=\"hue-doc-codeph\">INSERT</span>,\n      or <span class=\"hue-doc-codeph\">SELECT</span> statements.\n      The permissions allow\n      the user ID that the <span class=\"hue-doc-cmdname\">impalad</span> daemon runs under,\n      typically the <span class=\"hue-doc-codeph\">impala</span> user, to read or write\n      files or directories, or (in the case of the execute bit) descend into a directory.\n      The <span class=\"hue-doc-codeph\">RENAME TO</span> clause requires read, write, and execute permission in the\n      source and destination database directories and in the table data directory,\n      and read and write permission for the data files within the table.\n      The <span class=\"hue-doc-codeph\">ADD PARTITION</span> and <span class=\"hue-doc-codeph\">DROP PARTITION</span> clauses\n      require write and execute permissions for the associated partition directory.\n    </p><p><b>Kudu considerations:</b></p><p>\n      Because of the extra constraints and features of Kudu tables, such as the <span class=\"hue-doc-codeph\">NOT NULL</span>\n      and <span class=\"hue-doc-codeph\">DEFAULT</span> attributes for columns, <span class=\"hue-doc-codeph\">ALTER TABLE</span> has specific\n      requirements related to Kudu tables:\n      <ul><li><p>\n            In an <span class=\"hue-doc-codeph\">ADD COLUMNS</span> operation, you can specify the <span class=\"hue-doc-codeph\">NULL</span>,\n            <span class=\"hue-doc-codeph\">NOT NULL</span>, and <span class=\"hue-doc-codeph\">DEFAULT <span class=\"hue-doc-varname\">default_value</span></span>\n            column attributes.\n          </p></li><li><p>\n            In Impala 2.9 and higher, you can also specify the <span class=\"hue-doc-codeph\">ENCODING</span>,\n            <span class=\"hue-doc-codeph\">COMPRESSION</span>, and <span class=\"hue-doc-codeph\">BLOCK_SIZE</span> attributes when adding a column.\n          </p></li><li><p>\n            If you add a column with a <span class=\"hue-doc-codeph\">NOT NULL</span> attribute, it must also have a\n            <span class=\"hue-doc-codeph\">DEFAULT</span> attribute, so the default value can be assigned to that\n            column for all existing rows.\n          </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">DROP COLUMN</span> clause works the same for a Kudu table as for other\n            kinds of tables.\n          </p></li><li><p>\n            Although you can change the name of a column with the <span class=\"hue-doc-codeph\">CHANGE</span> clause,\n            you cannot change the type of a column in a Kudu table.\n          </p></li><li><p>\n            You cannot change the nullability of existing columns in a Kudu table.\n          </p></li><li><p>\n            In Impala 2.10, you can change the default value, encoding,\n            compression, or block size of existing columns in a Kudu table by using the\n            <span class=\"hue-doc-codeph\">SET</span> clause.\n          </p></li><li><p>\n            You cannot use the <span class=\"hue-doc-codeph\">REPLACE COLUMNS</span> clause with a Kudu table.\n          </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">RENAME TO</span> clause for a Kudu table only affects the name stored in the\n            metastore database that Impala uses to refer to the table. To change which underlying Kudu\n            table is associated with an Impala table name, you must change the <span class=\"hue-doc-codeph\">TBLPROPERTIES</span>\n            property of the table: <span class=\"hue-doc-codeph\">SET TBLPROPERTIES('kudu.table_name'='<span class=\"hue-doc-varname\">kudu_tbl_name</span>)</span>.\n            Doing so causes Kudu to change the name of the underlying Kudu table.\n          </p></li></ul></p><p>\n      The following are some examples of using the <span class=\"hue-doc-codeph\">ADD COLUMNS</span> clause for a Kudu table:\n    </p><div class=\"hue-doc-codeblock\">\nCREATE TABLE t1 ( x INT, PRIMARY KEY (x) )\n  PARTITION BY HASH (x) PARTITIONS 16\n  STORED AS KUDU\n\nALTER TABLE t1 ADD COLUMNS (y STRING ENCODING prefix_encoding);\nALTER TABLE t1 ADD COLUMNS (z INT DEFAULT 10);\nALTER TABLE t1 ADD COLUMNS (a STRING NOT NULL DEFAULT '', t TIMESTAMP COMPRESSION default_compression);\n</div><p>\n      The following are some examples of modifying column defaults and storage attributes for a Kudu table:\n    </p><div class=\"hue-doc-codeblock\">\ncreate table kt (x bigint primary key, s string default 'yes', t timestamp)\n  stored as kudu;\n\n-- You can change the default value for a column, which affects any rows\n-- inserted after this change is made.\nalter table kt alter column s set default 'no';\n\n-- You can remove the default value for a column, which affects any rows\n-- inserted after this change is made. If the column is nullable, any\n-- future inserts default to NULL for this column. If the column is marked\n-- NOT NULL, any future inserts must specify a value for the column.\nalter table kt alter column s drop default;\n\ninsert into kt values (1, 'foo', now());\n-- Because of the DROP DEFAULT above, omitting S from the insert\n-- gives it a value of NULL.\ninsert into kt (x, t) values (2, now());\n\nselect * from kt;\n+---+------+-------------------------------+\n| x | s    | t                             |\n+---+------+-------------------------------+\n| 2 | NULL | 2017-10-02 00:03:40.652156000 |\n| 1 | foo  | 2017-10-02 00:03:04.346185000 |\n+---+------+-------------------------------+\n\n-- Other storage-related attributes can also be changed for columns.\n-- These changes take effect for any newly inserted rows, or rows\n-- rearranged due to compaction after deletes or updates.\nalter table kt alter column s set encoding prefix_encoding;\n-- The COLUMN keyword is optional in the syntax.\nalter table kt alter x set block_size 2048;\nalter table kt alter column t set compression zlib;\n\ndesc kt;\n+------+-----------+---------+-------------+----------+---------------+-----------------+---------------------+------------+\n| name | type      | comment | primary_key | nullable | default_value | encoding        | compression         | block_size |\n+------+-----------+---------+-------------+----------+---------------+-----------------+---------------------+------------+\n| x    | bigint    |         | true        | false    |               | AUTO_ENCODING   | DEFAULT_COMPRESSION | 2048       |\n| s    | string    |         | false       | true     |               | PREFIX_ENCODING | DEFAULT_COMPRESSION | 0          |\n| t    | timestamp |         | false       | true     |               | AUTO_ENCODING   | ZLIB                | 0          |\n+------+-----------+---------+-------------+----------+---------------+-----------------+---------------------+------------+\n</div><p>\n      Kudu tables all use an underlying partitioning mechanism. The partition syntax is different than for non-Kudu\n      tables. You can use the <span class=\"hue-doc-codeph\">ALTER TABLE</span> statement to add and drop <span class=\"hue-doc-term\">range partitions</span>\n      from a Kudu table. Any new range must not overlap with any existing ranges. Dropping a range removes all the associated\n      rows from the table. See <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_kudu.html#kudu_partitioning\" target=\"_blank\">Partitioning for Kudu Tables</a> for details.\n    </p><p><b>Related information:</b></p><p><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_tables.xml\" data-doc-anchor-id=\"tables\">Overview of Impala Tables</a>,\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_create_table.xml\" data-doc-anchor-id=\"create_table\">CREATE TABLE Statement</a>, <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_drop_table.xml\" data-doc-anchor-id=\"drop_table\">DROP TABLE Statement</a>,\n      <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_partitioning.html#partitioning\" target=\"_blank\">Partitioning for Impala Tables</a>, <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_tables.xml\" data-doc-anchor-id=\"internal_tables\">Internal Tables</a>,\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_tables.xml\" data-doc-anchor-id=\"external_tables\">External Tables</a></p></div></div></div>","title":"ALTER TABLE Statement"}