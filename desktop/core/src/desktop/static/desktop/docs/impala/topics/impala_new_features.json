{"body":"<div><div id=\"new_features\"><div class=\"hue-doc-title\"><span class=\"hue-doc-ph\">New Features in Apache Impala</span><span class=\"hue-doc-ph\">What's New in Apache Impala</span></div><div><p>\n      This release of Impala contains the following changes and enhancements from previous releases.\n    </p><p/></div><div id=\"new_features_400\"><div class=\"hue-doc-title\">New Features in Impala 4.0</div><div><p>\n        For the full list of issues closed in this release, including the\n        issues marked as <q>new features</q> or <q>improvements</q>, see the\n        <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/release-notes-4.0.html\" target=\"_blank\">release notes</a> or\n        <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/changelog-4.0.html\" target=\"_blank\">changelog</a> for\n        Impala 4.0.\n      </p></div></div><div id=\"new_features_34\"><div class=\"hue-doc-title\">New Features in Impala 3.4</div><div><p> The following sections describe the noteworthy improvements made in\n          Impala 3.4. </p><p> For the full list of issues closed in this release, see the <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/changelog-3.4.html\" target=\"_blank\">changelog for Impala 3.4</a>. </p><div class=\"hue-doc-section\" id=\"section_cw4_nmw_pjb\"><div class=\"hue-doc-title\">Support for Hive Insert-Only Transactional Tables</div><p>Impala added the support to truncate insert-only transactional\n          tables. </p><p>By default, Impala creates an insert-only transactional table when\n          you issue the <span class=\"hue-doc-codeph\">CREATE TABLE</span> statement.</p><p>Use the Hive compaction to compact small files to improve the\n          performance and scalability of metadata in transactional tables.</p><p>See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_transactions.xml\" data-doc-anchor-id=\"transactions\">Impala Transactions</a> for more\n          information.</p></div><div class=\"hue-doc-section\" id=\"impala-8656\"><div class=\"hue-doc-title\">Server-side Spooling of Query Results</div><p>You can use the <span class=\"hue-doc-codeph\">SPOOL_QUERY_RESULTS</span> query option to\n          control how query results are returned to the client.</p><p>By default, when a client fetches a set of query results, the next\n          set of results are fetched in batches until all the result rows are\n          produced. If a client issues a query without fetching all the results,\n          the query fragments continue to hold on to the resources until the\n          query is canceled and unregistered, potentially tying up resources and\n          causing other queries to wait in admission control.</p><p>When the query result spooling feature is enabled, the result sets of\n          queries are eagerly fetched and buffered until they are read by the\n          client, and resources are freed up for other queries.</p><p>See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_query_results_spooling.xml\" data-doc-anchor-id=\"data_sink\">Spooling Impala Query Results</a> for\n          the new feature and the query options.</p></div><div class=\"hue-doc-section\" id=\"impala-8584\"><div class=\"hue-doc-title\">Cookie-based Authentication</div><p>Starting in this version, Impala supports cookies for authentication\n          when clients connect via HiveServer2 over HTTP. </p><p>You can use the <span class=\"hue-doc-codeph\">--max_cookie_lifetime_s startup</span> flag\n          to:</p><ul><li>Disable the use of cookies</li><li>Control how long generated cookies are valid for</li></ul><p>See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_client.xml\" data-doc-anchor-id=\"intro_client\">Impala Client Access</a> for more\n          information.</p></div><div class=\"hue-doc-section\" id=\"section_hw4_nmw_pjb\"><div class=\"hue-doc-title\">Object Ownership Support</div><p>Object ownership for tables, views, and databases is enabled by\n          default in Impala. When you create a database, a table, or a view, as\n          the owner of that object, you implicitly have the privileges on the\n          object. The privileges that owners have are specified in Ranger on the\n          special user, <span class=\"hue-doc-codeph\">{OWNER}</span>. </p><p>The <span class=\"hue-doc-codeph\">{OWNER}</span> user must be defined in Ranger for the\n          object ownership privileges work in Impala.</p><p>See <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_authorization.html#authorization\" target=\"_blank\">Impala Authorization</a> for\n          details.</p></div><div class=\"hue-doc-section\" id=\"impala-8752\"><div class=\"hue-doc-title\">New Built-in Functions for Fuzzy Matching of Strings</div><p>Use the new Jaro or Jaro-Winkler functions to perform fuzzy matches\n          on relatively short strings, e.g. to scrub user inputs of names\n          against the records in the database.</p><ul><li><span class=\"hue-doc-codeph\">JARO_DISTANCE</span>, <span class=\"hue-doc-codeph\">JARO_DST</span></li><li><span class=\"hue-doc-codeph\">JARO_SIMILARITY</span>, <span class=\"hue-doc-codeph\">JARO_SIM</span></li><li><span class=\"hue-doc-codeph\">JARO_WINKLER_DISTANCE</span>,\n            <span class=\"hue-doc-codeph\">JW_DST</span></li><li><span class=\"hue-doc-codeph\">JARO_WINKLER_SIMILARITY</span>,\n            <span class=\"hue-doc-codeph\">JW_SIM</span></li></ul><p>See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions\">Impala String Functions</a> for\n          details.</p></div><div class=\"hue-doc-section\" id=\"impala-8376\"><div class=\"hue-doc-title\">Capacity Quota for Scratch Disks</div><p>When configuring scratch space for intermediate files used in large\n          sorts, joins, aggregations, or analytic function operations, use the\n            <span class=\"hue-doc-codeph\">‑‑scratch_dirs</span> startup flag to optionally specify a\n          capacity quota per scratch directory, e.g.,\n            <span class=\"hue-doc-codeph\">‑‑scratch_dirs=/dir1:5MB,/dir2</span>.</p><p>See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_file_formats.xml\" data-doc-anchor-id=\"file_formats\">How Impala Works with Hadoop File Formats</a> for\n          details.</p></div><div class=\"hue-doc-section\" id=\"impala-8913\"><div class=\"hue-doc-title\">Query Option for Disabling HBase Row Estimation</div><p>During query plan generation, Impala samples underlying HBase tables\n          to estimate row count and row size, but the sampling process can\n          negatively impact the planning time. To alleviate the issue, when the\n          HBase table stats do not change much in a short time, disable the\n          sampling with the <span class=\"hue-doc-codeph\">DISABLE_HBASE_NUM_ROWS_ESTIMATE</span>\n          query option so that the Impala planner falls back to using Hive\n          Metastore (HMS) table stats instead. </p><p>See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_disable_hbase_num_rows_estimate.xml\" data-doc-anchor-id=\"disable_hbase_num_rows_estimate\">DISABLE_HBASE_NUM_ROWS_ESTIMATE Query Option</a>.</p></div><div class=\"hue-doc-section\" id=\"impala-8942\"><div class=\"hue-doc-title\">Query Option for Controlling Size of Parquet Splits on Non-block\n          Stores</div><p>To optimize query performance, Impala planner uses the value of the\n            <span class=\"hue-doc-codeph\">fs.s3a.block.size</span> startup flag when calculating the\n          split size on non-block based stores, e.g. S3, ADLS, etc. Starting in\n          this release, Impala planner uses the\n            <span class=\"hue-doc-codeph\">PARQUET_OBJECT_STORE_SPLIT_SIZE</span> query option to get\n          the Parquet file format specific split size. </p><p>For Parquet files, the <span class=\"hue-doc-codeph\">fs.s3a.block.size</span> startup\n          flag is no longer used.</p><p>The default value of the\n            <span class=\"hue-doc-codeph\">PARQUET_OBJECT_STORE_SPLIT_SIZE</span> query option is 256\n          MB.</p><p>See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_s3.xml\" data-doc-anchor-id=\"s3\">Using Impala with Amazon S3 Object Store</a> for tuning Impala query\n          performance for S3.</p></div><div class=\"hue-doc-section\" id=\"impala-5149\"><div class=\"hue-doc-title\">Query Profile Exported to JSON</div><p>On the Query Details page of Impala Daemon Web UI, you have a new\n          option, in addition to the existing Thrift and Text formats, to export\n          the query profile output in the JSON format.</p><p>See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_webui.xml\" data-doc-anchor-id=\"webui\">Impala Web User Interface for Debugging</a> for generating JSON query\n          profile outputs in Web UI.</p></div><div class=\"hue-doc-section\" id=\"section_rnb_ny4_yjb\"><div class=\"hue-doc-title\">DATE Data Type Supported in Avro Tables</div><p>You can now use the <span class=\"hue-doc-codeph\">DATE</span> data type to query date\n          values from Avro tables.</p><p>See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_avro.xml\" data-doc-anchor-id=\"avro\">Using the Avro File Format with Impala Tables</a> for details.</p></div><div class=\"hue-doc-section\"><div class=\"hue-doc-title\">Primary Key and Foreign Key Constraints</div><p>This release adds support for primary and foreign key constraints,\n          but in this release the constraints are advisory and intended for\n          estimating cardinality during query planning in a future release.\n          There is no attempt to enforce constraints. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_create_table.xml\">CREATE TABLE Statement</a> for details. </p></div><div class=\"hue-doc-section\"><div class=\"hue-doc-title\">Enhanced External Kudu Table</div><p>By default HMS implicitly translates internal Kudu tables to external\n          Kudu tables with the 'external.table.purge' property set to true. These\n          tables behave similar to internal tables. You can explicitly create such\n          external Kudu tables. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_create_table.xml\">CREATE TABLE Statement</a>\n          for details.</p></div><div class=\"hue-doc-section\"><div class=\"hue-doc-title\">Ranger Column Masking</div><p>This release supports Ranger column masking, which hides sensitive columnar\n          data in Impala query output. For example, you can define a policy that reveals\n          only the first or last four characters of column data. Column masking is enabled\n          by default. See <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_authorization.html#sec_ranger_col_masking\" target=\"_blank\">Ranger Column Masking</a>\n          for details.</p></div><div class=\"hue-doc-section\"><div class=\"hue-doc-title\">BROADCAST_BYTES_LIMIT query option</div><p>You can set the default limit for the size of the broadcast input. Such a limit\n          can prevent possible performance problems.</p></div><div class=\"hue-doc-section\"><div class=\"hue-doc-title\">Experimental Support for Apache Hudi</div><p>In this release, you can use Read Optimized Queries on Hudi tables. See\n          <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_hudi.xml\">Using the Hudi File Format</a> for details. </p></div><div class=\"hue-doc-section\"><div class=\"hue-doc-title\">ORC Reads Enabled by Default</div><p>Impala stability and performance have been improved. Consequently, ORC reads are now\n          enabled in Impala by default. To disable, set <span class=\"hue-doc-codeph\">--enable_orc_scanner</span> to\n          <span class=\"hue-doc-codeph\">false</span> when starting the cluster. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_orc.xml\">Using the ORC File Format with Impala Tables</a> for\n          details.</p></div><div class=\"hue-doc-section\"><div class=\"hue-doc-title\">Support for ZSTD and DEFLATE</div><p>This release supports ZSTD and DEFLATE compression codecs for text files. See \n          <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_txtfile.xml\" data-doc-anchor-id=\"gzip\">Using bzip2, deflate, gzip, Snappy, or zstd Text Files</a> for details.</p></div></div></div><div id=\"new_features_33\"><div class=\"hue-doc-title\">New Features in Impala 3.3</div><div><p> The following sections describe the noteworthy improvements made in\n          Impala 3.3. </p><p> For the full list of issues closed in this release, see the <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/changelog-3.3.html\" target=\"_blank\">changelog for Impala 3.3</a>. </p><div class=\"hue-doc-section\" id=\"section_ezf_tnq_s3b\"><div class=\"hue-doc-title\">Increased Compatibility with Apache Projects</div><p>Impala is integrate with the following components:<ul><li><p>Apache Ranger: Use Apache Ranger to manage\n                authorization in Impala. See <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/build/html/topics/impala_authorization.html\" target=\"_blank\"><u>Impala\n                  Authorization</u></a> for details.</p></li><li><p>Apache Atlas: Use Apache Atlas to manage data\n                governance in Impala.</p></li><li><p>Hive 3</p></li></ul></p></div><div class=\"hue-doc-section\" id=\"section_ys5_k4n_t3b\"><div class=\"hue-doc-title\">Parquet Page Index </div><p>To improve performance when using Parquet files, Impala can now write\n          page indexes in Parquet files and use those indexes to skip pages for\n          the faster scan.</p><p>See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_parquet.xml\" data-doc-anchor-id=\"parquet_performance\">Query Performance for Impala Parquet Tables</a> for\n          details.</p></div><div class=\"hue-doc-section\" id=\"section_zs5_k4n_t3b\"><div class=\"hue-doc-title\">The Remote File Handle Cache Supports S3</div><p>Impala can now cache remote HDFS file handles when the tables that\n          store their data in Amazon S3 cloud storage.</p><p>See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_scalability.xml\" data-doc-anchor-id=\"scalability_file_handle_cache\">Scalability Considerations for File Handle Caching</a> for the information on remote file handle cache.</p></div><div class=\"hue-doc-section\" id=\"section_jls_hxj_s3b\"><div class=\"hue-doc-title\">Support for Kudu Integrated with Hive Metastore</div><p>In Impala 3.3 and Kudu 1.10, Kudu is integrated with Hive Metastore\n          (HMS), and from Impala, you can create, update, delete, and query the\n          tables in the Kudu services integrated with HMS.</p><p>See <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/build/html/topics/impala_kudu.html\" target=\"_blank\">Using Kudu with Impala</a> for\n          information on using Kudu tables in Impala.</p></div><div class=\"hue-doc-section\" id=\"section_dp4_mxj_s3b\"><div class=\"hue-doc-title\">Zstd Compression for Parquet files</div><p>Zstandard (Zstd) is a real-time compression algorithm offering a\n          tradeoff between speed and ratio of compression. Compression levels\n          from 1 up to 22 are supported. The lower the level, the faster the\n          speed at the cost of compression ratio.</p></div><div class=\"hue-doc-section\" id=\"section_parquet_lz4_notes\"><div class=\"hue-doc-title\">Lz4 Compression for Parquet files</div><p>Lz4 is a lossless compression algorithm providing extremely fast\n            and scalable compression and decompression.</p></div><div class=\"hue-doc-section\" id=\"section_drv_nxj_s3b\"><div class=\"hue-doc-title\">Data Cache for Remote Reads</div><p>To improve performance on multi-cluster HDFS environments as well as\n          on object store environments, Impala now caches data for non-local\n          reads (e.g. S3, ABFS, ADLS) on local storage.</p><p>The data cache is enabled with the <span class=\"hue-doc-codeph\">--data_cache\n            startup</span> flag.</p><p>See <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/build/html/topics/impala_data_cache.html\" target=\"_blank\">Impala Remote Data Cache</a> for\n          the information and steps to enable remote data cache.</p></div><div class=\"hue-doc-section\" id=\"section_xp4_b1f_t3b\"><div class=\"hue-doc-title\">Metadata Performance Improvements </div><p>The following features to improve metadata performance are enabled by\n          default in this release:</p><ul><li><p>Incremental stats are now compressed in memory in\n                <span class=\"hue-doc-codeph\">catalogd</span>, reducing memory footprint in\n                <span class=\"hue-doc-codeph\">catalogd</span>.</p></li><li><p><span class=\"hue-doc-codeph\">impalad</span>coordinators fetch incremental stats from\n                <span class=\"hue-doc-codeph\">catalogd</span> on-demand, reducing the memory\n              footprint and the network requirements for broadcasting\n              metadata.</p></li><li><p>Time-based and memory-based automatic invalidation of metadata to\n              keep the size of metadata bounded and to reduce the chances of\n                <span class=\"hue-doc-codeph\">catalogd</span>cache running out of memory.</p></li><li><p>Automatic invalidation of metadata</p><p>With automatic metadata management enabled, you no longer have to\n              issue <span class=\"hue-doc-codeph\">INVALIDATE</span> / <span class=\"hue-doc-codeph\">REFRESH</span> in a\n              number of conditions.</p><p>In Impala 3.3, the following additional event in Hive Metastore\n              can trigger automatic INVALIDATE / REFRESH of Metadata:</p><ul><li><p>INSERT into tables and partitions from Impala or from Spark\n                  on the same or multiple cluster configuration</p></li></ul></li></ul><p>See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_metadata.xml\" data-doc-anchor-id=\"impala_metadata\">Metadata Management</a> for the\n          information on the above features.</p></div><div class=\"hue-doc-section\" id=\"section_ztf_c4q_s3b\"><div class=\"hue-doc-title\">Scalable Pool Configuration in Admission Controller</div><p>To offer more dynamic and flexible resource management, Impala\n          supports the new configuration parameters that scale with the number\n          of hosts in the resource pool. You can use the parameters to control\n          the number of running queries, queued queries, and maximum amount of\n          memory allocated for Impala resource pools. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_admission.xml\" data-doc-anchor-id=\"admission_control\">Admission Control and Query Queuing</a> for the information\n          about the new parameters and using them for admission control.</p></div><div class=\"hue-doc-section\" id=\"section_b55_gxj_s3b\"><div class=\"hue-doc-title\">Query Profile</div><p>The following information was added to the Query Profile output for\n          better monitoring and troubleshooting of query performance.</p><ul><li><p>Network I/O throughput</p></li><li><p>System disk I/O throughput</p></li></ul><p>See <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/build/html/topics/impala_explain_plan.html\" target=\"_blank\">Impala Query Profile</a> for\n          generating and reading query profile.</p></div><div class=\"hue-doc-section\" id=\"section_lbh_kzj_s3b\"><div class=\"hue-doc-title\">DATE Data Type and Functions</div><p>You can use the new the DATE type to describe a particular\n          year/month/day, in the form YYYY-­MM-­DD.</p><p>This initial DATE type support the TEXT, Parquet, and HBASE file\n          formats.</p><p>The support of DATE data type includes the following features:</p><ul><li><span class=\"hue-doc-codeph\">DATE</span> type column as a partitioning key\n            column</li><li><span class=\"hue-doc-codeph\">DATE</span> literal</li><li>Implicit casting between <span class=\"hue-doc-codeph\">DATE</span> and other types:\n              <span class=\"hue-doc-codeph\">STRING</span> and <span class=\"hue-doc-codeph\">TIMESTAMP</span></li><li>Most of the built-in functions for <span class=\"hue-doc-codeph\">TIMESTAMP</span> now\n            allow the <span class=\"hue-doc-codeph\">DATE</span> type arguments, as well.</li></ul><p>See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_date.xml\" data-doc-anchor-id=\"date\">DATE Data Type</a> and <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions\">Impala Date and Time Functions</a> for using\n          the DATE type.</p></div><div class=\"hue-doc-section\" id=\"section_wpm_zzj_s3b\"><div class=\"hue-doc-title\">Support Hive Insert-Only Transactional Tables</div><p>Impala added the support to create, drop, query, and insert into the\n          insert-only type of transactional tables. </p></div><div class=\"hue-doc-section\"><p>See <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/build/html/topics/impala_transactions.html\" target=\"_blank\">Impala Transactions</a> for\n          details.</p></div><div class=\"hue-doc-section\" id=\"section_ab2_41k_s3b\"><div class=\"hue-doc-title\">HiveServer2 HTTP Connection for Clients</div><p>Now client applications can connect to Impala over HTTP via\n          HiveServer2 with the option to use the Kerberos SPNEGO and LDAP for\n          authentication. See <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/build/html/topics/impala_client.html\" target=\"_blank\">Impala Clients</a> for\n          details.</p></div><div class=\"hue-doc-section\" id=\"section_xxt_44q_s3b\"><div class=\"hue-doc-title\">Default File Format Changed to Parquet</div><p>When you create a table, the default format for that table data is\n          now Parquet.</p><p>For backward compatibility, you can use the\n            <span class=\"hue-doc-codeph\">DEFAULT_FILE_FORMAT</span> query option to set the default\n          file format to the previous default, text, or other formats.</p></div><div class=\"hue-doc-section\" id=\"section_m1h_mnf_t3b\"><div class=\"hue-doc-title\">Built-in Function to Process JSON Objects</div><p>The <span class=\"hue-doc-codeph\">GET_JSON_OBJECT()</span> function extracts JSON object\n          from a string based on the path specified and returns the extracted\n          JSON object.</p><p>See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_misc_functions.xml\" data-doc-anchor-id=\"misc_functions\">Impala\n            Miscellaneous Functions</a>. for details.</p></div><div class=\"hue-doc-section\" id=\"section_acs_wck_s3b\"><div class=\"hue-doc-title\">Ubuntu 18.04</div><p>This version of Impala is certified to run on Ubuntu 18.04.</p></div></div></div><div id=\"new_features_32\"><div class=\"hue-doc-title\">New Features in Impala 3.2</div><div><p> The following sections describe the noteworthy improvements made in\n          Impala 3.2. </p><p> For the full list of issues closed in this release, see the <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/changelog-3.2.html\" target=\"_blank\">changelog for Impala 3.2</a>. </p></div><div id=\"rn_32_multi_cluster\"><div class=\"hue-doc-title\">Multi-cluster Support</div><div><ul><li>Remote File Handle Cache<p>Impala can now cache remote\n              HDFS file handles when the\n                <span class=\"hue-doc-codeph\">cache_remote_file_handles</span> impalad flag is set\n              to <span class=\"hue-doc-codeph\">true</span>. This feature does not apply to non-HDFS\n              tables, such as Kudu or HBase tables, and does not apply to the\n              tables that store their data on cloud services, such as S3 or\n              ADLS. See <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/build/html/topics/impala_scalability.html\" target=\"_blank\">Scalabilty Considerations</a>\n              for file handle caching in Impala.</p></li></ul></div></div><div id=\"rn_32_ac\"><div class=\"hue-doc-title\">Enhancements in Resource Management and Admission Control</div><div><ul><li>Admission Debug page is available in <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/build/html/topics/impala_webui.html\" target=\"_blank\">Impala Daemon (impalad) web\n              UI</a> at <span class=\"hue-doc-codeph\">\\admission</span> and provides the\n            following information about Impala resource pools:<ul><li>Pool configuration</li><li>Relevant pool stats</li><li>Queued queries in order of being queued (local to the\n                coordinator)</li><li>Running queries (local to this coordinator)</li><li>Histogram of the distribution of peak memory usage by admitted\n                queries</li></ul></li></ul><ul><li>A new query option, <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/build/html/topics/impala_num_rows_produced_limit.html\" target=\"_blank\">NUM_ROWS_PRODUCED_LIMIT</a>, was\n            added to limit the number of rows returned from queries.<p>Impala\n              will cancel a query if the query produces more rows than the limit\n              specified by this query option. The limit applies only when the\n              results are returned to a client, e.g. for a\n                <span class=\"hue-doc-codeph\">SELECT</span> query, but not an\n                <span class=\"hue-doc-codeph\">INSERT</span> query. This query option is a guardrail\n              against users accidentally submitting queries that return a large\n              number of rows.</p></li></ul></div></div><div id=\"rn_32_metadata\"><div class=\"hue-doc-title\">Metadata Performance Improvements</div><div><ul><li><a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/build/html/topics/impala_metadata.html\" target=\"_blank\">Automatic Metadata Sync using Hive\n              Metastore Notification Events</a><p>When enabled, the\n                <span class=\"hue-doc-codeph\">catalogd</span> polls Hive Metastore (HMS)\n              notifications events at a configurable interval and syncs with\n              HMS. You can use the new web UI pages of the\n                <span class=\"hue-doc-codeph\">catalogd</span> to check the state of the automatic\n              invalidate event processor. </p><p><b>Note</b>: This is a preview\n              feature in Impala 3.2.</p></li></ul></div></div><div id=\"rn_32_usability\"><div class=\"hue-doc-title\">Compatibility and Usability Enhancements</div><div><ul><li>Impala can now read the <span class=\"hue-doc-codeph\">TIMESTAMP_MILLIS</span> and\n              <span class=\"hue-doc-codeph\">TIMESTAMP_MICROS</span> Parquet types. See <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/build/html/topics/impala_parquet.html\" target=\"_blank\">Using Parquet File Format for\n              Impala Tables</a> for the Parquet support in Impala.</li><li>Impala can now read the complex types in ORC such as ARRAY,\n            STRUCT, and MAP. See <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/build/html/topics/impala_orc.html\" target=\"_blank\">Using ORC File Format for Impala\n              Tables</a> for the ORC support in Impala.</li><li>The <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/build/html/topics/impala_string_functions.html\" target=\"_blank\">LEVENSHTEIN</a> string function\n            is supported.<p>The function returns the Levenshtein distance\n              between two input strings, the minimum number of single-character\n              edits required to transform one string to other.</p></li><li>The <span class=\"hue-doc-codeph\">IF NOT EXISTS</span> clause is supported in the\n              <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/build/html/topics/impala_alter_table.html\" target=\"_blank\"><span class=\"hue-doc-codeph\">ALTER TABLE</span></a>\n            statement.</li><li>The new <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/build/html/topics/impala_default_file_format.html\" target=\"_blank\"><span class=\"hue-doc-codeph\">DEFAULT_FILE_FORMAT</span></a> query option allows\n            you to set the default table file format. This removes the need for\n            the <span class=\"hue-doc-codeph\">STORED AS &lt;format&gt;</span> clause. Set this option\n            if you prefer a value that is not <span class=\"hue-doc-codeph\">TEXT</span>. The\n            supported formats are: <ul><li><span class=\"hue-doc-codeph\">TEXT</span></li><li><span class=\"hue-doc-codeph\">RC_FILE</span></li><li><span class=\"hue-doc-codeph\">SEQUENCE_FILE</span></li><li><span class=\"hue-doc-codeph\">AVRO</span></li><li><span class=\"hue-doc-codeph\">PARQUET</span></li><li><span class=\"hue-doc-codeph\">KUDU</span></li><li><span class=\"hue-doc-codeph\">ORC</span></li></ul></li><li>The extended or verbose <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/build/html/topics/impala_explain.html\" target=\"_blank\"><span class=\"hue-doc-codeph\">EXPLAIN</span></a>\n            output includes the following new information for queries:<ul><li>The text of the analyzed query that may have been rewritten to\n                include various optimizations and implicit casts. </li><li>The implicit casts and literals shown with the actual\n                types.</li></ul></li><li>CPU resource utilization (user, system, iowait) metrics were added\n            to the <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/build/html/topics/impala_explain_plan.html\" target=\"_blank\">Impala profile</a> output.</li></ul></div></div><div id=\"rn_32_security\"><div class=\"hue-doc-title\"><b id=\"docs-internal-guid-e1c558d3-7fff-4d4e-0ec1-e40f60c9b64a\"><b>Security Enhancement</b></b></div><div><ul><li>The <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/build/html/topics/impala_refresh_authorization.html\" target=\"_blank\">REFRESH AUTHORIZATION</a>\n            statement was implemented for refreshing authorization data.</li></ul></div></div></div><div id=\"new_features_31\"><div class=\"hue-doc-title\">New Features in Impala 3.1</div><div><p> For the full list of issues closed in this release, including the\n        issues marked as <q>new features</q> or <q>improvements</q>, see the\n          <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/changelog-3.1.html\" target=\"_blank\">changelog for Impala 3.1</a>. </p></div></div><div id=\"new_features_300\"><div class=\"hue-doc-title\">New Features in Impala 3.0</div><div><p>\n        For the full list of issues closed in this release, including the\n        issues marked as <q>new features</q> or <q>improvements</q>, see the\n          <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/changelog-3.0.html\" target=\"_blank\">changelog for Impala 3.0</a>.\n      </p></div></div><div id=\"new_features_2120\"><div class=\"hue-doc-title\">New Features in Impala 2.12</div><div><p>\n        For the full list of issues closed in this release, including the issues\n        marked as <q>new features</q> or <q>improvements</q>, see the\n        <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/changelog-2.12.html\" target=\"_blank\">changelog for Impala 2.12</a>.\n      </p></div></div><div id=\"new_features_2110\"><div class=\"hue-doc-title\">New Features in Impala 2.11</div><div><p>\n        For the full list of issues closed in this release, including the issues\n        marked as <q>new features</q> or <q>improvements</q>, see the\n        <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/changelog-2.11.html\" target=\"_blank\">changelog for Impala 2.11</a>.\n      </p></div></div><div id=\"new_features_2100\"><div class=\"hue-doc-title\">New Features in Impala 2.10</div><div><p>\n        For the full list of issues closed in this release, including the issues\n        marked as <q>new features</q> or <q>improvements</q>, see the\n        <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/changelog-2.10.html\" target=\"_blank\">changelog for Impala 2.10</a>.\n      </p></div></div><div id=\"new_features_290\"><div class=\"hue-doc-title\">New Features in Impala 2.9</div><div><p>\n        For the full list of issues closed in this release, including the issues\n        marked as <q>new features</q> or <q>improvements</q>, see the\n        <a class=\"hue-doc-external-link\" href=\"https://impala.apache.org/docs/changelog-2.9.html\" target=\"_blank\">changelog for Impala 2.9</a>.\n      </p><p>\n        The following are some of the most significant new features in this release:\n      </p><ul id=\"feature_list\"><li><p>\n            A new function, <span class=\"hue-doc-codeph\">replace()</span>, which is faster than\n            <span class=\"hue-doc-codeph\">regexp_replace()</span> for simple string substitutions.\n            See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions\">Impala String Functions</a> for details.\n          </p></li><li><p>\n            Startup flags for the <span class=\"hue-doc-cmdname\">impalad</span> daemon, <span class=\"hue-doc-codeph\">is_executor</span>\n            and <span class=\"hue-doc-codeph\">is_coordinator</span>, let you divide the work on a large, busy cluster\n            between a small number of hosts acting as query coordinators, and a larger number of\n            hosts acting as query executors. By default, each host can act in both roles,\n            potentially introducing bottlenecks during heavily concurrent workloads.\n            See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_dedicated_coordinator.xml\" data-doc-anchor-id=\"scalability_coordinator\">How to Configure Impala with Dedicated Coordinators</a> for details.\n          </p></li></ul></div></div><div id=\"new_features_280\"><div class=\"hue-doc-title\">New Features in Impala 2.8</div><div><ul id=\"feature_list\"><li><p>\n            Performance and scalability improvements:\n          </p><ul><li><p>\n                The <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement can\n                take advantage of multithreading.\n              </p></li><li><p>\n                Improved scalability for highly concurrent loads by reducing the possibility of TCP/IP timeouts.\n                A configuration setting, <span class=\"hue-doc-codeph\">accepted_cnxn_queue_depth</span>, can be adjusted upwards to\n                avoid this type of timeout on large clusters.\n              </p></li><li><p>\n                Several performance improvements were made to the mechanism for generating native code:\n              </p><ul><li><p>\n                    Some queries involving analytic functions can take better advantage of native code generation.\n                  </p></li><li><p>\n                    Modules produced during intermediate code generation are organized\n                    to be easier to cache and reuse during the lifetime of a long-running or complicated query.\n                  </p></li><li><p>\n                    The <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement is more efficient\n                    (less time for the codegen phase) for tables with a large number\n                    of columns, especially for tables containing <span class=\"hue-doc-codeph\">TIMESTAMP</span>\n                    columns.\n                  </p></li><li><p>\n                    The logic for determining whether or not to use a runtime filter is more reliable, and the\n                    evaluation process itself is faster because of native code generation.\n                  </p></li></ul></li><li><p>\n                The <span class=\"hue-doc-codeph\">MT_DOP</span> query option enables\n                multithreading for a number of Impala operations.\n                <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statements for Parquet tables\n                use a default of <span class=\"hue-doc-codeph\">MT_DOP=4</span> to improve the\n                intra-node parallelism and CPU efficiency of this data-intensive\n                operation.\n              </p></li><li><p>\n                The <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement is more efficient\n                (less time for the codegen phase) for tables with a large number\n                of columns.\n              </p></li><li><p>\n                A new hint, <span class=\"hue-doc-codeph\">CLUSTERED</span>,\n                allows Impala <span class=\"hue-doc-codeph\">INSERT</span> operations on a Parquet table\n                that use dynamic partitioning to process a high number of\n                partitions in a single statement. The data is ordered based on the\n                partition key columns, and each partition is only written\n                by a single host, reducing the amount of memory needed to buffer\n                Parquet data while the data blocks are being constructed.\n              </p></li><li><p>\n                The new configuration setting <span class=\"hue-doc-codeph\">inc_stats_size_limit_bytes</span>\n                lets you reduce the load on the catalog server when running the\n                <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span> statement for very large tables.\n              </p></li><li><p>\n                Impala folds many constant expressions within query statements,\n                rather than evaluating them for each row. This optimization\n                is especially useful when using functions to manipulate and\n                format <span class=\"hue-doc-codeph\">TIMESTAMP</span> values, such as the result\n                of an expression such as <span class=\"hue-doc-codeph\">to_date(now() - interval 1 day)</span>.\n              </p></li><li><p>\n                Parsing of complicated expressions is faster. This speedup is\n                especially useful for queries containing large <span class=\"hue-doc-codeph\">CASE</span>\n                expressions.\n              </p></li><li><p>\n                Evaluation is faster for <span class=\"hue-doc-codeph\">IN</span> operators with many constant\n                arguments. The same performance improvement applies to other functions\n                with many constant arguments.\n              </p></li><li><p>\n                Impala optimizes identical comparison operators within multiple <span class=\"hue-doc-codeph\">OR</span>\n                blocks.\n              </p></li><li><p>\n                The reporting for wall-clock times and total CPU time in profile output is more accurate.\n              </p></li><li><p>\n                A new query option, <span class=\"hue-doc-codeph\">SCRATCH_LIMIT</span>, lets you restrict the amount of\n                space used when a query exceeds the memory limit and activates the <q>spill to disk</q> mechanism.\n                This option helps to avoid runaway queries or make queries <q>fail fast</q> if they require more\n                memory than anticipated. You can prevent runaway queries from using excessive amounts of spill space,\n                without restarting the cluster to turn the spilling feature off entirely.\n                See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_scratch_limit.xml\" data-doc-anchor-id=\"scratch_limit\">SCRATCH_LIMIT Query Option</a> for details.\n              </p></li></ul></li><li><p>\n            Integration with Apache Kudu:\n          </p><ul><li><p>\n                The experimental Impala support for the Kudu storage layer has been folded\n                into the main Impala development branch. Impala can now directly access Kudu tables,\n                opening up new capabilities such as enhanced DML operations and continuous ingestion.\n              </p></li><li><p>\n                The <span class=\"hue-doc-codeph\">DELETE</span> statement is a flexible way to remove data from a Kudu table. Previously,\n                removing data from an Impala table involved removing or rewriting the underlying data files, dropping entire partitions,\n                or rewriting the entire table. This Impala statement only works for Kudu tables.\n              </p></li><li><p>\n                The <span class=\"hue-doc-codeph\">UPDATE</span> statement is a flexible way to modify data within a Kudu table. Previously,\n                updating data in an Impala table involved replacing the underlying data files, dropping entire partitions,\n                or rewriting the entire table. This Impala statement only works for Kudu tables.\n              </p></li><li><p>\n                The <span class=\"hue-doc-codeph\">UPSERT</span> statement is a flexible way to ingest, modify, or both data within a Kudu table. Previously,\n                ingesting data that might contain duplicates involved an inefficient multi-stage operation, and there was no\n                built-in protection against duplicate data. The <span class=\"hue-doc-codeph\">UPSERT</span> statement, in combination with\n                the primary key designation for Kudu tables, lets you add or replace rows in a single operation, and\n                automatically avoids creating any duplicate data.\n              </p></li><li><p>\n                The <span class=\"hue-doc-codeph\">CREATE TABLE</span> statement gains some new clauses that are specific to Kudu tables:\n                <span class=\"hue-doc-codeph\">PARTITION BY</span>, <span class=\"hue-doc-codeph\">PARTITIONS</span>, <span class=\"hue-doc-codeph\">STORED AS KUDU</span>, and column\n                attributes <span class=\"hue-doc-codeph\">PRIMARY KEY</span>, <span class=\"hue-doc-codeph\">NULL</span> and <span class=\"hue-doc-codeph\">NOT NULL</span>,\n                <span class=\"hue-doc-codeph\">ENCODING</span>, <span class=\"hue-doc-codeph\">COMPRESSION</span>, <span class=\"hue-doc-codeph\">DEFAULT</span>, and <span class=\"hue-doc-codeph\">BLOCK_SIZE</span>.\n                These clauses replace the explicit <span class=\"hue-doc-codeph\">TBLPROPERTIES</span> settings that were required in the\n                early experimental phases of integration between Impala and Kudu.\n              </p></li><li><p>\n                The <span class=\"hue-doc-codeph\">ALTER TABLE</span> statement can change certain attributes of Kudu tables.\n                You can add, drop, or rename columns.\n                You can add or drop range partitions.\n                You can change the <span class=\"hue-doc-codeph\">TBLPROPERTIES</span> value to rename or point to a different underlying Kudu table,\n                independently from the Impala table name in the metastore database.\n                You cannot change the data type of an existing column in a Kudu table.\n              </p></li><li><p>\n                The <span class=\"hue-doc-codeph\">SHOW PARTITIONS</span> statement displays information about the distribution of data\n                between partitions in Kudu tables. A new variation, <span class=\"hue-doc-codeph\">SHOW RANGE PARTITIONS</span>,\n                displays information about the Kudu-specific partitions that apply across ranges of key values.\n              </p></li><li><p>\n                Not all Impala data types are supported in Kudu tables. In particular, currently the Impala\n                <span class=\"hue-doc-codeph\">TIMESTAMP</span> type is not allowed in a Kudu table. Impala does not recognize the\n                <span class=\"hue-doc-codeph\">UNIXTIME_MICROS</span> Kudu type when it is present in a Kudu table. (These two\n                representations of date/time data use different units and are not directly compatible.)\n                You cannot create columns of type <span class=\"hue-doc-codeph\">TIMESTAMP</span>, <span class=\"hue-doc-codeph\">DECIMAL</span>,\n                <span class=\"hue-doc-codeph\">VARCHAR</span>, or <span class=\"hue-doc-codeph\">CHAR</span> within a Kudu table. Within a query, you can\n                cast values in a result set to these types. Certain types, such as <span class=\"hue-doc-codeph\">BOOLEAN</span>,\n                cannot be used as primary key columns.\n              </p></li><li><p>\n                Currently, Kudu tables are not interchangeable between Impala and Hive the way other kinds of Impala tables are.\n                Although the metadata for Kudu tables is stored in the metastore database, currently Hive cannot access Kudu tables.\n              </p></li><li><p>\n                The <span class=\"hue-doc-codeph\">INSERT</span> statement works for Kudu tables. The organization\n                of the Kudu data makes it more efficient than with HDFS-backed tables to insert\n                data in small batches, such as with the <span class=\"hue-doc-codeph\">INSERT ... VALUES</span> syntax.\n              </p></li><li><p>\n                Some audit data is recorded for data governance purposes.\n                All <span class=\"hue-doc-codeph\">UPDATE</span>, <span class=\"hue-doc-codeph\">DELETE</span>, and <span class=\"hue-doc-codeph\">UPSERT</span> statements are characterized\n                as <span class=\"hue-doc-codeph\">INSERT</span> operations in the audit log. Currently, lineage metadata is not generated for\n                <span class=\"hue-doc-codeph\">UPDATE</span> and <span class=\"hue-doc-codeph\">DELETE</span> operations on Kudu tables.\n              </p></li><li><p>\n                Currently, Kudu tables have limited support for Sentry:\n                <ul><li><p>\n                      Access to Kudu tables must be granted to roles as usual.\n                    </p></li><li><p>\n                      Currently, access to a Kudu table through Sentry is <q>all or nothing</q>.\n                      You cannot enforce finer-grained permissions such as at the column level,\n                      or permissions on certain operations such as <span class=\"hue-doc-codeph\">INSERT</span>.\n                    </p></li><li><p>\n                      Only users with <span class=\"hue-doc-codeph\">ALL</span> privileges on <span class=\"hue-doc-codeph\">SERVER</span> can create external Kudu tables.\n                    </p></li></ul>\n                Because non-SQL APIs can access Kudu data without going through Sentry\n                authorization, currently the Sentry support is considered preliminary.\n              </p></li><li><p>\n                Equality and <span class=\"hue-doc-codeph\">IN</span> predicates in Impala queries are pushed to\n                Kudu and evaluated efficiently by the Kudu storage layer.\n              </p></li></ul></li><li><p><b>Security:</b></p><ul><li><p>\n                Impala can take advantage of the S3 encrypted credential\n                store, to avoid exposing the secret key when accessing\n                data stored on S3.\n              </p></li></ul></li><li><p>\n            [<a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/IMPALA-1654\" target=\"_blank\">IMPALA-1654</a>]\n            Several kinds of DDL operations\n            can now work on a range of partitions. The partitions can be specified\n            using operators such as <span class=\"hue-doc-codeph\">&lt;</span>, <span class=\"hue-doc-codeph\">&gt;=</span>, and\n            <span class=\"hue-doc-codeph\">!=</span> rather than just an equality predicate applying to a single\n            partition.\n            This new feature extends the syntax of several clauses\n            of the <span class=\"hue-doc-codeph\">ALTER TABLE</span> statement\n            (<span class=\"hue-doc-codeph\">DROP PARTITION</span>, <span class=\"hue-doc-codeph\">SET [UN]CACHED</span>,\n            <span class=\"hue-doc-codeph\">SET FILEFORMAT | SERDEPROPERTIES | TBLPROPERTIES</span>),\n            the <span class=\"hue-doc-codeph\">SHOW FILES</span> statement, and the\n            <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span> statement.\n            It does not apply to statements that are defined to only apply to a single\n            partition, such as <span class=\"hue-doc-codeph\">LOAD DATA</span>, <span class=\"hue-doc-codeph\">ALTER TABLE ... ADD PARTITION</span>,\n            <span class=\"hue-doc-codeph\">SET LOCATION</span>, and <span class=\"hue-doc-codeph\">INSERT</span> with a static\n            partitioning clause.\n          </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">instr()</span> function has optional second and third arguments, representing\n            the character to position to begin searching for the substring, and the Nth occurrence\n            of the substring to find.\n          </p></li><li><p>\n            Improved error handling for malformed Avro data. In particular, incorrect\n            precision or scale for <span class=\"hue-doc-codeph\">DECIMAL</span> types is now handled.\n          </p></li><li><p>\n            Impala debug web UI:\n          </p><ul><li><p>\n                In addition to <q>inflight</q> and <q>finished</q> queries, the web UI\n                now also includes a section for <q>queued</q> queries.\n              </p></li><li><p>\n                The <div class=\"hue-doc-uicontrol\">/sessions</div> tab now clarifies how many of the displayed\n                sections are active, and lets you sort by <div class=\"hue-doc-uicontrol\">Expired</div> status\n                to distinguish active sessions from expired ones.\n              </p></li></ul></li><li><p>\n            Improved stability when DDL operations such as <span class=\"hue-doc-codeph\">CREATE DATABASE</span>\n            or <span class=\"hue-doc-codeph\">DROP DATABASE</span> are run in Hive at the same time as an Impala\n            <span class=\"hue-doc-codeph\">INVALIDATE METADATA</span> statement.\n          </p></li><li><p>\n            The <q>out of memory</q> error report was made more user-friendly, with additional\n            diagnostic information to help identify the spot where the memory limit was exceeded.\n          </p></li><li><p>\n            Improved disk space usage for Java-based UDFs. Temporary copies of the associated JAR\n            files are removed when no longer needed, so that they do not accumulate across restarts\n            of the <span class=\"hue-doc-cmdname\">catalogd</span> daemon and potentially cause an out-of-space condition.\n            These temporary files are also created in the directory specified by the <span class=\"hue-doc-codeph\">local_library_dir</span>\n            configuration setting, so that the storage for these temporary files can be independent\n            from any capacity limits on the <span class=\"hue-doc-filepath\">/tmp</span> filesystem.\n          </p></li></ul></div></div><div id=\"new_features_270\"><div class=\"hue-doc-title\">New Features in Impala 2.7</div><div><ul id=\"feature_list\"><li><p>\n            Performance improvements:\n          </p><ul><li><p>\n                [<a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/IMPALA-3206\" target=\"_blank\">IMPALA-3206</a>]\n                Speedup for queries against <span class=\"hue-doc-codeph\">DECIMAL</span> columns in Avro tables.\n                The code that parses <span class=\"hue-doc-codeph\">DECIMAL</span> values from Avro now uses\n                native code generation.\n              </p></li><li><p>\n                [<a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/IMPALA-3674\" target=\"_blank\">IMPALA-3674</a>]\n                Improved efficiency in LLVM code generation can reduce codegen time, especially\n                for short queries.\n              </p></li><li><p>\n                [<a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/IMPALA-2979\" target=\"_blank\">IMPALA-2979</a>]\n                Improvements to scheduling on worker nodes,\n                enabled by the <span class=\"hue-doc-codeph\">REPLICA_PREFERENCE</span> query option.\n                See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_replica_preference.xml\" data-doc-anchor-id=\"replica_preference\">REPLICA_PREFERENCE Query Option (Impala 2.7 or higher only)</a> for details.\n              </p></li></ul></li><li><p>\n            [<a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/IMPALA-1683\" target=\"_blank\">IMPALA-1683</a>]\n            The <span class=\"hue-doc-codeph\">REFRESH</span> statement can be applied to a single partition,\n            rather than the entire table. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_refresh.xml\" data-doc-anchor-id=\"refresh\">REFRESH Statement</a>\n            and <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_partitioning.xml\" data-doc-anchor-id=\"partition_refresh\">Refreshing a Single Partition</a> for details.\n          </p></li><li><p>\n            Improvements to the Impala web user interface:\n          </p><ul><li><p>\n                [<a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/IMPALA-2767\" target=\"_blank\">IMPALA-2767</a>]\n                You can now force a session to expire by clicking a link in the web UI,\n                on the <div class=\"hue-doc-uicontrol\">/sessions</div> tab.\n              </p></li><li><p>\n                [<a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/IMPALA-3715\" target=\"_blank\">IMPALA-3715</a>]\n                The <div class=\"hue-doc-uicontrol\">/memz</div> tab includes more information about\n                Impala memory usage.\n              </p></li><li><p>\n                [<a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/IMPALA-3716\" target=\"_blank\">IMPALA-3716</a>]\n                The <div class=\"hue-doc-uicontrol\">Details</div> page for a query now includes\n                a <div class=\"hue-doc-uicontrol\">Memory</div> tab.\n              </p></li></ul></li><li><p>\n            [<a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/IMPALA-3499\" target=\"_blank\">IMPALA-3499</a>]\n            Scalability improvements to the catalog server. Impala handles internal communication\n            more efficiently for tables with large numbers of columns and partitions, where the\n            size of the metadata exceeds 2 GiB.\n          </p></li><li><p>\n            [<a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/IMPALA-3677\" target=\"_blank\">IMPALA-3677</a>]\n            You can send a <span class=\"hue-doc-codeph\">SIGUSR1</span> signal to any Impala-related daemon to write a\n            Breakpad minidump. For advanced troubleshooting, you can now produce a minidump\n            without triggering a crash. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_breakpad.xml\" data-doc-anchor-id=\"breakpad\">Breakpad Minidumps for Impala (Impala 2.6 or higher only)</a> for\n            details about the Breakpad minidump feature.\n          </p></li><li><p>\n            [<a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/IMPALA-3687\" target=\"_blank\">IMPALA-3687</a>]\n            The schema reconciliation rules for Avro tables have changed slightly\n            for <span class=\"hue-doc-codeph\">CHAR</span> and <span class=\"hue-doc-codeph\">VARCHAR</span> columns. Now, if\n            the definition of such a column is changed in the Avro schema file,\n            the column retains its <span class=\"hue-doc-codeph\">CHAR</span> or <span class=\"hue-doc-codeph\">VARCHAR</span>\n            type as specified in the SQL definition, but the column name and comment\n            from the Avro schema file take precedence.\n            See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_avro.xml\" data-doc-anchor-id=\"avro_create_table\">Creating Avro Tables</a> for details about\n            column definitions in Avro tables.\n          </p></li><li><p>\n            [<a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/IMPALA-3575\" target=\"_blank\">IMPALA-3575</a>]\n            Some network\n            operations now have additional timeout and retry settings. The extra\n            configuration helps avoid failed queries for transient network\n            problems, to avoid hangs when a sender or receiver fails in the\n            middle of a network transmission, and to make cancellation requests\n            more reliable despite network issues. </p></li></ul></div></div><div id=\"new_features_260\"><div class=\"hue-doc-title\">New Features in Impala 2.6</div><div><ul><li><p>\n            Improvements to Impala support for the Amazon S3 filesystem:\n          </p><ul><li><p>\n                Impala can now write to S3 tables through the <span class=\"hue-doc-codeph\">INSERT</span>\n                or <span class=\"hue-doc-codeph\">LOAD DATA</span> statements.\n                See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_s3.xml\" data-doc-anchor-id=\"s3\">Using Impala with Amazon S3 Object Store</a> for general information about\n                using Impala with S3.\n              </p></li><li><p>\n                A new query option, <span class=\"hue-doc-codeph\">S3_SKIP_INSERT_STAGING</span>, lets you\n                trade off between fast <span class=\"hue-doc-codeph\">INSERT</span> performance and\n                slower <span class=\"hue-doc-codeph\">INSERT</span>s that are more consistent if a\n                problem occurs during the statement. The new behavior is enabled by default.\n                See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_s3_skip_insert_staging.xml\" data-doc-anchor-id=\"s3_skip_insert_staging\">S3_SKIP_INSERT_STAGING Query Option (Impala 2.6 or higher only)</a> for details\n                about this option.\n              </p></li></ul></li><li><p>\n            Performance improvements for the runtime filtering feature:\n          </p><ul><li><p>\n                The default for the <span class=\"hue-doc-codeph\">RUNTIME_FILTER_MODE</span>\n                query option is changed to <span class=\"hue-doc-codeph\">GLOBAL</span> (the highest setting).\n                See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_runtime_filter_mode.xml\" data-doc-anchor-id=\"runtime_filter_mode\">RUNTIME_FILTER_MODE Query Option (Impala 2.5 or higher only)</a> for\n                details about this option.\n              </p></li><li><p>\n                The <span class=\"hue-doc-codeph\">RUNTIME_BLOOM_FILTER_SIZE</span> setting is now only used\n                as a fallback if statistics are not available; otherwise, Impala\n                uses the statistics to estimate the appropriate size to use for each filter.\n                See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_runtime_bloom_filter_size.xml\" data-doc-anchor-id=\"runtime_bloom_filter_size\">RUNTIME_BLOOM_FILTER_SIZE Query Option (Impala 2.5 or higher only)</a> for\n                details about this option.\n              </p></li><li><p>\n                New query options <span class=\"hue-doc-codeph\">RUNTIME_FILTER_MIN_SIZE</span> and\n                <span class=\"hue-doc-codeph\">RUNTIME_FILTER_MAX_SIZE</span> let you fine-tune\n                the sizes of the Bloom filter structures used for runtime filtering.\n                If the filter size derived from Impala internal estimates or from\n                the <span class=\"hue-doc-codeph\">RUNTIME_FILTER_BLOOM_SIZE</span> falls outside the size\n                range specified by these options, any too-small filter size is adjusted\n                to the minimum, and any too-large filter size is adjusted to the maximum.\n                See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_runtime_filter_min_size.xml\" data-doc-anchor-id=\"runtime_filter_min_size\">RUNTIME_FILTER_MIN_SIZE Query Option (Impala 2.6 or higher only)</a>\n                and <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_runtime_filter_max_size.xml\" data-doc-anchor-id=\"runtime_filter_max_size\">RUNTIME_FILTER_MAX_SIZE Query Option (Impala 2.6 or higher only)</a>\n                for details about these options.\n              </p></li><li><p>\n                Runtime filter propagation now applies to all the\n                operands of <span class=\"hue-doc-codeph\">UNION</span> and <span class=\"hue-doc-codeph\">UNION ALL</span>\n                operators.\n              </p></li><li><p>\n                Runtime filters can now be produced during join queries even\n                when the join processing activates the spill-to-disk mechanism.\n              </p></li></ul>\n            See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_runtime_filtering.xml\" data-doc-anchor-id=\"runtime_filtering\">Runtime Filtering for Impala Queries (Impala 2.5 or higher only)</a> for\n            general information about the runtime filtering feature.\n        </li><li><p>\n            Admission control and dynamic resource pools are enabled by default.\n            See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_admission.xml\" data-doc-anchor-id=\"admission_control\">Admission Control and Query Queuing</a> for details\n            about admission control.\n          </p></li><li><p>\n            Impala can now manually set column statistics,\n            using the <span class=\"hue-doc-codeph\">ALTER TABLE</span> statement with a\n            <span class=\"hue-doc-codeph\">SET COLUMN STATS</span> clause.\n            See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_stats.xml\" data-doc-anchor-id=\"perf_column_stats_manual\">Table and Column Statistics</a> for details.\n          </p></li><li><p>\n            Impala can now write lightweight <q>minidump</q> files, rather\n            than large core files, to save diagnostic information when\n            any of the Impala-related daemons crash. This feature uses the\n            open source <span class=\"hue-doc-codeph\">breakpad</span> framework.\n            See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_breakpad.xml\" data-doc-anchor-id=\"breakpad\">Breakpad Minidumps for Impala (Impala 2.6 or higher only)</a> for details.\n          </p></li><li><p>\n            New query options improve interoperability with Parquet files:\n            <ul><li><p>\n                  The <span class=\"hue-doc-codeph\">PARQUET_FALLBACK_SCHEMA_RESOLUTION</span> query option\n                  lets Impala locate columns within Parquet files based on\n                  column name rather than ordinal position.\n                  This enhancement improves interoperability with applications\n                  that write Parquet files with a different order or subset of\n                  columns than are used in the Impala table.\n                  See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_parquet_fallback_schema_resolution.xml\" data-doc-anchor-id=\"parquet_fallback_schema_resolution\">PARQUET_FALLBACK_SCHEMA_RESOLUTION Query Option (Impala 2.6 or higher only)</a>\n                  for details.\n                </p></li><li><p>\n                  The <span class=\"hue-doc-codeph\">PARQUET_ANNOTATE_STRINGS_UTF8</span> query option\n                  makes Impala include the <span class=\"hue-doc-codeph\">UTF-8</span> annotation\n                  metadata for <span class=\"hue-doc-codeph\">STRING</span>, <span class=\"hue-doc-codeph\">CHAR</span>,\n                  and <span class=\"hue-doc-codeph\">VARCHAR</span> columns in Parquet files created\n                  by <span class=\"hue-doc-codeph\">INSERT</span> or <span class=\"hue-doc-codeph\">CREATE TABLE AS SELECT</span>\n                  statements.\n                  See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_parquet_annotate_strings_utf8.xml\" data-doc-anchor-id=\"parquet_annotate_strings_utf8\">PARQUET_ANNOTATE_STRINGS_UTF8 Query Option (Impala 2.6 or higher only)</a>\n                  for details.\n                </p></li></ul>\n            See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_parquet.xml\" data-doc-anchor-id=\"parquet\">Using the Parquet File Format with Impala Tables</a> for general information about working\n            with Parquet files.\n          </p></li><li><p>\n            Improvements to security and reduction in overhead for secure clusters:\n          </p><ul><li><p>\n                Overall performance improvements for secure clusters.\n                (TPC-H queries on a secure cluster were benchmarked\n                at roughly 3x as fast as the previous release.)\n              </p></li><li><p>\n                Impala now recognizes the <span class=\"hue-doc-codeph\">auth_to_local</span> setting,\n                specified through the HDFS configuration setting\n                <span class=\"hue-doc-codeph\">hadoop.security.auth_to_local</span>.\n                This feature is disabled by default; to enable it,\n                specify <span class=\"hue-doc-codeph\">--load_auth_to_local_rules=true</span>\n                in the <span class=\"hue-doc-cmdname\">impalad</span> configuration settings.\n                See <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_kerberos.html#auth_to_local\" target=\"_blank\">Mapping Kerberos Principals to Short Names for Impala</a> for details.\n              </p></li><li><p>\n                Timing improvements in the mechanism for the <span class=\"hue-doc-cmdname\">impalad</span>\n                daemon to acquire Kerberos tickets. This feature spreads out the overhead\n                on the KDC during Impala startup, especially for large clusters.\n              </p></li><li><p>\n                For Kerberized clusters, the Catalog service now uses\n                the Kerberos principal instead of the operating sytem user that runs\n                the <span class=\"hue-doc-cmdname\">catalogd</span> daemon.\n                This eliminates the requirement to configure a <span class=\"hue-doc-codeph\">hadoop.user.group.static.mapping.overrides</span>\n                setting to put the OS user into the Sentry administrative group, on clusters where the principal\n                and the OS user name for this user are different.\n              </p></li></ul></li><li><p>\n            Overall performance improvements for join queries, by using a prefetching mechanism\n            while building the in-memory hash table to evaluate join predicates.\n            See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_prefetch_mode.xml\" data-doc-anchor-id=\"prefetch_mode\">PREFETCH_MODE Query Option (Impala 2.6 or higher only)</a> for the query option\n            to control this optimization.\n          </p></li><li><p>\n            The <span class=\"hue-doc-cmdname\">impala-shell</span> interpreter has a new command,\n            <span class=\"hue-doc-codeph\">SOURCE</span>, that lets you run a set of SQL statements\n            or other <span class=\"hue-doc-cmdname\">impala-shell</span> commands stored in a file.\n            You can run additional <span class=\"hue-doc-codeph\">SOURCE</span> commands from inside\n            a file, to set up flexible sequences of statements for use cases\n            such as schema setup, ETL, or reporting.\n            See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_shell_commands.xml\" data-doc-anchor-id=\"shell_commands\">impala-shell Command Reference</a> for details\n            and <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_shell_running_commands.xml\" data-doc-anchor-id=\"shell_running_commands\">Running Commands and SQL Statements in impala-shell</a>\n            for examples.\n          </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">millisecond()</span> built-in function lets you extract\n            the fractional seconds part of a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value.\n            See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions\">Impala Date and Time Functions</a> for details.\n          </p></li><li><p>\n            If an Avro table is created without column definitions in the\n            <span class=\"hue-doc-codeph\">CREATE TABLE</span> statement, and columns are later\n            added through <span class=\"hue-doc-codeph\">ALTER TABLE</span>, the resulting\n            table is now queryable. Missing values from the newly added\n            columns now default to <span class=\"hue-doc-codeph\">NULL</span>.\n            See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_avro.xml\" data-doc-anchor-id=\"avro\">Using the Avro File Format with Impala Tables</a> for general details about\n            working with Avro files.\n          </p></li><li><p>\n            The mechanism for interpreting <span class=\"hue-doc-codeph\">DECIMAL</span> literals is\n            improved, no longer going through an intermediate conversion step\n            to <span class=\"hue-doc-codeph\">DOUBLE</span>:\n            <ul><li><p>\n                  Casting a <span class=\"hue-doc-codeph\">DECIMAL</span> value to <span class=\"hue-doc-codeph\">TIMESTAMP</span><span class=\"hue-doc-codeph\">DOUBLE</span> produces a more precise\n                  value for the <span class=\"hue-doc-codeph\">TIMESTAMP</span> than formerly.\n                </p></li><li><p>\n                  Certain function calls involving <span class=\"hue-doc-codeph\">DECIMAL</span> literals\n                  now succeed, when formerly they failed due to lack of a function\n                  signature with a <span class=\"hue-doc-codeph\">DOUBLE</span> argument.\n                </p></li><li><p>\n                  Faster runtime performance for <span class=\"hue-doc-codeph\">DECIMAL</span> constant\n                  values, through improved native code generation for all combinations\n                  of precision and scale.\n                </p></li></ul>\n            See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_decimal.xml\" data-doc-anchor-id=\"decimal\">DECIMAL Data Type (Impala 3.0 or higher only)</a> for details about the <span class=\"hue-doc-codeph\">DECIMAL</span> type.\n          </p></li><li><p>\n            Improved type accuracy for <span class=\"hue-doc-codeph\">CASE</span> return values.\n            If all <span class=\"hue-doc-codeph\">WHEN</span> clauses of the <span class=\"hue-doc-codeph\">CASE</span>\n            expression are of <span class=\"hue-doc-codeph\">CHAR</span> type, the final result\n            is also <span class=\"hue-doc-codeph\">CHAR</span> instead of being converted to\n            <span class=\"hue-doc-codeph\">STRING</span>.\n            See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_conditional_functions.xml\" data-doc-anchor-id=\"conditional_functions\">Impala Conditional Functions</a>\n            for details about the <span class=\"hue-doc-codeph\">CASE</span> function.\n          </p></li><li><p>\n            Uncorrelated queries using the <span class=\"hue-doc-codeph\">NOT EXISTS</span> operator\n            are now supported. Formerly, the <span class=\"hue-doc-codeph\">NOT EXISTS</span>\n            operator was only available for correlated subqueries.\n          </p></li><li><p>\n            Improved performance for reading Parquet files.\n          </p></li><li><p>\n            Improved performance for <span class=\"hue-doc-term\">top-N</span> queries, that is,\n            those including both <span class=\"hue-doc-codeph\">ORDER BY</span> and\n            <span class=\"hue-doc-codeph\">LIMIT</span> clauses.\n          </p></li><li><p>\n            Impala optionally skips an arbitrary number of header lines from text input\n            files on HDFS based on the <span class=\"hue-doc-codeph\">skip.header.line.count</span> value\n            in the <span class=\"hue-doc-codeph\">TBLPROPERTIES</span> field of the table metadata.\n            See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_txtfile.xml\" data-doc-anchor-id=\"text_data_files\">Data Files for Text Tables</a> for details.\n          </p></li><li><p>\n            Trailing comments are now allowed in queries processed by\n            the <span class=\"hue-doc-cmdname\">impala-shell</span> options <span class=\"hue-doc-codeph\">-q</span>\n            and <span class=\"hue-doc-codeph\">-f</span>.\n          </p></li><li><p>\n            Impala can run <span class=\"hue-doc-codeph\">COUNT</span> queries for RCFile tables\n            that include complex type columns.\n            See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_complex_types.xml\" data-doc-anchor-id=\"complex_types\">Complex Types (Impala 2.3 or higher only)</a> for\n            general information about working with complex types,\n            and <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_array.xml\" data-doc-anchor-id=\"array\">ARRAY Complex Type (Impala 2.3 or higher only)</a>,\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_map.xml\" data-doc-anchor-id=\"map\">MAP Complex Type (Impala 2.3 or higher only)</a>, and <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_struct.xml\" data-doc-anchor-id=\"struct\">STRUCT Complex Type (Impala 2.3 or higher only)</a>\n            for syntax details of each type.\n          </p></li></ul></div></div><div id=\"new_features_250\"><div class=\"hue-doc-title\">New Features in Impala 2.5</div><div><ul><li><p>\n            Dynamic partition pruning. When a query refers to a partition key column in a <span class=\"hue-doc-codeph\">WHERE</span>\n            clause, and the exact set of column values are not known until the query is executed,\n            Impala evaluates the predicate and skips the I/O for entire partitions that are not needed.\n            For example, if a table was partitioned by year, Impala would apply this technique to a query\n            such as <span class=\"hue-doc-codeph\">SELECT c1 FROM partitioned_table WHERE year = (SELECT MAX(year) FROM other_table)</span>.\n            <span class=\"hue-doc-ph\">See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_partitioning.xml\" data-doc-anchor-id=\"dynamic_partition_pruning\">Dynamic Partition Pruning</a> for details.</span></p><p>\n            The dynamic partition pruning optimization technique lets Impala avoid reading\n            data files from partitions that are not part of the result set, even when\n            that determination cannot be made in advance. This technique is especially valuable\n            when performing join queries involving partitioned tables. For example, if a join\n            query includes an <span class=\"hue-doc-codeph\">ON</span> clause and a <span class=\"hue-doc-codeph\">WHERE</span> clause\n            that refer to the same columns, the query can find the set of column values that\n            match the <span class=\"hue-doc-codeph\">WHERE</span> clause, and only scan the associated partitions\n            when evaluating the <span class=\"hue-doc-codeph\">ON</span> clause.\n          </p><p>\n            Dynamic partition pruning is controlled by the same settings as the runtime filtering feature.\n            By default, this feature is enabled at a medium level, because the maximum setting can use\n            slightly more memory for queries than in previous releases.\n            To fully enable this feature, set the query option <span class=\"hue-doc-codeph\">RUNTIME_FILTER_MODE=GLOBAL</span>.\n          </p></li><li><p>\n            Runtime filtering. This is a wide-ranging set of optimizations that are especially valuable for join queries.\n            Using the same technique as with dynamic partition pruning,\n            Impala uses the predicates from <span class=\"hue-doc-codeph\">WHERE</span> and <span class=\"hue-doc-codeph\">ON</span> clauses\n            to determine the subset of column values from one of the joined tables could possibly be part of the\n            result set. Impala sends a compact representation of the filter condition to the hosts in the cluster,\n            instead of the full set of values or the entire table.\n            </p><p>\n            By default, this feature is enabled at a medium level, because the maximum setting can use\n            slightly more memory for queries than in previous releases.\n            To fully enable this feature, set the query option <span class=\"hue-doc-codeph\">RUNTIME_FILTER_MODE=GLOBAL</span>.\n            </p><p>\n            This feature involves some new query options:\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_runtime_filter_mode.xml\">RUNTIME_FILTER_MODE</a><span class=\"hue-doc-codeph\">RUNTIME_FILTER_MODE</span>,\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_max_num_runtime_filters.xml\">MAX_NUM_RUNTIME_FILTERS</a><span class=\"hue-doc-codeph\">MAX_NUM_RUNTIME_FILTERS</span>,\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_runtime_bloom_filter_size.xml\">RUNTIME_BLOOM_FILTER_SIZE</a><span class=\"hue-doc-codeph\">RUNTIME_BLOOM_FILTER_SIZE</span>,\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_runtime_filter_wait_time_ms.xml\">RUNTIME_FILTER_WAIT_TIME_MS</a><span class=\"hue-doc-codeph\">RUNTIME_FILTER_WAIT_TIME_MS</span>,\n            and <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_disable_row_runtime_filtering.xml\">DISABLE_ROW_RUNTIME_FILTERING</a><span class=\"hue-doc-codeph\">DISABLE_ROW_RUNTIME_FILTERING</span>.\n            </p></li><li><p>\n            More efficient use of the HDFS caching feature, to avoid\n            hotspots and bottlenecks that could occur if heavily used\n            cached data blocks were always processed by the same host.\n            By default, Impala now randomizes which host processes each cached\n            HDFS data block, when cached replicas are available on multiple hosts.\n            (Remember to use the <span class=\"hue-doc-codeph\">WITH REPLICATION</span> clause with the\n            <span class=\"hue-doc-codeph\">CREATE TABLE</span> or <span class=\"hue-doc-codeph\">ALTER TABLE</span> statement\n            when enabling HDFS caching for a table or partition, to cache the same\n            data blocks across multiple hosts.)\n            The new query option <span class=\"hue-doc-codeph\">SCHEDULE_RANDOM_REPLICA</span>\n            lets you fine-tune the interaction with HDFS caching even more.\n            </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">TRUNCATE TABLE</span> statement now accepts an <span class=\"hue-doc-codeph\">IF EXISTS</span>\n            clause, making <span class=\"hue-doc-codeph\">TRUNCATE TABLE</span> easier to use in setup or ETL scripts where the table might or\n            might not exist.\n            </p></li><li><p>\n            Improved performance and reliability for the <span class=\"hue-doc-codeph\">DECIMAL</span> data type:\n            <ul><li><p>\n                Using <span class=\"hue-doc-codeph\">DECIMAL</span> values in a <span class=\"hue-doc-codeph\">GROUP BY</span> clause now\n                triggers the native code generation optimization, speeding up queries that\n                group by values such as prices.\n              </p></li><li><p>\n                Checking for overflow in <span class=\"hue-doc-codeph\">DECIMAL</span>\n                multiplication is now substantially faster, making <span class=\"hue-doc-codeph\">DECIMAL</span>\n                a more practical data type in some use cases where formerly <span class=\"hue-doc-codeph\">DECIMAL</span>\n                was much slower than <span class=\"hue-doc-codeph\">FLOAT</span> or <span class=\"hue-doc-codeph\">DOUBLE</span>.\n              </p></li><li><p>\n                Multiplying a mixture of <span class=\"hue-doc-codeph\">DECIMAL</span>\n                and <span class=\"hue-doc-codeph\">FLOAT</span> or <span class=\"hue-doc-codeph\">DOUBLE</span> values now returns the\n                <span class=\"hue-doc-codeph\">DOUBLE</span> rather than <span class=\"hue-doc-codeph\">DECIMAL</span>. This change avoids\n                some cases where an intermediate value would underflow or overflow and become\n                <span class=\"hue-doc-codeph\">NULL</span> unexpectedly.\n              </p></li></ul></p></li><li><p>\n            For UDFs written in Java, or Hive UDFs reused for Impala,\n            Impala now allows parameters and return values to be primitive types.\n            Formerly, these things were required to be one of the <q>Writable</q>\n            object types.\n            </p></li><li><p>\n            Performance improvements for HDFS I/O. Impala now caches HDFS file handles to avoid the\n            overhead of repeatedly opening the same file.\n          </p></li><li><p>\n            Performance improvements for queries involving nested complex types.\n            Certain basic query types, such as counting the elements of a complex column,\n            now use an optimized code path.\n          </p></li><li><p>\n            Improvements to the memory reservation mechanism for the Impala\n            admission control feature. You can specify more settings, such\n            as the timeout period and maximum aggregate memory used, for each\n            resource pool instead of globally for the Impala instance. The\n            default limit for concurrent queries (the <div class=\"hue-doc-uicontrol\">max requests</div>\n            setting) is now unlimited instead of 200.\n          </p></li><li><p>\n            Performance improvements related to code generation.\n            Even in queries where code generation is not performed\n            for some phases of execution (such as reading data from\n            Parquet tables), Impala can still use code generation in\n            other parts of the query, such as evaluating\n            functions in the <span class=\"hue-doc-codeph\">WHERE</span> clause.\n          </p></li><li><p>\n            Performance improvements for queries using aggregation functions\n            on high-cardinality columns.\n            Formerly, Impala could do unnecessary extra work to produce intermediate\n            results for operations such as <span class=\"hue-doc-codeph\">DISTINCT</span> or <span class=\"hue-doc-codeph\">GROUP BY</span>\n            on columns that were unique or had few duplicate values.\n            Now, Impala decides at run time whether it is more efficient to\n            do an initial aggregation phase and pass along a smaller set of intermediate data,\n            or to pass raw intermediate data back to next phase of query processing to be aggregated there.\n            This feature is known as <span class=\"hue-doc-term\">streaming pre-aggregation</span>.\n            In case of performance regression, this feature can be turned off\n            using the <span class=\"hue-doc-codeph\">DISABLE_STREAMING_PREAGGREGATIONS</span> query option.\n            </p></li><li><p>\n            Spill-to-disk feature now always recommended. In earlier releases, the spill-to-disk feature\n            could be turned off using a pair of configuration settings,\n            <span class=\"hue-doc-codeph\">enable_partitioned_aggregation=false</span> and\n            <span class=\"hue-doc-codeph\">enable_partitioned_hash_join=false</span>.\n            The latest improvements in the spill-to-disk mechanism, and related features that\n            interact with it, make this feature robust enough that disabling it is now\n            no longer needed or supported. In particular, some new features in Impala 2.5\n            and higher do not work when the spill-to-disk feature is disabled.\n          </p></li><li><p>\n            Improvements to scripting capability for the <span class=\"hue-doc-cmdname\">impala-shell</span> command,\n            through user-specified substitution variables that can appear in statements processed\n            by <span class=\"hue-doc-cmdname\">impala-shell</span>:\n          </p><ul><li><p>\n                The <span class=\"hue-doc-codeph\">--var</span> command-line option lets you pass key-value pairs to\n                <span class=\"hue-doc-cmdname\">impala-shell</span>. The shell can substitute the values\n                into queries before executing them, where the query text contains the notation\n                <span class=\"hue-doc-codeph\">${var:<span class=\"hue-doc-varname\">varname</span>}</span>. For example, you might prepare a SQL file\n                containing a set of DDL statements and queries containing variables for\n                database and table names, and then pass the applicable names as part of the\n                <span class=\"hue-doc-codeph\">impala-shell -f <span class=\"hue-doc-varname\">filename</span></span> command.\n                </p></li><li><p>\n                The <span class=\"hue-doc-codeph\">SET</span> and <span class=\"hue-doc-codeph\">UNSET</span> commands within the\n                <span class=\"hue-doc-cmdname\">impala-shell</span> interpreter now work with user-specified\n                substitution variables, as well as the built-in query options.\n                The two kinds of variables are divided in the <span class=\"hue-doc-codeph\">SET</span> output.\n                As with variables defined by the <span class=\"hue-doc-codeph\">--var</span> command-line option,\n                you refer to the user-specified substitution variables in queries by using\n                the notation <span class=\"hue-doc-codeph\">${var:<span class=\"hue-doc-varname\">varname</span>}</span>\n                in the query text. Because the substitution variables are processed by\n                <span class=\"hue-doc-cmdname\">impala-shell</span> instead of the <span class=\"hue-doc-cmdname\">impalad</span>\n                backend, you cannot define your own substitution variables through the\n                <span class=\"hue-doc-codeph\">SET</span> statement in a JDBC or ODBC application.\n                </p></li></ul></li><li><p>\n            Performance improvements for query startup. Impala better parallelizes certain work\n            when coordinating plan distribution between <span class=\"hue-doc-cmdname\">impalad</span> instances, which improves\n            startup time for queries involving tables with many partitions on large clusters,\n            or complicated queries with many plan fragments.\n          </p></li><li><p>\n            Performance and scalability improvements for tables with many partitions.\n            The memory requirements on the coordinator node are reduced, making it substantially\n            faster and less resource-intensive\n            to do joins involving several tables with thousands of partitions each.\n          </p></li><li><p>\n            Whitelisting for access to internal APIs. For applications that need direct access\n            to Impala APIs, without going through the HiveServer2 or Beeswax interfaces, you can\n            specify a list of Kerberos users who are allowed to call those APIs. By default, the\n            <span class=\"hue-doc-codeph\">impala</span> and <span class=\"hue-doc-codeph\">hdfs</span> users are the only ones authorized\n            for this kind of access.\n            Any users not explicitly authorized through the <span class=\"hue-doc-codeph\">internal_principals_whitelist</span>\n            configuration setting are blocked from accessing the APIs. This setting applies to all the\n            Impala-related daemons, although currently it is primarily used for HDFS to control the\n            behavior of the catalog server.\n          </p></li><li><p>\n            Improvements to Impala integration and usability for Hue. (The code changes\n            are actually on the Hue side.)\n          </p><ul><li><p>\n              The list of tables now refreshes dynamically.\n            </p></li></ul></li><li><p>\n            Usability improvements for case-insensitive queries.\n            You can now use the operators <span class=\"hue-doc-codeph\">ILIKE</span> and <span class=\"hue-doc-codeph\">IREGEXP</span>\n            to perform case-insensitive wildcard matches or regular expression matches,\n            rather than explicitly converting column values with <span class=\"hue-doc-codeph\">UPPER</span>\n            or <span class=\"hue-doc-codeph\">LOWER</span>.\n            </p></li><li><p>\n            Performance and reliability improvements for DDL and insert operations on partitioned tables with a large\n            number of partitions. Impala only re-evaluates metadata for partitions that are affected by\n            a DDL operation, not all partitions in the table. While a DDL or insert statement is in progress,\n            other Impala statements that attempt to modify metadata for the same table wait until the first one\n            finishes.\n          </p></li><li><p>\n            Reliability improvements for the <span class=\"hue-doc-codeph\">LOAD DATA</span> statement.\n            Previously, this statement would fail if the source HDFS directory\n            contained any subdirectories at all. Now, the statement ignores\n            any hidden subdirectories, for example <span class=\"hue-doc-filepath\">_impala_insert_staging</span>.\n          </p></li><li><p>\n            A new operator, <span class=\"hue-doc-codeph\">IS [NOT] DISTINCT FROM</span>, lets you compare values\n            and always get a <span class=\"hue-doc-codeph\">true</span> or <span class=\"hue-doc-codeph\">false</span> result,\n            even if one or both of the values are <span class=\"hue-doc-codeph\">NULL</span>.\n            The <span class=\"hue-doc-codeph\">IS NOT DISTINCT FROM</span> operator, or its equivalent\n            <span class=\"hue-doc-codeph\">&lt;=&gt;</span> notation, improves the efficiency of join queries that\n            treat key values that are <span class=\"hue-doc-codeph\">NULL</span> in both tables as equal.\n            </p></li><li><p>\n            Security enhancements for the <span class=\"hue-doc-cmdname\">impala-shell</span> command.\n            A new option, <span class=\"hue-doc-codeph\">--ldap_password_cmd</span>, lets you specify\n            a command to retrieve the LDAP password. The resulting password is\n            then used to authenticate the <span class=\"hue-doc-cmdname\">impala-shell</span> command\n            with the LDAP server.\n            </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">CREATE TABLE AS SELECT</span> statement now accepts a\n            <span class=\"hue-doc-codeph\">PARTITIONED BY</span> clause, which lets you create a\n            partitioned table and insert data into it with a single statement.\n            </p></li><li><p>\n            User-defined functions (UDFs and UDAFs) written in C++ now persist automatically\n            when the <span class=\"hue-doc-cmdname\">catalogd</span> daemon is restarted. You no longer\n            have to run the <span class=\"hue-doc-codeph\">CREATE FUNCTION</span> statements again after a restart.\n          </p></li><li><p>\n            User-defined functions (UDFs) written in Java can now persist\n            when the <span class=\"hue-doc-cmdname\">catalogd</span> daemon is restarted, and can be shared\n            transparently between Impala and Hive. You must do a one-time operation to recreate these\n            UDFs using new <span class=\"hue-doc-codeph\">CREATE FUNCTION</span> syntax, without a signature for arguments\n            or the return value. Afterwards, you no longer have to run the <span class=\"hue-doc-codeph\">CREATE FUNCTION</span>\n            statements again after a restart.\n            Although Impala does not have visibility into the UDFs that implement the\n            Hive built-in functions, user-created Hive UDFs are now automatically available\n            for calling through Impala.\n            </p></li><li><p>\n            Reliability enhancements for memory management. Some aggregation and join queries\n            that formerly might have failed with an out-of-memory error due to memory contention,\n            now can succeed using the spill-to-disk mechanism.\n          </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">SHOW DATABASES</span> statement now returns two columns rather than one.\n            The second column includes the associated comment string, if any, for each database.\n            Adjust any application code that examines the list of databases and assumes the\n            result set contains only a single column.\n            </p></li><li><p>\n            A new optimization speeds up aggregation operations that involve only the partition key\n            columns of partitioned tables. For example, a query such as <span class=\"hue-doc-codeph\">SELECT COUNT(DISTINCT k), MIN(k), MAX(k) FROM t1</span>\n            can avoid reading any data files if <span class=\"hue-doc-codeph\">T1</span> is a partitioned table and <span class=\"hue-doc-codeph\">K</span>\n            is one of the partition key columns. Because this technique can produce different results in cases\n            where HDFS files in a partition are manually deleted or are empty, you must enable the optimization\n            by setting the query option <span class=\"hue-doc-codeph\">OPTIMIZE_PARTITION_KEY_SCANS</span>.\n            </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">DESCRIBE</span> statement can now display metadata about a database, using the\n            syntax <span class=\"hue-doc-codeph\">DESCRIBE DATABASE <span class=\"hue-doc-varname\">db_name</span></span>.\n            </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">uuid()</span> built-in function generates an\n            alphanumeric value that you can use as a guaranteed unique identifier.\n            The uniqueness applies even across tables, for cases where an ascending\n            numeric sequence is not suitable.\n            </p></li></ul></div></div><div id=\"new_features_240\"><div class=\"hue-doc-title\">New Features in Impala 2.4</div><div><ul><li><p>\n            Impala can be used on the DSSD D5 Storage Appliance.\n            From a user perspective, the Impala features are the same as in Impala 2.3.\n          </p></li></ul></div></div><div id=\"new_features_230\"><div class=\"hue-doc-title\">New Features in Impala 2.3</div><div><p>\n        The following are the major new features in Impala 2.3.x. This major release\n        contains improvements to SQL syntax (particularly new support for complex types), performance,\n        manageability, security.\n      </p><ul><li><p>\n            Complex data types: <span class=\"hue-doc-codeph\">STRUCT</span>, <span class=\"hue-doc-codeph\">ARRAY</span>, and <span class=\"hue-doc-codeph\">MAP</span>. These\n            types can encode multiple named fields, positional items, or key-value pairs within a single column.\n            You can combine these types to produce nested types with arbitrarily deep nesting,\n            such as an <span class=\"hue-doc-codeph\">ARRAY</span> of <span class=\"hue-doc-codeph\">STRUCT</span> values,\n            a <span class=\"hue-doc-codeph\">MAP</span> where each key-value pair is an <span class=\"hue-doc-codeph\">ARRAY</span> of other <span class=\"hue-doc-codeph\">MAP</span> values,\n            and so on. Currently, complex data types are only supported for the Parquet file format.\n            </p></li><li><p>\n            Column-level authorization lets you define access to particular columns within a table,\n            rather than the entire table. This feature lets you reduce the reliance on creating views to\n            set up authorization schemes for subsets of information.\n            See \n    the documentation for Apache Sentry\n   for background details, and\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_grant.xml\" data-doc-anchor-id=\"grant\">GRANT Statement (Impala 2.0 or higher only)</a> and <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_revoke.xml\" data-doc-anchor-id=\"revoke\">REVOKE Statement (Impala 2.0 or higher only)</a> for Impala-specific syntax.\n          </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">TRUNCATE TABLE</span> statement removes all the data from a table without removing the table itself.\n            </p></li><li id=\"IMPALA-2015\"><p>\n            Nested loop join queries. Some join queries that formerly required equality comparisons can now use\n            operators such as <span class=\"hue-doc-codeph\">&lt;</span> or <span class=\"hue-doc-codeph\">&gt;=</span>. This same join mechanism is used\n            internally to optimize queries that retrieve values from complex type columns.\n            </p></li><li><p>\n            Reduced memory usage and improved performance and robustness for spill-to-disk feature.\n            </p></li><li><p>\n            Performance improvements for querying Parquet data files containing multiple row groups\n            and multiple data blocks:\n          </p><ul><li><p> For files written by Hive, SparkSQL, and other Parquet MR writers\n                and spanning multiple HDFS blocks, Impala now scans the extra\n                data blocks locally when possible, rather than using remote\n                reads. </p></li><li><p>\n            Impala queries benefit from the improved alignment of row groups with HDFS blocks for Parquet\n            files written by Hive, MapReduce, and other components. (Impala itself never writes\n            multiblock Parquet files, so the alignment change does not apply to Parquet files produced by Impala.)\n            These Parquet writers now add padding to Parquet files that they write to align row groups with HDFS blocks.\n            The <span class=\"hue-doc-codeph\">parquet.writer.max-padding</span> setting specifies the maximum number of bytes, by default\n            8 megabytes, that can be added to the file between row groups to fill the gap at the end of one block\n            so that the next row group starts at the beginning of the next block.\n            If the gap is larger than this size, the writer attempts to fit another entire row group in the remaining space.\n            Include this setting in the <span class=\"hue-doc-filepath\">hive-site</span> configuration file to influence Parquet files written by Hive,\n            or the <span class=\"hue-doc-filepath\">hdfs-site</span> configuration file to influence Parquet files written by all non-Impala components.\n          </p></li></ul></li><li id=\"IMPALA-1660\"><p>\n            Many new built-in scalar functions, for convenience and enhanced portability of SQL that uses common industry extensions.\n          </p><p>\n            Math functions:\n          </p><ul><li><span class=\"hue-doc-codeph\">ATAN2</span></li><li><span class=\"hue-doc-codeph\">COSH</span></li><li><span class=\"hue-doc-codeph\">COT</span></li><li><span class=\"hue-doc-codeph\">DCEIL</span></li><li><span class=\"hue-doc-codeph\">DEXP</span></li><li><span class=\"hue-doc-codeph\">DFLOOR</span></li><li><span class=\"hue-doc-codeph\">DLOG10</span></li><li><span class=\"hue-doc-codeph\">DPOW</span></li><li><span class=\"hue-doc-codeph\">DROUND</span></li><li><span class=\"hue-doc-codeph\">DSQRT</span></li><li><span class=\"hue-doc-codeph\">DTRUNC</span></li><li><span class=\"hue-doc-codeph\">FACTORIAL</span>, and corresponding <span class=\"hue-doc-codeph\">!</span> operator\n            </li><li><span class=\"hue-doc-codeph\">FPOW</span></li><li><span class=\"hue-doc-codeph\">RADIANS</span></li><li><span class=\"hue-doc-codeph\">RANDOM</span></li><li><span class=\"hue-doc-codeph\">SINH</span></li><li><span class=\"hue-doc-codeph\">TANH</span></li></ul><p>\n            String functions:\n          </p><ul><li><span class=\"hue-doc-codeph\">BTRIM</span></li><li><span class=\"hue-doc-codeph\">CHR</span></li><li><span class=\"hue-doc-codeph\">REGEXP_LIKE</span></li><li><span class=\"hue-doc-codeph\">SPLIT_PART</span></li></ul><p>\n            Date and time functions:\n          </p><ul><li><span class=\"hue-doc-codeph\">INT_MONTHS_BETWEEN</span></li><li><span class=\"hue-doc-codeph\">MONTHS_BETWEEN</span></li><li><span class=\"hue-doc-codeph\">TIMEOFDAY</span></li><li><span class=\"hue-doc-codeph\">TIMESTAMP_CMP</span></li></ul><p>\n            Bit manipulation functions:\n          </p><ul><li><span class=\"hue-doc-codeph\">BITAND</span></li><li><span class=\"hue-doc-codeph\">BITNOT</span></li><li><span class=\"hue-doc-codeph\">BITOR</span></li><li><span class=\"hue-doc-codeph\">BITXOR</span></li><li><span class=\"hue-doc-codeph\">COUNTSET</span></li><li><span class=\"hue-doc-codeph\">GETBIT</span></li><li><span class=\"hue-doc-codeph\">ROTATELEFT</span></li><li><span class=\"hue-doc-codeph\">ROTATERIGHT</span></li><li><span class=\"hue-doc-codeph\">SETBIT</span></li><li><span class=\"hue-doc-codeph\">SHIFTLEFT</span></li><li><span class=\"hue-doc-codeph\">SHIFTRIGHT</span></li></ul><p>\n            Type conversion functions:\n          </p><ul><li><span class=\"hue-doc-codeph\">TYPEOF</span></li></ul><p>\n            The <span class=\"hue-doc-codeph\">effective_user()</span> function.\n          </p></li><li id=\"IMPALA-2081\"><p>\n            New built-in analytic functions: <span class=\"hue-doc-codeph\">PERCENT_RANK</span>, <span class=\"hue-doc-codeph\">NTILE</span>,\n            <span class=\"hue-doc-codeph\">CUME_DIST</span>.\n            </p></li><li id=\"IMPALA-595\"><p>\n            The <span class=\"hue-doc-codeph\">DROP DATABASE</span> statement now works for a non-empty database.\n            When you specify the optional <span class=\"hue-doc-codeph\">CASCADE</span> clause, any tables in the\n            database are dropped before the database itself is removed.\n            </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">DROP TABLE</span> and <span class=\"hue-doc-codeph\">ALTER TABLE DROP PARTITION</span> statements have a new optional keyword, <span class=\"hue-doc-codeph\">PURGE</span>.\n            This keyword causes Impala to immediately remove the relevant HDFS data files rather than sending them to the HDFS trashcan.\n            This feature can help to avoid out-of-space errors on storage devices, and to avoid files being left behind in case of\n            a problem with the HDFS trashcan, such as the trashcan not being configured or being in a different HDFS encryption zone\n            than the data files.\n            </p></li><li id=\"IMPALA-80\"><p>\n            The <span class=\"hue-doc-cmdname\">impala-shell</span> command has a new feature for live progress reporting. This feature\n            is enabled through the <span class=\"hue-doc-codeph\">--live_progress</span> and <span class=\"hue-doc-codeph\">--live_summary</span>\n            command-line options, or during a session through the <span class=\"hue-doc-codeph\">LIVE_SUMMARY</span> and\n            <span class=\"hue-doc-codeph\">LIVE_PROGRESS</span> query options.\n            </p></li><li><p>\n            The <span class=\"hue-doc-cmdname\">impala-shell</span> command also now displays a random <q>tip of the day</q> when it starts.\n          </p></li><li id=\"IMPALA-1413\"><p>\n            The <span class=\"hue-doc-cmdname\">impala-shell</span> option <span class=\"hue-doc-codeph\">-f</span> now recognizes a special filename\n            <span class=\"hue-doc-codeph\">-</span> to accept input from stdin.\n            </p></li><li id=\"IMPALA-1963\"><p>\n            Format strings for the <span class=\"hue-doc-codeph\">unix_timestamp()</span> function can now include numeric timezone offsets.\n            </p></li><li><p>\n            Impala can now run a specified command to obtain the password to decrypt a private-key PEM file,\n            rather than having the private-key file be unencrypted on disk.\n            </p></li><li id=\"IMPALA-859\"><p>\n            Impala components now can use SSL for more of their internal communication. SSL is used for\n            communication between all three Impala-related daemons when the configuration option\n            <span class=\"hue-doc-codeph\">ssl_server_certificate</span> is enabled. SSL is used for communication with client\n            applications when the configuration option <span class=\"hue-doc-codeph\">ssl_client_ca_certificate</span> is enabled.\n            </p><p>\n            Currently, you can only use one of server-to-server TLS/SSL encryption or Kerberos authentication.\n            This limitation is tracked by the issue\n            <a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/IMPALA-2598\" target=\"_blank\">IMPALA-2598</a>.\n          </p></li><li id=\"IMPALA-1829\"><p>\n            Improved flexibility for intermediate data types in user-defined aggregate functions (UDAFs).\n            </p></li></ul><p>\n        In Impala 2.3.2, the bug fix for <a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/IMPALA-2598\" target=\"_blank\">IMPALA-2598</a>\n        removes the restriction on using both Kerberos and SSL for internal communication between Impala components.\n      </p></div></div><div id=\"new_features_220\"><div class=\"hue-doc-title\">New Features in Impala 2.8</div><div><p>\n        The following are the major new features in Impala 2.2. This release\n        contains improvements to performance, manageability, security, and SQL syntax.\n      </p><ul><li><p>\n            Several improvements to date and time features enable higher interoperability with Hive and other\n            database systems, provide more flexibility for handling time zones, and future-proof the handling of\n            <span class=\"hue-doc-codeph\">TIMESTAMP</span> values:\n          </p><ul><li><p>\n                The <span class=\"hue-doc-codeph\">WITH REPLICATION</span> clause for the <span class=\"hue-doc-codeph\">CREATE TABLE</span> and\n                <span class=\"hue-doc-codeph\">ALTER TABLE</span> statements lets you control the replication factor for\n                HDFS caching for a specific table or partition. By default, each cached block is\n                only present on a single host, which can lead to CPU contention if the same host\n                processes each cached block. Increasing the replication factor lets Impala choose\n                different hosts to process different cached blocks, to better distribute the CPU load.\n              </p></li><li><p>\n                Startup flags for the <span class=\"hue-doc-cmdname\">impalad</span> daemon enable a higher level of compatibility with\n                <span class=\"hue-doc-codeph\">TIMESTAMP</span> values written by Hive, and more flexibility for working with date and\n                time data using the local time zone instead of UTC. To enable these features, set the\n                <span class=\"hue-doc-cmdname\">impalad</span> startup flags\n                <span class=\"hue-doc-codeph\">-use_local_tz_for_unix_timestamp_conversions=true</span> and\n                <span class=\"hue-doc-codeph\">-convert_legacy_hive_parquet_utc_timestamps=true</span>.\n              </p><p>\n                The <span class=\"hue-doc-codeph\">-use_local_tz_for_unix_timestamp_conversions</span> setting controls how the\n                <span class=\"hue-doc-codeph\">unix_timestamp()</span>, <span class=\"hue-doc-codeph\">from_unixtime()</span>, and <span class=\"hue-doc-codeph\">now()</span>\n                functions handle time zones. By default (when this setting is turned off), Impala considers all\n                <span class=\"hue-doc-codeph\">TIMESTAMP</span> values to be in the UTC time zone when converting to or from Unix time\n                values. When this setting is enabled, Impala treats <span class=\"hue-doc-codeph\">TIMESTAMP</span> values passed to or\n                returned from these functions to be in the local time zone. When this setting is enabled, take\n                particular care that all hosts in the cluster have the same timezone settings, to avoid\n                inconsistent results depending on which host reads or writes <span class=\"hue-doc-codeph\">TIMESTAMP</span> data.\n              </p><p>\n                The <span class=\"hue-doc-codeph\">-convert_legacy_hive_parquet_utc_timestamps</span> setting causes Impala to convert\n                <span class=\"hue-doc-codeph\">TIMESTAMP</span> values to the local time zone when it reads them from Parquet files\n                written by Hive. This setting only applies to data using the Parquet file format, where Impala can\n                use metadata in the files to reliably determine that the files were written by Hive. If in the\n                future Hive changes the way it writes <span class=\"hue-doc-codeph\">TIMESTAMP</span> data in Parquet, Impala will\n                automatically handle that new <span class=\"hue-doc-codeph\">TIMESTAMP</span> encoding.\n              </p><p>\n                See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a> for details about time zone handling and the\n                configuration options for Impala / Hive compatibility with Parquet format.\n              </p></li><li><p id=\"y2k38\">\n        In Impala 2.2.0 and higher, built-in functions that accept or return integers\n        representing <span class=\"hue-doc-codeph\">TIMESTAMP</span> values use the <span class=\"hue-doc-codeph\">BIGINT</span> type for\n        parameters and return values, rather than <span class=\"hue-doc-codeph\">INT</span>. This change lets the\n        date and time functions avoid an overflow error that would otherwise occur on January\n        19th, 2038 (known as the\n        <a class=\"hue-doc-external-link\" href=\"http://en.wikipedia.org/wiki/Year_2038_problem\" target=\"_blank\"><q>Year\n        2038 problem</q> or <q>Y2K38 problem</q></a>). This change affects the\n        <span class=\"hue-doc-codeph\">FROM_UNIXTIME()</span> and <span class=\"hue-doc-codeph\">UNIX_TIMESTAMP()</span> functions. You\n        might need to change application code that interacts with these functions, change the\n        types of columns that store the return values, or add <span class=\"hue-doc-codeph\">CAST()</span> calls to\n        SQL statements that call these functions.\n      </p><p>\n                See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions\">Impala Date and Time Functions</a> for the current function\n                signatures.\n              </p></li></ul></li><li><p>\n            The <span class=\"hue-doc-codeph\">SHOW FILES</span> statement lets you view the names and sizes of the files that make up\n            an entire table or a specific partition. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_show.xml\" data-doc-anchor-id=\"show_files\">SHOW FILES Statement</a> for details.\n          </p></li><li><p>\n            Impala can now run queries against Parquet data containing columns with complex or nested types, as\n            long as the query only refers to columns with scalar types.\n          </p></li><li><p>\n            Performance improvements for queries that include <span class=\"hue-doc-codeph\">IN()</span> operators and involve\n            partitioned tables.\n          </p></li><li><p>\n            The new <span class=\"hue-doc-codeph\">-max_log_files</span> configuration option specifies how many log files to keep at\n            each severity level. The default value is 10, meaning that Impala preserves the latest 10 log files for\n            each severity level (<span class=\"hue-doc-codeph\">INFO</span>, <span class=\"hue-doc-codeph\">WARNING</span>, and <span class=\"hue-doc-codeph\">ERROR</span>) for\n            each Impala-related daemon (<span class=\"hue-doc-cmdname\">impalad</span>, <span class=\"hue-doc-cmdname\">statestored</span>, and\n            <span class=\"hue-doc-cmdname\">catalogd</span>). Impala checks to see if any old logs need to be removed based on the\n            interval specified in the <span class=\"hue-doc-codeph\">logbufsecs</span> setting, every 5 seconds by default. See\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_logging.xml\" data-doc-anchor-id=\"logs_rotate\">Rotating Impala Logs</a> for details.\n          </p></li><li><p>\n            Redaction of sensitive data from Impala log files. This feature protects details such as credit card\n            numbers or tax IDs from administrators who see the text of SQL statements in the course of monitoring\n            and troubleshooting a Hadoop cluster. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_logging.xml\" data-doc-anchor-id=\"redaction\">Redacting Sensitive Information from Impala Log Files</a> for background\n            information for Impala users, and \n    the documentation for your Apache Hadoop distribution\n   for usage details.\n          </p></li><li><p>\n            Lineage information is available for data created or queried by Impala. This feature lets you track who\n            has accessed data through Impala SQL statements, down to the level of specific columns, and how data\n            has been propagated between tables. See <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_lineage.html#lineage\" target=\"_blank\">Viewing Lineage Information for Impala Data</a> for background\n            information for Impala users, \n    the documentation for your Apache Hadoop distribution\n   for usage details and\n            how to interpret the lineage information.\n          </p></li><li><p>\n            Impala tables and partitions can now be located on the Amazon Simple Storage Service (S3) filesystem,\n            for convenience in cases where data is already located in S3 and you prefer to query it in-place.\n            Queries might have lower performance than when the data files reside on HDFS, because Impala uses some\n            HDFS-specific optimizations. Impala can query data in S3, but cannot write to S3. Therefore, statements\n            such as <span class=\"hue-doc-codeph\">INSERT</span> and <span class=\"hue-doc-codeph\">LOAD DATA</span> are not available when the destination\n            table or partition is in S3. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_s3.xml\" data-doc-anchor-id=\"s3\">Using Impala with Amazon S3 Object Store</a> for details.\n          </p><div class=\"hue-doc-note\" id=\"s3_caveat\"><p>\n          Impala query support for Amazon S3 is included in Impala 2.2,\n          but is not supported or recommended for production use in this version.\n        </p></div></li><li><p>\n            Improved support for HDFS encryption. The <span class=\"hue-doc-codeph\">LOAD DATA</span> statement now works when the\n            source directory and destination table are in different encryption zones. See\n            \n    the documentation for your Apache Hadoop distribution\n   for details about using HDFS encryption with\n            Impala.\n          </p></li><li><p>\n            Additional arithmetic function <span class=\"hue-doc-codeph\">mod()</span>. See\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions\">Impala Mathematical Functions</a> for details.\n          </p></li><li><p>\n            Flexibility to interpret <span class=\"hue-doc-codeph\">TIMESTAMP</span> values using the UTC time zone (the traditional\n            Impala behavior) or using the local time zone (for compatibility with <span class=\"hue-doc-codeph\">TIMESTAMP</span> values\n            produced by Hive).\n          </p></li><li><p>\n            Enhanced support for ETL using tools such as Flume. Impala ignores temporary files typically produced\n            by these tools (filenames with suffixes <span class=\"hue-doc-codeph\">.copying</span> and <span class=\"hue-doc-codeph\">.tmp</span>).\n          </p></li><li><p>\n            The CPU requirement for Impala, which had become more restrictive in Impala 2.0.x and 2.1.x, has now\n            been relaxed.\n          </p><p id=\"cpu_prereq\">\n        The prerequisite for CPU architecture has been relaxed in Impala 2.2.0 and higher. From\n        this release onward, Impala works on CPUs that have the SSSE3 instruction set. The SSE4\n        instruction set is no longer required. This relaxed requirement simplifies the upgrade\n        planning from Impala 1.x releases, which also worked on SSSE3-enabled processors.\n      </p></li><li><p>\n            Enhanced support for <span class=\"hue-doc-codeph\">CHAR</span> and <span class=\"hue-doc-codeph\">VARCHAR</span> types in the <span class=\"hue-doc-codeph\">COMPUTE\n            STATS</span> statement.\n          </p></li><li><p>\n            The amount of memory required during setup for <q>spill to disk</q> operations is greatly reduced. This\n            enhancement reduces the chance of a memory-intensive join or aggregation query failing with an\n            out-of-memory error.\n          </p></li><li><p>\n            Several new conditional functions provide enhanced compatibility when porting code that uses industry\n            extensions. The new functions are: <span class=\"hue-doc-codeph\">isfalse()</span>, <span class=\"hue-doc-codeph\">isnotfalse()</span>,\n            <span class=\"hue-doc-codeph\">isnottrue()</span>, <span class=\"hue-doc-codeph\">istrue()</span>, <span class=\"hue-doc-codeph\">nonnullvalue()</span>, and\n            <span class=\"hue-doc-codeph\">nullvalue()</span>. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_conditional_functions.xml\" data-doc-anchor-id=\"conditional_functions\">Impala Conditional Functions</a>\n            for details.\n          </p></li><li><p>\n            The Impala debug web UI now can display a visual representation of the query plan. On the\n            <div class=\"hue-doc-uicontrol\">/queries</div> tab, select <div class=\"hue-doc-uicontrol\">Details</div> for a particular query. The\n            <div class=\"hue-doc-uicontrol\">Details</div> page includes a <div class=\"hue-doc-uicontrol\">Plan</div> tab with a plan diagram that\n            you can zoom in or out (using scroll gestures through mouse wheel or trackpad).\n          </p></li></ul></div></div><div id=\"new_features_210\"><div class=\"hue-doc-title\">New Features in Impala 2.1</div><div><p>\n        This release contains the following enhancements to query performance and system scalability:\n      </p><ul><li><p>\n            Impala can now collect statistics for individual partitions in a partitioned table, rather than\n            processing the entire table for each <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement. This feature is known as\n            incremental statistics, and is controlled by the <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span> syntax.\n            (You can still use the original <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement for nonpartitioned tables or\n            partitioned tables that are unchanging or whose contents are entirely replaced all at once.) See\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_compute_stats.xml\" data-doc-anchor-id=\"compute_stats\">COMPUTE STATS Statement</a> and\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_stats.xml\" data-doc-anchor-id=\"perf_stats\">Table and Column Statistics</a> for details.\n          </p></li><li><p>\n            Optimization for small queries lets Impala process queries that process very few rows without the\n            unnecessary overhead of parallelizing and generating native code. Reducing this overhead lets Impala\n            clear small queries quickly, keeping YARN resources and admission control slots available for\n            data-intensive queries. The number of rows considered to be a <q>small</q> query is controlled by the\n            <span class=\"hue-doc-codeph\">EXEC_SINGLE_NODE_ROWS_THRESHOLD</span> query option. See\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_exec_single_node_rows_threshold.xml\" data-doc-anchor-id=\"exec_single_node_rows_threshold\">EXEC_SINGLE_NODE_ROWS_THRESHOLD Query Option (Impala 2.1 or higher only)</a> for details.\n          </p></li><li><p>\n            An enhancement to the statestore component lets it transmit heartbeat information independently of\n            broadcasting metadata updates. This optimization improves reliability of health checking on large\n            clusters with many tables and partitions.\n          </p></li><li><p>\n            The memory requirement for querying gzip-compressed text is reduced. Now Impala decompresses the data\n            as it is read, rather than reading the entire gzipped file and decompressing it in memory.\n          </p></li></ul></div></div><div id=\"new_features_200\"><div class=\"hue-doc-title\">New Features in Impala 2.0</div><div><p>\n        The following are the major new features in Impala 2.0. This major release\n        contains improvements to performance, scalability, security, and SQL syntax.\n      </p><ul><li><p>\n            Queries with joins or aggregation functions involving high volumes of data can now use temporary work\n            areas on disk, reducing the chance of failure due to out-of-memory errors. When the required memory for\n            the intermediate result set exceeds the amount available on a particular node, the query automatically\n            uses a temporary work area on disk. This <q>spill to disk</q> mechanism is similar to the <span class=\"hue-doc-codeph\">ORDER\n            BY</span> improvement from Impala 1.4. For details, see\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_scalability.xml\" data-doc-anchor-id=\"spill_to_disk\">SQL Operations that Spill to Disk</a>.\n          </p></li><li><p>\n            Subquery enhancements:\n            <ul><li>\n                Subqueries are now allowed in the <span class=\"hue-doc-codeph\">WHERE</span> clause, for example with the\n                <span class=\"hue-doc-codeph\">IN</span> operator.\n              </li><li>\n                The <span class=\"hue-doc-codeph\">EXISTS</span> and <span class=\"hue-doc-codeph\">NOT EXISTS</span> operators are available. They are\n                always used in conjunction with subqueries.\n              </li><li>\n                The <span class=\"hue-doc-codeph\">IN</span> and <span class=\"hue-doc-codeph\">NOT IN</span> queries can now operate on the result set from\n                a subquery, not just a hardcoded list of values.\n              </li><li>\n                Uncorrelated subqueries let you compare against one or more values for equality,\n                <span class=\"hue-doc-codeph\">IN</span>, and <span class=\"hue-doc-codeph\">EXISTS</span> comparisons. For example, you might use\n                <span class=\"hue-doc-codeph\">WHERE</span> clauses such as <span class=\"hue-doc-codeph\">WHERE <span class=\"hue-doc-varname\">column</span> = (SELECT\n                MAX(<span class=\"hue-doc-varname\">some_other_column</span> FROM <span class=\"hue-doc-varname\">table</span>)</span> or <span class=\"hue-doc-codeph\">WHERE\n                <span class=\"hue-doc-varname\">column</span> IN (SELECT <span class=\"hue-doc-varname\">some_other_column</span> FROM\n                <span class=\"hue-doc-varname\">table</span> WHERE <span class=\"hue-doc-varname\">conditions</span>)</span>.\n              </li><li>\n                Correlated subqueries let you cross-reference values from the outer query block and the subquery.\n              </li><li>\n                Scalar subqueries let you substitute the result of single-value aggregate functions such as\n                <span class=\"hue-doc-codeph\">MAX()</span>, <span class=\"hue-doc-codeph\">MIN()</span>, <span class=\"hue-doc-codeph\">COUNT()</span>, or\n                <span class=\"hue-doc-codeph\">AVG()</span>, where you would normally use a numeric value in a <span class=\"hue-doc-codeph\">WHERE</span>\n                clause.\n              </li></ul></p><p>\n            For details about subqueries, see <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_subqueries.xml\" data-doc-anchor-id=\"subqueries\">Subqueries in Impala SELECT Statements</a> For information about\n            new and improved operators, see <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_operators.xml\" data-doc-anchor-id=\"exists\">EXISTS Operator</a> and\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_operators.xml\" data-doc-anchor-id=\"in\">IN Operator</a>.\n          </p></li><li><p>\n            Analytic functions such as <span class=\"hue-doc-codeph\">RANK()</span>, <span class=\"hue-doc-codeph\">LAG()</span>, <span class=\"hue-doc-codeph\">LEAD()</span>,\n            and <span class=\"hue-doc-codeph\">FIRST_VALUE()</span> let you analyze sequences of rows with flexible ordering and\n            grouping. Existing aggregate functions such as <span class=\"hue-doc-codeph\">MAX()</span>, <span class=\"hue-doc-codeph\">SUM()</span>, and\n            <span class=\"hue-doc-codeph\">COUNT()</span> can also be used in an analytic context. See\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_analytic_functions.xml\" data-doc-anchor-id=\"analytic_functions\">Impala Analytic Functions</a> for details. See\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_aggregate_functions.xml\" data-doc-anchor-id=\"aggregate_functions\">Impala Aggregate Functions</a> for enhancements to existing\n            aggregate functions.\n          </p></li><li><p>\n            New data types provide greater compatibility with source code from traditional database systems:\n          </p><ul><li><span class=\"hue-doc-codeph\">VARCHAR</span> is like the <span class=\"hue-doc-codeph\">STRING</span> data type, but with a maximum length.\n              See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_varchar.xml\" data-doc-anchor-id=\"varchar\">VARCHAR Data Type (Impala 2.0 or higher only)</a> for details.\n            </li><li><span class=\"hue-doc-codeph\">CHAR</span> is like the <span class=\"hue-doc-codeph\">STRING</span> data type, but with a precise length. Short\n              values are padded with spaces on the right. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_char.xml\" data-doc-anchor-id=\"char\">CHAR Data Type (Impala 2.0 or higher only)</a> for details.\n            </li></ul></li><li><p>\n            Security enhancements:\n            <ul><li>\n                Formerly, Impala was restricted to using either Kerberos or LDAP / Active Directory authentication\n                within a cluster. Now, Impala can freely accept either kind of authentication request, allowing you\n                to set up some hosts with Kerberos authentication and others with LDAP or Active Directory. See\n                <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_mixed_security.html#mixed_security\" target=\"_blank\">Using Multiple Authentication Methods with Impala</a> for details.\n              </li><li><span class=\"hue-doc-codeph\">GRANT</span> statement. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_grant.xml\" data-doc-anchor-id=\"grant\">GRANT Statement (Impala 2.0 or higher only)</a> for details.\n              </li><li><span class=\"hue-doc-codeph\">REVOKE</span> statement. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_revoke.xml\" data-doc-anchor-id=\"revoke\">REVOKE Statement (Impala 2.0 or higher only)</a> for details.\n              </li><li><span class=\"hue-doc-codeph\">CREATE ROLE</span> statement. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_create_role.xml\" data-doc-anchor-id=\"create_role\">CREATE ROLE Statement (Impala 2.0 or higher only)</a> for\n                details.\n              </li><li><span class=\"hue-doc-codeph\">DROP ROLE</span> statement. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_drop_role.xml\" data-doc-anchor-id=\"drop_role\">DROP ROLE Statement (Impala 2.0 or higher only)</a> for\n                details.\n              </li><li><span class=\"hue-doc-codeph\">SHOW ROLES</span> and <span class=\"hue-doc-codeph\">SHOW ROLE GRANT</span> statements. See\n                <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_show.xml\" data-doc-anchor-id=\"show\">SHOW Statement</a> for details.\n              </li><li><p>\n                  To complement the HDFS encryption feature, a new Impala configuration option,\n                  <span class=\"hue-doc-codeph\">--disk_spill_encryption</span> secures sensitive data from being observed or tampered\n                  with when temporarily stored on disk.\n                </p></li></ul></p><p>\n            The new security-related SQL statements work along with the Sentry authorization framework. See\n            <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_authorization.html#authorization\" target=\"_blank\">Impala Authorization</a> for details.\n          </p></li><li><p>\n            Impala can now read compressed text files compressed by gzip, bzip, or Snappy. These files do not\n            require any special table settings to work in an Impala text table. Impala recognizes the compression\n            type automatically based on file extensions of <span class=\"hue-doc-codeph\">.gz</span>, <span class=\"hue-doc-codeph\">.bz2</span>, and\n            <span class=\"hue-doc-codeph\">.snappy</span> respectively. These types of compressed text files are intended for\n            convenience with existing ETL pipelines. Their non-splittable nature means they are not optimal for\n            high-performance parallel queries. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_txtfile.xml\" data-doc-anchor-id=\"gzip\">Using bzip2, deflate, gzip, Snappy, or zstd Text Files</a> for details.\n          </p></li><li><p>\n            Query hints can now use comment notation, <span class=\"hue-doc-codeph\">/* +<span class=\"hue-doc-varname\">hint_name</span> */</span> or\n            <span class=\"hue-doc-codeph\">-- +<span class=\"hue-doc-varname\">hint_name</span></span>, at the same places in the query where the hints\n            enclosed by <span class=\"hue-doc-codeph\">[ ]</span> are recognized. This enhancement makes it easier to reuse Impala\n            queries on other database systems. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_hints.xml\" data-doc-anchor-id=\"hints\">Optimizer Hints</a> for details.\n          </p></li><li><p>\n            A new query option, <span class=\"hue-doc-codeph\">QUERY_TIMEOUT_S</span>, lets you specify a timeout period in seconds for\n            individual queries.\n          </p><p>\n            The working of the <span class=\"hue-doc-codeph\">--idle_query_timeout</span> configuration option is extended. If no\n            <span class=\"hue-doc-codeph\">QUERY_OPTION_S</span> query option is in effect, <span class=\"hue-doc-codeph\">--idle_query_timeout</span> works\n            the same as before, setting the timeout interval. When the <span class=\"hue-doc-codeph\">QUERY_OPTION_S</span> query option\n            is specified, its maximum value is capped by the value of the <span class=\"hue-doc-codeph\">--idle_query_timeout</span>\n            option.\n          </p><p>\n            That is, the system administrator sets the default and maximum timeout through the\n            <span class=\"hue-doc-codeph\">--idle_query_timeout</span> startup option, and then individual users or applications can set\n            a lower timeout value if desired through the <span class=\"hue-doc-codeph\">QUERY_TIMEOUT_S</span> query option. See\n            <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_timeouts.html#timeouts\" target=\"_blank\">Setting Timeout Periods for Daemons, Queries, and Sessions</a> and\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_query_timeout_s.xml\" data-doc-anchor-id=\"query_timeout_s\">QUERY_TIMEOUT_S Query Option (Impala 2.0 or higher only)</a> for details.\n          </p></li><li><p>\n            New functions <span class=\"hue-doc-codeph\">VAR_SAMP()</span> and <span class=\"hue-doc-codeph\">VAR_POP()</span> are aliases for the existing\n            <span class=\"hue-doc-codeph\">VARIANCE_SAMP()</span> and <span class=\"hue-doc-codeph\">VARIANCE_POP()</span> functions.\n          </p></li><li><p>\n            A new date and time function, <span class=\"hue-doc-codeph\">DATE_PART()</span>, provides similar functionality to\n            <span class=\"hue-doc-codeph\">EXTRACT()</span>. You can also call the <span class=\"hue-doc-codeph\">EXTRACT()</span> function using the SQL-99\n            syntax, <span class=\"hue-doc-codeph\">EXTRACT(<span class=\"hue-doc-varname\">unit</span> FROM <span class=\"hue-doc-varname\">timestamp</span>)</span>. These\n            enhancements simplify the porting process for date-related code from other systems. See\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions\">Impala Date and Time Functions</a> for details.\n          </p></li><li><p>\n            New approximation features provide a fast way to get results when absolute precision is not required:\n          </p><ul><li>\n              The <span class=\"hue-doc-codeph\">APPX_COUNT_DISTINCT</span> query option lets Impala rewrite\n              <span class=\"hue-doc-codeph\">COUNT(DISTINCT)</span> calls to use <span class=\"hue-doc-codeph\">NDV()</span> instead, which speeds up the\n              operation and allows multiple <span class=\"hue-doc-codeph\">COUNT(DISTINCT)</span> operations in a single query. See\n              <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_appx_count_distinct.xml\" data-doc-anchor-id=\"appx_count_distinct\">APPX_COUNT_DISTINCT Query Option (Impala 2.0 or higher only)</a> for details.\n            </li></ul>\n          The <span class=\"hue-doc-codeph\">APPX_MEDIAN()</span> aggregate function produces an estimate for the median value of a\n          column by using sampling. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_appx_median.xml\" data-doc-anchor-id=\"appx_median\">APPX_MEDIAN Function</a> for details.\n        </li><li><p>\n            Impala now supports a <span class=\"hue-doc-codeph\">DECODE()</span> function. This function works as a shorthand for a\n            <span class=\"hue-doc-codeph\">CASE()</span> expression, and improves compatibility with SQL code containing vendor\n            extensions. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_conditional_functions.xml\" data-doc-anchor-id=\"conditional_functions\">Impala Conditional Functions</a> for details.\n          </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">STDDEV()</span>, <span class=\"hue-doc-codeph\">STDDEV_POP()</span>, <span class=\"hue-doc-codeph\">STDDEV_SAMP()</span>,\n            <span class=\"hue-doc-codeph\">VARIANCE()</span>, <span class=\"hue-doc-codeph\">VARIANCE_POP()</span>, <span class=\"hue-doc-codeph\">VARIANCE_SAMP()</span>, and\n            <span class=\"hue-doc-codeph\">NDV()</span> aggregate functions now all return <span class=\"hue-doc-codeph\">DOUBLE</span> results rather than\n            <span class=\"hue-doc-codeph\">STRING</span>. Formerly, you were required to <span class=\"hue-doc-codeph\">CAST()</span> the result to a numeric\n            type before using it in arithmetic operations.\n          </p></li><li id=\"parquet_block_size\"><p>\n            The default settings for Parquet block size, and the associated <span class=\"hue-doc-codeph\">PARQUET_FILE_SIZE</span>\n            query option, are changed. Now, Impala writes Parquet files with a size of 256 MB and an HDFS block\n            size of 256 MB. Previously, Impala attempted to write Parquet files with a size of 1 GB and an HDFS\n            block size of 1 GB. In practice, Impala used a conservative estimate of the disk space needed for each\n            Parquet block, leading to files that were typically 512 MB anyway. Thus, this change will make the file\n            size more accurate if you specify a value for the <span class=\"hue-doc-codeph\">PARQUET_FILE_SIZE</span> query option. It\n            also reduces the amount of memory reserved during <span class=\"hue-doc-codeph\">INSERT</span> into Parquet tables,\n            potentially avoiding out-of-memory errors and improving scalability when inserting data into Parquet\n            tables.\n          </p></li><li><p>\n            Anti-joins are now supported, expressed using the <span class=\"hue-doc-codeph\">LEFT ANTI JOIN</span> and <span class=\"hue-doc-codeph\">RIGHT\n            ANTI JOIN</span> clauses.\n\n            These clauses returns results from one table that have no match in the other table. You might use this\n            type of join in the same sorts of use cases as the <span class=\"hue-doc-codeph\">NOT EXISTS</span> and <span class=\"hue-doc-codeph\">NOT\n            IN</span> operators. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_joins.xml\" data-doc-anchor-id=\"joins\">Joins in Impala SELECT Statements</a> for details.\n          </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">SET</span> command in <span class=\"hue-doc-cmdname\">impala-shell</span> has been promoted to a real SQL\n            statement. You can now set query options such as <span class=\"hue-doc-codeph\">PARQUET_FILE_SIZE</span>,\n            <span class=\"hue-doc-codeph\">MEM_LIMIT</span>, and <span class=\"hue-doc-codeph\">SYNC_DDL</span> within JDBC, ODBC, or any other kind of\n            application that submits SQL without going through the <span class=\"hue-doc-cmdname\">impala-shell</span> interpreter. See\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_set.xml\" data-doc-anchor-id=\"set\">SET Statement</a> for details.\n          </p></li><li><p>\n            The <span class=\"hue-doc-cmdname\">impala-shell</span> interpreter now reads settings from an optional configuration file,\n            named <span class=\"hue-doc-filepath\">$HOME/.impalarc</span> by default. See\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_shell_options.xml\" data-doc-anchor-id=\"shell_config_file\">impala-shell Configuration File</a> for details.\n          </p></li><li><p>\n            The library used for regular expression parsing has changed from Boost to Google RE2. This\n            implementation change adds support for non-greedy matches using the <span class=\"hue-doc-codeph\">.*?</span> notation. This\n            and other changes in the way regular expressions are interpreted means you might need to re-test\n            queries that use functions such as <span class=\"hue-doc-codeph\">regexp_extract()</span> or\n            <span class=\"hue-doc-codeph\">regexp_replace()</span>, or operators such as <span class=\"hue-doc-codeph\">REGEXP</span> or\n            <span class=\"hue-doc-codeph\">RLIKE</span>. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_incompatible_changes.xml\" data-doc-anchor-id=\"incompatible_changes\"><span class=\"hue-doc-ph\">Incompatible Changes and Limitations in\n      Apache Impala</span><span class=\"hue-doc-ph\">Apache Impala Incompatible\n      Changes and Limitations</span></a> for\n            those details.\n          </p></li></ul></div></div><div id=\"new_features_140\"><div class=\"hue-doc-title\">New Features in Impala 1.4</div><div><p>\n        The following are the major new features in Impala 1.4:\n      </p><ul><li><p>\n            The <span class=\"hue-doc-codeph\">DECIMAL</span> data type lets you store fixed-precision values, for working with currency\n            or other fractional values where it is important to represent values exactly and avoid rounding errors.\n            This feature includes enhancements to built-in functions, numeric literals, and arithmetic expressions.\n            </p></li><li><p>\n            Where the underlying HDFS support exists, Impala can take advantage of the HDFS caching feature to <q>pin</q> entire tables or\n            individual partitions in memory, to speed up queries on frequently accessed data and reduce the CPU\n            overhead of memory-to-memory copying. When HDFS files are cached in memory, Impala can read the cached\n            data without any disk reads, and without making an additional copy of the data in memory. Other Hadoop\n            components that read the same data files also experience a performance benefit.\n          </p></li><li><p>\n            Impala can now use Sentry-based authorization based either on the original policy file, or on rules\n            defined by <span class=\"hue-doc-codeph\">GRANT</span> and <span class=\"hue-doc-codeph\">REVOKE</span> statements issued through Hive.\n            See <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_authorization.html#authorization\" target=\"_blank\">Impala Authorization</a> for details.\n          </p></li><li><p>\n            For interoperability with Parquet files created through other Hadoop components, such as Pig or\n            MapReduce jobs, you can create an Impala table that automatically sets up the column definitions based\n            on the layout of an existing Parquet data file. </p></li><li><p><span class=\"hue-doc-codeph\">ORDER BY</span> queries no longer require a <span class=\"hue-doc-codeph\">LIMIT</span> clause. If the size of the\n            result set to be sorted exceeds the memory available to Impala, Impala uses a temporary work space on\n            disk to perform the sort operation. </p></li><li><p>\n            LDAP connections can be secured through either SSL or TLS. </p></li><li><p>\n            The following new built-in scalar and aggregate functions are available:\n          </p><ul><li><p>\n                A new built-in function, <span class=\"hue-doc-codeph\">EXTRACT()</span>, returns one date or time field from a\n                <span class=\"hue-doc-codeph\">TIMESTAMP</span> value. </p></li><li><p>\n                A new built-in function, <span class=\"hue-doc-codeph\">TRUNC()</span>, truncates date/time values to a particular\n                granularity, such as year, month, day, hour, and so on. </p></li><li><p><span class=\"hue-doc-codeph\">ADD_MONTHS()</span> built-in function, an alias for the existing\n                <span class=\"hue-doc-codeph\">MONTHS_ADD()</span> function. </p></li><li><p>\n                A new built-in function, <span class=\"hue-doc-codeph\">ROUND()</span>, rounds <span class=\"hue-doc-codeph\">DECIMAL</span> values to a\n                specified number of fractional digits. </p></li><li><p>\n                Several built-in aggregate functions for computing properties for statistical distributions:\n                <span class=\"hue-doc-codeph\">STDDEV()</span>, <span class=\"hue-doc-codeph\">STDDEV_SAMP()</span>, <span class=\"hue-doc-codeph\">STDDEV_POP()</span>,\n                <span class=\"hue-doc-codeph\">VARIANCE()</span>, <span class=\"hue-doc-codeph\">VARIANCE_SAMP()</span>, and <span class=\"hue-doc-codeph\">VARIANCE_POP()</span>.\n                </p></li><li><p>\n                Several new built-in functions, such as <span class=\"hue-doc-codeph\">MAX_INT()</span>,\n                <span class=\"hue-doc-codeph\">MIN_SMALLINT()</span>, and so on, let you conveniently check whether data values are in\n                an expected range. You might be able to switch a column to a smaller type, saving memory during\n                processing. </p></li><li><p>\n                New built-in functions, <span class=\"hue-doc-codeph\">IS_INF()</span> and <span class=\"hue-doc-codeph\">IS_NAN()</span>, check for the\n                special values infinity and <q>not a number</q>. These values could be specified as\n                <span class=\"hue-doc-codeph\">inf</span> or <span class=\"hue-doc-codeph\">nan</span> in text data files, or be produced by certain\n                arithmetic expressions. </p></li></ul></li><li><p>\n            The <span class=\"hue-doc-codeph\">SHOW PARTITIONS</span> statement displays information about the structure of a\n            partitioned table. </p></li><li><p>\n            New configuration options for the <span class=\"hue-doc-cmdname\">impalad</span> daemon let you specify initial memory\n            usage for all queries. The initial resource requests handled by Llama and YARN can be expanded later if\n            needed, avoiding unnecessary over-allocation and reducing the chance of out-of-memory conditions.\n            </p></li><li>\n          The Impala <span class=\"hue-doc-codeph\">CREATE TABLE</span> statement now has a <span class=\"hue-doc-codeph\">STORED AS AVRO</span> clause,\n          allowing you to create Avro tables through Impala. </li><li><p>\n            New <span class=\"hue-doc-cmdname\">impalad</span> configuration options let you fine-tune the calculations Impala makes to\n            estimate resource requirements for each query. These options can help avoid problems due to\n            overconsumption due to too-low estimates, or underutilization due to too-high estimates.\n            </p></li><li><p>\n            A new <span class=\"hue-doc-codeph\">SUMMARY</span> command in the <span class=\"hue-doc-cmdname\">impala-shell</span> interpreter provides a\n            high-level summary of the work performed at each stage of the explain plan. The summary is also\n            included in output from the <span class=\"hue-doc-codeph\">PROFILE</span> command. </p></li><li><p>\n            Performance improvements for the <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement:\n          </p><ul><li>\n              The <span class=\"hue-doc-codeph\">NDV</span> function is speeded up through native code generation.\n            </li><li>\n              Because the <span class=\"hue-doc-codeph\">NULL</span> count is not currently used by the Impala query planner, in Impala\n              1.4.0 and higher, <span class=\"hue-doc-codeph\">COMPUTE STATS</span> does not count the <span class=\"hue-doc-codeph\">NULL</span> values for\n              each column. (The <span class=\"hue-doc-codeph\">#Nulls</span> field of the stats table is left as -1, signifying that the\n              value is unknown.)\n            </li></ul></li><li><p>\n            Performance improvements for partition pruning. This feature reduces the time spent in query planning,\n            for partitioned tables with thousands of partitions. Previously, Impala typically queried tables with\n            up to approximately 3000 partitions. With the performance improvement in partition pruning, now Impala\n            can comfortably handle tables with tens of thousands of partitions. </p></li><li><p>\n            The documentation provides additional guidance for planning tasks. </p></li><li><p>\n            The <span class=\"hue-doc-cmdname\">impala-shell</span> interpreter now supports UTF-8 characters for input and output. You\n            can control whether <span class=\"hue-doc-cmdname\">impala-shell</span> ignores invalid Unicode code points through the\n            <span class=\"hue-doc-codeph\">--strict_unicode</span> option. (Although this option is removed in Impala 2.0.)\n          </p></li></ul></div></div><div id=\"new_features_132\"><div class=\"hue-doc-title\">New Features in Impala 1.3.2</div><div><p>\n        No new features. This point release is exclusively a bug fix release for the IMPALA-1019 issue related to\n        HDFS caching.\n      </p></div></div><div id=\"new_features_131\"><div class=\"hue-doc-title\">New Features in Impala 1.3.1</div><div><p>\n        This point release is primarily a vehicle to deliver bug fixes. Any new features are minor changes\n        resulting from fixes for performance, reliability, or usability issues.\n      </p><ul><li><p>\n            A new <span class=\"hue-doc-cmdname\">impalad</span> startup option, <span class=\"hue-doc-codeph\">--insert_inherit_permissions</span>, causes\n            Impala <span class=\"hue-doc-codeph\">INSERT</span> statements to create each new partition with the same HDFS permissions\n            as its parent directory. By default, <span class=\"hue-doc-codeph\">INSERT</span> statements create directories for new\n            partitions using default HDFS permissions. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_insert.xml\" data-doc-anchor-id=\"insert\">INSERT Statement</a> for examples of\n            <span class=\"hue-doc-codeph\">INSERT</span> statements for partitioned tables.\n          </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">SHOW FUNCTIONS</span> statement now displays the return type of each function, in\n            addition to the types of its arguments. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_show.xml\" data-doc-anchor-id=\"show\">SHOW Statement</a> for examples.\n          </p></li><li><p>\n            You can now specify the clause <span class=\"hue-doc-codeph\">FIELDS TERMINATED BY '\\0'</span> with a <span class=\"hue-doc-codeph\">CREATE\n            TABLE</span> statement to use text data files that use ASCII 0 (<span class=\"hue-doc-codeph\">nul</span>) characters as a\n            delimiter. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_txtfile.xml\" data-doc-anchor-id=\"txtfile\">Using Text Data Files with Impala Tables</a> for details.\n          </p></li><li><p id=\"regexp_matching\">\n        In Impala 1.3.1 and higher, the <span class=\"hue-doc-codeph\">REGEXP</span> and <span class=\"hue-doc-codeph\">RLIKE</span>\n        operators now match a regular expression string that occurs anywhere inside the target\n        string, the same as if the regular expression was enclosed on each side by\n        <span class=\"hue-doc-codeph\">.*</span>. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_operators.xml\" data-doc-anchor-id=\"regexp\">REGEXP Operator</a> for\n        examples. Previously, these operators only succeeded when the regular expression matched\n        the entire target string. This change improves compatibility with the regular expression\n        support for popular database systems. There is no change to the behavior of the\n        <span class=\"hue-doc-codeph\">regexp_extract()</span> and <span class=\"hue-doc-codeph\">regexp_replace()</span> built-in\n        functions.\n      </p></li></ul></div></div><div id=\"new_features_130\"><div class=\"hue-doc-title\">New Features in Impala 1.3</div><div><ul><li><p>\n            The admission control feature lets you control and prioritize the volume and resource consumption of\n            concurrent queries. This mechanism reduces spikes in resource usage, helping Impala to run alongside\n            other kinds of workloads on a busy cluster. It also provides more user-friendly conflict resolution\n            when multiple memory-intensive queries are submitted concurrently, avoiding resource contention that\n            formerly resulted in out-of-memory errors. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_admission.xml\" data-doc-anchor-id=\"admission_control\">Admission Control and Query Queuing</a>\n            for details.\n          </p></li><li><p>\n            Enhanced <span class=\"hue-doc-codeph\">EXPLAIN</span> plans provide more detail in an easier-to-read format. Now there are\n            four levels of verbosity: the <span class=\"hue-doc-codeph\">EXPLAIN_LEVEL</span> option can be set from 0 (most concise) to\n            3 (most verbose). See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_explain.xml\" data-doc-anchor-id=\"explain\">EXPLAIN Statement</a> for syntax and\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_explain_plan.xml\" data-doc-anchor-id=\"explain_plan\">Understanding Impala Query Performance - EXPLAIN Plans and Query Profiles</a> for usage information.\n          </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">TIMESTAMP</span> data type accepts more kinds of input string formats through the\n            <span class=\"hue-doc-codeph\">UNIX_TIMESTAMP</span> function, and produces more varieties of string formats through the\n            <span class=\"hue-doc-codeph\">FROM_UNIXTIME</span> function. The documentation now also lists more functions for date\n            arithmetic, used for adding and subtracting <span class=\"hue-doc-codeph\">INTERVAL</span> expressions from\n            <span class=\"hue-doc-codeph\">TIMESTAMP</span> values. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions\">Impala Date and Time Functions</a>\n            for details.\n          </p></li><li><p>\n            New conditional functions, <span class=\"hue-doc-codeph\">NULLIF()</span>, <span class=\"hue-doc-codeph\">NULLIFZERO()</span>, and\n            <span class=\"hue-doc-codeph\">ZEROIFNULL()</span>, simplify porting SQL containing vendor extensions to Impala. See\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_conditional_functions.xml\" data-doc-anchor-id=\"conditional_functions\">Impala Conditional Functions</a> for details.\n          </p></li><li><p>\n            New utility function, <span class=\"hue-doc-codeph\">CURRENT_DATABASE()</span>. See\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_misc_functions.xml\" data-doc-anchor-id=\"misc_functions\">Impala Miscellaneous Functions</a> for details.\n          </p></li><li><p>\n            Integration with the YARN resource management framework. This\n            feature makes use of the underlying YARN service, plus an additional service (Llama) that coordinates\n            requests to YARN for Impala resources, so that the Impala query only proceeds when all requested\n            resources are available. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_resource_management.xml\" data-doc-anchor-id=\"resource_management\">Resource Management</a> for full\n            details.\n          </p><p>\n            On the Impala side, this feature involves some new startup options for the <span class=\"hue-doc-cmdname\">impalad</span>\n            daemon:\n          </p><ul><li><span class=\"hue-doc-codeph\">-enable_rm</span></li><li><span class=\"hue-doc-codeph\">-llama_host</span></li><li><span class=\"hue-doc-codeph\">-llama_port</span></li><li><span class=\"hue-doc-codeph\">-llama_callback_port</span></li><li><span class=\"hue-doc-codeph\">-cgroup_hierarchy_path</span></li></ul><p>\n            For details of these startup options, see <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_config_options.html#config_options\" target=\"_blank\">Modifying Impala Startup Options</a>.\n          </p><p>\n            This feature also involves several new or changed query options that you can set through the\n            <span class=\"hue-doc-cmdname\">impala-shell</span> interpreter and apply within a specific session:\n          </p><ul><li><span class=\"hue-doc-codeph\">MEM_LIMIT</span>: the function of this existing option changes when Impala resource\n              management is enabled.\n            </li><li><span class=\"hue-doc-codeph\">REQUEST_POOL</span>: a new option. (Renamed to <span class=\"hue-doc-codeph\">RESOURCE_POOL</span> in Impala\n              1.3.0.)\n            </li><li><span class=\"hue-doc-codeph\">V_CPU_CORES</span>: a new option.\n            </li><li><span class=\"hue-doc-codeph\">RESERVATION_REQUEST_TIMEOUT</span>: a new option.\n            </li></ul><p>\n            For details of these query options, see <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_resource_management.xml\" data-doc-anchor-id=\"rm_query_options\">Resource Management</a>.\n          </p></li></ul></div></div><div id=\"new_features_124\"><div class=\"hue-doc-title\">New Features in Impala 1.2.4</div><div><div class=\"hue-doc-note\">        Impala 1.2.4 is primarily a bug fix release for Impala 1.2.3, plus some performance\n        enhancements for the catalog server to minimize startup and DDL wait times for Impala deployments with\n        large numbers of databases, tables, and partitions.\n      </div><ul><li><p>\n            On Impala startup, the metadata loading and synchronization mechanism has been improved and optimized,\n            to give more responsiveness when starting Impala on a system with a large number of databases, tables,\n            or partitions. The initial metadata loading happens in the background, allowing queries to be run\n            before the entire process is finished. When a query refers to a table whose metadata is not yet loaded,\n            the query waits until the metadata for that table is loaded, and the load operation for that table is\n            prioritized to happen first.\n          </p></li><li><p>\n            Formerly, if you created a new table in Hive, you had to issue the <span class=\"hue-doc-codeph\">INVALIDATE METADATA</span>\n            statement (with no table name) which was an expensive operation that reloaded metadata for all tables.\n            Impala did not recognize the name of the Hive-created table, so you could not do <span class=\"hue-doc-codeph\">INVALIDATE\n            METADATA <span class=\"hue-doc-varname\">new_table</span></span> to get the metadata for just that one table. Now, when\n            you issue <span class=\"hue-doc-codeph\">INVALIDATE METADATA <span class=\"hue-doc-varname\">table_name</span></span>, Impala checks to see if\n            that name represents a table created in Hive, and if so recognizes the new table and loads the metadata\n            for it. Additionally, if the new table is in a database that was newly created in Hive, Impala also\n            recognizes the new database.\n          </p></li><li><p>\n            If you issue <span class=\"hue-doc-codeph\">INVALIDATE METADATA <span class=\"hue-doc-varname\">table_name</span></span> and the table has been\n            dropped through Hive, Impala will recognize that the table no longer exists.\n          </p></li><li><p>\n            New startup options let you control the parallelism of the metadata loading during startup for the\n            <span class=\"hue-doc-cmdname\">catalogd</span> daemon:\n          </p><ul><li><p><span class=\"hue-doc-codeph\">--load_catalog_in_background</span> makes Impala load and cache metadata using background\n                threads after startup. It is <span class=\"hue-doc-codeph\">true</span> by default. Previously, a system with a large\n                number of databases, tables, or partitions could be unresponsive or even time out during startup.\n              </p></li><li><p><span class=\"hue-doc-codeph\">--num_metadata_loading_threads</span> determines how much parallelism Impala devotes to\n                loading metadata in the background. The default is 16. You might increase this value for systems\n                with huge numbers of databases, tables, or partitions. You might lower this value for busy systems\n                that are CPU-constrained due to jobs from components other than Impala.\n              </p></li></ul></li></ul></div></div><div id=\"new_features_123\"><div class=\"hue-doc-title\">New Features in Impala 1.2.3</div><div><p>\n        Impala 1.2.3 contains exactly the same feature set as Impala 1.2.2. Its only difference is one additional\n        fix for compatibility with Parquet files generated outside of Impala by components such as Hive, Pig, or\n        MapReduce. If you are upgrading from Impala 1.2.1 or earlier, see\n        <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_new_features.xml\" data-doc-anchor-id=\"new_features_122\">New Features in Impala 1.2.2</a> for the latest added features.\n      </p></div></div><div id=\"new_features_122\"><div class=\"hue-doc-title\">New Features in Impala 1.2.2</div><div><p>\n        Impala 1.2.2 includes new features for performance, security, and flexibility. The major enhancements over\n        1.2.1 are performance related, primarily for join queries.\n      </p><p>\n        New user-visible features include:\n      </p><ul><li><p>\n            Join order optimizations. This highly valuable feature automatically distributes and parallelizes the\n            work for a join query to minimize disk I/O and network traffic. The automatic optimization reduces the\n            need to use query hints or to rewrite join queries with the tables in a specific order based on size or\n            cardinality. The new <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement gathers statistical information about\n            each table that is crucial for enabling the join optimizations. See\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_joins.xml\" data-doc-anchor-id=\"perf_joins\">Performance Considerations for Join Queries</a> for details.\n          </p></li><li><p><span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement to collect both table statistics and column statistics with a\n            single statement. Intended to be more comprehensive, efficient, and reliable than the corresponding\n            Hive <span class=\"hue-doc-codeph\">ANALYZE TABLE</span> statement, which collects statistics in multiple phases through\n            MapReduce jobs. These statistics are important for query planning for join queries, queries on\n            partitioned tables, and other types of data-intensive operations. For optimal planning of join queries,\n            you need to collect statistics for each table involved in the join. See\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_compute_stats.xml\" data-doc-anchor-id=\"compute_stats\">COMPUTE STATS Statement</a> for details.\n          </p></li><li><p>\n            Reordering of tables in a join query can be overridden by the <span class=\"hue-doc-codeph\">STRAIGHT_JOIN</span> operator,\n            allowing you to fine-tune the planning of the join query if necessary, by using the original technique\n            of ordering the joined tables in descending order of size. See\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_joins.xml\" data-doc-anchor-id=\"straight_join\">Overriding Join Reordering with STRAIGHT_JOIN</a> for details.\n          </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">CROSS JOIN</span> clause in the\n            <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_select.xml\" data-doc-anchor-id=\"select\">SELECT</a></span> statement to allow Cartesian\n            products in queries, that is, joins without an equality comparison between columns in both tables.\n            Because such queries must be carefully checked to avoid accidental overconsumption of memory, you must\n            use the <span class=\"hue-doc-codeph\">CROSS JOIN</span> operator to explicitly select this kind of join. See\n            <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_tutorial.html#tut_cross_join\" target=\"_blank\">Cross Joins and Cartesian Products with the CROSS JOIN Operator</a> for examples.\n          </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">ALTER TABLE</span> statement has new clauses that let you fine-tune table statistics. You\n            can use this technique as a less-expensive way to update specific statistics, in case the statistics\n            become stale, or to experiment with the effects of different data distributions on query planning.\n          </p></li><li><p>\n            LDAP username/password authentication in JDBC/ODBC. See <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_ldap.html#ldap\" target=\"_blank\">Enabling LDAP Authentication for Impala</a> for\n            details.\n          </p></li><li><p><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/group_concat\">GROUP_CONCAT()</a> aggregate\n            function to concatenate column values across all rows of a result set.\n          </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">INSERT</span> statement now accepts hints, <span class=\"hue-doc-codeph\">[SHUFFLE]</span> and\n            <span class=\"hue-doc-codeph\">[NOSHUFFLE]</span>, to influence the way work is redistributed during\n            <span class=\"hue-doc-codeph\">INSERT...SELECT</span> operations. The hints are primarily useful for inserting into\n            partitioned Parquet tables, where using the <span class=\"hue-doc-codeph\">[SHUFFLE]</span> hint can avoid problems due to\n            memory consumption and simultaneous open files in HDFS, by collecting all the new data for each\n            partition on a specific node.\n          </p></li><li><p>\n            Several built-in functions and operators are now overloaded for more numeric data types, to reduce the\n            requirement to use <span class=\"hue-doc-codeph\">CAST()</span> for type coercion in <span class=\"hue-doc-codeph\">INSERT</span> statements. For\n            example, the expression <span class=\"hue-doc-codeph\">2+2</span> in an <span class=\"hue-doc-codeph\">INSERT</span> statement formerly produced\n            a <span class=\"hue-doc-codeph\">BIGINT</span> result, requiring a <span class=\"hue-doc-codeph\">CAST()</span> to be stored in an\n            <span class=\"hue-doc-codeph\">INT</span> variable. Now, addition, subtraction, and multiplication only produce a result\n            that is one step <q>bigger</q> than their arguments, and numeric and conditional functions can return\n            <span class=\"hue-doc-codeph\">SMALLINT</span>, <span class=\"hue-doc-codeph\">FLOAT</span>, and other smaller types rather than always\n            <span class=\"hue-doc-codeph\">BIGINT</span> or <span class=\"hue-doc-codeph\">DOUBLE</span>.\n          </p></li><li><p>\n            New <span class=\"hue-doc-codeph\">fnv_hash()</span> built-in function for constructing hashed values. See\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions\">Impala Mathematical Functions</a> for details.\n          </p></li><li><p>\n            The clause <span class=\"hue-doc-codeph\">STORED AS PARQUET</span> is accepted as an equivalent for <span class=\"hue-doc-codeph\">STORED AS\n            PARQUETFILE</span>. This more concise form is recommended for new code.\n          </p></li></ul><p>\n        Because Impala 1.2.2 builds on a number of features introduced in 1.2.1, if you are upgrading from an older\n        1.1.x release straight to 1.2.2, also review <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_new_features.xml\" data-doc-anchor-id=\"new_features_121\">New Features in Impala 1.2.1</a> to see\n        features such as the <span class=\"hue-doc-codeph\">SHOW TABLE STATS</span> and <span class=\"hue-doc-codeph\">SHOW COLUMN STATS</span> statements,\n        and user-defined functions (UDFs).\n      </p></div></div><div id=\"new_features_121\"><div class=\"hue-doc-title\">New Features in Impala 1.2.1</div><div><div class=\"hue-doc-note\">        The Impala 1.2.1 feature set is a superset of features in the Impala 1.2.0 beta, with the\n        exception of resource management, which relies on resource management infrastructure in the\n        underlying Hadoop distribution.\n      </div><p>\n        Impala 1.2.1 includes new features for security, performance, and flexibility.\n      </p><p>\n        New user-visible features include:\n      </p><ul><li><p><span class=\"hue-doc-codeph\">SHOW TABLE STATS <span class=\"hue-doc-varname\">table_name</span></span> and <span class=\"hue-doc-codeph\">SHOW COLUMN STATS\n            <span class=\"hue-doc-varname\">table_name</span></span> statements, to verify that statistics are available and to see\n            the values used during query planning.\n          </p></li><li><p><span class=\"hue-doc-codeph\">CREATE TABLE AS SELECT</span> syntax, to create a new table and transfer data into it in a\n            single operation.\n          </p></li><li><p><span class=\"hue-doc-codeph\">OFFSET</span> clause, for use with the <span class=\"hue-doc-codeph\">ORDER BY</span> and <span class=\"hue-doc-codeph\">LIMIT</span>\n            clauses to produce <q>paged</q> result sets such as items 1-10, then 11-20, and so on.\n          </p></li><li><p><span class=\"hue-doc-codeph\">NULLS FIRST</span> and <span class=\"hue-doc-codeph\">NULLS LAST</span> clauses to ensure consistent placement of\n            <span class=\"hue-doc-codeph\">NULL</span> values in <span class=\"hue-doc-codeph\">ORDER BY</span> queries.\n          </p></li><li><p>\n            New <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_functions.xml\" data-doc-anchor-id=\"builtins\">built-in functions</a>: <span class=\"hue-doc-codeph\">least()</span>,\n            <span class=\"hue-doc-codeph\">greatest()</span>, <span class=\"hue-doc-codeph\">initcap()</span>.\n          </p></li><li><p>\n            New aggregate function: <span class=\"hue-doc-codeph\">ndv()</span>, a fast alternative to <span class=\"hue-doc-codeph\">COUNT(DISTINCT\n            <span class=\"hue-doc-varname\">col</span>)</span> returning an approximate result.\n          </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">LIMIT</span> clause can now accept a numeric expression as an argument, rather than only\n            a literal constant.\n          </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">SHOW CREATE TABLE</span> statement displays the end result of all the <span class=\"hue-doc-codeph\">CREATE\n            TABLE</span> and <span class=\"hue-doc-codeph\">ALTER TABLE</span> statements for a particular table. You can use the\n            output to produce a simplified setup script for a schema.\n          </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">--idle_query_timeout</span> and <span class=\"hue-doc-codeph\">--idle_session_timeout</span> options for\n            <span class=\"hue-doc-cmdname\">impalad</span> control the time intervals after which idle queries are cancelled, and idle\n            sessions expire. See <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_timeouts.html#timeouts\" target=\"_blank\">Setting Timeout Periods for Daemons, Queries, and Sessions</a> for details.\n          </p></li><li><p>\n            User-defined functions (UDFs). This feature lets you transform data in very flexible ways, which is\n            important when using Impala as part of an ETL or ELT pipeline. Prior to Impala 1.2, using UDFs required\n            switching into Hive. Impala 1.2 can run scalar UDFs and user-defined aggregate functions (UDAs). Impala\n            can run high-performance functions written in C++, or you can reuse existing Hive functions written in\n            Java.\n          </p><p>\n            You create UDFs through the <span class=\"hue-doc-codeph\">CREATE FUNCTION</span> statement and drop them through the\n            <span class=\"hue-doc-codeph\">DROP FUNCTION</span> statement. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_udf.xml\" data-doc-anchor-id=\"udfs\">User-Defined Functions (UDFs)</a> for instructions about\n            coding, building, and deploying UDFs, and <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_create_function.xml\" data-doc-anchor-id=\"create_function\">CREATE FUNCTION Statement</a> and\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_drop_function.xml\" data-doc-anchor-id=\"drop_function\">DROP FUNCTION Statement</a> for related SQL syntax.\n          </p></li><li><p>\n            A new service automatically propagates changes to table data and metadata made by one Impala node,\n            sending the new or updated metadata to all the other Impala nodes. The automatic synchronization\n            mechanism eliminates the need to use the <span class=\"hue-doc-codeph\">INVALIDATE METADATA</span> and\n            <span class=\"hue-doc-codeph\">REFRESH</span> statements after issuing Impala statements such as <span class=\"hue-doc-codeph\">CREATE\n            TABLE</span>, <span class=\"hue-doc-codeph\">ALTER TABLE</span>, <span class=\"hue-doc-codeph\">DROP TABLE</span>, <span class=\"hue-doc-codeph\">INSERT</span>, and\n            <span class=\"hue-doc-codeph\">LOAD DATA</span>.\n          </p><p>\n            For even more precise synchronization, you can enable the\n            <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_sync_ddl.xml\" data-doc-anchor-id=\"sync_ddl\">SYNC_DDL</a></span> query option before issuing\n            a DDL, <span class=\"hue-doc-codeph\">INSERT</span>, or <span class=\"hue-doc-codeph\">LOAD DATA</span> statement. This option causes the\n            statement to wait, returning only after the catalog service has broadcast the applicable changes to all\n            Impala nodes in the cluster.\n          </p><div class=\"hue-doc-note\"><p>\n              Because the catalog service only monitors operations performed through Impala, <span class=\"hue-doc-codeph\">INVALIDATE\n              METADATA</span> and <span class=\"hue-doc-codeph\">REFRESH</span> are still needed on the Impala side after creating new\n              tables or loading data through the Hive shell or by manipulating data files directly in HDFS. Because\n              the catalog service broadcasts the result of the <span class=\"hue-doc-codeph\">REFRESH</span> and <span class=\"hue-doc-codeph\">INVALIDATE\n              METADATA</span> statements to all Impala nodes, when you do need to use those statements, you can\n              do so a single time rather than on every Impala node.\n            </p></div><p>\n            This service is implemented by the <span class=\"hue-doc-cmdname\">catalogd</span> daemon. See\n            <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_components.html#intro_catalogd\" target=\"_blank\">The Impala Catalog Service</a> for details.\n          </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">CREATE TABLE</span> and <span class=\"hue-doc-codeph\">ALTER TABLE</span> statements have new clauses\n            <span class=\"hue-doc-codeph\">TBLPROPERTIES</span> and <span class=\"hue-doc-codeph\">WITH SERDEPROPERTIES</span>. The\n            <span class=\"hue-doc-codeph\">TBLPROPERTIES</span> clause lets you associate arbitrary items of metadata with a particular\n            table as key-value pairs. The <span class=\"hue-doc-codeph\">WITH SERDEPROPERTIES</span> clause lets you specify the\n            serializer/deserializer (SerDes) classes that read and write data for a table; although Impala does not\n            make use of these properties, sometimes particular values are needed for Hive compatibility. See\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_create_table.xml\" data-doc-anchor-id=\"create_table\">CREATE TABLE Statement</a> and\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_alter_table.xml\" data-doc-anchor-id=\"alter_table\">ALTER TABLE Statement</a> for details.\n          </p></li><li><p>\n            Delegation support lets you authorize certain OS users associated with applications (for example,\n            <span class=\"hue-doc-codeph\">hue</span>), to submit requests using the credentials of other users.\n            See <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_delegation.html#delegation\" target=\"_blank\">Configuring Impala Delegation for Clients</a> for details.\n          </p></li><li><p>\n            Enhancements to <span class=\"hue-doc-codeph\">EXPLAIN</span> output. In particular, when you enable the new\n            <span class=\"hue-doc-codeph\">EXPLAIN_LEVEL</span> query option, the <span class=\"hue-doc-codeph\">EXPLAIN</span> and <span class=\"hue-doc-codeph\">PROFILE</span>\n            statements produce more verbose output showing estimated resource requirements and whether table and\n            column statistics are available for the applicable tables and columns. See\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_explain.xml\" data-doc-anchor-id=\"explain\">EXPLAIN Statement</a> for details.\n          </p></li><li><p><span class=\"hue-doc-codeph\">SHOW CREATE TABLE</span> summarizes the effects of the original <span class=\"hue-doc-codeph\">CREATE TABLE</span>\n            statement and any subsequent <span class=\"hue-doc-codeph\">ALTER TABLE</span> statements, giving you a <span class=\"hue-doc-codeph\">CREATE\n            TABLE</span> statement that will re-create the current structure and layout for a table.\n          </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">LIMIT</span> clause for queries now accepts an arithmetic expression, in addition to\n            numeric literals.\n          </p></li></ul></div></div><div id=\"new_features_120\"><div class=\"hue-doc-title\">New Features in Impala 1.2.0 (Beta)</div><div><p>\n        The Impala 1.2.0 beta includes new features for security, performance, and flexibility.\n      </p><p>\n        New user-visible features include:\n      </p><ul><li><p>\n            User-defined functions (UDFs). This feature lets you transform data in very flexible ways, which is\n            important when using Impala as part of an ETL or ELT pipeline. Prior to Impala 1.2, using UDFs required\n            switching into Hive. Impala 1.2 can run scalar UDFs and user-defined aggregate functions (UDAs). Impala\n            can run high-performance functions written in C++, or you can reuse existing Hive functions written in\n            Java.\n          </p><p>\n            You create UDFs through the <span class=\"hue-doc-codeph\">CREATE FUNCTION</span> statement and drop them through the\n            <span class=\"hue-doc-codeph\">DROP FUNCTION</span> statement. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_udf.xml\" data-doc-anchor-id=\"udfs\">User-Defined Functions (UDFs)</a> for instructions about\n            coding, building, and deploying UDFs, and <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_create_function.xml\" data-doc-anchor-id=\"create_function\">CREATE FUNCTION Statement</a> and\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_drop_function.xml\" data-doc-anchor-id=\"drop_function\">DROP FUNCTION Statement</a> for related SQL syntax.\n          </p></li><li><p>\n            A new service automatically propagates changes to table data and metadata made by one Impala node,\n            sending the new or updated metadata to all the other Impala nodes. The automatic synchronization\n            mechanism eliminates the need to use the <span class=\"hue-doc-codeph\">INVALIDATE METADATA</span> and\n            <span class=\"hue-doc-codeph\">REFRESH</span> statements after issuing Impala statements such as <span class=\"hue-doc-codeph\">CREATE\n            TABLE</span>, <span class=\"hue-doc-codeph\">ALTER TABLE</span>, <span class=\"hue-doc-codeph\">DROP TABLE</span>, <span class=\"hue-doc-codeph\">INSERT</span>, and\n            <span class=\"hue-doc-codeph\">LOAD DATA</span>.\n          </p><div class=\"hue-doc-note\"><p>\n              Because this service only monitors operations performed through Impala, <span class=\"hue-doc-codeph\">INVALIDATE\n              METADATA</span> and <span class=\"hue-doc-codeph\">REFRESH</span> are still needed on the Impala side after creating new\n              tables or loading data through the Hive shell or by manipulating data files directly in HDFS. Because\n              the catalog service broadcasts the result of the <span class=\"hue-doc-codeph\">REFRESH</span> and <span class=\"hue-doc-codeph\">INVALIDATE\n              METADATA</span> statements to all Impala nodes, when you do need to use those statements, you can\n              do so a single time rather than on every Impala node.\n            </p></div><p>\n            This service is implemented by the <span class=\"hue-doc-cmdname\">catalogd</span> daemon. See\n            <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_components.html#intro_catalogd\" target=\"_blank\">The Impala Catalog Service</a> for details.\n          </p></li><li><p>\n            Integration with the YARN resource management framework. This\n            feature makes use of the underlying YARN service, plus an additional service (Llama) that coordinates\n            requests to YARN for Impala resources, so that the Impala query only proceeds when all requested\n            resources are available. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_resource_management.xml\" data-doc-anchor-id=\"resource_management\">Resource Management</a> for full\n            details.\n          </p><p>\n            On the Impala side, this feature involves some new startup options for the <span class=\"hue-doc-cmdname\">impalad</span>\n            daemon:\n          </p><ul><li><span class=\"hue-doc-codeph\">-enable_rm</span></li><li><span class=\"hue-doc-codeph\">-llama_host</span></li><li><span class=\"hue-doc-codeph\">-llama_port</span></li><li><span class=\"hue-doc-codeph\">-llama_callback_port</span></li><li><span class=\"hue-doc-codeph\">-cgroup_hierarchy_path</span></li></ul><p>\n            For details of these startup options, see <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_config_options.html#config_options\" target=\"_blank\">Modifying Impala Startup Options</a>.\n          </p><p>\n            This feature also involves several new or changed query options that you can set through the\n            <span class=\"hue-doc-cmdname\">impala-shell</span> interpreter and apply within a specific session:\n          </p><ul><li><span class=\"hue-doc-codeph\">MEM_LIMIT</span>: the function of this existing option changes when Impala resource\n              management is enabled.\n            </li><li><span class=\"hue-doc-codeph\">YARN_POOL</span>: a new option. (Renamed to <span class=\"hue-doc-codeph\">RESOURCE_POOL</span> in Impala\n              1.3.0.)\n            </li><li><span class=\"hue-doc-codeph\">V_CPU_CORES</span>: a new option.\n            </li><li><span class=\"hue-doc-codeph\">RESERVATION_REQUEST_TIMEOUT</span>: a new option.\n            </li></ul><p>\n            For details of these query options, see <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_resource_management.xml\" data-doc-anchor-id=\"rm_query_options\">Resource Management</a>.\n          </p></li><li><p><span class=\"hue-doc-codeph\">CREATE TABLE ... AS SELECT</span> syntax, to create a table and copy data into it in a single\n            operation. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_create_table.xml\" data-doc-anchor-id=\"create_table\">CREATE TABLE Statement</a> for details.\n          </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">CREATE TABLE</span> and <span class=\"hue-doc-codeph\">ALTER TABLE</span> statements have a new\n            <span class=\"hue-doc-codeph\">TBLPROPERTIES</span> clause that lets you associate arbitrary items of metadata with a\n            particular table as key-value pairs. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_create_table.xml\" data-doc-anchor-id=\"create_table\">CREATE TABLE Statement</a> and\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_alter_table.xml\" data-doc-anchor-id=\"alter_table\">ALTER TABLE Statement</a> for details.\n          </p></li><li><p>\n            Delegation support lets you authorize certain OS users associated with applications (for example,\n            <span class=\"hue-doc-codeph\">hue</span>), to submit requests using the credentials of other users.\n            See <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_delegation.html#delegation\" target=\"_blank\">Configuring Impala Delegation for Clients</a> for details.\n          </p></li><li><p>\n            Enhancements to <span class=\"hue-doc-codeph\">EXPLAIN</span> output. In particular, when you enable the new\n            <span class=\"hue-doc-codeph\">EXPLAIN_LEVEL</span> query option, the <span class=\"hue-doc-codeph\">EXPLAIN</span> and <span class=\"hue-doc-codeph\">PROFILE</span>\n            statements produce more verbose output showing estimated resource requirements and whether table and\n            column statistics are available for the applicable tables and columns. See\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_explain.xml\" data-doc-anchor-id=\"explain\">EXPLAIN Statement</a> for details.\n          </p></li></ul></div></div><div id=\"new_features_111\"><div class=\"hue-doc-title\">New Features in Impala 1.1.1</div><div><p>\n        Impala 1.1.1 includes new features for security and stability.\n      </p><p>\n        New user-visible features include:\n      </p><ul><li>\n          Additional security feature: auditing. New startup options for <span class=\"hue-doc-cmdname\">impalad</span> let you capture\n          information about Impala queries that succeed or are blocked due to insufficient privileges. For details,\n          see <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_security.html#security\" target=\"_blank\"><span class=\"hue-doc-ph\">Impala Security</span><span class=\"hue-doc-ph\">Overview of Impala Security</span></a>.\n        </li><li>\n          Parquet data files generated by Impala 1.1.1 are now compatible with the Parquet support in Hive. See\n          <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_incompatible_changes.xml\" data-doc-anchor-id=\"incompatible_changes\"><span class=\"hue-doc-ph\">Incompatible Changes and Limitations in\n      Apache Impala</span><span class=\"hue-doc-ph\">Apache Impala Incompatible\n      Changes and Limitations</span></a> for the procedure to update older\n          Impala-created Parquet files to be compatible with the Hive Parquet support.\n        </li><li>\n          Additional improvements to stability and resource utilization for Impala queries.\n        </li><li>\n          Additional enhancements for compatibility with existing file formats.\n        </li></ul></div></div><div id=\"new_features_11\"><div class=\"hue-doc-title\">New Features in Impala 1.1</div><div><p>\n        Impala 1.1 includes new features for security, performance, and usability.\n      </p><p>\n        New user-visible features include:\n      </p><ul><li>\n          Extensive new security features, built on top of the Sentry open source project. Impala now supports\n          fine-grained authorization based on roles. A policy file determines which privileges on which schema\n          objects (servers, databases, tables, and HDFS paths) are available to users based on their membership in\n          groups. By assigning privileges for views, you can control access to table data at the column level. For\n          details, see <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_security.html#security\" target=\"_blank\"><span class=\"hue-doc-ph\">Impala Security</span><span class=\"hue-doc-ph\">Overview of Impala Security</span></a>.\n        </li><li>\n          Impala can now create, alter, drop, and query views. Views provide a flexible way to set up simple\n          aliases for complex queries; hide query details from applications and users; and simplify maintenance as\n          you rename or reorganize databases, tables, and columns. See the overview section\n          <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_views.xml\" data-doc-anchor-id=\"views\">Overview of Impala Views</a> and the statements\n          <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_create_view.xml\" data-doc-anchor-id=\"create_view\">CREATE VIEW Statement</a>, <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_alter_view.xml\" data-doc-anchor-id=\"alter_view\">ALTER VIEW Statement</a>, and\n          <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_drop_view.xml\" data-doc-anchor-id=\"drop_view\">DROP VIEW Statement</a>.\n        </li><li>\n          Performance is improved through a number of automatic optimizations. Resource consumption is also reduced\n          for Impala queries. These improvements apply broadly across all kinds of workloads and file formats. The\n          major areas of performance enhancement include:\n          <ul><li>\n              Improved disk and thread scheduling, which applies to all queries.\n            </li><li>\n              Improved hash join and aggregation performance, which applies to queries with large build tables or a\n              large number of groups.\n            </li><li>\n              Dictionary encoding with Parquet, which applies to Parquet tables with short string columns.\n            </li><li>\n              Improved performance on systems with SSDs, which applies to all queries and file formats.\n            </li></ul></li><li>\n          Some new built-in functions are implemented:\n          <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/translate\">translate()</a> to substitute\n          characters within strings,\n<a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_misc_functions.xml\" data-doc-anchor-id=\"misc_functions/user\">user()</a> to check the login ID of the\n          connected user.\n</li><li>\n          The new <span class=\"hue-doc-codeph\">WITH</span> clause for <span class=\"hue-doc-codeph\">SELECT</span> statements lets you simplify complicated\n          queries in a way similar to creating a view. The effects of the <span class=\"hue-doc-codeph\">WITH</span> clause only last\n          for the duration of one query, unlike views, which are persistent schema objects that can be used by\n          multiple sessions or applications. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_with.xml\" data-doc-anchor-id=\"with\">WITH Clause</a>.\n        </li><li>\n          An enhancement to <span class=\"hue-doc-codeph\">DESCRIBE</span> statement, <span class=\"hue-doc-codeph\">DESCRIBE FORMATTED\n          <span class=\"hue-doc-varname\">table_name</span></span>, displays more detailed information about the table. This\n          information includes the file format, location, delimiter, ownership, external or internal, creation and\n          access times, and partitions. The information is returned as a result set that can be interpreted and\n          used by a management or monitoring application. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_describe.xml\" data-doc-anchor-id=\"describe\">DESCRIBE Statement</a>.\n        </li><li>\n          You can now insert a subset of columns for a table, with other columns being left as all\n          <span class=\"hue-doc-codeph\">NULL</span> values. Or you can specify the columns in any order in the destination table,\n          rather than having to match the order of the corresponding columns in the source. <span class=\"hue-doc-codeph\">VALUES</span>\n          clause. This feature is known as <q>column permutation</q>. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_insert.xml\" data-doc-anchor-id=\"insert\">INSERT Statement</a>.\n        </li><li>\n          The new <span class=\"hue-doc-codeph\">LOAD DATA</span> statement lets you load data into a table directly from an HDFS data\n          file. This technique lets you minimize the number of steps in your ETL process, and provides more\n          flexibility. For example, you can bring data into an Impala table in one step. Formerly, you might have\n          created an external table where the data files are not entirely under your control, or copied the data\n          files to Impala data directories manually, or loaded the original data into one table and then used the\n          <span class=\"hue-doc-codeph\">INSERT</span> statement to copy it to a new table with a different file format, partitioning\n          scheme, and so on. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_load_data.xml\" data-doc-anchor-id=\"load_data\">LOAD DATA Statement</a>.\n        </li><li>\n          Improvements to Impala-HBase integration:\n          <ul><li>\n              New query options for HBase performance:\n              <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_hbase_cache_blocks.xml\" data-doc-anchor-id=\"hbase_cache_blocks\">HBASE_CACHE_BLOCKS</a></span>\n              and <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_hbase_caching.xml\" data-doc-anchor-id=\"hbase_caching\">HBASE_CACHING</a></span>.\n            </li><li>\n              Support for binary data types in HBase tables. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_hbase.xml\" data-doc-anchor-id=\"hbase_types\">Supported Data Types for HBase Columns</a> for\n              details.\n            </li></ul></li><li>\n          You can issue <span class=\"hue-doc-codeph\">REFRESH</span> as a SQL statement through any of the programming interfaces that\n          Impala supports. <span class=\"hue-doc-codeph\">REFRESH</span> formerly had to be issued as a command through the\n          <span class=\"hue-doc-cmdname\">impala-shell</span> interpreter, and was not available through a JDBC or ODBC API call. As\n          part of this change, the functionality of the <span class=\"hue-doc-codeph\">REFRESH</span> statement is divided between two\n          statements. In Impala 1.1, <span class=\"hue-doc-codeph\">REFRESH</span> requires a table name argument and immediately\n          reloads the metadata; the new <span class=\"hue-doc-codeph\">INVALIDATE METADATA</span> statement works the same as the Impala\n          1.0 <span class=\"hue-doc-codeph\">REFRESH</span> did: the table name argument is optional, and the metadata for one or all\n          tables is marked as stale, but not actually reloaded until the table is queried. When you create a new\n          table in the Hive shell or through a different Impala node, you must enter <span class=\"hue-doc-codeph\">INVALIDATE\n          METADATA</span> with no table parameter before you can see the new table in\n          <span class=\"hue-doc-cmdname\">impala-shell</span>. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_refresh.xml\" data-doc-anchor-id=\"refresh\">REFRESH Statement</a> and\n          <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_invalidate_metadata.xml\" data-doc-anchor-id=\"invalidate_metadata\">INVALIDATE METADATA Statement</a>.\n        </li></ul></div></div><div id=\"new_features_101\"><div class=\"hue-doc-title\">New Features in Impala 1.0.1</div><div><p>\n        New user-visible features include:\n      </p><ul><li>\n          The <span class=\"hue-doc-codeph\">VALUES</span> clause lets you <span class=\"hue-doc-codeph\">INSERT</span> one or more rows using literals,\n          function return values, or other expressions. For performance and scalability, you should still use\n          <span class=\"hue-doc-codeph\">INSERT ... SELECT</span> for bringing large quantities of data into an Impala table. The\n          <span class=\"hue-doc-codeph\">VALUES</span> clause is a convenient way to set up small tables, particularly for initial\n          testing of SQL features that do not require large amounts of data. See\n          <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_insert.xml\" data-doc-anchor-id=\"values\">VALUES Clause</a> for details.\n        </li><li>\n          The <span class=\"hue-doc-codeph\">-B</span> and <span class=\"hue-doc-codeph\">-o</span> options of the <span class=\"hue-doc-codeph\">impala-shell</span> command can\n          turn query results into delimited text files and store them in an output file. The plain text results are\n          useful for using with other Hadoop components or Unix tools. In benchmark tests, it is also faster to\n          produce plain rather than pretty-printed results, and write to a file rather than to the screen, giving a\n          more accurate picture of the actual query time.\n        </li><li>\n          Several bug fixes. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_fixed_issues.xml\" data-doc-anchor-id=\"fixed_issues_101\">Issues Fixed in the 1.0.1 Release</a> for details.\n        </li></ul></div></div><div id=\"new_features_10\"><div class=\"hue-doc-title\">New Features in Impala 1.0</div><div><p>\n        This version has multiple performance improvements and adds the following functionality:\n      </p><ul><li>\n          Several bug fixes. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_fixed_issues.xml\" data-doc-anchor-id=\"fixed_issues_10\">Issues Fixed in the 1.0 GA Release</a>.\n        </li><li><span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_alter_table.xml\" data-doc-anchor-id=\"alter_table\">ALTER TABLE</a></span> statement.\n        </li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_hints.xml\" data-doc-anchor-id=\"hints\">Hints</a> to allow specifying a particular join strategy.\n        </li><li><span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_refresh.xml\" data-doc-anchor-id=\"refresh\">REFRESH</a></span> for a single table.\n        </li><li>\n          Dynamic resource management, allowing high concurrency for Impala queries.\n        </li></ul></div></div><div id=\"new_features_07\"><div class=\"hue-doc-title\">New Features in Version 0.7 of the Impala Beta Release</div><div><p>\n        This version has multiple performance improvements and adds the following functionality:\n      </p><ul><li>\n          Several bug fixes. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_fixed_issues.xml\" data-doc-anchor-id=\"fixed_issues_07\">Issues Fixed in Version 0.7 of the Beta Release</a>.\n        </li><li>\n          Support for the Parquet file format. For more information on file formats, see\n          <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_file_formats.xml\" data-doc-anchor-id=\"file_formats\">How Impala Works with Hadoop File Formats</a>.\n        </li><li>\n          Added support for Avro.\n        </li><li>\n          Support for the memory limits. For more information, see the example on modifying memory limits in\n          <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_config_options.html#config_options\" target=\"_blank\">Modifying Impala Startup Options</a>.\n        </li><li>\n          Bigger and faster joins through the addition of partitioned joins to the already supported broadcast\n          joins.\n        </li><li>\n          Fully distributed aggregations.\n        </li><li>\n          Fully distributed top-n computation.\n        </li><li>\n          Support for creating and altering tables.\n        </li><li>\n          Support for GROUP BY with floats and doubles.\n        </li></ul></div></div><div id=\"new_features_06\"><div class=\"hue-doc-title\">New Features in Version 0.6 of the Impala Beta Release</div><div><ul><li>\n          Several bug fixes. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_fixed_issues.xml\" data-doc-anchor-id=\"fixed_issues_06\">Issues Fixed in Version 0.6 of the Beta Release</a>.\n        </li><li>\n          Added support for Impala on SUSE and Debian/Ubuntu. Impala is now supported on:\n          <ul><li>\n              RHEL5.7/6.2 and Centos5.7/6.2\n            </li><li>\n              SUSE 11 with Service Pack 1 or higher\n            </li><li>\n              Ubuntu 10.04/12.04 and Debian 6.03\n            </li></ul></li><li>\n          Support for the RCFile file format. For more information on file formats, see\n          <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_file_formats.xml\" data-doc-anchor-id=\"file_formats\">Understanding File Formats</a>.\n        </li></ul></div></div><div id=\"new_features_05\"><div class=\"hue-doc-title\">New Features in Version 0.5 of the Impala Beta Release</div><div><ul><li>\n          Several bug fixes. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_fixed_issues.xml\" data-doc-anchor-id=\"fixed_issues_05\">Issues Fixed in Version 0.5 of the Beta Release</a>.\n        </li><li>\n          Added support for a JDBC driver that allows you to access Impala from a Java client. To use this feature,\n          follow the instructions in <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_jdbc.xml\" data-doc-anchor-id=\"impala_jdbc\">Configuring Impala to Work with JDBC</a> to install the JDBC\n          driver JARs on the client machine and modify the <span class=\"hue-doc-codeph\">CLASSPATH</span> on the client to include the\n          JARs.\n        </li></ul></div></div><div id=\"new_features_04\"><div class=\"hue-doc-title\">New Features in Version 0.4 of the Impala Beta Release</div><div><ul><li>\n          Several bug fixes. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_fixed_issues.xml\" data-doc-anchor-id=\"fixed_issues_04\">Issues Fixed in Version 0.4 of the Beta Release</a>.\n        </li><li>\n          Added support for Impala on RHEL5.7/Centos5.7. Impala is now supported on RHEL5.7/6.2 and Centos5.7/6.2.\n        </li><li>\n          The Impala debug webserver now has the ability to serve static files from\n          <span class=\"hue-doc-codeph\">${IMPALA_HOME}/www</span>. This can be disabled by setting\n          <span class=\"hue-doc-codeph\">--enable_webserver_doc_root=false</span> on the command line. As a result, Impala now uses the\n          Twitter Bootstrap library to style its debug webpages, and the <span class=\"hue-doc-codeph\">/queries</span> page now tracks\n          the last 25 queries run by each Impala daemon.\n        </li><li>\n          Additional metrics available on the Impala Debug Webpage.\n        </li></ul></div></div><div id=\"new_features_03\"><div class=\"hue-doc-title\">New Features in Version 0.3 of the Impala Beta Release</div><div><ul><li>\n          Several bug fixes. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_fixed_issues.xml\" data-doc-anchor-id=\"fixed_issues_03\">Issues Fixed in Version 0.3 of the Beta Release</a>.\n        </li><li>\n          The <span class=\"hue-doc-codeph\">state-store-service binary</span> has been renamed <span class=\"hue-doc-codeph\">statestored</span>.\n        </li><li>\n          The location of the Impala configuration files has changed from the <span class=\"hue-doc-codeph\">/usr/lib/impala/conf</span>\n          directory to the <span class=\"hue-doc-codeph\">/etc/impala/conf</span> directory.\n        </li></ul></div></div><div id=\"new_features_02\"><div class=\"hue-doc-title\">New Features in Version 0.2 of the Impala Beta Release</div><div><ul><li>\n          Several bug fixes. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_fixed_issues.xml\" data-doc-anchor-id=\"fixed_issues_02\">Issues Fixed in Version 0.2 of the Beta Release</a>.\n        </li><li><b>Added Default Query Options</b> Default query options override all default QueryOption values when\n          starting <span class=\"hue-doc-codeph\">impalad</span>. The format is:\n<div class=\"hue-doc-codeblock\">-default_query_options='key=value;key=value'</div></li></ul></div></div></div></div>","title":"New Features in Apache ImpalaWhat's New in Apache Impala"}