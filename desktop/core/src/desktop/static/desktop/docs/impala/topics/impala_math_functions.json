{"body":"<div><div id=\"math_functions\"><div class=\"hue-doc-title\">Impala Mathematical Functions</div><div><p>\n      Mathematical functions, or arithmetic functions, perform numeric calculations that are\n      typically more complex than basic addition, subtraction, multiplication, and division. For\n      example, these functions include trigonometric, logarithmic, and base conversion\n      operations.\n    </p><div class=\"hue-doc-note\">      In Impala, exponentiation uses the <span class=\"hue-doc-codeph\">pow()</span> function rather than an\n      exponentiation operator such as <span class=\"hue-doc-codeph\">**</span>.\n    </div><p id=\"related_info\"><b>Related information:</b></p><p>\n      The mathematical functions operate mainly on these data types:\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_int.xml\" data-doc-anchor-id=\"int\">INT Data Type</a>, <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_bigint.xml\" data-doc-anchor-id=\"bigint\">BIGINT Data Type</a>,\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_smallint.xml\" data-doc-anchor-id=\"smallint\">SMALLINT Data Type</a>, <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_tinyint.xml\" data-doc-anchor-id=\"tinyint\">TINYINT Data Type</a>,\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_double.xml\" data-doc-anchor-id=\"double\">DOUBLE Data Type</a>, <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_float.xml\" data-doc-anchor-id=\"float\">FLOAT Data Type</a>, and\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_decimal.xml\" data-doc-anchor-id=\"decimal\">DECIMAL Data Type (Impala 3.0 or higher only)</a>. For the operators that perform the standard\n      operations such as addition, subtraction, multiplication, and division, see\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_operators.xml\" data-doc-anchor-id=\"arithmetic_operators\">Arithmetic Operators</a>.\n    </p><p>\n      Functions that perform bitwise operations are explained in\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_bit_functions.xml\" data-doc-anchor-id=\"bit_functions\">Impala Bit Functions</a>.\n    </p><p><b>Function reference:</b></p><p>\n      Impala supports the following mathematical functions:\n    </p><ul><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/abs\">ABS</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/acos\">ACOS</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/asin\">ASIN</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/atan\">ATAN</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/atan2\">ATAN2</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/bin\">BIN</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/ceil\">CEIL, CEILING, DCEIL</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/conv\">CONV</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/cos\">COS</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/cosh\">COSH</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/cot\">COT</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/degrees\">DEGREES</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/e\">E</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/exp\">EXP</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/factorial\">FACTORIAL</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/floor\">FLOOR, DFLOOR</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/fmod\">FMOD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/fnv_hash\">FNV_HASH</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/greatest\">GREATEST</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/hex\">HEX</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/is_inf\">IS_INF</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/is_nan\">IS_NAN</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/least\">LEAST</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/ln\">LN</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/log\">LOG</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/log10\">LOG10</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/log2\">LOG2</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/max_int\">MAX_INT, MAX_TINYINT, MAX_SMALLINT,\n        MAX_BIGINT</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/min_int\">MIN_INT, MIN_TINYINT, MIN_SMALLINT,\n        MIN_BIGINT</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/mod\">MOD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/murmur_hash\">MURMUR_HASH</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/negative\">NEGATIVE</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/pi\">PI</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/pmod\">PMOD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/positive\">POSITIVE</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/pow\">POW, POWER, DPOW, FPOW</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/precision\">PRECISION</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/quotient\">QUOTIENT</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/radians\">RADIANS</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/rand\">RAND, RANDOM</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/round\">ROUND, DROUND</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/scale\">SCALE</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/sign\">SIGN</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/sin\">SIN</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/sinh\">SINH</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/sqrt\">SQRT</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/tan\">TAN</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/tanh\">TANH</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/truncate\">TRUNCATE, DTRUNC, TRUNC</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/unhex\">UNHEX</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions/width_bucket\">WIDTH_BUCKET</a></li></ul><dl><dt id=\"abs\">\n          ABS(numeric_type a)\n        </dt><dd><b>Purpose:</b> Returns the absolute value of the argument.\n          <p id=\"return_type_same\"><b>Return type:</b> Same as the input value\n      </p><p><b>Usage notes:</b> Use this function to ensure all return values are positive. This\n            is different than the <span class=\"hue-doc-codeph\">POSITIVE()</span> function, which returns its\n            argument unchanged (even if the argument was negative).\n          </p></dd><dt id=\"acos\">\n          ACOS(DOUBLE a)\n        </dt><dd><b>Purpose:</b> Returns the arccosine of the argument.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p></dd><dt id=\"asin\">\n          ASIN(DOUBLE a)\n        </dt><dd><b>Purpose:</b> Returns the arcsine of the argument.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p></dd><dt id=\"atan\">\n          ATAN(DOUBLE a)\n        </dt><dd><b>Purpose:</b> Returns the arctangent of the argument.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p></dd><dt id=\"atan2\">\n          ATAN2(DOUBLE a, DOUBLE b)\n        </dt><dd><b>Purpose:</b> Returns the arctangent of the two arguments, with the signs of the\n          arguments used to determine the quadrant of the result.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p></dd><dt id=\"bin\">\n          BIN(BIGINT a)\n        </dt><dd><b>Purpose:</b> Returns the binary representation of an integer value, that is, a\n          string of 0 and 1 digits.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p></dd><dt id=\"ceil\">\n          CEIL(DOUBLE a), CEIL(DECIMAL(p,s) a), CEILING(DOUBLE a), CEILING(DECIMAL(p,s) a),\n          DCEIL(DOUBLE a), DCEIL(DECIMAL(p,s) a)\n        </dt><dd><b>Purpose:</b> Returns the smallest integer that is greater than or equal to the\n          argument.\n          <p><b>Return type:</b> Same as the input value\n          </p></dd><dt id=\"conv\">\n          CONV(BIGINT n, INT from_base, INT to_base), CONV(STRING s, INT from_base, INT to_base)\n        </dt><dd><b>Purpose:</b> Returns a string representation of the first argument converted from\n          <span class=\"hue-doc-codeph\">from_base</span> to <span class=\"hue-doc-codeph\">to_base</span>. The first argument can be\n          specified as a number or a string. For example, <span class=\"hue-doc-codeph\">CONV(100, 2, 10)</span> and\n          <span class=\"hue-doc-codeph\">CONV('100', 2, 10)</span> both return <span class=\"hue-doc-codeph\">'4'</span>.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p><b>Usage notes:</b></p><p>\n            If <span class=\"hue-doc-codeph\">to_base</span> is negative, the first argument is treated as signed,\n            and otherwise, it is treated as unsigned. For example:\n          </p><ul><li><span class=\"hue-doc-codeph\">conv(-17, 10, -2) </span>returns <span class=\"hue-doc-codeph\">'-10001'</span>,<span class=\"hue-doc-codeph\">\n              -17</span> in base 2.\n            </li><li><span class=\"hue-doc-codeph\">conv(-17, 10, 10)</span> returns\n              <span class=\"hue-doc-codeph\">'18446744073709551599'</span>. <span class=\"hue-doc-codeph\">-17</span> is interpreted as an\n              unsigned, 2^64-17, and then the value is returned in base 10.\n            </li></ul><p>\n            The function returns <span class=\"hue-doc-codeph\">NULL</span> when the following illegal arguments are\n            specified:\n          </p><ul><li>\n              Any argument is <span class=\"hue-doc-codeph\">NULL</span>.\n            </li><li><span class=\"hue-doc-codeph\">from_base</span> or <span class=\"hue-doc-codeph\">to_base</span> is below\n              <span class=\"hue-doc-codeph\">-36</span> or above <span class=\"hue-doc-codeph\">36</span>.\n            </li><li><span class=\"hue-doc-codeph\">from_base</span> or <span class=\"hue-doc-codeph\">to_base</span> is <span class=\"hue-doc-codeph\">-1</span>,\n              <span class=\"hue-doc-codeph\">0</span>, or <span class=\"hue-doc-codeph\">1</span>.\n            </li><li>\n              The first argument represents a positive number and <span class=\"hue-doc-codeph\">from_base</span> is\n              a negative number.\n            </li></ul><p>\n            If the first argument represents a negative number and <span class=\"hue-doc-codeph\">from_base</span> is\n            a negative number, the function returns <span class=\"hue-doc-codeph\">0</span>.\n          </p><p>\n            If the first argument represents a number larger than the maximum\n            <span class=\"hue-doc-codeph\">bigint</span>, the function returns:\n          </p><ul><li>\n              The string representation of -1 in <span class=\"hue-doc-codeph\">to_base</span> if\n              <span class=\"hue-doc-codeph\">to_base</span> is negative.\n            </li><li>\n              The string representation of 18446744073709551615' (2^64 - 1) in\n              <span class=\"hue-doc-codeph\">to_base</span> if <span class=\"hue-doc-codeph\">to_base</span> is positive.\n            </li></ul><p>\n            If the first argument does not represent a valid number in\n            <span class=\"hue-doc-codeph\">from_base</span>, e.g. 3 in base 2 or '1a23' in base 10, the digits in the\n            first argument are evaluated from left-to-right and used if a valid digit in\n            <span class=\"hue-doc-codeph\">from_base</span>. The invalid digit and the digits to the right are\n            ignored.\n          </p><p>\n            For example:\n            <ul><li><span class=\"hue-doc-codeph\"> conv(445, 5, 10)</span> is converted to <span class=\"hue-doc-codeph\">conv(44, 5,\n                10)</span> and returns <span class=\"hue-doc-codeph\">'24'</span>.\n              </li><li><span class=\"hue-doc-codeph\"> conv('1a23', 10, 16)</span> is converted to <span class=\"hue-doc-codeph\">conv('1', 10 ,\n                16)</span> and returns <span class=\"hue-doc-codeph\">'1'</span>.\n              </li></ul></p></dd><dt id=\"cos\">\n          COS(DOUBLE a)\n        </dt><dd><b>Purpose:</b> Returns the cosine of the argument.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p></dd><dt id=\"cosh\">\n          COSH(DOUBLE a)\n        </dt><dd><b>Purpose:</b> Returns the hyperbolic cosine of the argument.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p></dd><dt id=\"cot\">\n          COT(DOUBLE a)\n        </dt><dd><b>Purpose:</b> Returns the cotangent of the argument.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p><p id=\"added_in_230\"><b>Added in:</b>Impala 2.3.0</p></dd><dt id=\"degrees\">\n          DEGREES(DOUBLE a)\n        </dt><dd><b>Purpose:</b> Converts argument value from radians to degrees.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p></dd><dt id=\"e\">\n          E()\n        </dt><dd><b>Purpose:</b> Returns the\n          <a class=\"hue-doc-external-link\" href=\"https://en.wikipedia.org/wiki/E_(mathematical_constant)\" target=\"_blank\">mathematical\n          constant e</a>.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p></dd><dt id=\"exp\">\n          EXP(DOUBLE a), DEXP(DOUBLE a)\n        </dt><dd><b>Purpose:</b> Returns the\n          <a class=\"hue-doc-external-link\" href=\"https://en.wikipedia.org/wiki/E_(mathematical_constant)\" target=\"_blank\">mathematical\n          constant e</a> raised to the power of the argument.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p></dd><dt id=\"factorial\">\n          FACTORIAL(integer_type a)\n        </dt><dd><b>Purpose:</b> Computes the\n          <a class=\"hue-doc-external-link\" href=\"https://en.wikipedia.org/wiki/Factorial\" target=\"_blank\">factorial</a>\n          of an integer value. It works with any integer type.\n          <p id=\"added_in_230\"><b>Added in:</b>Impala 2.3.0</p><p><b>Usage notes:</b> You can use either the <span class=\"hue-doc-codeph\">factorial()</span> function or\n            the <span class=\"hue-doc-codeph\">!</span> operator. The factorial of 0 is 1. Likewise, the\n            <span class=\"hue-doc-codeph\">factorial()</span> function returns 1 for any negative value. The maximum\n            positive value for the input argument is 20; a value of 21 or greater overflows the\n            range for a <span class=\"hue-doc-codeph\">BIGINT</span> and causes an error.\n          </p><p><b>Return type:</b><span class=\"hue-doc-codeph\">BIGINT</span></p><p id=\"added_in_230\"><b>Added in:</b>Impala 2.3.0</p><div class=\"hue-doc-codeblock\">select factorial(5);\n+--------------+\n| factorial(5) |\n+--------------+\n| 120          |\n+--------------+\n\nselect 5!;\n+-----+\n| 5!  |\n+-----+\n| 120 |\n+-----+\n\nselect factorial(0);\n+--------------+\n| factorial(0) |\n+--------------+\n| 1            |\n+--------------+\n\nselect factorial(-100);\n+-----------------+\n| factorial(-100) |\n+-----------------+\n| 1               |\n+-----------------+\n</div></dd><dt id=\"floor\">\n          FLOOR(DOUBLE a), FLOOR(DECIMAL(p,s) a), DFLOOR(DOUBLE a), DFLOOR(DECIMAL(p,s) a)\n        </dt><dd><b>Purpose:</b> Returns the largest integer that is less than or equal to the\n          argument.\n          <p><b>Return type:</b> Same as the input type\n          </p></dd><dt id=\"fmod\">\n          FMOD(DOUBLE a, DOUBLE b), FMOD(FLOAT a, FLOAT b)\n        </dt><dd><b>Purpose:</b> Returns the modulus of a floating-point number.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">FLOAT</span> or <span class=\"hue-doc-codeph\">DOUBLE</span>, depending on\n            type of arguments\n          </p><p id=\"added_in_111\"><b>Added in:</b> Impala 1.1.1\n      </p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            Because this function operates on <span class=\"hue-doc-codeph\">DOUBLE</span> or <span class=\"hue-doc-codeph\">FLOAT</span>\n            values, it is subject to potential rounding errors for values that cannot be\n            represented precisely. Prefer to use whole numbers, or values that you know can be\n            represented precisely by the <span class=\"hue-doc-codeph\">DOUBLE</span> or <span class=\"hue-doc-codeph\">FLOAT</span>\n            types.\n          </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following examples show equivalent operations with the <span class=\"hue-doc-codeph\">fmod()</span>\n            function and the <span class=\"hue-doc-codeph\">%</span> arithmetic operator, for values not subject to\n            any rounding error.\n          </p><div class=\"hue-doc-codeblock\">select fmod(10,3);\n+-------------+\n| fmod(10, 3) |\n+-------------+\n| 1           |\n+-------------+\n\nselect fmod(5.5,2);\n+--------------+\n| fmod(5.5, 2) |\n+--------------+\n| 1.5          |\n+--------------+\n\nselect 10 % 3;\n+--------+\n| 10 % 3 |\n+--------+\n| 1      |\n+--------+\n\nselect 5.5 % 2;\n+---------+\n| 5.5 % 2 |\n+---------+\n| 1.5     |\n+---------+\n</div><p>\n            The following examples show operations with the <span class=\"hue-doc-codeph\">fmod()</span> function for\n            values that cannot be represented precisely by the <span class=\"hue-doc-codeph\">DOUBLE</span> or\n            <span class=\"hue-doc-codeph\">FLOAT</span> types, and thus are subject to rounding error.\n            <span class=\"hue-doc-codeph\">fmod(9.9,3.0)</span> returns a value slightly different than the expected\n            0.9 because of rounding. <span class=\"hue-doc-codeph\">fmod(9.9,3.3)</span> returns a value quite\n            different from the expected value of 0 because of rounding error during intermediate\n            calculations.\n          </p><div class=\"hue-doc-codeblock\">select fmod(9.9,3.0);\n+--------------------+\n| fmod(9.9, 3.0)     |\n+--------------------+\n| 0.8999996185302734 |\n+--------------------+\n\nselect fmod(9.9,3.3);\n+-------------------+\n| fmod(9.9, 3.3)    |\n+-------------------+\n| 3.299999713897705 |\n+-------------------+\n</div></dd><dt id=\"fnv_hash\">\n          FNV_HASH(type v),\n        </dt><dd><b>Purpose:</b> Returns a consistent 64-bit value derived from the input argument, for\n          convenience of implementing hashing logic in an application.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">BIGINT</span></p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            You might use the return value in an application where you perform load balancing,\n            bucketing, or some other technique to divide processing or storage.\n          </p><p>\n            Because the result can be any 64-bit value, to restrict the value to a particular\n            range, you can use an expression that includes the <span class=\"hue-doc-codeph\">ABS()</span> function\n            and the <span class=\"hue-doc-codeph\">%</span> (modulo) operator. For example, to produce a hash value\n            in the range 0-9, you could use the expression <span class=\"hue-doc-codeph\">ABS(FNV_HASH(x)) %\n            10</span>.\n          </p><p>\n            This function implements the same algorithm that Impala uses internally for hashing,\n            on systems where the CRC32 instructions are not available.\n          </p><p>\n            This function implements the\n            <a class=\"hue-doc-external-link\" href=\"http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function\" target=\"_blank\">Fowler–Noll–Vo\n            hash function</a>, in particular the FNV-1a variation. This is not a perfect hash\n            function: some combinations of values could produce the same result value. It is not\n            suitable for cryptographic use.\n          </p><p>\n            Similar input values of different types could produce different hash values, for\n            example the same numeric value represented as <span class=\"hue-doc-codeph\">SMALLINT</span> or\n            <span class=\"hue-doc-codeph\">BIGINT</span>, <span class=\"hue-doc-codeph\">FLOAT</span> or <span class=\"hue-doc-codeph\">DOUBLE</span>, or\n            <span class=\"hue-doc-codeph\">DECIMAL(5,2)</span> or <span class=\"hue-doc-codeph\">DECIMAL(20,5)</span>.\n          </p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; create table h (x int, s string);\n[localhost:21000] &gt; insert into h values (0, 'hello'), (1,'world'), (1234567890,'antidisestablishmentarianism');\n[localhost:21000] &gt; select x, fnv_hash(x) from h;\n+------------+----------------------+\n| x          | fnv_hash(x)          |\n+------------+----------------------+\n| 0          | -2611523532599129963 |\n| 1          | 4307505193096137732  |\n| 1234567890 | 3614724209955230832  |\n+------------+----------------------+\n[localhost:21000] &gt; select s, fnv_hash(s) from h;\n+------------------------------+---------------------+\n| s                            | fnv_hash(s)         |\n+------------------------------+---------------------+\n| hello                        | 6414202926103426347 |\n| world                        | 6535280128821139475 |\n| antidisestablishmentarianism | -209330013948433970 |\n+------------------------------+---------------------+\n[localhost:21000] &gt; select s, abs(fnv_hash(s)) % 10 from h;\n+------------------------------+-------------------------+\n| s                            | abs(fnv_hash(s)) % 10.0 |\n+------------------------------+-------------------------+\n| hello                        | 8                       |\n| world                        | 6                       |\n| antidisestablishmentarianism | 4                       |\n+------------------------------+-------------------------+</div><p>\n            For short argument values, the high-order bits of the result have relatively low\n            entropy:\n          </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; create table b (x boolean);\n[localhost:21000] &gt; insert into b values (true), (true), (false), (false);\n[localhost:21000] &gt; select x, fnv_hash(x) from b;\n+-------+---------------------+\n| x     | fnv_hash(x)         |\n+-------+---------------------+\n| true  | 2062020650953872396 |\n| true  | 2062020650953872396 |\n| false | 2062021750465500607 |\n| false | 2062021750465500607 |\n+-------+---------------------+</div><p><b>Added in:</b> Impala 1.2.2\n          </p></dd><dt id=\"greatest\">\n          GREATEST(BIGINT a[, BIGINT b ...]), GREATEST(DOUBLE a[, DOUBLE b ...]),\n          GREATEST(DECIMAL(p,s) a[, DECIMAL(p,s) b ...]), GREATEST(STRING a[, STRING b ...]),\n          GREATEST(TIMESTAMP a[, TIMESTAMP b ...])\n        </dt><dd><b>Purpose:</b> Returns the largest value from a list of expressions.\n          <p id=\"return_same_type\"><b>Return type:</b> same as the initial argument value, except that integer values are\n        promoted to <span class=\"hue-doc-codeph\">BIGINT</span> and floating-point values are promoted to\n        <span class=\"hue-doc-codeph\">DOUBLE</span>; use <span class=\"hue-doc-codeph\">CAST()</span> when inserting into a smaller\n        numeric column\n      </p></dd><dt id=\"hex\">\n          HEX(BIGINT a), HEX(STRING a)\n        </dt><dd><b>Purpose:</b> Returns the hexadecimal representation of an integer value, or of the\n          characters in a string.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p></dd><dt id=\"is_inf\">\n          IS_INF(DOUBLE a)\n        </dt><dd><b>Purpose:</b> Tests whether a value is equal to the special value <q>inf</q>,\n          signifying infinity.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">BOOLEAN</span></p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p id=\"infinity_and_nan\">\n        Infinity and NaN can be specified in text data files as <span class=\"hue-doc-codeph\">inf</span> and\n        <span class=\"hue-doc-codeph\">nan</span> respectively, and Impala interprets them as these special values.\n        They can also be produced by certain arithmetic expressions; for example,\n        <span class=\"hue-doc-codeph\">1/0</span> returns <span class=\"hue-doc-codeph\">Infinity</span> and <span class=\"hue-doc-codeph\">pow(-1, 0.5)</span>\n        returns <span class=\"hue-doc-codeph\">NaN</span>. Or you can cast the literal values, such as\n        <span class=\"hue-doc-codeph\">CAST('nan' AS DOUBLE)</span> or <span class=\"hue-doc-codeph\">CAST('inf' AS DOUBLE)</span>.\n      </p></dd><dt id=\"is_nan\">\n          IS_NAN(DOUBLE a)\n        </dt><dd><b>Purpose:</b> Tests whether a value is equal to the special value <q>NaN</q>,\n          signifying <q>not a number</q>.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">BOOLEAN</span></p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p id=\"infinity_and_nan\">\n        Infinity and NaN can be specified in text data files as <span class=\"hue-doc-codeph\">inf</span> and\n        <span class=\"hue-doc-codeph\">nan</span> respectively, and Impala interprets them as these special values.\n        They can also be produced by certain arithmetic expressions; for example,\n        <span class=\"hue-doc-codeph\">1/0</span> returns <span class=\"hue-doc-codeph\">Infinity</span> and <span class=\"hue-doc-codeph\">pow(-1, 0.5)</span>\n        returns <span class=\"hue-doc-codeph\">NaN</span>. Or you can cast the literal values, such as\n        <span class=\"hue-doc-codeph\">CAST('nan' AS DOUBLE)</span> or <span class=\"hue-doc-codeph\">CAST('inf' AS DOUBLE)</span>.\n      </p></dd><dt id=\"least\">\n          LEAST(BIGINT a[, BIGINT b ...]), LEAST(DOUBLE a[, DOUBLE b ...]), LEAST(DECIMAL(p,s)\n          a[, DECIMAL(p,s) b ...]), LEAST(STRING a[, STRING b ...]), LEAST(TIMESTAMP a[,\n          TIMESTAMP b ...])\n        </dt><dd><b>Purpose:</b> Returns the smallest value from a list of expressions.\n          <p id=\"return_same_type\"><b>Return type:</b> same as the initial argument value, except that integer values are\n        promoted to <span class=\"hue-doc-codeph\">BIGINT</span> and floating-point values are promoted to\n        <span class=\"hue-doc-codeph\">DOUBLE</span>; use <span class=\"hue-doc-codeph\">CAST()</span> when inserting into a smaller\n        numeric column\n      </p></dd><dt id=\"ln\">\n          LN(DOUBLE a), DLOG1(DOUBLE a)\n        </dt><dd><b>Purpose:</b> Returns the\n          <a class=\"hue-doc-external-link\" href=\"https://en.wikipedia.org/wiki/Natural_logarithm\" target=\"_blank\">natural\n          logarithm</a> of the argument.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p></dd><dt id=\"log\">\n          LOG(DOUBLE base, DOUBLE a)\n        </dt><dd><b>Purpose:</b> Returns the logarithm of the second argument to the specified base.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p></dd><dt id=\"log10\">\n          LOG10(DOUBLE a), DLOG10(DOUBLE a)\n        </dt><dd><b>Purpose:</b> Returns the logarithm of the argument to the base 10.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p></dd><dt id=\"log2\">\n          LOG2(DOUBLE a)\n        </dt><dd><b>Purpose:</b> Returns the logarithm of the argument to the base 2.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p></dd><dt id=\"max_int\">\n          MAX_INT(), MAX_TINYINT(), MAX_SMALLINT(), MAX_BIGINT()\n        </dt><dd><b>Purpose:</b> Returns the largest value of the associated integral type.\n          <p><b>Return type:</b> The same as the integral type being checked.\n          </p><p><b>Usage notes:</b> Use the corresponding <span class=\"hue-doc-codeph\">min_</span> and\n            <span class=\"hue-doc-codeph\">max_</span> functions to check if all values in a column are within the\n            allowed range, before copying data or altering column definitions. If not, switch to\n            the next higher integral type or to a <span class=\"hue-doc-codeph\">DECIMAL</span> with sufficient\n            precision.\n          </p></dd><dt id=\"min_int\">\n          MIN_INT(), MIN_TINYINT(), MIN_SMALLINT(), MIN_BIGINT()\n        </dt><dd><b>Purpose:</b> Returns the smallest value of the associated integral type (a negative\n          number).\n          <p><b>Return type:</b> The same as the integral type being checked.\n          </p><p><b>Usage notes:</b> Use the corresponding <span class=\"hue-doc-codeph\">min_</span> and\n            <span class=\"hue-doc-codeph\">max_</span> functions to check if all values in a column are within the\n            allowed range, before copying data or altering column definitions. If not, switch to\n            the next higher integral type or to a <span class=\"hue-doc-codeph\">DECIMAL</span> with sufficient\n            precision.\n          </p></dd><dt id=\"mod\">\n          MOD(numeric_type a, same_type b)\n        </dt><dd><b>Purpose:</b> Returns the modulus of a number. Equivalent to the <span class=\"hue-doc-codeph\">%</span>\n          arithmetic operator. Works with any size integer type, any size floating-point type,\n          and <span class=\"hue-doc-codeph\">DECIMAL</span> with any precision and scale.\n          <p id=\"return_type_same\"><b>Return type:</b> Same as the input value\n      </p><p id=\"added_in_220\"><b>Added in:</b>Impala 2.2.0</p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            Because this function works with <span class=\"hue-doc-codeph\">DECIMAL</span> values, prefer it over\n            <span class=\"hue-doc-codeph\">fmod()</span> when working with fractional values. It is not subject to\n            the rounding errors that make <span class=\"hue-doc-codeph\">fmod()</span> problematic with\n            floating-point numbers.\n          </p><p>\n            Query plans shows the <span class=\"hue-doc-codeph\">MOD()</span> function as the <span class=\"hue-doc-codeph\">%</span>\n            operator.\n          </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following examples show how the <span class=\"hue-doc-codeph\">mod()</span> function works for whole\n            numbers and fractional values, and how the <span class=\"hue-doc-codeph\">%</span> operator works the\n            same way. In the case of <span class=\"hue-doc-codeph\">mod(9.9,3)</span>, the type conversion for the\n            second argument results in the first argument being interpreted as\n            <span class=\"hue-doc-codeph\">DOUBLE</span>, so to produce an accurate <span class=\"hue-doc-codeph\">DECIMAL</span> result\n            requires casting the second argument or writing it as a <span class=\"hue-doc-codeph\">DECIMAL</span>\n            literal, 3.0.\n          </p><div class=\"hue-doc-codeblock\">select mod(10,3);\n+-------------+\n| mod(10, 3) |\n+-------------+\n| 1           |\n+-------------+\n\nselect mod(5.5,2);\n+--------------+\n| mod(5.5, 2) |\n+--------------+\n| 1.5          |\n+--------------+\n\nselect 10 % 3;\n+--------+\n| 10 % 3 |\n+--------+\n| 1      |\n+--------+\n\nselect 5.5 % 2;\n+---------+\n| 5.5 % 2 |\n+---------+\n| 1.5     |\n+---------+\n\nselect mod(9.9,3.3);\n+---------------+\n| mod(9.9, 3.3) |\n+---------------+\n| 0.0           |\n+---------------+\n\nselect mod(9.9,3);\n+--------------------+\n| mod(9.9, 3)        |\n+--------------------+\n| 0.8999996185302734 |\n+--------------------+\n\nselect mod(9.9, cast(3 as decimal(2,1)));\n+-----------------------------------+\n| mod(9.9, cast(3 as decimal(2,1))) |\n+-----------------------------------+\n| 0.9                               |\n+-----------------------------------+\n\nselect mod(9.9,3.0);\n+---------------+\n| mod(9.9, 3.0) |\n+---------------+\n| 0.9           |\n+---------------+\n</div></dd><dt id=\"murmur_hash\">\n          MURMUR_HASH(type v)\n        </dt><dd><b>Purpose:</b> Returns a consistent 64-bit value derived from the input argument, for\n          convenience of implementing <a class=\"hue-doc-external-link\" href=\"https://en.wikipedia.org/wiki/MurmurHash\" target=\"_blank\"> MurmurHash2</a>\n          non-cryptographic hash function.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">BIGINT</span></p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            You might use the return value in an application where you perform load balancing,\n            bucketing, or some other technique to divide processing or storage. This function\n            provides a good performance for all kinds of keys such as number, ascii string and\n            UTF-8. It can be recommended as general-purpose hashing function.\n          </p><p>\n            Regarding comparison of murmur_hash with fnv_hash, murmur_hash is based on Murmur2\n            hash algorithm and fnv_hash function is based on FNV-1a hash algorithm. Murmur2 and\n            FNV-1a can show very good randomness and performance compared with well known other\n            hash algorithms, but Murmur2 slightly show better randomness and performance than\n            FNV-1a. See\n            <a class=\"hue-doc-external-link\" href=\"https://www.strchr.com/hash_functions\" target=\"_blank\">[1]</a><a class=\"hue-doc-external-link\" href=\"https://aras-p.info/blog/2016/08/09/More-Hash-Function-Tests\" target=\"_blank\">[2]</a><a class=\"hue-doc-external-link\" href=\"https://www.strchr.com/hash_functions\" target=\"_blank\">[3]</a>\n            for details.\n          </p><p>\n            Similar input values of different types could produce different hash values, for\n            example the same numeric value represented as <span class=\"hue-doc-codeph\">SMALLINT</span> or\n            <span class=\"hue-doc-codeph\">BIGINT</span>, <span class=\"hue-doc-codeph\">FLOAT</span> or <span class=\"hue-doc-codeph\">DOUBLE</span>, or\n            <span class=\"hue-doc-codeph\">DECIMAL(5,2)</span> or <span class=\"hue-doc-codeph\">DECIMAL(20,5)</span>.\n          </p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; create table h (x int, s string);\n[localhost:21000] &gt; insert into h values (0, 'hello'), (1,'world'), (1234567890,'antidisestablishmentarianism');\n[localhost:21000] &gt; select x, murmur_hash(x) from h;\n+------------+----------------------+\n| x          | murmur_hash(x)       |\n+------------+----------------------+\n| 0          | 6960269033020761575  |\n| 1          | -780611581681153783  |\n| 1234567890 | -5754914572385924334 |\n+------------+----------------------+\n[localhost:21000] &gt; select s, murmur_hash(s) from h;\n+------------------------------+----------------------+\n| s                            | murmur_hash(s)       |\n+------------------------------+----------------------+\n| hello                        | 2191231550387646743  |\n| world                        | 5568329560871645431  |\n| antidisestablishmentarianism | -2261804666958489663 |\n+------------------------------+----------------------+ </div><p>\n            For short argument values, the high-order bits of the result have relatively higher\n            entropy than fnv_hash:\n          </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; create table b (x boolean);\n[localhost:21000] &gt; insert into b values (true), (true), (false), (false);\n[localhost:21000] &gt; select x, murmur_hash(x) from b;\n+-------+----------------------+\n| x     | murmur_hash(x)       |\n+-------+---------------------++\n| true  | -5720937396023583481 |\n| true  | -5720937396023583481 |\n| false | 6351753276682545529  |\n| false | 6351753276682545529  |\n+-------+--------------------+-+</div><p><b>Added in:</b> Impala 2.12.0\n          </p></dd><dt id=\"negative\">\n          NEGATIVE(numeric_type a)\n        </dt><dd><b>Purpose:</b> Returns the argument with the sign reversed; returns a positive value\n          if the argument was already negative.\n          <p id=\"return_type_same\"><b>Return type:</b> Same as the input value\n      </p><p><b>Usage notes:</b> Use <span class=\"hue-doc-codeph\">-ABS(a)</span> instead if you need to ensure all\n            return values are negative.\n          </p></dd><dt id=\"pi\">\n          PI()\n        </dt><dd><b>Purpose:</b> Returns the constant pi.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p></dd><dt id=\"pmod\">\n          PMOD(BIGINT a, BIGINT b), PMOD(DOUBLE a, DOUBLE b)\n        </dt><dd><b>Purpose:</b> Returns the positive modulus of a number. Primarily for\n          <a class=\"hue-doc-external-link\" href=\"https://issues.apache.org/jira/browse/HIVE-656\" target=\"_blank\">HiveQL\n          compatibility</a>.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span> or <span class=\"hue-doc-codeph\">DOUBLE</span>, depending on\n            type of arguments\n          </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following examples show how the <span class=\"hue-doc-codeph\">FMOD()</span> function sometimes\n            returns a negative value depending on the sign of its arguments, and the\n            <span class=\"hue-doc-codeph\">PMOD()</span> function returns the same value as <span class=\"hue-doc-codeph\">FMOD()</span>,\n            but sometimes with the sign flipped.\n          </p><div class=\"hue-doc-codeblock\">select fmod(-5,2);\n+-------------+\n| fmod(-5, 2) |\n+-------------+\n| -1          |\n+-------------+\n\nselect pmod(-5,2);\n+-------------+\n| pmod(-5, 2) |\n+-------------+\n| 1           |\n+-------------+\n\nselect fmod(-5,-2);\n+--------------+\n| fmod(-5, -2) |\n+--------------+\n| -1           |\n+--------------+\n\nselect pmod(-5,-2);\n+--------------+\n| pmod(-5, -2) |\n+--------------+\n| -1           |\n+--------------+\n\nselect fmod(5,-2);\n+-------------+\n| fmod(5, -2) |\n+-------------+\n| 1           |\n+-------------+\n\nselect pmod(5,-2);\n+-------------+\n| pmod(5, -2) |\n+-------------+\n| -1          |\n+-------------+\n</div></dd><dt id=\"positive\">\n          POSITIVE(numeric_type a)\n        </dt><dd><b>Purpose:</b> Returns the original argument unchanged (even if the argument is\n          negative).\n          <p id=\"return_type_same\"><b>Return type:</b> Same as the input value\n      </p><p><b>Usage notes:</b> Use <span class=\"hue-doc-codeph\">ABS()</span> instead if you need to ensure all\n            return values are positive.\n          </p></dd><dt id=\"pow\">\n          POW(DOUBLE a, DOUBLE p), POWER(DOUBLE a, DOUBLE p), DPOW(DOUBLE a, DOUBLE p),\n          FPOW(DOUBLE a, DOUBLE p)\n        </dt><dd><b>Purpose:</b> Returns the first argument raised to the power of the second argument.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p></dd><dt id=\"precision\">\n          PRECISION(numeric_expression)\n        </dt><dd><b>Purpose:</b> Computes the precision (number of decimal digits) needed to represent\n          the type of the argument expression as a <span class=\"hue-doc-codeph\">DECIMAL</span> value.\n          <p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            Typically used in combination with the <span class=\"hue-doc-codeph\">SCALE()</span> function, to\n            determine the appropriate\n            <span class=\"hue-doc-codeph\">DECIMAL(<span class=\"hue-doc-varname\">precision</span>,<span class=\"hue-doc-varname\">scale</span>)</span> type\n            to declare in a <span class=\"hue-doc-codeph\">CREATE TABLE</span> statement or <span class=\"hue-doc-codeph\">CAST()</span>\n            function.\n          </p><p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p><p id=\"example_blurb\"><b>Examples:</b></p><p id=\"precision_scale_example\">\n        The following examples demonstrate how to check the precision and scale of numeric\n        literals or other numeric expressions. Impala represents numeric literals in the\n        smallest appropriate type. 5 is a <span class=\"hue-doc-codeph\">TINYINT</span> value, which ranges from -128\n        to 127, therefore 3 decimal digits are needed to represent the entire range, and because\n        it is an integer value there are no fractional digits. 1.333 is interpreted as a\n        <span class=\"hue-doc-codeph\">DECIMAL</span> value, with 4 digits total and 3 digits after the decimal\n        point.\n<div class=\"hue-doc-codeblock\">[localhost:21000] &gt; select precision(5), scale(5);\n+--------------+----------+\n| precision(5) | scale(5) |\n+--------------+----------+\n| 3            | 0        |\n+--------------+----------+\n[localhost:21000] &gt; select precision(1.333), scale(1.333);\n+------------------+--------------+\n| precision(1.333) | scale(1.333) |\n+------------------+--------------+\n| 4                | 3            |\n+------------------+--------------+\n[localhost:21000] &gt; with t1 as\n  ( select cast(12.34 as decimal(20,2)) x union select cast(1 as decimal(8,6)) x )\n  select precision(x), scale(x) from t1 limit 1;\n+--------------+----------+\n| precision(x) | scale(x) |\n+--------------+----------+\n| 24           | 6        |\n+--------------+----------+\n</div></p></dd><dt id=\"quotient\">\n          QUOTIENT(BIGINT numerator, BIGINT denominator), QUOTIENT(DOUBLE numerator, DOUBLE\n          denominator)\n        </dt><dd><b>Purpose:</b> Returns the first argument divided by the second argument, discarding\n          any fractional part. Avoids promoting integer arguments to <span class=\"hue-doc-codeph\">DOUBLE</span> as\n          happens with the <span class=\"hue-doc-codeph\">/</span> SQL operator. <span class=\"hue-doc-ph\">Also includes\n          an overload that accepts <span class=\"hue-doc-codeph\">DOUBLE</span> arguments, discards the fractional\n          part of each argument value before dividing, and again returns\n          <span class=\"hue-doc-codeph\">BIGINT</span>. With integer arguments, this function works the same as the\n          <span class=\"hue-doc-codeph\">DIV</span> operator.</span><p><b>Return type:</b><span class=\"hue-doc-codeph\">BIGINT</span></p></dd><dt id=\"radians\">\n          RADIANS(DOUBLE a)\n        </dt><dd><b>Purpose:</b> Converts argument value from degrees to radians.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p></dd><dt id=\"rand\">\n          RAND(), RAND(BIGINT seed), RANDOM(), RANDOM(BIGINT seed)\n        </dt><dd><b>Purpose:</b> Returns a random value between 0 and 1. After <span class=\"hue-doc-codeph\">RAND()</span>\n          is called with a seed argument, it produces a consistent random sequence based on the\n          seed value.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p><p><b>Usage notes:</b> Currently, the random sequence is reset after each query, and\n            multiple calls to <span class=\"hue-doc-codeph\">RAND()</span> within the same query return the same\n            value each time. For different number sequences that are different for each query,\n            pass a unique seed value to each call to <span class=\"hue-doc-codeph\">RAND()</span>. For example,\n            <span class=\"hue-doc-codeph\">SELECT RAND(UNIX_TIMESTAMP()) FROM ...</span></p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following examples show how <span class=\"hue-doc-codeph\">rand()</span> can produce sequences of\n            varying predictability, so that you can reproduce query results involving random\n            values or generate unique sequences of random values for each query. When\n            <span class=\"hue-doc-codeph\">rand()</span> is called with no argument, it generates the same sequence\n            of values each time, regardless of the ordering of the result set. When\n            <span class=\"hue-doc-codeph\">rand()</span> is called with a constant integer, it generates a different\n            sequence of values, but still always the same sequence for the same seed value. If\n            you pass in a seed value that changes, such as the return value of the expression\n            <span class=\"hue-doc-codeph\">unix_timestamp(now())</span>, each query will use a different sequence of\n            random values, potentially more useful in probability calculations although more\n            difficult to reproduce at a later time. Therefore, the final two examples with an\n            unpredictable seed value also include the seed in the result set, to make it\n            possible to reproduce the same random sequence later.\n          </p><div class=\"hue-doc-codeblock\">select x, rand() from three_rows;\n+---+-----------------------+\n| x | rand()                |\n+---+-----------------------+\n| 1 | 0.0004714746030380365 |\n| 2 | 0.5895895192351144    |\n| 3 | 0.4431900859080209    |\n+---+-----------------------+\n\nselect x, rand() from three_rows order by x desc;\n+---+-----------------------+\n| x | rand()                |\n+---+-----------------------+\n| 3 | 0.0004714746030380365 |\n| 2 | 0.5895895192351144    |\n| 1 | 0.4431900859080209    |\n+---+-----------------------+\n\nselect x, rand(1234) from three_rows order by x;\n+---+----------------------+\n| x | rand(1234)           |\n+---+----------------------+\n| 1 | 0.7377511392057646   |\n| 2 | 0.009428468537250751 |\n| 3 | 0.208117277924026    |\n+---+----------------------+\n\nselect x, rand(1234) from three_rows order by x desc;\n+---+----------------------+\n| x | rand(1234)           |\n+---+----------------------+\n| 3 | 0.7377511392057646   |\n| 2 | 0.009428468537250751 |\n| 1 | 0.208117277924026    |\n+---+----------------------+\n\nselect x, unix_timestamp(now()), rand(unix_timestamp(now()))\n  from three_rows order by x;\n+---+-----------------------+-----------------------------+\n| x | unix_timestamp(now()) | rand(unix_timestamp(now())) |\n+---+-----------------------+-----------------------------+\n| 1 | 1440777752            | 0.002051228658320023        |\n| 2 | 1440777752            | 0.5098743483004506          |\n| 3 | 1440777752            | 0.9517714925817081          |\n+---+-----------------------+-----------------------------+\n\nselect x, unix_timestamp(now()), rand(unix_timestamp(now()))\n  from three_rows order by x desc;\n+---+-----------------------+-----------------------------+\n| x | unix_timestamp(now()) | rand(unix_timestamp(now())) |\n+---+-----------------------+-----------------------------+\n| 3 | 1440777761            | 0.9985985015512437          |\n| 2 | 1440777761            | 0.3251255333074953          |\n| 1 | 1440777761            | 0.02422675025846192         |\n+---+-----------------------+-----------------------------+\n</div></dd><dt id=\"round\">\n          ROUND(DOUBLE a), ROUND(DOUBLE a, INT d), ROUND(DECIMAL a, int_type d), DROUND(DOUBLE\n          a), DROUND(DOUBLE a, INT d), DROUND(DECIMAL(p,s) a, int_type d)\n        </dt><dd><b>Purpose:</b> Rounds a floating-point value. By default (with a single argument),\n          rounds to the nearest integer. Values ending in .5 are rounded up for positive\n          numbers, down for negative numbers (that is, away from zero). The optional second\n          argument specifies how many digits to leave after the decimal point; values greater\n          than zero produce a floating-point return value rounded to the requested number of\n          digits to the right of the decimal point.\n          <p><b>Return type:</b> Same as the input type\n          </p></dd><dt id=\"scale\">\n          SCALE(numeric_expression)\n        </dt><dd><b>Purpose:</b> Computes the scale (number of decimal digits to the right of the\n          decimal point) needed to represent the type of the argument expression as a\n          <span class=\"hue-doc-codeph\">DECIMAL</span> value.\n          <p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            Typically used in combination with the <span class=\"hue-doc-codeph\">PRECISION()</span> function, to\n            determine the appropriate\n            <span class=\"hue-doc-codeph\">DECIMAL(<span class=\"hue-doc-varname\">precision</span>,<span class=\"hue-doc-varname\">scale</span>)</span> type\n            to declare in a <span class=\"hue-doc-codeph\">CREATE TABLE</span> statement or <span class=\"hue-doc-codeph\">CAST()</span>\n            function.\n          </p><p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p><p id=\"example_blurb\"><b>Examples:</b></p><p id=\"precision_scale_example\">\n        The following examples demonstrate how to check the precision and scale of numeric\n        literals or other numeric expressions. Impala represents numeric literals in the\n        smallest appropriate type. 5 is a <span class=\"hue-doc-codeph\">TINYINT</span> value, which ranges from -128\n        to 127, therefore 3 decimal digits are needed to represent the entire range, and because\n        it is an integer value there are no fractional digits. 1.333 is interpreted as a\n        <span class=\"hue-doc-codeph\">DECIMAL</span> value, with 4 digits total and 3 digits after the decimal\n        point.\n<div class=\"hue-doc-codeblock\">[localhost:21000] &gt; select precision(5), scale(5);\n+--------------+----------+\n| precision(5) | scale(5) |\n+--------------+----------+\n| 3            | 0        |\n+--------------+----------+\n[localhost:21000] &gt; select precision(1.333), scale(1.333);\n+------------------+--------------+\n| precision(1.333) | scale(1.333) |\n+------------------+--------------+\n| 4                | 3            |\n+------------------+--------------+\n[localhost:21000] &gt; with t1 as\n  ( select cast(12.34 as decimal(20,2)) x union select cast(1 as decimal(8,6)) x )\n  select precision(x), scale(x) from t1 limit 1;\n+--------------+----------+\n| precision(x) | scale(x) |\n+--------------+----------+\n| 24           | 6        |\n+--------------+----------+\n</div></p></dd><dt id=\"sign\">\n          SIGN(DOUBLE a)\n        </dt><dd><b>Purpose:</b> Returns -1, 0, or 1 to indicate the signedness of the argument value.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p></dd><dt id=\"sin\">\n          SIN(DOUBLE a)\n        </dt><dd><b>Purpose:</b> Returns the sine of the argument.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p></dd><dt id=\"sinh\">\n          SINH(DOUBLE a)\n        </dt><dd><b>Purpose:</b> Returns the hyperbolic sine of the argument.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p></dd><dt id=\"sqrt\">\n          SQRT(DOUBLE a), DSQRT(DOUBLE a)\n        </dt><dd><b>Purpose:</b> Returns the square root of the argument.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p></dd><dt id=\"tan\">\n          TAN(DOUBLE a)\n        </dt><dd><b>Purpose:</b> Returns the tangent of the argument.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p></dd><dt id=\"tanh\">\n          TANH(DOUBLE a)\n        </dt><dd><b>Purpose:</b> Returns the hyperbolic tangent of the argument.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p></dd><dt id=\"truncate\">\n          TRUNCATE(DOUBLE_or_DECIMAL a[, digits_to_leave]), DTRUNC(DOUBLE_or_DECIMAL a[,\n          digits_to_leave]), TRUNC(DOUBLE_or_DECIMAL a[, digits_to_leave])\n        </dt><dd><b>Purpose:</b> Removes some or all fractional digits from a numeric value.\n          <p><b>Arguments:</b> With a single floating-point argument, removes all fractional\n            digits, leaving an integer value. The optional second argument specifies the number\n            of fractional digits to include in the return value, and only applies when the\n            argument type is <span class=\"hue-doc-codeph\">DECIMAL</span>. A second argument of 0 truncates to a\n            whole integer value. A second argument of negative N sets N digits to 0 on the left\n            side of the decimal\n          </p><p><b>Scale argument:</b> The scale argument applies only when truncating\n            <span class=\"hue-doc-codeph\">DECIMAL</span> values. It is an integer specifying how many significant\n            digits to leave to the right of the decimal point. A scale argument of 0 truncates\n            to a whole integer value. A scale argument of negative N sets N digits to 0 on the\n            left side of the decimal point.\n          </p><p><span class=\"hue-doc-codeph\">TRUNCATE()</span>, <span class=\"hue-doc-codeph\">DTRUNC()</span>,\n            <span class=\"hue-doc-ph\">and <span class=\"hue-doc-codeph\">TRUNC()</span></span> are\n            aliases for the same function.\n          </p><p><b>Return type:</b> Same as the input type\n          </p><p><b>Added in:</b> The <span class=\"hue-doc-codeph\">TRUNC()</span> alias was added in\n            Impala 2.10.\n          </p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            You can also pass a <span class=\"hue-doc-codeph\">DOUBLE</span> argument, or <span class=\"hue-doc-codeph\">DECIMAL</span>\n            argument with optional scale, to the <span class=\"hue-doc-codeph\">DTRUNC()</span> or\n            <span class=\"hue-doc-codeph\">TRUNCATE</span> functions. Using the <span class=\"hue-doc-codeph\">TRUNC()</span> function for\n            numeric values is common with other industry-standard database systems, so you might\n            find such <span class=\"hue-doc-codeph\">TRUNC()</span> calls in code that you are porting to Impala.\n          </p><p>\n            The <span class=\"hue-doc-codeph\">TRUNC()</span> function also has a signature that applies to\n            <span class=\"hue-doc-codeph\">TIMESTAMP</span> values. See\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions\">Impala Date and Time Functions</a> for details.\n          </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following examples demonstrate the <span class=\"hue-doc-codeph\">TRUNCATE()</span> and\n            <span class=\"hue-doc-codeph\">DTRUNC()</span> signatures for this function:\n          </p><div class=\"hue-doc-codeblock\">select truncate(3.45);\n+----------------+\n| truncate(3.45) |\n+----------------+\n| 3              |\n+----------------+\n\nselect truncate(-3.45);\n+-----------------+\n| truncate(-3.45) |\n+-----------------+\n| -3              |\n+-----------------+\n\nselect truncate(3.456,1);\n+--------------------+\n| truncate(3.456, 1) |\n+--------------------+\n| 3.4                |\n+--------------------+\n\nselect dtrunc(3.456,1);\n+------------------+\n| dtrunc(3.456, 1) |\n+------------------+\n| 3.4              |\n+------------------+\n\nselect truncate(3.456,2);\n+--------------------+\n| truncate(3.456, 2) |\n+--------------------+\n| 3.45               |\n+--------------------+\n\nselect truncate(3.456,7);\n+--------------------+\n| truncate(3.456, 7) |\n+--------------------+\n| 3.4560000          |\n+--------------------+\n</div><p>\n            The following examples demonstrate using <span class=\"hue-doc-codeph\">trunc()</span> with\n            <span class=\"hue-doc-codeph\">DECIMAL</span> or <span class=\"hue-doc-codeph\">DOUBLE</span> values, and with an optional\n            scale argument for <span class=\"hue-doc-codeph\">DECIMAL</span> values. (The behavior is the same for\n            the <span class=\"hue-doc-codeph\">truncate()</span> and <span class=\"hue-doc-codeph\">dtrunc()</span> aliases also.)\n          </p><div class=\"hue-doc-codeblock\">create table t1 (d decimal(20,7));\n\n-- By default, no digits to the right of the decimal point.\ninsert into t1 values (1.1), (2.22), (3.333), (4.4444), (5.55555);\nselect trunc(d) from t1 order by d;\n+----------+\n| trunc(d) |\n+----------+\n| 1        |\n| 2        |\n| 3        |\n| 4        |\n| 5        |\n+----------+\n\n-- 1 digit to the right of the decimal point.\nselect trunc(d,1) from t1 order by d;\n+-------------+\n| trunc(d, 1) |\n+-------------+\n| 1.1         |\n| 2.2         |\n| 3.3         |\n| 4.4         |\n| 5.5         |\n+-------------+\n\n-- 2 digits to the right of the decimal point,\n-- including trailing zeroes if needed.\nselect trunc(d,2) from t1 order by d;\n+-------------+\n| trunc(d, 2) |\n+-------------+\n| 1.10        |\n| 2.22        |\n| 3.33        |\n| 4.44        |\n| 5.55        |\n+-------------+\n\ninsert into t1 values (9999.9999), (8888.8888);\n\n-- Negative scale truncates digits to the left\n-- of the decimal point.\nselect trunc(d,-2) from t1 where d &gt; 100 order by d;\n+--------------+\n| trunc(d, -2) |\n+--------------+\n| 8800         |\n| 9900         |\n+--------------+\n\n-- The scale of the result is adjusted to match the\n-- scale argument.\nselect trunc(d,2),\n  precision(trunc(d,2)) as p,\n  scale(trunc(d,2)) as s\nfrom t1 order by d;\n+-------------+----+---+\n| trunc(d, 2) | p  | s |\n+-------------+----+---+\n| 1.10        | 15 | 2 |\n| 2.22        | 15 | 2 |\n| 3.33        | 15 | 2 |\n| 4.44        | 15 | 2 |\n| 5.55        | 15 | 2 |\n| 8888.88     | 15 | 2 |\n| 9999.99     | 15 | 2 |\n+-------------+----+---+\n</div><div class=\"hue-doc-codeblock\">create table dbl (d double);\n\ninsert into dbl values\n  (1.1), (2.22), (3.333), (4.4444), (5.55555),\n  (8888.8888), (9999.9999);\n\n-- With double values, there is no optional scale argument.\nselect trunc(d) from dbl order by d;\n+----------+\n| trunc(d) |\n+----------+\n| 1        |\n| 2        |\n| 3        |\n| 4        |\n| 5        |\n| 8888     |\n| 9999     |\n+----------+\n</div></dd><dt id=\"unhex\">\n          UNHEX(STRING a)\n        </dt><dd><b>Purpose:</b> Returns a string of characters with ASCII values corresponding to\n          pairs of hexadecimal digits in the argument.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p></dd><dt id=\"width_bucket\">\n          WIDTH_BUCKET(DECIMAL expr, DECIMAL min_value, DECIMAL max_value, INT num_buckets)\n        </dt><dd><b>Purpose:</b> Returns the bucket number in which the <span class=\"hue-doc-codeph\">expr</span> value\n          would fall in the histogram where its range between <span class=\"hue-doc-codeph\">min_value</span> and\n          <span class=\"hue-doc-codeph\">max_value</span> is divided into <span class=\"hue-doc-codeph\">num_buckets</span> buckets of\n          identical sizes.\n        </dd><dd>\n          The function returns:\n          <ul><li><span class=\"hue-doc-codeph\">NULL</span> if any argument is <span class=\"hue-doc-codeph\">NULL</span>.\n            </li><li><span class=\"hue-doc-codeph\">0</span> if <span class=\"hue-doc-codeph\">expr</span> &lt; <span class=\"hue-doc-codeph\">min_value</span>.\n            </li><li><span class=\"hue-doc-codeph\">num_buckets + 1</span> if <span class=\"hue-doc-codeph\">expr</span> &gt;=\n              <span class=\"hue-doc-codeph\">max_val</span>.\n            </li><li>\n              If none of the above, the bucket number where <span class=\"hue-doc-codeph\">expr</span> falls.\n            </li></ul><p><b>Arguments:</b>The following rules apply to the arguments.\n            <ul><li><span class=\"hue-doc-codeph\">min_val</span> is the minimum value of the histogram range.\n              </li><li><span class=\"hue-doc-codeph\">max_val</span> is the maximum value of the histogram range.\n              </li><li><span class=\"hue-doc-codeph\">num_buckets</span> must be greater than <span class=\"hue-doc-codeph\">0</span>.\n              </li><li><span class=\"hue-doc-codeph\">min_value</span> must be less than <span class=\"hue-doc-codeph\">max_value</span>.\n              </li></ul></p><p><b>Usage notes:</b></p><p>\n            Each bucket contains values equal to or greater than the base value of that bucket\n            and less than the base value of the next bucket. For example, with\n            <span class=\"hue-doc-codeph\">width_bucket(8, 1, 10, 3)</span>, the bucket ranges are actually the 0th\n            \"underflow bucket\" with the range (-infinity to 0.999...), (1 to 3.999...), (4, to\n            6.999...), (7 to 9.999...), and the \"overflow bucket\" with the range (10 to\n            infinity).\n          </p><p><b>Return type:</b><span class=\"hue-doc-codeph\">BIGINT</span></p><p><b>Added in:</b>Impala 3.1.\n          </p><p><b>Examples:</b></p><p>\n            The below function creates <span class=\"hue-doc-codeph\">3</span> buckets between the range of\n            <span class=\"hue-doc-codeph\">1</span> and <span class=\"hue-doc-codeph\">20</span> with the bucket width of 6.333, and\n            returns <span class=\"hue-doc-codeph\">2</span> for the bucket #2 where the value <span class=\"hue-doc-codeph\">8</span>\n            falls in:\n<div class=\"hue-doc-codeblock\">width_bucket(8, 1, 20, 3)</div></p><p>\n            The below statement returns a list of accounts with the energy spending and the\n            spending bracket each account falls in, between 0 and 11. Bucket 0 (underflow\n            bucket) will be assigned to the accounts whose energy spendings are less than $50.\n            Bucket 11 (overflow bucket) will be assigned to the accounts whose energy spendings\n            are more than or equal to $1000.\n          </p><div class=\"hue-doc-codeblock\">SELECT account, invoice_amount, WIDTH_BUCKET(invoice_amount,50,1000,10)\nFROM invoices_june2018\nORDER BY 3;</div></dd></dl></div></div></div>","title":"Impala Mathematical Functions"}