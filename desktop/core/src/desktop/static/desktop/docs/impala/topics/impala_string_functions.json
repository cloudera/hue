{"body":"<div><div id=\"string_functions\"><div class=\"hue-doc-title\">Impala String Functions</div><div><p>\n      String functions are classified as those primarily accepting or returning\n      <span class=\"hue-doc-codeph\">STRING</span>, <span class=\"hue-doc-codeph\">VARCHAR</span>, or <span class=\"hue-doc-codeph\">CHAR</span> data types,\n      for example to measure the length of a string or concatenate two strings together.\n      <ul><li>\n          All the functions that accept <span class=\"hue-doc-codeph\">STRING</span> arguments also accept the\n          <span class=\"hue-doc-codeph\">VARCHAR</span> and <span class=\"hue-doc-codeph\">CHAR</span> types introduced in Impala 2.0.\n        </li><li>\n          Whenever <span class=\"hue-doc-codeph\">VARCHAR</span> or <span class=\"hue-doc-codeph\">CHAR</span> values are passed to a\n          function that returns a string value, the return type is normalized to\n          <span class=\"hue-doc-codeph\">STRING</span>. For example, a call to <span class=\"hue-doc-codeph\">CONCAT()</span> with a mix\n          of <span class=\"hue-doc-codeph\">STRING</span>, <span class=\"hue-doc-codeph\">VARCHAR</span>, and <span class=\"hue-doc-codeph\">CHAR</span>\n          arguments produces a <span class=\"hue-doc-codeph\">STRING</span> result.\n        </li></ul></p><p id=\"related_info\"><b>Related information:</b></p><p>\n      The string functions operate mainly on these data types:\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string.xml\" data-doc-anchor-id=\"string\">STRING Data Type</a>, <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_varchar.xml\" data-doc-anchor-id=\"varchar\">VARCHAR Data Type (Impala 2.0 or higher only)</a>, and\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_char.xml\" data-doc-anchor-id=\"char\">CHAR Data Type (Impala 2.0 or higher only)</a>.\n    </p><p><b>Function reference:</b></p><p>\n      Impala supports the following string functions:\n    </p><ul><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/ascii\">ASCII</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/base64decode\">BASE64DECODE</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/base64encode\">BASE64ENCODE</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/btrim\">BTRIM</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/bytes\">BYTES</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/char_length\">CHAR_LENGTH</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/chr\">CHR</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/concat\">CONCAT</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/concat_ws\">CONCAT_WS</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/find_in_set\">FIND_IN_SET</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/group_concat\">GROUP_CONCAT</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/initcap\">INITCAP</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/instr\">INSTR</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/jaro_distance\">JARO_DISTANCE, JARO_DIST</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/jaro_similarity\">JARO_SIMILARITY, JARO_SIM</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/jaro_winkler_distance\">JARO_WINKER_DISTANCE,\n        JW_DST</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/jaro_winkler_similarity\">JARO_WINKER_SIMILARITY,\n        JW_SIM</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/left\">LEFT</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/length\">LENGTH</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/levenshtein\">LEVENSHTEIN, LE_DST</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/locate\">LOCATE</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/lower\">LOWER, LCASE</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/lpad\">LPAD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/ltrim\">LTRIM</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/parse_url\">PARSE_URL</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/regexp_escape\">REGEXP_ESCAPE</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/regexp_extract\">REGEXP_EXTRACT</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/regexp_like\">REGEXP_LIKE</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/regexp_replace\">REGEXP_REPLACE</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/repeat\">REPEAT</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/replace\">REPLACE</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/reverse\">REVERSE</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/right\">RIGHT</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/rpad\">RPAD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/rtrim\">RTRIM</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/space\">SPACE</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/split_part\">SPLIT_PART</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/strleft\">STRLEFT</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/strright\">STRRIGHT</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/substr\">SUBSTR, SUBSTRING</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/translate\">TRANSLATE</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/trim\">TRIM</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions/upper\">UPPER, UCASE</a></li></ul><dl><dt id=\"ascii\">\n          ASCII(STRING str)\n        </dt><dd><b>Purpose:</b> Returns the numeric ASCII code of the first character of the argument.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p></dd><dt id=\"base64decode\">\n          BASE64DECODE(STRING str)\n        </dt><dd><b>Purpose:</b><p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            For general information about Base64 encoding, see\n            <a class=\"hue-doc-external-link\" href=\"https://en.wikipedia.org/wiki/Base64\" target=\"_blank\">https://en.wikipedia.org/wiki/Base64</a>.\n          </p><p id=\"base64_use_cases\">\n        The functions <span class=\"hue-doc-codeph\">BASE64ENCODE()</span> and <span class=\"hue-doc-codeph\">BASE64DECODE()</span> are\n        typically used in combination, to store in an Impala table string data that is\n        problematic to store or transmit. For example, you could use these functions to store\n        string data that uses an encoding other than UTF-8, or to transform the values in\n        contexts that require ASCII values, such as for partition key columns. Keep in mind that\n        base64-encoded values produce different results for string functions such as\n        <span class=\"hue-doc-codeph\">LENGTH()</span>, <span class=\"hue-doc-codeph\">MAX()</span>, and <span class=\"hue-doc-codeph\">MIN()</span> than when\n        those functions are called with the unencoded string values.\n      </p><p id=\"base64_charset\">\n        The set of characters that can be generated as output from\n        <span class=\"hue-doc-codeph\">BASE64ENCODE()</span>, or specified in the argument string to\n        <span class=\"hue-doc-codeph\">BASE64DECODE()</span>, are the ASCII uppercase and lowercase letters (A-Z,\n        a-z), digits (0-9), and the punctuation characters <span class=\"hue-doc-codeph\">+</span>,\n        <span class=\"hue-doc-codeph\">/</span>, and <span class=\"hue-doc-codeph\">=</span>.\n      </p><p id=\"base64_alignment\">\n        All return values produced by <span class=\"hue-doc-codeph\">BASE64ENCODE()</span> are a multiple of 4 bytes\n        in length. All argument values supplied to <span class=\"hue-doc-codeph\">BASE64DECODE()</span> must also be\n        a multiple of 4 bytes in length. If a base64-encoded value would otherwise have a\n        different length, it can be padded with trailing <span class=\"hue-doc-codeph\">=</span> characters to reach\n        a length that is a multiple of 4 bytes.\n      </p><p id=\"base64_error_handling\">\n        If the argument string to <span class=\"hue-doc-codeph\">BASE64DECODE()</span> does not represent a valid\n        base64-encoded value, subject to the constraints of the Impala implementation such as\n        the allowed character set, the function returns <span class=\"hue-doc-codeph\">NULL</span>.\n      </p><p id=\"example_blurb\"><b>Examples:</b></p><p id=\"base64_examples\">\n        The following examples show how to use <span class=\"hue-doc-codeph\">BASE64ENCODE()</span> and\n        <span class=\"hue-doc-codeph\">BASE64DECODE()</span> together to store and retrieve string values:\n<div class=\"hue-doc-codeblock\">-- An arbitrary string can be encoded in base 64.\n-- The length of the output is a multiple of 4 bytes,\n-- padded with trailing = characters if necessary.\nselect base64encode('hello world') as encoded,\n  length(base64encode('hello world')) as length;\n+------------------+--------+\n| encoded          | length |\n+------------------+--------+\n| aGVsbG8gd29ybGQ= | 16     |\n+------------------+--------+\n\n-- Passing an encoded value to base64decode() produces\n-- the original value.\nselect base64decode('aGVsbG8gd29ybGQ=') as decoded;\n+-------------+\n| decoded     |\n+-------------+\n| hello world |\n+-------------+\n</div>\n        These examples demonstrate incorrect encoded values that produce <span class=\"hue-doc-codeph\">NULL</span>\n        return values when decoded:\n<div class=\"hue-doc-codeblock\">-- The input value to base64decode() must be a multiple of 4 bytes.\n-- In this case, leaving off the trailing = padding character\n-- produces a NULL return value.\nselect base64decode('aGVsbG8gd29ybGQ') as decoded;\n+---------+\n| decoded |\n+---------+\n| NULL    |\n+---------+\nWARNINGS: UDF WARNING: Invalid base64 string; input length is 15,\n  which is not a multiple of 4.\n\n-- The input to base64decode() can only contain certain characters.\n-- The $ character in this case causes a NULL return value.\nselect base64decode('abc$');\n+----------------------+\n| base64decode('abc$') |\n+----------------------+\n| NULL                 |\n+----------------------+\nWARNINGS: UDF WARNING: Could not base64 decode input in space 4; actual output length 0\n</div>\n        These examples demonstrate <q>round-tripping</q> of an original string to an encoded\n        string, and back again. This technique is applicable if the original source is in an\n        unknown encoding, or if some intermediate processing stage might cause national\n        characters to be misrepresented:\n<div class=\"hue-doc-codeblock\">select 'circumflex accents: â, ê, î, ô, û' as original,\n  base64encode('circumflex accents: â, ê, î, ô, û') as encoded;\n+-----------------------------------+------------------------------------------------------+\n| original                          | encoded                                              |\n+-----------------------------------+------------------------------------------------------+\n| circumflex accents: â, ê, î, ô, û | Y2lyY3VtZmxleCBhY2NlbnRzOiDDoiwgw6osIMOuLCDDtCwgw7s= |\n+-----------------------------------+------------------------------------------------------+\n\nselect base64encode('circumflex accents: â, ê, î, ô, û') as encoded,\n  base64decode(base64encode('circumflex accents: â, ê, î, ô, û')) as decoded;\n+------------------------------------------------------+-----------------------------------+\n| encoded                                              | decoded                           |\n+------------------------------------------------------+-----------------------------------+\n| Y2lyY3VtZmxleCBhY2NlbnRzOiDDoiwgw6osIMOuLCDDtCwgw7s= | circumflex accents: â, ê, î, ô, û |\n+------------------------------------------------------+-----------------------------------+\n</div></p></dd><dt id=\"base64encode\">\n          BASE64ENCODE(STRING str)\n        </dt><dd><b>Purpose:</b><p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            For general information about Base64 encoding, see\n            <a class=\"hue-doc-external-link\" href=\"https://en.wikipedia.org/wiki/Base64\" target=\"_blank\">https://en.wikipedia.org/wiki/Base64</a>.\n          </p><p id=\"base64_use_cases\">\n        The functions <span class=\"hue-doc-codeph\">BASE64ENCODE()</span> and <span class=\"hue-doc-codeph\">BASE64DECODE()</span> are\n        typically used in combination, to store in an Impala table string data that is\n        problematic to store or transmit. For example, you could use these functions to store\n        string data that uses an encoding other than UTF-8, or to transform the values in\n        contexts that require ASCII values, such as for partition key columns. Keep in mind that\n        base64-encoded values produce different results for string functions such as\n        <span class=\"hue-doc-codeph\">LENGTH()</span>, <span class=\"hue-doc-codeph\">MAX()</span>, and <span class=\"hue-doc-codeph\">MIN()</span> than when\n        those functions are called with the unencoded string values.\n      </p><p id=\"base64_charset\">\n        The set of characters that can be generated as output from\n        <span class=\"hue-doc-codeph\">BASE64ENCODE()</span>, or specified in the argument string to\n        <span class=\"hue-doc-codeph\">BASE64DECODE()</span>, are the ASCII uppercase and lowercase letters (A-Z,\n        a-z), digits (0-9), and the punctuation characters <span class=\"hue-doc-codeph\">+</span>,\n        <span class=\"hue-doc-codeph\">/</span>, and <span class=\"hue-doc-codeph\">=</span>.\n      </p><p id=\"base64_alignment\">\n        All return values produced by <span class=\"hue-doc-codeph\">BASE64ENCODE()</span> are a multiple of 4 bytes\n        in length. All argument values supplied to <span class=\"hue-doc-codeph\">BASE64DECODE()</span> must also be\n        a multiple of 4 bytes in length. If a base64-encoded value would otherwise have a\n        different length, it can be padded with trailing <span class=\"hue-doc-codeph\">=</span> characters to reach\n        a length that is a multiple of 4 bytes.\n      </p><p id=\"example_blurb\"><b>Examples:</b></p><p id=\"base64_examples\">\n        The following examples show how to use <span class=\"hue-doc-codeph\">BASE64ENCODE()</span> and\n        <span class=\"hue-doc-codeph\">BASE64DECODE()</span> together to store and retrieve string values:\n<div class=\"hue-doc-codeblock\">-- An arbitrary string can be encoded in base 64.\n-- The length of the output is a multiple of 4 bytes,\n-- padded with trailing = characters if necessary.\nselect base64encode('hello world') as encoded,\n  length(base64encode('hello world')) as length;\n+------------------+--------+\n| encoded          | length |\n+------------------+--------+\n| aGVsbG8gd29ybGQ= | 16     |\n+------------------+--------+\n\n-- Passing an encoded value to base64decode() produces\n-- the original value.\nselect base64decode('aGVsbG8gd29ybGQ=') as decoded;\n+-------------+\n| decoded     |\n+-------------+\n| hello world |\n+-------------+\n</div>\n        These examples demonstrate incorrect encoded values that produce <span class=\"hue-doc-codeph\">NULL</span>\n        return values when decoded:\n<div class=\"hue-doc-codeblock\">-- The input value to base64decode() must be a multiple of 4 bytes.\n-- In this case, leaving off the trailing = padding character\n-- produces a NULL return value.\nselect base64decode('aGVsbG8gd29ybGQ') as decoded;\n+---------+\n| decoded |\n+---------+\n| NULL    |\n+---------+\nWARNINGS: UDF WARNING: Invalid base64 string; input length is 15,\n  which is not a multiple of 4.\n\n-- The input to base64decode() can only contain certain characters.\n-- The $ character in this case causes a NULL return value.\nselect base64decode('abc$');\n+----------------------+\n| base64decode('abc$') |\n+----------------------+\n| NULL                 |\n+----------------------+\nWARNINGS: UDF WARNING: Could not base64 decode input in space 4; actual output length 0\n</div>\n        These examples demonstrate <q>round-tripping</q> of an original string to an encoded\n        string, and back again. This technique is applicable if the original source is in an\n        unknown encoding, or if some intermediate processing stage might cause national\n        characters to be misrepresented:\n<div class=\"hue-doc-codeblock\">select 'circumflex accents: â, ê, î, ô, û' as original,\n  base64encode('circumflex accents: â, ê, î, ô, û') as encoded;\n+-----------------------------------+------------------------------------------------------+\n| original                          | encoded                                              |\n+-----------------------------------+------------------------------------------------------+\n| circumflex accents: â, ê, î, ô, û | Y2lyY3VtZmxleCBhY2NlbnRzOiDDoiwgw6osIMOuLCDDtCwgw7s= |\n+-----------------------------------+------------------------------------------------------+\n\nselect base64encode('circumflex accents: â, ê, î, ô, û') as encoded,\n  base64decode(base64encode('circumflex accents: â, ê, î, ô, û')) as decoded;\n+------------------------------------------------------+-----------------------------------+\n| encoded                                              | decoded                           |\n+------------------------------------------------------+-----------------------------------+\n| Y2lyY3VtZmxleCBhY2NlbnRzOiDDoiwgw6osIMOuLCDDtCwgw7s= | circumflex accents: â, ê, î, ô, û |\n+------------------------------------------------------+-----------------------------------+\n</div></p></dd><dt id=\"btrim\">\n          BTRIM(STRING a), BTRIM(STRING a, STRING chars_to_trim)\n        </dt><dd><b>Purpose:</b> Removes all instances of one or more characters from the start and end\n          of a <span class=\"hue-doc-codeph\">STRING</span> value. By default, removes only spaces. If a\n          non-<span class=\"hue-doc-codeph\">NULL</span> optional second argument is specified, the function removes\n          all occurrences of characters in that second argument from the beginning and end of\n          the string.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p id=\"added_in_230\"><b>Added in:</b>Impala 2.3.0</p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following examples show the default <span class=\"hue-doc-codeph\">BTRIM()</span> behavior, and what\n            changes when you specify the optional second argument. All the examples bracket the\n            output value with <span class=\"hue-doc-codeph\">[ ]</span> so that you can see any leading or trailing\n            spaces in the <span class=\"hue-doc-codeph\">BTRIM()</span> result. By default, the function removes and\n            number of both leading and trailing spaces. When the second argument is specified,\n            any number of occurrences of any character in the second argument are removed from\n            the start and end of the input string; in this case, spaces are not removed (unless\n            they are part of the second argument) and any instances of the characters are not\n            removed if they do not come right at the beginning or end of the string.\n          </p><div class=\"hue-doc-codeblock\">-- Remove multiple spaces before and one space after.\nselect concat('[',btrim('    hello '),']');\n+---------------------------------------+\n| concat('[', btrim('    hello '), ']') |\n+---------------------------------------+\n| [hello]                               |\n+---------------------------------------+\n\n-- Remove any instances of x or y or z at beginning or end. Leave spaces alone.\nselect concat('[',btrim('xy    hello zyzzxx','xyz'),']');\n+------------------------------------------------------+\n| concat('[', btrim('xy    hello zyzzxx', 'xyz'), ']') |\n+------------------------------------------------------+\n| [    hello ]                                         |\n+------------------------------------------------------+\n\n-- Remove any instances of x or y or z at beginning or end.\n-- Leave x, y, z alone in the middle of the string.\nselect concat('[',btrim('xyhelxyzlozyzzxx','xyz'),']');\n+----------------------------------------------------+\n| concat('[', btrim('xyhelxyzlozyzzxx', 'xyz'), ']') |\n+----------------------------------------------------+\n| [helxyzlo]                                         |\n+----------------------------------------------------+\n</div></dd><dt id=\"bytes\">BYTES</dt><dd><b>Purpose:</b> Returns the number of bytes contained in the specified byte string. <p><b>Syntax:</b> BYTES (<i>byte_expression</i>)</p><p>Where:</p><p><i>byte_expression</i>\n            is the byte string for which the number of bytes is to be returned.</p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>The BYTES function is\n            similar to the LENGTH() function except that it always returns the number of bytes\n            regardless of the status of UTF-8 mode whether it is turned ON or OFF.</p><p>The\n            following is the list of supported string data types to be used in\n              <i>byte_expression</i>:</p><ul><li>STRING</li><li>VARCHAR</li><li>CHAR</li></ul><div class=\"hue-doc-note\">The BYTES (<i>byte_expression</i>) function counts the trailing zeros because\n            trailing zero bytes are considered bytes. In the case of a fixed <i>length</i> column,\n            the length of the value is always equal to the length defined for the column whereas the\n            length of the value in a <i>variable</i> length column is always equal to the number of\n            bytes, including any trailing zero bytes, contained in that value.</div><p id=\"example_blurb\"><b>Examples:</b></p><p>The following example\n            obtains the number of bytes from “cloudera” by applying the BYTES function to the column\n            “cloudera”, which is type\n            VARCHAR.</p><div class=\"hue-doc-codeblock\">SELECT bytes(cast('cloudera' as varchar(20))) FROM xyz;\n            +----------------------------------------+\n            | bytes(cast('cloudera' as varchar(20))) |\n            +----------------------------------------+\n            | 8                                      |\n            +----------------------------------------+\n          </div><div class=\"hue-doc-note\">Use the TRIM function on the <i>byte_expression</i> to\n            exclude the trailing blanks included in the byte count for a data value.</div></dd><dt id=\"char_length\">\n          CHAR_LENGTH(STRING a), CHARACTER_LENGTH(STRING a)\n        </dt><dd><b>Purpose:</b> Returns the length in characters of the argument string, including any\n          trailing spaces that pad a <span class=\"hue-doc-codeph\">CHAR</span> value.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            When applied to a <span class=\"hue-doc-codeph\">STRING</span> value, it returns the same result as the\n            <span class=\"hue-doc-codeph\">length()</span> function. When applied to a <span class=\"hue-doc-codeph\">CHAR</span> value,\n            it might return a larger value than <span class=\"hue-doc-codeph\">length()</span> does, to account for\n            trailing spaces in the <span class=\"hue-doc-codeph\">CHAR</span>.\n          </p><p id=\"example_blurb\"><b>Examples:</b></p><p id=\"length_demo\">\n        The following example demonstrates how <span class=\"hue-doc-codeph\">length()</span> and\n        <span class=\"hue-doc-codeph\">char_length()</span> sometimes produce the same result, and sometimes produce\n        different results depending on the type of the argument and the presence of trailing\n        spaces for <span class=\"hue-doc-codeph\">CHAR</span> values. The <span class=\"hue-doc-codeph\">S</span> and <span class=\"hue-doc-codeph\">C</span>\n        values are displayed with enclosing quotation marks to show any trailing spaces.\n<div class=\"hue-doc-codeblock\" id=\"length_demo_example\">create table length_demo (s string, c char(5));\ninsert into length_demo values\n  ('a',cast('a' as char(5))),\n  ('abc',cast('abc' as char(5))),\n  ('hello',cast('hello' as char(5)));\n\nselect concat('\"',s,'\"') as s, concat('\"',c,'\"') as c,\n  length(s), length(c),\n  char_length(s), char_length(c)\nfrom length_demo;\n+---------+---------+-----------+-----------+----------------+----------------+\n| s       | c       | length(s) | length(c) | char_length(s) | char_length(c) |\n+---------+---------+-----------+-----------+----------------+----------------+\n| \"a\"     | \"a    \" | 1         | 1         | 1              | 5              |\n| \"abc\"   | \"abc  \" | 3         | 3         | 3              | 5              |\n| \"hello\" | \"hello\" | 5         | 5         | 5              | 5              |\n+---------+---------+-----------+-----------+----------------+----------------+\n</div></p></dd><dt id=\"chr\">\n          CHR(INT character_code)\n        </dt><dd><b>Purpose:</b> Returns a character specified by a decimal code point value. The\n          interpretation and display of the resulting character depends on your system locale.\n          Because consistent processing of Impala string values is only guaranteed for values\n          within the ASCII range, only use this function for values corresponding to ASCII\n          characters. In particular, parameter values greater than 255 return an empty string.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p><b>Usage notes:</b> Can be used as the inverse of the <span class=\"hue-doc-codeph\">ascii()</span>\n            function, which converts a character to its numeric ASCII code.\n          </p><p id=\"added_in_230\"><b>Added in:</b>Impala 2.3.0</p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">SELECT chr(65);\n+---------+\n| chr(65) |\n+---------+\n| A       |\n+---------+\n\nSELECT chr(97);\n+---------+\n| chr(97) |\n+---------+\n| a       |\n+---------+\n</div></dd><dt id=\"concat\">\n          CONCAT(STRING a, STRING b...)\n        </dt><dd><b>Purpose:</b> Returns a single string representing all the argument values joined\n          together. If any argument is <span class=\"hue-doc-codeph\">NULL</span>, it returns <span class=\"hue-doc-codeph\">NULL</span>.\n          <p/><p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p id=\"concat_blurb\"><b>Usage notes:</b><span class=\"hue-doc-codeph\">concat()</span> and <span class=\"hue-doc-codeph\">concat_ws()</span> are\n        appropriate for concatenating the values of multiple columns within the same row, while\n        <span class=\"hue-doc-codeph\">group_concat()</span> joins together values from different rows.\n      </p></dd><dt id=\"concat_ws\">\n          CONCAT_WS(STRING sep, STRING a, STRING b...)\n        </dt><dd><b>Purpose:</b> Returns a single string representing the second and following argument\n          values joined together, delimited by a specified separator.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p id=\"concat_blurb\"><b>Usage notes:</b><span class=\"hue-doc-codeph\">concat()</span> and <span class=\"hue-doc-codeph\">concat_ws()</span> are\n        appropriate for concatenating the values of multiple columns within the same row, while\n        <span class=\"hue-doc-codeph\">group_concat()</span> joins together values from different rows.\n      </p></dd><dt id=\"find_in_set\">\n          FIND_IN_SET(STRING str, STRING strList)\n        </dt><dd><b>Purpose:</b> Returns the position (starting from 1) of the first occurrence of a\n          specified string within a comma-separated string. Returns <span class=\"hue-doc-codeph\">NULL</span> if\n          either argument is <span class=\"hue-doc-codeph\">NULL</span>, 0 if the search string is not found, or 0 if\n          the search string contains a comma.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p></dd><dt id=\"group_concat\">\n          GROUP_CONCAT(STRING s [, STRING sep])\n        </dt><dd><b>Purpose:</b> Returns a single string representing the argument value concatenated\n          together for each row of the result set. If the optional separator string is\n          specified, the separator is added between each pair of concatenated values.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p id=\"concat_blurb\"><b>Usage notes:</b><span class=\"hue-doc-codeph\">concat()</span> and <span class=\"hue-doc-codeph\">concat_ws()</span> are\n        appropriate for concatenating the values of multiple columns within the same row, while\n        <span class=\"hue-doc-codeph\">group_concat()</span> joins together values from different rows.\n      </p><p>\n            By default, returns a single string covering the whole result set. To include other\n            columns or values in the result set, or to produce multiple concatenated strings for\n            subsets of rows, include a <span class=\"hue-doc-codeph\">GROUP BY</span> clause in the query.\n          </p><p>\n            Strictly speaking, <span class=\"hue-doc-codeph\">GROUP_CONCAT()</span> is an aggregate function, not a\n            scalar function like the others in this list. For additional details and examples,\n            see <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_group_concat.xml\" data-doc-anchor-id=\"group_concat\">GROUP_CONCAT Function</a>.\n          </p></dd><dt id=\"initcap\">\n          INITCAP(STRING str)\n        </dt><dd><b>Purpose:</b> Returns the input string with the first letter of each word\n          capitalized and all other letters in lowercase.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p><b>Example: </b></p><p><span class=\"hue-doc-codeph\">INITCAP(\"i gOt mY ChiCkeNs in tHe yard.\")</span> returns <span class=\"hue-doc-codeph\">\" I Got\n            My Chickens In The Yard.\"</span>.\n          </p></dd><dt id=\"instr\">\n          INSTR(STRING str, STRING substr <span class=\"hue-doc-ph\">[, BIGINT position [, BIGINT\n          occurrence ] ]</span>)\n        </dt><dd><b>Purpose:</b> Returns the position (starting from 1) of the first\n          occurrence of a <span class=\"hue-doc-varname\">substr</span> within a longer string. <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p> If the <span class=\"hue-doc-varname\">substr</span> is not present in\n              <span class=\"hue-doc-varname\">str</span>, the function returns 0. </p><p> The optional third and fourth arguments\n            let you find instances of the <span class=\"hue-doc-varname\">substr</span> other than\n            the first instance starting from the left. </p><ul><li> The third argument, <span class=\"hue-doc-varname\">position</span>, lets you\n              specify a starting point within the <span class=\"hue-doc-varname\">str</span> other\n              than 1.\n              <div class=\"hue-doc-codeblock\">-- Restricting the search to positions 7..end,\n-- the first occurrence of 'b' is at position 9.\nselect instr('foo bar bletch', 'b', 7);\n+---------------------------------+\n| instr('foo bar bletch', 'b', 7) |\n+---------------------------------+\n| 9                               |\n+---------------------------------+\n</div></li><li> If there are no more occurrences after the specified position,\n              the result is 0. </li><li> If <span class=\"hue-doc-varname\">position</span> is negative, the search works\n              right-to-left starting that many characters from the right. The\n              return value still represents the position starting from the left\n              side of <span class=\"hue-doc-varname\">str</span>.\n              <div class=\"hue-doc-codeblock\">-- Scanning right to left, the first occurrence of 'o'\n-- is at position 8. (8th character from the left.)\nselect instr('hello world','o',-1);\n+-------------------------------+\n| instr('hello world', 'o', -1) |\n+-------------------------------+\n| 8                             |\n+-------------------------------+\n\n</div></li><li> The fourth argument, <span class=\"hue-doc-varname\">occurrence</span>, lets you\n              specify an occurrence other than the first.\n              <div class=\"hue-doc-codeblock\">-- 2nd occurrence of 'b' is at position 9.\nselect instr('foo bar bletch', 'b', 1, 2);\n+------------------------------------+\n| instr('foo bar bletch', 'b', 1, 2) |\n+------------------------------------+\n| 9                                  |\n+------------------------------------+\n</div></li><li> If <span class=\"hue-doc-varname\">occurrence</span> is greater than the number of\n              matching occurrences, the function returns 0. </li><li><span class=\"hue-doc-varname\">occurrence</span> cannot be negative or zero. A\n              non-positive value for this argument causes an error. </li><li> If either of the optional arguments,\n                <span class=\"hue-doc-varname\">position</span> or <span class=\"hue-doc-varname\">occurrence</span>, is\n                <span class=\"hue-doc-codeph\">NULL</span>, the function also returns\n                <span class=\"hue-doc-codeph\">NULL</span>.</li></ul></dd><dt id=\"jaro_distance\">\n          JARO_DISTANCE(STRING str1, STRING str2), JARO_DST(STRING str1, STRING str2)\n        </dt><dd><b>Purpose:</b> Returns the\n          <a class=\"hue-doc-external-link\" href=\"https://ipfs.io/ipfs/QmXoypizjW3WknFiJnKLwHCnL72vedxjQkDDP1mXWo6uco/wiki/Jaro%E2%80%93Winkler_distance.html\" target=\"_blank\">Jaro\n          distance</a> between two input strings. The Jaro distance is a measure of\n          similarity between two strings and is the complementary of\n          <span class=\"hue-doc-codeph\">JARO_SIMILARITY()</span>, i.e. (1 - <span class=\"hue-doc-codeph\">JARO_SIMILARITY()</span>).\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p><p><b>Usage notes:</b></p><p>\n            If the two input strings are identical, the function returns 0.0.\n          </p><p>\n            If there is no matching character between the input strings, the function returns\n            1.0.\n          </p><p>\n            If either input strings is <span class=\"hue-doc-codeph\">NULL</span>, the function returns\n            <span class=\"hue-doc-codeph\">NULL</span>.\n          </p><p>\n            If the length of either input string is bigger than 255 characters, the function\n            returns an error.\n          </p></dd><dt id=\"jaro_similarity\">\n          JARO_SIMILARITY(STRING str1, STRING str2), JARO_SIM(STRING str1, STRING str2)\n        </dt><dd><b>Purpose:</b> Returns the\n          <a class=\"hue-doc-external-link\" href=\"https://ipfs.io/ipfs/QmXoypizjW3WknFiJnKLwHCnL72vedxjQkDDP1mXWo6uco/wiki/Jaro%E2%80%93Winkler_distance.html\" target=\"_blank\">Jaro\n          similarity</a> of two strings. The higher the Jaro similarity for two strings is,\n          the more similar the strings are.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p><p><b>Usage notes:</b></p><p>\n            If the two input strings are identical, the function returns 1.0.\n          </p><p>\n            If there is no matching character between the input strings, the function returns\n            0.0.\n          </p><p>\n            If either input strings is <span class=\"hue-doc-codeph\">NULL</span>, the function returns\n            <span class=\"hue-doc-codeph\">NULL</span>.\n          </p><p>\n            If the length of either input string is bigger than 255 characters, the function\n            returns an error.\n          </p></dd><dt id=\"jaro_winkler_distance\">\n          JARO_WINKLER_DISTANCE(STRING str1, STRING str2[, DOUBLE scaling_factor, DOUBLE\n          boost_threshold]), JW_DST(STRING str1, STRING str2[, DOUBLE scaling_factor, DOUBLE\n          boost_threshold])\n        </dt><dd><b>Purpose:</b> Returns the\n          <a class=\"hue-doc-external-link\" href=\"https://ipfs.io/ipfs/QmXoypizjW3WknFiJnKLwHCnL72vedxjQkDDP1mXWo6uco/wiki/Jaro%E2%80%93Winkler_distance.html\" target=\"_blank\">Jaro-Winkler\n          distance</a> of two input strings. It is the complementary of\n          <span class=\"hue-doc-codeph\">JARO_WINKLER_SIMILARITY()</span>, i.e. 1 -\n          <span class=\"hue-doc-codeph\">JARO_WINKLER_SIMILARITY()</span>.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p><p><b>Usage notes:</b></p><p>\n            If the two input strings are identical, the function returns 0.0.\n          </p><p>\n            If there is no matching character between the input strings, the function returns\n            1.0.\n          </p><p>\n            The function returns an error in the following cases:\n            <ul><li>\n                The length of either input string is bigger than 255 characters.\n              </li><li><span class=\"hue-doc-varname\">scaling_factor</span> &lt; 0.0 or <span class=\"hue-doc-varname\">scaling_factor</span>\n                &gt; 0.25\n              </li><li><span class=\"hue-doc-varname\">boost_threshold</span> &lt; 0.0 or\n                <span class=\"hue-doc-varname\">boost_threshold</span> &gt; 1.0\n              </li></ul></p><p>\n            If either input strings is <span class=\"hue-doc-codeph\">NULL</span>, the function returns\n            <span class=\"hue-doc-codeph\">NULL</span>.\n          </p><p>\n            The default <span class=\"hue-doc-varname\">scaling factor</span> is 0.1.\n          </p><p>\n            The prefix weight will only be applied if the Jaro-distance exceeds the optional\n            <span class=\"hue-doc-varname\">boost_threshold</span>. By default, the\n            <span class=\"hue-doc-varname\">boost_threshold</span> value is 0.7.\n          </p></dd><dt id=\"jaro_winkler_similarity\">\n          JARO_WINKLER_SIMILARITY(STRING str1, STRING str2[, DOUBLE scaling_factor, DOUBLE\n          boost_threshold]), JARO_SIM(STRING str1, STRING str2[, DOUBLE scaling_factor, DOUBLE\n          boost_threshold])\n        </dt><dd><b>Purpose:</b> Returns the\n          <a class=\"hue-doc-external-link\" href=\"https://ipfs.io/ipfs/QmXoypizjW3WknFiJnKLwHCnL72vedxjQkDDP1mXWo6uco/wiki/Jaro%E2%80%93Winkler_distance.html\" target=\"_blank\">Jaro-Winkler\n          Similarity</a> between two input strings. The Jaro-Winkler similarity uses a prefix\n          weight, specified by <span class=\"hue-doc-varname\">scaling factor</span>, which gives more favorable\n          ratings to strings that match from the beginning for a set prefix length, up to a\n          maximum of four characters.\n          <p>\n            Use Jaro or Jaro-Winkler functions to perform fuzzy matches on relatively short\n            strings, e.g. to scrub user inputs of names against the records in the database.\n          </p><p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p><p><b>Usage notes:</b></p><p>\n            If the two input strings are identical, the function returns 1.0.\n          </p><p>\n            If there is no matching character between the input strings, the function returns\n            0.0.\n          </p><p>\n            The function returns an error in the following cases:\n            <ul><li>\n                The length of either input string is bigger than 255 characters.\n              </li><li><span class=\"hue-doc-varname\">scaling_factor</span> &lt; 0.0 or <span class=\"hue-doc-varname\">scaling_factor</span>\n                &gt; 0.25\n              </li><li><span class=\"hue-doc-varname\">boost_threshold</span> &lt; 0.0 or\n                <span class=\"hue-doc-varname\">boost_threshold</span> &gt; 1.0\n              </li></ul></p><p>\n            If either input strings is <span class=\"hue-doc-codeph\">NULL</span>, the function returns\n            <span class=\"hue-doc-codeph\">NULL</span>.\n          </p><p>\n            The default <span class=\"hue-doc-varname\">scaling factor</span> is 0.1.\n          </p><p>\n            The prefix weight will only be applied if the Jaro-similarity exceeds the optional\n            <span class=\"hue-doc-varname\">boost_threshold</span>. By default, the\n            <span class=\"hue-doc-varname\">boost_threshold</span> value is 0.7.\n          </p></dd><dt id=\"left\">\n          LEFT(STRING a, INT num_chars)\n        </dt><dd>\n          See the <span class=\"hue-doc-codeph\">STRLEFT()</span> function.\n        </dd><dt id=\"length\">\n          LENGTH(STRING a)\n        </dt><dd><b>Purpose:</b> Returns the length in characters of the argument string, ignoring any\n          trailing spaces in <span class=\"hue-doc-codeph\">CHAR</span> values.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            When applied to a <span class=\"hue-doc-codeph\">STRING</span> value, it returns the same result as the\n            <span class=\"hue-doc-codeph\">CHAR_LENGTH()</span> function. When applied to a <span class=\"hue-doc-codeph\">CHAR</span>\n            value, it might return a smaller value than <span class=\"hue-doc-codeph\">CHAR_LENGTH()</span> does,\n            because <span class=\"hue-doc-codeph\">LENGTH()</span> ignores any trailing spaces in the\n            <span class=\"hue-doc-codeph\">CHAR</span>.\n          </p><div class=\"hue-doc-note\">            Because the behavior of <span class=\"hue-doc-codeph\">LENGTH()</span> with <span class=\"hue-doc-codeph\">CHAR</span> values\n            containing trailing spaces is not standardized across the industry, when porting\n            code from other database systems, evaluate the behavior of <span class=\"hue-doc-codeph\">LENGTH()</span>\n            on the source system and switch to <span class=\"hue-doc-codeph\">CHAR_LENGTH()</span> for Impala if\n            necessary.\n          </div><p id=\"example_blurb\"><b>Examples:</b></p><p id=\"length_demo\">\n        The following example demonstrates how <span class=\"hue-doc-codeph\">length()</span> and\n        <span class=\"hue-doc-codeph\">char_length()</span> sometimes produce the same result, and sometimes produce\n        different results depending on the type of the argument and the presence of trailing\n        spaces for <span class=\"hue-doc-codeph\">CHAR</span> values. The <span class=\"hue-doc-codeph\">S</span> and <span class=\"hue-doc-codeph\">C</span>\n        values are displayed with enclosing quotation marks to show any trailing spaces.\n<div class=\"hue-doc-codeblock\" id=\"length_demo_example\">create table length_demo (s string, c char(5));\ninsert into length_demo values\n  ('a',cast('a' as char(5))),\n  ('abc',cast('abc' as char(5))),\n  ('hello',cast('hello' as char(5)));\n\nselect concat('\"',s,'\"') as s, concat('\"',c,'\"') as c,\n  length(s), length(c),\n  char_length(s), char_length(c)\nfrom length_demo;\n+---------+---------+-----------+-----------+----------------+----------------+\n| s       | c       | length(s) | length(c) | char_length(s) | char_length(c) |\n+---------+---------+-----------+-----------+----------------+----------------+\n| \"a\"     | \"a    \" | 1         | 1         | 1              | 5              |\n| \"abc\"   | \"abc  \" | 3         | 3         | 3              | 5              |\n| \"hello\" | \"hello\" | 5         | 5         | 5              | 5              |\n+---------+---------+-----------+-----------+----------------+----------------+\n</div></p></dd></dl><dl><dt id=\"levenshtein\">\n          LEVENSHTEIN(STRING str1, STRING str2), <span class=\"hue-doc-ph\" id=\"le_dst\">LE_DST(STRING\n          str1, STRING str2)</span></dt><dd><b>Purpose:</b> Returns the Levenshtein distance between two input strings. The\n          Levenshtein distance between two strings is the minimum number of single-character\n          edits required to transform one string to other. The function indicates how different\n          the input strings are.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p><b>Usage notes:</b><p>\n            If input strings are equal, the function returns 0.\n          </p><p>\n            If either input exceeds 255 characters, the function returns an error.\n          </p><p>\n            If either input string is <span class=\"hue-doc-codeph\">NULL</span>, the function returns\n            <span class=\"hue-doc-codeph\">NULL</span>.\n          </p><p>\n            If the length of one input string is zero, the function returns the length of the\n            other string.\n          </p><p><b>Example:</b></p><p><span class=\"hue-doc-codeph\">LEVENSHTEIN ('welcome', 'We come')</span> returns 2, first change to\n            replace '<span class=\"hue-doc-codeph\">w</span>' to '<span class=\"hue-doc-codeph\">W</span>', and then to replace\n            '<span class=\"hue-doc-codeph\">l</span>' to a space character.\n          </p></dd></dl><dl><dt id=\"locate\">\n          LOCATE(STRING substr, STRING str[, INT pos])\n        </dt><dd><b>Purpose:</b> Returns the position (starting from 1) of the first occurrence of a\n          substring within a longer string, optionally after a particular position.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p></dd><dt id=\"lower\">\n          LOWER(STRING a), <span class=\"hue-doc-ph\" id=\"lcase\">LCASE(STRING a)</span></dt><dd><b>Purpose:</b> Returns the argument string converted to all-lowercase.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p id=\"case_insensitive_comparisons_tip\">\n        In Impala 2.5 and higher, you can simplify queries that use many\n        <span class=\"hue-doc-codeph\">UPPER()</span> and <span class=\"hue-doc-codeph\">LOWER()</span> calls to do case-insensitive\n        comparisons, by using the <span class=\"hue-doc-codeph\">ILIKE</span> or <span class=\"hue-doc-codeph\">IREGEXP</span> operators\n        instead. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_operators.xml\" data-doc-anchor-id=\"ilike\">ILIKE Operator</a> and\n        <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_operators.xml\" data-doc-anchor-id=\"iregexp\">IREGEXP Operator</a> for details.\n      </p></dd><dt id=\"lpad\">\n          LPAD(STRING str, INT len, STRING pad)\n        </dt><dd><b>Purpose:</b> Returns a string of a specified length, based on the first argument\n          string. If the specified string is too short, it is padded on the left with a\n          repeating sequence of the characters from the pad string. If the specified string is\n          too long, it is truncated on the right.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p></dd><dt id=\"ltrim\">\n          LTRIM(STRING a [, STRING chars_to_trim])\n        </dt><dd><b>Purpose:</b> Returns the argument string with all occurrences of characters\n          specified by the second argument removed from the left side. Removes spaces if the\n          second argument is not specified.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p></dd><dt id=\"parse_url\">\n          PARSE_URL(STRING urlString, STRING partToExtract [, STRING keyToExtract])\n        </dt><dd><b>Purpose:</b> Returns the portion of a URL corresponding to a specified part. The\n          part argument can be <span class=\"hue-doc-codeph\">'PROTOCOL'</span>, <span class=\"hue-doc-codeph\">'HOST'</span>,\n          <span class=\"hue-doc-codeph\">'PATH'</span>, <span class=\"hue-doc-codeph\">'REF'</span>, <span class=\"hue-doc-codeph\">'AUTHORITY'</span>,\n          <span class=\"hue-doc-codeph\">'FILE'</span>, <span class=\"hue-doc-codeph\">'USERINFO'</span>, or <span class=\"hue-doc-codeph\">'QUERY'</span>.\n          Uppercase is required for these literal values. When requesting the\n          <span class=\"hue-doc-codeph\">QUERY</span> portion of the URL, you can optionally specify a key to\n          retrieve just the associated value from the key-value pairs in the query string.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p><b>Usage notes:</b> This function is important for the traditional Hadoop use case\n            of interpreting web logs. For example, if the web traffic data features raw URLs not\n            divided into separate table columns, you can count visitors to a particular page by\n            extracting the <span class=\"hue-doc-codeph\">'PATH'</span> or <span class=\"hue-doc-codeph\">'FILE'</span> field, or analyze\n            search terms by extracting the corresponding key from the <span class=\"hue-doc-codeph\">'QUERY'</span>\n            field.\n          </p></dd><dt id=\"regexp_escape\">\n          REGEXP_ESCAPE(STRING source)\n        </dt><dd><b>Purpose:</b> The <span class=\"hue-doc-codeph\">REGEXP_ESCAPE()</span> function returns a string escaped\n          for the special character in RE2 library so that the special characters are\n          interpreted literally rather than as special characters. The following special\n          characters are escaped by the function:\n<div class=\"hue-doc-codeblock\">.\\+*?[^]$(){}=!&lt;&gt;|:-</div><p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p id=\"regexp_re2\">\n        In Impala 2.0 and later, the Impala regular expression syntax conforms to the POSIX\n        Extended Regular Expression syntax used by the Google RE2 library. For details, see\n        <a class=\"hue-doc-external-link\" href=\"https://code.google.com/p/re2/\" target=\"_blank\">the RE2\n        documentation</a>. It has most idioms familiar from regular expressions in Perl,\n        Python, and so on, including <span class=\"hue-doc-codeph\">.*?</span> for non-greedy matches.\n      </p><p id=\"regexp_re2_warning\">\n        In Impala 2.0 and later, a change in the underlying regular expression library could\n        cause changes in the way regular expressions are interpreted by this function. Test any\n        queries that use regular expressions and adjust the expression patterns if necessary.\n        See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_incompatible_changes.xml\" data-doc-anchor-id=\"incompatible_changes_200\">Incompatible Changes Introduced in Impala 2.0.0</a>\n        for details.\n      </p><p id=\"regexp_escapes\">\n        Because the <span class=\"hue-doc-cmdname\">impala-shell</span> interpreter uses the <span class=\"hue-doc-codeph\">\\</span>\n        character for escaping, use <span class=\"hue-doc-codeph\">\\\\</span> to represent the regular expression\n        escape character in any regular expressions that you submit through\n        <span class=\"hue-doc-cmdname\">impala-shell</span> . You might prefer to use the equivalent character class\n        names, such as <span class=\"hue-doc-codeph\">[[:digit:]]</span> instead of <span class=\"hue-doc-codeph\">\\d</span> which you\n        would have to escape as <span class=\"hue-doc-codeph\">\\\\d</span>.\n      </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            This example shows escaping one of special characters in RE2.\n          </p><div class=\"hue-doc-codeblock\">+------------------------------------------------------+\n| regexp_escape('Hello.world')                         |\n+------------------------------------------------------+\n| Hello\\.world                                         |\n+------------------------------------------------------+\n</div><p>\n            This example shows escaping all the special characters in RE2.\n          </p><div class=\"hue-doc-codeblock\">+------------------------------------------------------------+\n| regexp_escape('a.b\\\\c+d*e?f[g]h$i(j)k{l}m=n!o&lt;p&gt;q|r:s-t')  |\n+------------------------------------------------------------+\n| a\\.b\\\\c\\+d\\*e\\?f\\[g\\]h\\$i\\(j\\)k\\{l\\}m\\=n\\!o\\&lt;p\\&gt;q\\|r\\:s\\-t |\n+------------------------------------------------------------+\n</div></dd><dt id=\"regexp_extract\">\n          REGEXP_EXTRACT(STRING subject, STRING pattern, INT index)\n        </dt><dd><b>Purpose:</b> Returns the specified () group from a string based on a regular\n          expression pattern. Group 0 refers to the entire extracted string, while group 1, 2,\n          and so on refers to the first, second, and so on <span class=\"hue-doc-codeph\">(...)</span> portion.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p id=\"regexp_re2\">\n        In Impala 2.0 and later, the Impala regular expression syntax conforms to the POSIX\n        Extended Regular Expression syntax used by the Google RE2 library. For details, see\n        <a class=\"hue-doc-external-link\" href=\"https://code.google.com/p/re2/\" target=\"_blank\">the RE2\n        documentation</a>. It has most idioms familiar from regular expressions in Perl,\n        Python, and so on, including <span class=\"hue-doc-codeph\">.*?</span> for non-greedy matches.\n      </p><p id=\"regexp_re2_warning\">\n        In Impala 2.0 and later, a change in the underlying regular expression library could\n        cause changes in the way regular expressions are interpreted by this function. Test any\n        queries that use regular expressions and adjust the expression patterns if necessary.\n        See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_incompatible_changes.xml\" data-doc-anchor-id=\"incompatible_changes_200\">Incompatible Changes Introduced in Impala 2.0.0</a>\n        for details.\n      </p><p id=\"regexp_escapes\">\n        Because the <span class=\"hue-doc-cmdname\">impala-shell</span> interpreter uses the <span class=\"hue-doc-codeph\">\\</span>\n        character for escaping, use <span class=\"hue-doc-codeph\">\\\\</span> to represent the regular expression\n        escape character in any regular expressions that you submit through\n        <span class=\"hue-doc-cmdname\">impala-shell</span> . You might prefer to use the equivalent character class\n        names, such as <span class=\"hue-doc-codeph\">[[:digit:]]</span> instead of <span class=\"hue-doc-codeph\">\\d</span> which you\n        would have to escape as <span class=\"hue-doc-codeph\">\\\\d</span>.\n      </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            This example shows how group 0 matches the full pattern string, including the\n            portion outside any <span class=\"hue-doc-codeph\">()</span> group:\n          </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; select regexp_extract('abcdef123ghi456jkl','.*?(\\\\d+)',0);\n+------------------------------------------------------+\n| regexp_extract('abcdef123ghi456jkl', '.*?(\\\\d+)', 0) |\n+------------------------------------------------------+\n| abcdef123ghi456                                      |\n+------------------------------------------------------+\nReturned 1 row(s) in 0.11s</div><p>\n            This example shows how group 1 matches just the contents inside the first\n            <span class=\"hue-doc-codeph\">()</span> group in the pattern string:\n          </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; select regexp_extract('abcdef123ghi456jkl','.*?(\\\\d+)',1);\n+------------------------------------------------------+\n| regexp_extract('abcdef123ghi456jkl', '.*?(\\\\d+)', 1) |\n+------------------------------------------------------+\n| 456                                                  |\n+------------------------------------------------------+\nReturned 1 row(s) in 0.11s</div><p>\n            Unlike in earlier Impala releases, the regular expression library used in Impala 2.0\n            and later supports the <span class=\"hue-doc-codeph\">.*?</span> idiom for non-greedy matches. This\n            example shows how a pattern string starting with <span class=\"hue-doc-codeph\">.*?</span> matches the\n            shortest possible portion of the source string, returning the rightmost set of\n            lowercase letters. A pattern string both starting and ending with\n            <span class=\"hue-doc-codeph\">.*?</span> finds two potential matches of equal length, and returns the\n            first one found (the leftmost set of lowercase letters).\n          </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; select regexp_extract('AbcdBCdefGHI','.*?([[:lower:]]+)',1);\n+--------------------------------------------------------+\n| regexp_extract('abcdbcdefghi', '.*?([[:lower:]]+)', 1) |\n+--------------------------------------------------------+\n| def                                                    |\n+--------------------------------------------------------+\n[localhost:21000] &gt; select regexp_extract('AbcdBCdefGHI','.*?([[:lower:]]+).*?',1);\n+-----------------------------------------------------------+\n| regexp_extract('abcdbcdefghi', '.*?([[:lower:]]+).*?', 1) |\n+-----------------------------------------------------------+\n| bcd                                                       |\n+-----------------------------------------------------------+\n</div></dd><dt id=\"regexp_like\">\n          REGEXP_LIKE(STRING source, STRING pattern[, STRING options])\n        </dt><dd><b>Purpose:</b> Returns <span class=\"hue-doc-codeph\">true</span> or <span class=\"hue-doc-codeph\">false</span> to indicate\n          whether the source string contains anywhere inside it the regular expression given by\n          the pattern. The optional third argument consists of letter flags that change how the\n          match is performed, such as <span class=\"hue-doc-codeph\">i</span> for case-insensitive matching.\n          <p id=\"syntax_blurb\"><b>Syntax:</b></p><p>\n            The flags that you can include in the optional third argument are:\n          </p><ul><li><span class=\"hue-doc-codeph\">c</span>: Case-sensitive matching (the default).\n            </li><li><span class=\"hue-doc-codeph\">i</span>: Case-insensitive matching. If multiple instances of\n              <span class=\"hue-doc-codeph\">c</span> and <span class=\"hue-doc-codeph\">i</span> are included in the third argument, the\n              last such option takes precedence.\n            </li><li><span class=\"hue-doc-codeph\">m</span>: Multi-line matching. The <span class=\"hue-doc-codeph\">^</span> and\n              <span class=\"hue-doc-codeph\">$</span> operators match the start or end of any line within the source\n              string, not the start and end of the entire string.\n            </li><li><span class=\"hue-doc-codeph\">n</span>: Newline matching. The <span class=\"hue-doc-codeph\">.</span> operator can match\n              the newline character. A repetition operator such as <span class=\"hue-doc-codeph\">.*</span> can match\n              a portion of the source string that spans multiple lines.\n            </li></ul><p><b>Return type:</b><span class=\"hue-doc-codeph\">BOOLEAN</span></p><p id=\"regexp_re2\">\n        In Impala 2.0 and later, the Impala regular expression syntax conforms to the POSIX\n        Extended Regular Expression syntax used by the Google RE2 library. For details, see\n        <a class=\"hue-doc-external-link\" href=\"https://code.google.com/p/re2/\" target=\"_blank\">the RE2\n        documentation</a>. It has most idioms familiar from regular expressions in Perl,\n        Python, and so on, including <span class=\"hue-doc-codeph\">.*?</span> for non-greedy matches.\n      </p><p id=\"regexp_re2_warning\">\n        In Impala 2.0 and later, a change in the underlying regular expression library could\n        cause changes in the way regular expressions are interpreted by this function. Test any\n        queries that use regular expressions and adjust the expression patterns if necessary.\n        See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_incompatible_changes.xml\" data-doc-anchor-id=\"incompatible_changes_200\">Incompatible Changes Introduced in Impala 2.0.0</a>\n        for details.\n      </p><p id=\"regexp_escapes\">\n        Because the <span class=\"hue-doc-cmdname\">impala-shell</span> interpreter uses the <span class=\"hue-doc-codeph\">\\</span>\n        character for escaping, use <span class=\"hue-doc-codeph\">\\\\</span> to represent the regular expression\n        escape character in any regular expressions that you submit through\n        <span class=\"hue-doc-cmdname\">impala-shell</span> . You might prefer to use the equivalent character class\n        names, such as <span class=\"hue-doc-codeph\">[[:digit:]]</span> instead of <span class=\"hue-doc-codeph\">\\d</span> which you\n        would have to escape as <span class=\"hue-doc-codeph\">\\\\d</span>.\n      </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            This example shows how <span class=\"hue-doc-codeph\">regexp_like()</span> can test for the existence of\n            various kinds of regular expression patterns within a source string:\n          </p><div class=\"hue-doc-codeblock\">-- Matches because the 'f' appears somewhere in 'foo'.\nselect regexp_like('foo','f');\n+-------------------------+\n| regexp_like('foo', 'f') |\n+-------------------------+\n| true                    |\n+-------------------------+\n\n-- Does not match because the comparison is case-sensitive by default.\nselect regexp_like('foo','F');\n+-------------------------+\n| regexp_like('foo', 'f') |\n+-------------------------+\n| false                   |\n+-------------------------+\n\n-- The 3rd argument can change the matching logic, such as 'i' meaning case-insensitive.\nselect regexp_like('foo','F','i');\n+------------------------------+\n| regexp_like('foo', 'f', 'i') |\n+------------------------------+\n| true                         |\n+------------------------------+\n\n-- The familiar regular expression notations work, such as ^ and $ anchors...\nselect regexp_like('foo','f$');\n+--------------------------+\n| regexp_like('foo', 'f$') |\n+--------------------------+\n| false                    |\n+--------------------------+\n\nselect regexp_like('foo','o$');\n+--------------------------+\n| regexp_like('foo', 'o$') |\n+--------------------------+\n| true                     |\n+--------------------------+\n\n-- ...and repetition operators such as * and +\nselect regexp_like('foooooobar','fo+b');\n+-----------------------------------+\n| regexp_like('foooooobar', 'fo+b') |\n+-----------------------------------+\n| true                              |\n+-----------------------------------+\n\nselect regexp_like('foooooobar','fx*y*o*b');\n+---------------------------------------+\n| regexp_like('foooooobar', 'fx*y*o*b') |\n+---------------------------------------+\n| true                                  |\n+---------------------------------------+\n</div></dd><dt id=\"regexp_replace\">\n          REGEXP_REPLACE(STRING initial, STRING pattern, STRING replacement)\n        </dt><dd><b>Purpose:</b> Returns the initial argument with the regular expression pattern\n          replaced by the final argument string.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p id=\"regexp_re2\">\n        In Impala 2.0 and later, the Impala regular expression syntax conforms to the POSIX\n        Extended Regular Expression syntax used by the Google RE2 library. For details, see\n        <a class=\"hue-doc-external-link\" href=\"https://code.google.com/p/re2/\" target=\"_blank\">the RE2\n        documentation</a>. It has most idioms familiar from regular expressions in Perl,\n        Python, and so on, including <span class=\"hue-doc-codeph\">.*?</span> for non-greedy matches.\n      </p><p id=\"regexp_re2_warning\">\n        In Impala 2.0 and later, a change in the underlying regular expression library could\n        cause changes in the way regular expressions are interpreted by this function. Test any\n        queries that use regular expressions and adjust the expression patterns if necessary.\n        See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_incompatible_changes.xml\" data-doc-anchor-id=\"incompatible_changes_200\">Incompatible Changes Introduced in Impala 2.0.0</a>\n        for details.\n      </p><p id=\"regexp_escapes\">\n        Because the <span class=\"hue-doc-cmdname\">impala-shell</span> interpreter uses the <span class=\"hue-doc-codeph\">\\</span>\n        character for escaping, use <span class=\"hue-doc-codeph\">\\\\</span> to represent the regular expression\n        escape character in any regular expressions that you submit through\n        <span class=\"hue-doc-cmdname\">impala-shell</span> . You might prefer to use the equivalent character class\n        names, such as <span class=\"hue-doc-codeph\">[[:digit:]]</span> instead of <span class=\"hue-doc-codeph\">\\d</span> which you\n        would have to escape as <span class=\"hue-doc-codeph\">\\\\d</span>.\n      </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            These examples show how you can replace parts of a string matching a pattern with\n            replacement text, which can include backreferences to any <span class=\"hue-doc-codeph\">()</span> groups\n            in the pattern string. The backreference numbers start at 1, and any\n            <span class=\"hue-doc-codeph\">\\</span> characters must be escaped as <span class=\"hue-doc-codeph\">\\\\</span>.\n          </p><p>\n            Replace a character pattern with new text:\n          </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; select regexp_replace('aaabbbaaa','b+','xyz');\n+------------------------------------------+\n| regexp_replace('aaabbbaaa', 'b+', 'xyz') |\n+------------------------------------------+\n| aaaxyzaaa                                |\n+------------------------------------------+\nReturned 1 row(s) in 0.11s</div><p>\n            Replace a character pattern with substitution text that includes the original\n            matching text:\n          </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; select regexp_replace('aaabbbaaa','(b+)','&lt;\\\\1&gt;');\n+----------------------------------------------+\n| regexp_replace('aaabbbaaa', '(b+)', '&lt;\\\\1&gt;') |\n+----------------------------------------------+\n| aaa&lt;bbb&gt;aaa                                  |\n+----------------------------------------------+\nReturned 1 row(s) in 0.11s</div><p>\n            Remove all characters that are not digits:\n          </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; select regexp_replace('123-456-789','[^[:digit:]]','');\n+---------------------------------------------------+\n| regexp_replace('123-456-789', '[^[:digit:]]', '') |\n+---------------------------------------------------+\n| 123456789                                         |\n+---------------------------------------------------+\nReturned 1 row(s) in 0.12s</div></dd><dt id=\"repeat\">\n          REPEAT(STRING str, INT n)\n        </dt><dd><b>Purpose:</b> Returns the argument string repeated a specified number of times.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p></dd><dt id=\"replace\">\n          REPLACE(STRING initial, STRING target, STRING replacement)\n        </dt><dd><b>Purpose:</b> Returns the initial argument with all occurrences of the target string\n          replaced by the replacement string.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            Because this function does not use any regular expression patterns, it is typically\n            faster than <span class=\"hue-doc-codeph\">regexp_replace()</span> for simple string substitutions.\n          </p><p>\n            If any argument is <span class=\"hue-doc-codeph\">NULL</span>, the return value is <span class=\"hue-doc-codeph\">NULL</span>.\n          </p><p>\n            Matching is case-sensitive.\n          </p><p>\n            If the replacement string contains another instance of the target string, the\n            expansion is only performed once, instead of applying again to the newly constructed\n            string.\n          </p><p id=\"added_in_290\"><b>Added in:</b>Impala 2.9.0</p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">-- Replace one string with another.\nselect replace('hello world','world','earth');\n+------------------------------------------+\n| replace('hello world', 'world', 'earth') |\n+------------------------------------------+\n| hello earth                              |\n+------------------------------------------+\n\n-- All occurrences of the target string are replaced.\nselect replace('hello world','o','0');\n+----------------------------------+\n| replace('hello world', 'o', '0') |\n+----------------------------------+\n| hell0 w0rld                      |\n+----------------------------------+\n\n-- If no match is found, the original string is returned unchanged.\nselect replace('hello world','xyz','abc');\n+--------------------------------------+\n| replace('hello world', 'xyz', 'abc') |\n+--------------------------------------+\n| hello world                          |\n+--------------------------------------+\n</div></dd><dt id=\"reverse\">\n          REVERSE(STRING a)\n        </dt><dd><b>Purpose:</b> Returns the argument string with characters in reversed order.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p></dd><dt id=\"right\">\n          RIGHT(STRING a, INT num_chars)\n        </dt><dd>\n          See the <span class=\"hue-doc-codeph\">STRRIGHT()</span> function.\n        </dd><dt id=\"rpad\">\n          RPAD(STRING str, INT len, STRING pad)\n        </dt><dd><b>Purpose:</b> Returns a string of a specified length, based on the first argument\n          string. If the specified string is too short, it is padded on the right with a\n          repeating sequence of the characters from the pad string. If the specified string is\n          too long, it is truncated on the right.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p></dd><dt id=\"rtrim\">\n          RTRIM(STRING a [, STRING chars_to_trim])\n        </dt><dd><b>Purpose:</b> Returns the argument string with all occurrences of characters\n          specified by the second argument removed from the right side. Removes spaces if the\n          second argument is not specified.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p></dd><dt id=\"space\">\n          SPACE(INT n)\n        </dt><dd><b>Purpose:</b> Returns a concatenated string of the specified number of spaces.\n          Shorthand for <span class=\"hue-doc-codeph\">REPEAT(' ',<span class=\"hue-doc-varname\">n</span>)</span>.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p></dd><dt id=\"split_part\">\n          SPLIT_PART(STRING source, STRING delimiter, BIGINT index)\n        </dt><dd><b>Purpose:</b> Returns the requested <span class=\"hue-doc-codeph\">index</span>th part of the input\n          <span class=\"hue-doc-varname\">source</span> string split by the <span class=\"hue-doc-varname\">delimiter</span>.\n          <ul><li>\n              If <span class=\"hue-doc-varname\">index</span> is a positive number, returns the\n              <span class=\"hue-doc-varname\">index</span>th part from the left within the <span class=\"hue-doc-varname\">source</span>\n              string.\n            </li><li>\n              If <span class=\"hue-doc-varname\">index</span> is a negative number, returns the\n              <span class=\"hue-doc-varname\">index</span>th part from the right within the\n              <span class=\"hue-doc-varname\">source</span> string.\n            </li><li>\n              If <span class=\"hue-doc-varname\">index</span> is 0, returns an error.\n            </li></ul><p>\n            The <span class=\"hue-doc-varname\">delimiter</span> can consist of multiple characters, not just a\n            single character.\n          </p><p>\n            All matching of the delimiter is done exactly, not using any regular expression\n            patterns.\n          </p><p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p id=\"example_blurb\"><b>Examples:</b></p><p><span class=\"hue-doc-codeph\">SPLIT_PART('x,y,z',',',2)</span> returns <span class=\"hue-doc-codeph\">'y'</span>.\n          </p><p><span class=\"hue-doc-codeph\">SPLIT_PART('one***two***three','***',2)</span> returns\n            <span class=\"hue-doc-codeph\">'two'</span>.\n          </p><p><span class=\"hue-doc-codeph\">SPLIT_PART('abc@@def@@ghi', '@@', 3)</span> returns\n            <span class=\"hue-doc-codeph\">'ghi'</span>.\n          </p><p><span class=\"hue-doc-codeph\">SPLIT_PART('abc@@def@@ghi', '@@', -3)</span> returns\n            <span class=\"hue-doc-codeph\">'abc'</span>.\n          </p></dd><dt id=\"strleft\">\n          STRLEFT(STRING a, INT num_chars)\n        </dt><dd><b>Purpose:</b> Returns the leftmost characters of the string. Shorthand for a call to\n          <span class=\"hue-doc-codeph\">SUBSTR()</span> with 2 arguments.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p></dd><dt id=\"strright\">\n          STRRIGHT(STRING a, INT num_chars)\n        </dt><dd><b>Purpose:</b> Returns the rightmost characters of the string. Shorthand for a call\n          to <span class=\"hue-doc-codeph\">SUBSTR()</span> with 2 arguments.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p></dd><dt id=\"substr\">\n          SUBSTR(STRING a, INT start [, INT len]),\n          <span class=\"hue-doc-ph\" id=\"substring\">SUBSTRING(STRING a, INT start [, INT len])</span></dt><dd><b>Purpose:</b> Returns the portion of the string starting at a specified point,\n          optionally with a specified maximum length. The characters in the string are indexed\n          starting at 1.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p></dd><dt id=\"translate\">\n          TRANSLATE(STRING input, STRING from, STRING to)\n        </dt><dd><b>Purpose:</b> Returns the <span class=\"hue-doc-codeph\">input</span> string with each character in the\n          <span class=\"hue-doc-codeph\">from</span> argument replaced with the corresponding character in the\n          <span class=\"hue-doc-codeph\">to</span> argument. The characters are matched in the order they appear in\n          <span class=\"hue-doc-codeph\">from</span> and <span class=\"hue-doc-codeph\">to</span>.\n          <p>\n            For example: <span class=\"hue-doc-codeph\">translate ('hello world','world','earth')</span> returns\n            <span class=\"hue-doc-codeph\">'hetta earth'</span>.\n          </p><p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p><b>Usage notes:</b></p><p>\n            If <span class=\"hue-doc-codeph\">from</span> contains more characters than <span class=\"hue-doc-codeph\">to</span>, the\n            <span class=\"hue-doc-codeph\">from</span> characters that are beyond the length of <span class=\"hue-doc-codeph\">to</span>\n            are removed in the result.\n          </p><p>\n            For example:\n          </p><p><span class=\"hue-doc-codeph\">translate('abcdedg', 'bcd', '1')</span> returns <span class=\"hue-doc-codeph\">'a1eg'</span>.\n          </p><p><span class=\"hue-doc-codeph\">translate('Unit Number#2', '# ', '_')</span> returns\n            <span class=\"hue-doc-codeph\">'UnitNumber_2'</span>.\n          </p><p>\n            If <span class=\"hue-doc-codeph\">from</span> is <span class=\"hue-doc-codeph\">NULL</span>, the function returns\n            <span class=\"hue-doc-codeph\">NULL</span>.\n          </p><p>\n            If <span class=\"hue-doc-codeph\">to</span> contains more characters than <span class=\"hue-doc-codeph\">from</span>, the\n            extra characters in <span class=\"hue-doc-codeph\">to</span> are ignored.\n          </p><p>\n            If <span class=\"hue-doc-codeph\">from</span> contains duplicate characters, the duplicate character is\n            replaced with the first matching character in <span class=\"hue-doc-codeph\">to</span>.\n          </p><p>\n            For example: <span class=\"hue-doc-codeph\">translate ('hello','ll','67')</span> returns\n            <span class=\"hue-doc-codeph\">'he66o'</span>.\n          </p></dd><dt id=\"trim\">\n          TRIM(STRING a)\n        </dt><dd><b>Purpose:</b> Returns the input string with both leading and trailing spaces\n          removed. The same as passing the string through both <span class=\"hue-doc-codeph\">LTRIM()</span> and\n          <span class=\"hue-doc-codeph\">RTRIM()</span>.\n          <p><b>Usage notes:</b> Often used during data cleansing operations during the ETL\n            cycle, if input values might still have surrounding spaces. For a more\n            general-purpose function that can remove other leading and trailing characters\n            besides spaces, see <span class=\"hue-doc-codeph\">BTRIM()</span>.\n          </p><p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p></dd><dt id=\"upper\">\n          UPPER(STRING a), <span class=\"hue-doc-ph\" id=\"ucase\">UCASE(STRING a)</span></dt><dd><b>Purpose:</b> Returns the argument string converted to all-uppercase.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p id=\"case_insensitive_comparisons_tip\">\n        In Impala 2.5 and higher, you can simplify queries that use many\n        <span class=\"hue-doc-codeph\">UPPER()</span> and <span class=\"hue-doc-codeph\">LOWER()</span> calls to do case-insensitive\n        comparisons, by using the <span class=\"hue-doc-codeph\">ILIKE</span> or <span class=\"hue-doc-codeph\">IREGEXP</span> operators\n        instead. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_operators.xml\" data-doc-anchor-id=\"ilike\">ILIKE Operator</a> and\n        <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_operators.xml\" data-doc-anchor-id=\"iregexp\">IREGEXP Operator</a> for details.\n      </p></dd></dl></div></div></div>","title":"Impala String Functions"}