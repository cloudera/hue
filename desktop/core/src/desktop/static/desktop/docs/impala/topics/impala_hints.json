{"body":"<div><div id=\"hints\"><div class=\"hue-doc-title\">Optimizer Hints</div><div><p>\n      The Impala SQL supports query hints, for fine-tuning the inner workings of queries.\n      Specify hints as a temporary workaround for expensive queries, where missing statistics or\n      other factors cause inefficient performance.\n    </p><p>\n      Hints are most often used for the resource-intensive Impala queries, such as:\n    </p><ul><li>\n        Join queries involving large tables, where intermediate result sets are transmitted\n        across the network to evaluate the join conditions.\n      </li><li>\n        Inserting into partitioned Parquet tables, where many memory buffers could be allocated\n        on each host to hold intermediate results for each partition.\n      </li></ul><p id=\"syntax_blurb\"><b>Syntax:</b></p><p>\n      In Impala 2.0 and higher, you can specify the hints inside comments\n      that use either the <span class=\"hue-doc-codeph\">/* */</span> or <span class=\"hue-doc-codeph\">--</span> notation. Specify a\n      <span class=\"hue-doc-codeph\">+</span> symbol immediately before the hint name. Recently added hints are only\n      available using the <span class=\"hue-doc-codeph\">/* */</span> and <span class=\"hue-doc-codeph\">--</span> notation. For clarity,\n      the <span class=\"hue-doc-codeph\">/* */</span> and <span class=\"hue-doc-codeph\">--</span> styles are used in the syntax and\n      examples throughout this section. With the <span class=\"hue-doc-codeph\">/* */</span> or <span class=\"hue-doc-codeph\">--</span>\n      notation for hints, specify a <span class=\"hue-doc-codeph\">+</span> symbol immediately before the first hint\n      name. Multiple hints can be specified separated by commas, for example <span class=\"hue-doc-codeph\">/*\n      +clustered,shuffle */</span></p><div class=\"hue-doc-codeblock\">SELECT STRAIGHT_JOIN <span class=\"hue-doc-varname\">select_list</span> FROM\n<span class=\"hue-doc-varname\">join_left_hand_table</span>\n  JOIN /* +BROADCAST|SHUFFLE */\n<span class=\"hue-doc-varname\">join_right_hand_table</span><span class=\"hue-doc-varname\">remainder_of_query</span>;\n\nSELECT <span class=\"hue-doc-varname\">select_list</span> FROM\n<span class=\"hue-doc-varname\">join_left_hand_table</span>\n  JOIN -- +BROADCAST|SHUFFLE\n<span class=\"hue-doc-varname\">join_right_hand_table</span><span class=\"hue-doc-varname\">remainder_of_query</span>;\n\nINSERT <span class=\"hue-doc-varname\">insert_clauses</span>\n  /* +SHUFFLE|NOSHUFFLE */\n  SELECT <span class=\"hue-doc-varname\">remainder_of_query</span>;\n\nINSERT <span class=\"hue-doc-varname\">insert_clauses</span>\n  -- +SHUFFLE|NOSHUFFLE\n  SELECT <span class=\"hue-doc-varname\">remainder_of_query</span>;\n\n<span class=\"hue-doc-ph\">\nINSERT /* +SHUFFLE|NOSHUFFLE */\n  <span class=\"hue-doc-varname\">insert_clauses</span>\n  SELECT <span class=\"hue-doc-varname\">remainder_of_query</span>;</span><span class=\"hue-doc-ph\">\nINSERT -- +SHUFFLE|NOSHUFFLE\n  <span class=\"hue-doc-varname\">insert_clauses</span>\n  SELECT <span class=\"hue-doc-varname\">remainder_of_query</span>;</span><span class=\"hue-doc-ph\">\nUPSERT /* +SHUFFLE|NOSHUFFLE */\n  <span class=\"hue-doc-varname\">upsert_clauses</span>\n  SELECT <span class=\"hue-doc-varname\">remainder_of_query</span>;</span><span class=\"hue-doc-ph\">\nUPSERT -- +SHUFFLE|NOSHUFFLE\n  <span class=\"hue-doc-varname\">upsert_clauses</span>\n  SELECT <span class=\"hue-doc-varname\">remainder_of_query</span>;</span><span class=\"hue-doc-ph\">SELECT <span class=\"hue-doc-varname\">select_list</span> FROM\n<span class=\"hue-doc-varname\">table_ref</span>\n  /* +{SCHEDULE_CACHE_LOCAL | SCHEDULE_DISK_LOCAL | SCHEDULE_REMOTE}\n    [,RANDOM_REPLICA] */\n<span class=\"hue-doc-varname\">remainder_of_query</span>;</span><span class=\"hue-doc-ph\">INSERT <span class=\"hue-doc-varname\">insert_clauses</span>\n  -- +CLUSTERED\n  SELECT <span class=\"hue-doc-varname\">remainder_of_query</span>;\n\nINSERT <span class=\"hue-doc-varname\">insert_clauses</span>\n  /* +CLUSTERED */\n  SELECT <span class=\"hue-doc-varname\">remainder_of_query</span>;</span><span class=\"hue-doc-ph\">INSERT -- +CLUSTERED\n  <span class=\"hue-doc-varname\">insert_clauses</span>\n  SELECT <span class=\"hue-doc-varname\">remainder_of_query</span>;\n\nINSERT /* +CLUSTERED */\n  <span class=\"hue-doc-varname\">insert_clauses</span>\n  SELECT <span class=\"hue-doc-varname\">remainder_of_query</span>;\n\nUPSERT -- +CLUSTERED\n  <span class=\"hue-doc-varname\">upsert_clauses</span>\n  SELECT <span class=\"hue-doc-varname\">remainder_of_query</span>;\n\nUPSERT /* +CLUSTERED */\n  <span class=\"hue-doc-varname\">upsert_clauses</span>\n  SELECT <span class=\"hue-doc-varname\">remainder_of_query</span>;</span>\n\nCREATE /* +SHUFFLE|NOSHUFFLE */\n  <span class=\"hue-doc-varname\">table_clauses</span>\n  AS SELECT <span class=\"hue-doc-varname\">remainder_of_query</span>;\n\nCREATE -- +SHUFFLE|NOSHUFFLE\n  <span class=\"hue-doc-varname\">table_clauses</span>\n  AS SELECT <span class=\"hue-doc-varname\">remainder_of_query</span>;\n\nCREATE /* +CLUSTERED|NOCLUSTERED */\n  <span class=\"hue-doc-varname\">table_clauses</span>\n  AS SELECT <span class=\"hue-doc-varname\">remainder_of_query</span>;\n\nCREATE -- +CLUSTERED|NOCLUSTERED\n  <span class=\"hue-doc-varname\">table_clauses</span>\n  AS SELECT <span class=\"hue-doc-varname\">remainder_of_query</span>;\n</div><p>\n      The square bracket style hints are supported for backward compatibility, but the syntax is\n      deprecated and will be removed in a future release. For that reason, any newly added hints\n      are not available with the square bracket syntax.\n    </p><div class=\"hue-doc-codeblock\">SELECT STRAIGHT_JOIN <span class=\"hue-doc-varname\">select_list</span> FROM\n<span class=\"hue-doc-varname\">join_left_hand_table</span>\n  JOIN [{ /* +BROADCAST */ | /* +SHUFFLE */ }]\n<span class=\"hue-doc-varname\">join_right_hand_table</span><span class=\"hue-doc-varname\">remainder_of_query</span>;\n\nINSERT <span class=\"hue-doc-varname\">insert_clauses</span>\n  [{ /* +SHUFFLE */ | /* +NOSHUFFLE */ }]\n  [<span class=\"hue-doc-ph\">/* +CLUSTERED */</span>]\n  SELECT <span class=\"hue-doc-varname\">remainder_of_query</span>;\n\n<span class=\"hue-doc-ph\">\nUPSERT [{ /* +SHUFFLE */ | /* +NOSHUFFLE */ }]\n  [<span class=\"hue-doc-ph\">/* +CLUSTERED */</span>]\n  <span class=\"hue-doc-varname\">upsert_clauses</span>\n  SELECT <span class=\"hue-doc-varname\">remainder_of_query</span>;</span></div><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n      With both forms of hint syntax, include the <span class=\"hue-doc-codeph\">STRAIGHT_JOIN</span> keyword\n      immediately after the <span class=\"hue-doc-codeph\">SELECT</span> and any <span class=\"hue-doc-codeph\">DISTINCT</span> or\n      <span class=\"hue-doc-codeph\">ALL</span> keywords to prevent Impala from reordering the tables in a way that\n      makes the join-related hints ineffective.\n    </p><p id=\"straight_join_nested_queries\">\n        The <span class=\"hue-doc-codeph\">STRAIGHT_JOIN</span> hint affects the join order of table references in\n        the query block containing the hint. It does not affect the join order of nested\n        queries, such as views, inline views, or <span class=\"hue-doc-codeph\">WHERE</span>-clause subqueries. To\n        use this hint for performance tuning of complex queries, apply the hint to all query\n        blocks that need a fixed join order.\n      </p><p>\n      To reduce the need to use hints, run the <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement against\n      all tables involved in joins, or used as the source tables for <span class=\"hue-doc-codeph\">INSERT ...\n      SELECT</span> operations where the destination is a partitioned Parquet table. Do this\n      operation after loading data or making substantial changes to the data within each table.\n      Having up-to-date statistics helps Impala choose more efficient query plans without the\n      need for hinting. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_stats.xml\" data-doc-anchor-id=\"perf_stats\">Table and Column Statistics</a> for details and\n      examples.\n    </p><p>\n      To see which join strategy is used for a particular query, examine the\n      <span class=\"hue-doc-codeph\">EXPLAIN</span> output for that query. See\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_explain_plan.xml\" data-doc-anchor-id=\"perf_explain\">Using the EXPLAIN Plan for Performance Tuning</a> for details and examples.\n    </p><p><b>Hints for join queries:</b></p><p>\n      The <span class=\"hue-doc-codeph\">/* +BROADCAST */</span> and <span class=\"hue-doc-codeph\">/* +SHUFFLE */</span> hints control\n      the execution strategy for join queries. Specify one of the following constructs\n      immediately after the <span class=\"hue-doc-codeph\">JOIN</span> keyword in a query:\n    </p><ul><li><span class=\"hue-doc-codeph\">/* +SHUFFLE */</span> makes that join operation use the <q>partitioned</q>\n        technique, which divides up corresponding rows from both tables using a hashing\n        algorithm, sending subsets of the rows to other nodes for processing. (The keyword\n        <span class=\"hue-doc-codeph\">SHUFFLE</span> is used to indicate a <q>partitioned join</q>, because that\n        type of join is not related to <q>partitioned tables</q>.) Since the alternative\n        <q>broadcast</q> join mechanism is the default when table and index statistics are\n        unavailable, you might use this hint for queries where broadcast joins are unsuitable;\n        typically, partitioned joins are more efficient for joins between large tables of\n        similar size.\n      </li><li><span class=\"hue-doc-codeph\">/* +BROADCAST */</span> makes that join operation use the <q>broadcast</q>\n        technique that sends the entire contents of the right-hand table to all nodes involved\n        in processing the join. This is the default mode of operation when table and index\n        statistics are unavailable, so you would typically only need it if stale metadata caused\n        Impala to mistakenly choose a partitioned join operation. Typically, broadcast joins are\n        more efficient in cases where one table is much smaller than the other. (Put the smaller\n        table on the right side of the <span class=\"hue-doc-codeph\">JOIN</span> operator.)\n      </li></ul><p><b>Hints for INSERT ... SELECT and CREATE TABLE AS SELECT (CTAS):</b></p><p id=\"insert_hints\">\n      When inserting into partitioned tables, such as using the Parquet file format, you can\n      include a hint in the <span class=\"hue-doc-codeph\">INSERT</span> or <span class=\"hue-doc-codeph\">CREATE TABLE AS\n      SELECT(CTAS)</span> statements to fine-tune the overall performance of the operation and\n      its resource usage.\n    </p><p>\n      You would only use hints if an <span class=\"hue-doc-codeph\">INSERT</span> or <span class=\"hue-doc-codeph\">CTAS</span> into a\n      partitioned table was failing due to capacity limits, or if such an operation was\n      succeeding but with less-than-optimal performance.\n    </p><ul><li><span class=\"hue-doc-codeph\">/* +SHUFFLE */</span> and <span class=\"hue-doc-codeph\">/* +NOSHUFFLE */</span> Hints\n        <ul><li><span class=\"hue-doc-codeph\">/* +SHUFFLE */</span> adds an exchange node, before writing the data,\n            which re-partitions the result of the <span class=\"hue-doc-codeph\">SELECT</span> based on the\n            partitioning columns of the target table. With this hint, only one node writes to a\n            partition at a time, minimizing the global number of simultaneous writes and the\n            number of memory buffers holding data for individual partitions. This also reduces\n            fragmentation, resulting in fewer files. Thus it reduces overall resource usage of\n            the <span class=\"hue-doc-codeph\">INSERT</span> or <span class=\"hue-doc-codeph\">CTAS</span> operation and allows some\n            operations to succeed that otherwise would fail. It does involve some data transfer\n            between the nodes so that the data files for a particular partition are all written\n            on the same node.\n            <p>\n              Use <span class=\"hue-doc-codeph\">/* +SHUFFLE */</span> in cases where an <span class=\"hue-doc-codeph\">INSERT</span> or\n              <span class=\"hue-doc-codeph\">CTAS</span> statement fails or runs inefficiently due to all nodes\n              attempting to write data for all partitions.\n            </p><p>\n              If the table is unpartitioned or every partitioning expression is constant, then\n              <span class=\"hue-doc-codeph\">/* +SHUFFLE */</span> will cause every write to happen on the\n              coordinator node.\n            </p></li><li><span class=\"hue-doc-codeph\">/* +NOSHUFFLE */</span> does not add exchange node before inserting to\n            partitioned tables and disables re-partitioning. So the selected execution plan\n            might be faster overall, but might also produce a larger number of small data files\n            or exceed capacity limits, causing the <span class=\"hue-doc-codeph\">INSERT</span> or\n            <span class=\"hue-doc-codeph\">CTAS</span> operation to fail.\n            <p>\n              Impala automatically uses the <span class=\"hue-doc-codeph\">/* +SHUFFLE */</span> method if any\n              partition key column in the source table, mentioned in the <span class=\"hue-doc-codeph\">SELECT</span>\n              clause, does not have column statistics. In this case, use the <span class=\"hue-doc-codeph\">/*\n              +NOSHUFFLE */</span> hint if you want to override this default behavior.\n            </p></li><li>\n            If column statistics are available for all partition key columns in the source table\n            mentioned in the <span class=\"hue-doc-codeph\">INSERT ... SELECT</span> or <span class=\"hue-doc-codeph\">CTAS</span> query,\n            Impala chooses whether to use the <span class=\"hue-doc-codeph\">/* +SHUFFLE */</span> or <span class=\"hue-doc-codeph\">/*\n            +NOSHUFFLE */</span> technique based on the estimated number of distinct values in\n            those columns and the number of nodes involved in the operation. In this case, you\n            might need the <span class=\"hue-doc-codeph\">/* +SHUFFLE */</span> or the <span class=\"hue-doc-codeph\">/* +NOSHUFFLE\n            */</span> hint to override the execution plan selected by Impala.\n          </li></ul></li><li><span class=\"hue-doc-codeph\">/* +CLUSTERED */</span> and <span class=\"hue-doc-codeph\">/* +NOCLUSTERED */</span> Hints\n        <ul><li><span class=\"hue-doc-codeph\">/* +CLUSTERED */</span> sorts data by the partition columns before\n            inserting to ensure that only one partition is written at a time per node. Use this\n            hint to reduce the number of files kept open and the number of buffers kept in\n            memory simultaneously. This technique is primarily useful for inserts into Parquet\n            tables, where the large block size requires substantial memory to buffer data for\n            multiple output files at once. This hint is available in\n            Impala 2.8 or higher.\n            <p>\n              Starting in Impala 3.0, <span class=\"hue-doc-codeph\">/* +CLUSTERED */</span>\n              is the default behavior for HDFS tables.\n            </p></li><li><span class=\"hue-doc-codeph\">/* +NOCLUSTERED */</span> does not sort by primary key before insert. This\n            hint is available in Impala 2.8 or higher.\n            <p>\n              Use this hint when inserting to Kudu tables.\n            </p><p>\n              In the versions lower than Impala 3.0, <span class=\"hue-doc-codeph\">/*\n              +NOCLUSTERED */</span> is the default in HDFS tables.\n            </p></li></ul></li></ul><p><b>Kudu consideration:</b></p><p id=\"kudu_hints\">\n        Starting from Impala 2.9, the <span class=\"hue-doc-codeph\">INSERT</span> or\n        <span class=\"hue-doc-codeph\">UPSERT</span> operations into Kudu tables automatically add an exchange and a\n        sort node to the plan that partitions and sorts the rows according to the\n        partitioning/primary key scheme of the target table (unless the number of rows to be\n        inserted is small enough to trigger single node execution). Since Kudu partitions and\n        sorts rows on write, pre-partitioning and sorting takes some of the load off of Kudu and\n        helps large <span class=\"hue-doc-codeph\">INSERT</span> operations to complete without timing out. However,\n        this default behavior may slow down the end-to-end performance of the\n        <span class=\"hue-doc-codeph\">INSERT</span> or <span class=\"hue-doc-codeph\">UPSERT</span> operations. Starting\n        fromImpala 2.10, you can use the<span class=\"hue-doc-codeph\"> /*\n        +NOCLUSTERED */</span> and <span class=\"hue-doc-codeph\">/* +NOSHUFFLE */</span> hints together to disable\n        partitioning and sorting before the rows are sent to Kudu. Additionally, since sorting\n        may consume a large amount of memory, consider setting the <span class=\"hue-doc-codeph\">MEM_LIMIT</span>\n        query option for those queries.\n      </p><p><b>Hints for scheduling of scan ranges (HDFS data blocks or Kudu\n        tablets)</b></p><p> The hints <span class=\"hue-doc-codeph\">/* +SCHEDULE_CACHE_LOCAL\n      */</span>, <span class=\"hue-doc-codeph\">/* +SCHEDULE_DISK_LOCAL */</span>, and <span class=\"hue-doc-codeph\">/*\n        +SCHEDULE_REMOTE */</span> have the same effect as specifying the\n        <span class=\"hue-doc-codeph\">REPLICA_PREFERENCE</span> query option with the respective\n      option settings of <span class=\"hue-doc-codeph\">CACHE_LOCAL</span>,\n        <span class=\"hue-doc-codeph\">DISK_LOCAL</span>, or <span class=\"hue-doc-codeph\">REMOTE</span>. </p><p> Specifying the replica preference as a query hint\n      always overrides the query option setting. </p><p>The hint <span class=\"hue-doc-codeph\">/* +RANDOM_REPLICA */</span> is the\n      same as enabling the <span class=\"hue-doc-codeph\">SCHEDULE_RANDOM_REPLICA</span> query\n      option. </p><p> You can use these hints in combination by separating\n      them with commas, for example, <span class=\"hue-doc-codeph\">/*\n        +SCHEDULE_CACHE_LOCAL,RANDOM_REPLICA */</span>. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_replica_preference.xml\" data-doc-anchor-id=\"replica_preference\">REPLICA_PREFERENCE Query Option (Impala 2.7 or higher only)</a> and <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_schedule_random_replica.xml\" data-doc-anchor-id=\"schedule_random_replica\">SCHEDULE_RANDOM_REPLICA Query Option (Impala 2.5 or higher only)</a> for information about how these settings influence the way Impala\n      processes HDFS data blocks or Kudu tablets. </p><p>Specifying either the\n        <span class=\"hue-doc-codeph\">SCHEDULE_RANDOM_REPLICA</span> query option or the\n      corresponding <span class=\"hue-doc-codeph\">RANDOM_REPLICA</span> query hint enables the\n      random tie-breaking behavior when processing data blocks during the query. </p><p><b>Suggestions versus directives:</b></p><p>\n      In early Impala releases, hints were always obeyed and so acted more like directives. Once\n      Impala gained join order optimizations, sometimes join queries were automatically\n      reordered in a way that made a hint irrelevant. Therefore, the hints act more like\n      suggestions in Impala 1.2.2 and higher.\n    </p><p>\n      To force Impala to follow the hinted execution mechanism for a join query, include the\n      <span class=\"hue-doc-codeph\">STRAIGHT_JOIN</span> keyword in the <span class=\"hue-doc-codeph\">SELECT</span> statement. See\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_joins.xml\" data-doc-anchor-id=\"straight_join\">Overriding Join Reordering with STRAIGHT_JOIN</a> for details. When you use this\n      technique, Impala does not reorder the joined tables at all, so you must be careful to\n      arrange the join order to put the largest table (or subquery result set) first, then the\n      smallest, second smallest, third smallest, and so on. This ordering lets Impala do the\n      most I/O-intensive parts of the query using local reads on the DataNodes, and then reduce\n      the size of the intermediate result set as much as possible as each subsequent table or\n      subquery result set is joined.\n    </p><p id=\"restrictions_blurb\"><b>Restrictions:</b></p><p>\n      Queries that include subqueries in the <span class=\"hue-doc-codeph\">WHERE</span> clause can be rewritten\n      internally as join queries. Currently, you cannot apply hints to the joins produced by\n      these types of queries.\n    </p><p>\n      Because hints can prevent queries from taking advantage of new metadata or improvements in\n      query planning, use them only when required to work around performance issues, and be\n      prepared to remove them when they are no longer required, such as after a new Impala\n      release or bug fix.\n    </p><p>\n      In particular, the <span class=\"hue-doc-codeph\">/* +BROADCAST */</span> and <span class=\"hue-doc-codeph\">/* +SHUFFLE */</span>\n      hints are expected to be needed much less frequently in Impala 1.2.2 and higher, because\n      the join order optimization feature in combination with the <span class=\"hue-doc-codeph\">COMPUTE STATS</span>\n      statement now automatically choose join order and join mechanism without the need to\n      rewrite the query and add hints. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_joins.xml\" data-doc-anchor-id=\"perf_joins\">Performance Considerations for Join Queries</a> for\n      details.\n    </p><p id=\"compatibility_blurb\"><b>Compatibility:</b></p><p>\n      The hints embedded within <span class=\"hue-doc-codeph\">--</span> comments are compatible with Hive queries.\n      The hints embedded within <span class=\"hue-doc-codeph\">/* */</span> comments or <span class=\"hue-doc-codeph\">[ ]</span> square\n      brackets are not recognized by or not compatible with Hive. For example, Hive raises an\n      error for Impala hints within <span class=\"hue-doc-codeph\">/* */</span> comments because it does not\n      recognize the Impala hint names.\n    </p><p id=\"view_blurb\"><b>Considerations for views:</b></p><p>\n      If you use a hint in the query that defines a view, the hint is preserved when you query\n      the view. Impala internally rewrites all hints in views to use the <span class=\"hue-doc-codeph\">--</span>\n      comment notation, so that Hive can query such views without errors due to unrecognized\n      hint names.\n    </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n      For example, this query joins a large customer table with a small lookup table of less\n      than 100 rows. The right-hand table can be broadcast efficiently to all nodes involved in\n      the join. Thus, you would use the <span class=\"hue-doc-codeph\">/* +broadcast */</span> hint to force a\n      broadcast join strategy:\n    </p><div class=\"hue-doc-codeblock\">select straight_join customer.address, state_lookup.state_name\n  from customer join <b>/* +broadcast */</b> state_lookup\n  on customer.state_id = state_lookup.state_id;</div><p>\n      This query joins two large tables of unpredictable size. You might benchmark the query\n      with both kinds of hints and find that it is more efficient to transmit portions of each\n      table to other nodes for processing. Thus, you would use the <span class=\"hue-doc-codeph\">/* +shuffle\n      */</span> hint to force a partitioned join strategy:\n    </p><div class=\"hue-doc-codeblock\">select straight_join weather.wind_velocity, geospatial.altitude\n  from weather join <b>/* +shuffle */</b> geospatial\n  on weather.lat = geospatial.lat and weather.long = geospatial.long;</div><p>\n      For joins involving three or more tables, the hint applies to the tables on either side of\n      that specific <span class=\"hue-doc-codeph\">JOIN</span> keyword. The <span class=\"hue-doc-codeph\">STRAIGHT_JOIN</span> keyword\n      ensures that joins are processed in a predictable order from left to right. For example,\n      this query joins <span class=\"hue-doc-codeph\">t1</span> and <span class=\"hue-doc-codeph\">t2</span> using a partitioned join,\n      then joins that result set to <span class=\"hue-doc-codeph\">t3</span> using a broadcast join:\n    </p><div class=\"hue-doc-codeblock\">select straight_join t1.name, t2.id, t3.price\n  from t1 join <b>/* +shuffle */</b> t2 join <b>/* +broadcast */</b> t3\n  on t1.id = t2.id and t2.id = t3.id;</div><p id=\"related_info\"><b>Related information:</b></p><p>\n      For more background information about join queries, see\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_joins.xml\" data-doc-anchor-id=\"joins\">Joins in Impala SELECT Statements</a>. For performance considerations, see\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_joins.xml\" data-doc-anchor-id=\"perf_joins\">Performance Considerations for Join Queries</a>.\n    </p></div></div></div>","title":"Optimizer Hints"}