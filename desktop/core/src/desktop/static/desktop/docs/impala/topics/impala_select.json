{"body":"<div><div id=\"select\"><div class=\"hue-doc-title\">SELECT Statement</div><div><p>\n      The <span class=\"hue-doc-codeph\">SELECT</span> statement performs queries, retrieving data from one or more tables and producing\n      result sets consisting of rows and columns.\n    </p><p>\n      The Impala <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_insert.xml\" data-doc-anchor-id=\"insert\">INSERT</a></span> statement also typically ends\n      with a <span class=\"hue-doc-codeph\">SELECT</span> statement, to define data to copy from one table to another.\n    </p><p id=\"syntax_blurb\"><b>Syntax:</b></p><div class=\"hue-doc-codeblock\">[WITH <i>name</i> AS (<i>select_expression</i>) [, ...] ]\nSELECT\n  [ALL | DISTINCT]\n  [STRAIGHT_JOIN]\n  <i>expression</i> [, <i>expression</i> ...]\nFROM <i>table_reference</i> [, <i>table_reference</i> ...]\n[[FULL | [LEFT | RIGHT] INNER | [LEFT | RIGHT] OUTER | [LEFT | RIGHT] SEMI | [LEFT | RIGHT] ANTI | CROSS]\n  JOIN <i>table_reference</i>\n  [ON <i>join_equality_clauses</i> | USING (<span class=\"hue-doc-varname\">col1</span>[, <span class=\"hue-doc-varname\">col2</span> ...]] ...\nWHERE <i>conditions</i>\nGROUP BY { <i>column</i> | <i>expression</i> [, ...] }\nHAVING <span class=\"hue-doc-codeph\">conditions</span>\nORDER BY { <i>column</i> | <i>expression</i> [ASC | DESC] [NULLS FIRST | NULLS LAST] [, ...] }\nLIMIT <i>expression</i> [OFFSET <i>expression</i>]\n[UNION [ALL] <i>select_statement</i>] ...]\n\ntable_reference := { <span class=\"hue-doc-varname\">table_name</span> | (<span class=\"hue-doc-varname\">subquery</span>) }\n  <span class=\"hue-doc-ph\">[ TABLESAMPLE SYSTEM(<span class=\"hue-doc-varname\">percentage</span>) [REPEATABLE(<span class=\"hue-doc-varname\">seed</span>)] ]</span></div><p>\n      Impala <span class=\"hue-doc-codeph\">SELECT</span> queries support:\n    </p><ul><li>\n        SQL scalar data types: <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_boolean.xml\" data-doc-anchor-id=\"boolean\">BOOLEAN</a></span>,\n        <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_tinyint.xml\" data-doc-anchor-id=\"tinyint\">TINYINT</a></span>,\n        <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_smallint.xml\" data-doc-anchor-id=\"smallint\">SMALLINT</a></span>,\n        <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_int.xml\" data-doc-anchor-id=\"int\">INT</a></span>,\n        <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_bigint.xml\" data-doc-anchor-id=\"bigint\">BIGINT</a></span>,\n        <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_decimal.xml\" data-doc-anchor-id=\"decimal\">DECIMAL</a></span><span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_float.xml\" data-doc-anchor-id=\"float\">FLOAT</a></span>,\n        <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_double.xml\" data-doc-anchor-id=\"double\">DOUBLE</a></span>,\n        <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP</a></span>,\n        <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string.xml\" data-doc-anchor-id=\"string\">STRING</a></span>,\n        <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_varchar.xml\" data-doc-anchor-id=\"varchar\">VARCHAR</a></span>,\n        <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_char.xml\" data-doc-anchor-id=\"char\">CHAR</a></span>.\n      </li><li>\n        The complex data types <span class=\"hue-doc-codeph\">ARRAY</span>, <span class=\"hue-doc-codeph\">STRUCT</span>, and <span class=\"hue-doc-codeph\">MAP</span>,\n        are available in Impala 2.3 and higher.\n        Queries involving these types typically involve special qualified names\n        using dot notation for referring to the complex column fields,\n        and join clauses for bringing the complex columns into the result set.\n        See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_complex_types.xml\" data-doc-anchor-id=\"complex_types\">Complex Types (Impala 2.3 or higher only)</a> for details.\n      </li><li>\n        An optional <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_with.xml\" data-doc-anchor-id=\"with\"><span class=\"hue-doc-codeph\">WITH</span> clause</a> before the\n        <span class=\"hue-doc-codeph\">SELECT</span> keyword, to define a subquery whose name or column names can be referenced from\n        later in the main query. This clause lets you abstract repeated clauses, such as aggregation functions,\n        that are referenced multiple times in the same query.\n      </li><li>\n        Subqueries in a <span class=\"hue-doc-codeph\">FROM</span> clause. In Impala 2.0 and higher,\n        subqueries can also go in the <span class=\"hue-doc-codeph\">WHERE</span> clause, for example with the\n        <span class=\"hue-doc-codeph\">IN()</span>, <span class=\"hue-doc-codeph\">EXISTS</span>, and <span class=\"hue-doc-codeph\">NOT EXISTS</span> operators.\n      </li><li><span class=\"hue-doc-codeph\">WHERE</span>, <span class=\"hue-doc-codeph\">GROUP BY</span>, <span class=\"hue-doc-codeph\">HAVING</span> clauses.\n      </li><li><span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_order_by.xml\" data-doc-anchor-id=\"order_by\">ORDER BY</a></span>. Prior to Impala 1.4.0, Impala\n        required that queries using an <span class=\"hue-doc-codeph\">ORDER BY</span> clause also include a\n        <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_limit.xml\" data-doc-anchor-id=\"limit\">LIMIT</a></span> clause. In Impala 1.4.0 and higher, this\n        restriction is lifted; sort operations that would exceed the Impala memory limit automatically use a\n        temporary disk work area to perform the sort.\n      </li><li><p id=\"column_ordinals\"> You can refer to\n          <span class=\"hue-doc-codeph\">SELECT</span>-list items by their ordinal position. Impala\n        supports ordinals in the <span class=\"hue-doc-codeph\">GROUP BY</span>,\n          <span class=\"hue-doc-codeph\">HAVING</span>, and <span class=\"hue-doc-codeph\">ORDER BY</span> clauses. From\n        Impala 3.0, ordinals can only be used at the top level. For example, the\n        following statements are allowed:\n        <div class=\"hue-doc-codeblock\">  SELECT int_col / 2, sum(x)\n  FROM t\n  GROUP BY 1;\n\n  SELECT int_col / 2\n  FROM t\n  ORDER BY 1;\n\n  SELECT NOT bool_col\n  FROM t\n  GROUP BY 1\n  HAVING 1;\n</div>\n        Numbers in subexpressions are not interpreted as ordinals:\n        <div class=\"hue-doc-codeblock\">  SELECT int_col / 2, sum(x)\n  FROM t\n  GROUP BY 1 * 2;\nThe above parses OK, however GROUP BY 1 * 2 has no effect.\n\n  SELECT int_col / 2\n  FROM t\n  ORDER BY 1 + 2;\nThe above parses OK, however ORDER BY 1 + 2 has no effect.\n\n  SELECT NOT bool_col\n  FROM t\n  GROUP BY 1\n  HAVING not 1;\nThe above raises an error at parse-time.\n</div></p></li><li><p id=\"join_types\">\n        Impala supports a wide variety of <span class=\"hue-doc-codeph\">JOIN</span> clauses. Left, right, semi,\n        full, and outer joins are supported in all Impala versions. The <span class=\"hue-doc-codeph\">CROSS\n        JOIN</span> operator is available in Impala 1.2.2 and higher. During performance\n        tuning, you can override the reordering of join clauses that Impala does internally by\n        including the keyword <span class=\"hue-doc-codeph\">STRAIGHT_JOIN</span> immediately after the\n        <span class=\"hue-doc-codeph\">SELECT</span> and any <span class=\"hue-doc-codeph\">DISTINCT</span> or <span class=\"hue-doc-codeph\">ALL</span>\n        keywords.\n      </p><p>\n          See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_joins.xml\" data-doc-anchor-id=\"joins\">Joins in Impala SELECT Statements</a> for details and examples of join queries.\n        </p></li><li><span class=\"hue-doc-codeph\">UNION ALL</span>.\n      </li><li><span class=\"hue-doc-codeph\">LIMIT</span>.\n      </li><li>\n        External tables.\n      </li><li>\n        Relational operators such as greater than, less than, or equal to.\n      </li><li>\n        Arithmetic operators such as addition or subtraction.\n      </li><li>\n        Logical/Boolean operators <span class=\"hue-doc-codeph\">AND</span>, <span class=\"hue-doc-codeph\">OR</span>, and <span class=\"hue-doc-codeph\">NOT</span>. Impala does\n        not support the corresponding symbols <span class=\"hue-doc-codeph\">&amp;&amp;</span>, <span class=\"hue-doc-codeph\">||</span>, and\n        <span class=\"hue-doc-codeph\">!</span>.\n      </li><li>\n        Common SQL built-in functions such as <span class=\"hue-doc-codeph\">COUNT</span>, <span class=\"hue-doc-codeph\">SUM</span>, <span class=\"hue-doc-codeph\">CAST</span>,\n        <span class=\"hue-doc-codeph\">LIKE</span>, <span class=\"hue-doc-codeph\">IN</span>, <span class=\"hue-doc-codeph\">BETWEEN</span>, and <span class=\"hue-doc-codeph\">COALESCE</span>. Impala\n        specifically supports built-ins described in <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_functions.xml\" data-doc-anchor-id=\"builtins\">Impala Built-In Functions</a>.\n      </li><li>\n        In Impala 2.9 and higher, an optional <span class=\"hue-doc-codeph\">TABLESAMPLE</span>\n        clause immediately after a table reference, to specify that the query only processes a\n        specified percentage of the table data. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_tablesample.xml\" data-doc-anchor-id=\"tablesample\">TABLESAMPLE Clause</a> for details.\n      </li></ul><p id=\"ignore_file_extensions\">\n        Impala queries ignore files with extensions commonly used for temporary work files by\n        Hadoop tools. Any files with extensions <span class=\"hue-doc-codeph\">.tmp</span> or\n        <span class=\"hue-doc-codeph\">.copying</span> are not considered part of the Impala table. The suffix\n        matching is case-insensitive, so for example Impala ignores both\n        <span class=\"hue-doc-codeph\">.copying</span> and <span class=\"hue-doc-codeph\">.COPYING</span> suffixes.\n      </p><p id=\"security_blurb\"><b>Security considerations:</b></p><p id=\"redaction_yes\">\n        If these statements in your environment contain sensitive literal values such as credit\n        card numbers or tax identifiers, Impala can redact this sensitive information when\n        displaying the statements in log files and other administrative contexts. See\n        \n    the documentation for your Apache Hadoop distribution\n   for details.\n      </p><p id=\"s3_blurb\"><b>Amazon S3 considerations:</b></p><p id=\"s3_block_splitting\">\n        In Impala 2.6 and higher, Impala queries are optimized for files\n        stored in Amazon S3. For Impala tables that use the file formats Parquet, ORC, RCFile,\n        SequenceFile, Avro, and uncompressed text, the setting\n        <span class=\"hue-doc-codeph\">fs.s3a.block.size</span> in the <span class=\"hue-doc-filepath\">core-site.xml</span>\n        configuration file determines how Impala divides the I/O work of reading the data files.\n        This configuration setting is specified in bytes. By default, this value is 33554432 (32\n        MB), meaning that Impala parallelizes S3 read operations on the files as if they were\n        made up of 32 MB blocks. For example, if your S3 queries primarily access Parquet files\n        written by MapReduce or Hive, increase <span class=\"hue-doc-codeph\">fs.s3a.block.size</span> to 134217728\n        (128 MB) to match the row group size of those files. If most S3 queries involve Parquet\n        files written by Impala, increase <span class=\"hue-doc-codeph\">fs.s3a.block.size</span> to 268435456 (256\n        MB) to match the row group size produced by Impala.\n      </p><p id=\"cancel_blurb_yes\"><b>Cancellation:</b> Can be cancelled. To cancel this statement, use Ctrl-C from the\n        <span class=\"hue-doc-cmdname\">impala-shell</span> interpreter, the <div class=\"hue-doc-uicontrol\">Cancel</div> button\n        from the <div class=\"hue-doc-uicontrol\">Watch</div> page in Hue, or <div class=\"hue-doc-uicontrol\">Cancel</div> from\n        the list of in-flight queries (for a particular node) on the\n        <div class=\"hue-doc-uicontrol\">Queries</div> tab in the Impala web UI (port 25000).\n      </p><p id=\"permissions_blurb\"><b>HDFS permissions:</b></p><p>\n      The user ID that the <span class=\"hue-doc-cmdname\">impalad</span> daemon runs under,\n      typically the <span class=\"hue-doc-codeph\">impala</span> user, must have read\n      permissions for the files in all applicable directories in all source tables,\n      and read and execute permissions for the relevant data directories.\n      (A <span class=\"hue-doc-codeph\">SELECT</span> operation could read files from multiple different HDFS directories\n      if the source table is partitioned.)\n      If a query attempts to read a data file and is unable to because of an HDFS permission error,\n      the query halts and does not return any further results.\n    </p><div><div>Continue reading:</div><ul><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_joins.xml\">Joins in Impala SELECT Statements</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_order_by.xml\">ORDER BY Clause</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_group_by.xml\">GROUP BY Clause</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_having.xml\">HAVING Clause</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_limit.xml\">LIMIT Clause</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_offset.xml\">OFFSET Clause</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_union.xml\">UNION Clause</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_subqueries.xml\">Subqueries in Impala SELECT Statements</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_tablesample.xml\">TABLESAMPLE Clause</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_with.xml\">WITH Clause</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_distinct.xml\">DISTINCT Operator</a></li></ul></div><p id=\"related_info\"><b>Related information:</b></p><p>\n      The <span class=\"hue-doc-codeph\">SELECT</span> syntax is so extensive that it forms its own category of statements: queries. The\n      other major classifications of SQL statements are data definition language (see\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_ddl.xml\" data-doc-anchor-id=\"ddl\">DDL Statements</a>) and data manipulation language (see <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_dml.xml\" data-doc-anchor-id=\"dml\">DML Statements</a>).\n    </p><p>\n      Because the focus of Impala is on fast queries with interactive response times over huge data sets, query\n      performance and scalability are important considerations. See\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_performance.xml\" data-doc-anchor-id=\"performance\">Tuning Impala for Performance</a> and <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_scalability.xml\" data-doc-anchor-id=\"scalability\">Scalability Considerations for Impala</a> for\n      details.\n    </p></div></div></div>","title":"SELECT Statement"}