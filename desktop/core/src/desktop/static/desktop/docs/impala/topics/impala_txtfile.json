{"body":"<div><div id=\"txtfile\"><div class=\"hue-doc-title\">Using Text Data Files with Impala Tables</div><div><p> Impala supports using text files as the storage format for input and\n      output. Text files are a convenient format to use for interchange with\n      other applications or scripts that produce or read delimited text files,\n      such as CSV or TSV with commas or tabs for delimiters. </p><p>\n      Text files are also very flexible in their column definitions. For example, a text file could have more\n      fields than the Impala table, and those extra fields are ignored during queries; or it could have fewer\n      fields than the Impala table, and those missing fields are treated as <span class=\"hue-doc-codeph\">NULL</span> values in\n      queries. You could have fields that were treated as numbers or timestamps in a table, then use <span class=\"hue-doc-codeph\">ALTER\n      TABLE ... REPLACE COLUMNS</span> to switch them to strings, or the reverse.\n    </p><table><div class=\"hue-doc-title\">Text Format Support in Impala</div><thead><tr><td>\n              File Type\n            </td><td>\n              Format\n            </td><td>\n              Compression Codecs\n            </td><td>\n              Impala Can CREATE?\n            </td><td>\n              Impala Can INSERT?\n            </td></tr></thead><tbody><tr id=\"txtfile_support\"><td><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_txtfile.xml\" data-doc-anchor-id=\"txtfile\">Text</a></td><td>\n              Unstructured\n            </td><td>bzip2, deflate, gzip, LZO, Snappy, zstd</td><td>\n              Yes. For <span class=\"hue-doc-codeph\">CREATE TABLE</span> with no <span class=\"hue-doc-codeph\">STORED AS</span> clause,\n              the default file format is uncompressed text, with values separated by ASCII\n              <span class=\"hue-doc-codeph\">0x01</span> characters (typically represented as Ctrl-A).\n            </td><td> Yes if uncompressed.<p>No if compressed.</p><p>If LZO\n                compression is used, you must create the table and load data in\n                Hive.</p><p>If other kinds of compression are used, you must\n                load data through <span class=\"hue-doc-codeph\">LOAD DATA</span>, Hive, or manually\n                in HDFS. </p></td></tr></tbody></table><p/></div><div id=\"text_performance\"><div class=\"hue-doc-title\">Query Performance for Impala Text Tables</div><div><p>\n        Data stored in text format is relatively bulky, and not as efficient to query as binary formats such as\n        Parquet. You typically use text tables with Impala if that is the format you receive the data and you do\n        not have control over that process, or if you are a relatively new Hadoop user and not familiar with\n        techniques to generate files in other formats. (Because the default format for <span class=\"hue-doc-codeph\">CREATE\n        TABLE</span> is text, you might create your first Impala tables as text without giving performance much\n        thought.) Either way, look for opportunities to use more efficient file formats for the tables used in your\n        most performance-critical queries.\n      </p><p>\n        For frequently queried data, you might load the original text data files into one Impala table, then use an\n        <span class=\"hue-doc-codeph\">INSERT</span> statement to transfer the data to another table that uses the Parquet file format;\n        the data is converted automatically as it is stored in the destination table.\n      </p><p>\n        For more compact data, consider using LZO compression for the text files. LZO is the only compression codec\n        that Impala supports for text data, because the <q>splittable</q> nature of LZO data files lets different\n        nodes work on different parts of the same file in parallel. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_txtfile.xml\" data-doc-anchor-id=\"lzo\">Using LZO-Compressed Text Files</a> for\n        details.\n      </p><p>\n        You can also use text data compressed in the bzip2, deflate, gzip, Snappy, or\n        zstd formats. Because these compressed formats are not <q>splittable</q> in the way that LZO\n        is, there is less opportunity for Impala to parallelize queries on them. Therefore, use\n        these types of compressed data only for convenience if that is the format in which you\n        receive the data. Prefer to use LZO compression for text data if you have the choice, or\n        convert the data to Parquet using an <span class=\"hue-doc-codeph\">INSERT ... SELECT</span> statement to copy\n        the original data into a Parquet table. </p><div class=\"hue-doc-note\"><p>\n          Impala supports bzip files created by the <span class=\"hue-doc-codeph\">bzip2</span> command, but not bzip files with\n          multiple streams created by the <span class=\"hue-doc-codeph\">pbzip2</span> command. Impala decodes only the data from the\n          first part of such files, leading to incomplete results.\n        </p></div><p>\n          The maximum size that Impala can accommodate for an individual bzip file is 1 GB (after uncompression).\n        </p><p>\n          Impala supports zstd files created by the zstd command line tool.\n        </p><p id=\"s3_block_splitting\">\n        In Impala 2.6 and higher, Impala queries are optimized for files\n        stored in Amazon S3. For Impala tables that use the file formats Parquet, ORC, RCFile,\n        SequenceFile, Avro, and uncompressed text, the setting\n        <span class=\"hue-doc-codeph\">fs.s3a.block.size</span> in the <span class=\"hue-doc-filepath\">core-site.xml</span>\n        configuration file determines how Impala divides the I/O work of reading the data files.\n        This configuration setting is specified in bytes. By default, this value is 33554432 (32\n        MB), meaning that Impala parallelizes S3 read operations on the files as if they were\n        made up of 32 MB blocks. For example, if your S3 queries primarily access Parquet files\n        written by MapReduce or Hive, increase <span class=\"hue-doc-codeph\">fs.s3a.block.size</span> to 134217728\n        (128 MB) to match the row group size of those files. If most S3 queries involve Parquet\n        files written by Impala, increase <span class=\"hue-doc-codeph\">fs.s3a.block.size</span> to 268435456 (256\n        MB) to match the row group size produced by Impala.\n      </p></div></div><div id=\"text_ddl\"><div class=\"hue-doc-title\">Creating Text Tables</div><div><p><b>To create a table using text data files:</b></p><p>\n        If the exact format of the text data files (such as the delimiter character) is not significant, use the\n        <span class=\"hue-doc-codeph\">CREATE TABLE</span> statement with no extra clauses at the end to create a text-format table. For\n        example:\n      </p><div class=\"hue-doc-codeblock\">create table my_table(id int, s string, n int, t timestamp, b boolean);\n</div><p>\n        The data files created by any <span class=\"hue-doc-codeph\">INSERT</span> statements will use the Ctrl-A character (hex 01) as\n        a separator between each column value.\n      </p><p>\n        A common use case is to import existing text files into an Impala table. The syntax is more verbose; the\n        significant part is the <span class=\"hue-doc-codeph\">FIELDS TERMINATED BY</span> clause, which must be preceded by the\n        <span class=\"hue-doc-codeph\">ROW FORMAT DELIMITED</span> clause. The statement can end with a <span class=\"hue-doc-codeph\">STORED AS\n        TEXTFILE</span> clause, but that clause is optional because text format tables are the default. For\n        example:\n      </p><div class=\"hue-doc-codeblock\">create table csv(id int, s string, n int, t timestamp, b boolean)\n  row format delimited\n  <span class=\"hue-doc-ph\" id=\"csv\">fields terminated by ',';</span>\n\ncreate table tsv(id int, s string, n int, t timestamp, b boolean)\n  row format delimited\n  <span class=\"hue-doc-ph\" id=\"tsv\">fields terminated by '\\t';</span>\n\ncreate table pipe_separated(id int, s string, n int, t timestamp, b boolean)\n  row format delimited\n  <span class=\"hue-doc-ph\" id=\"psv\">fields terminated by '|'</span>\n  stored as textfile;\n</div><p>\n        You can create tables with specific separator characters to import text files in familiar formats such as\n        CSV, TSV, or pipe-separated. You can also use these tables to produce output data files, by copying data\n        into them through the <span class=\"hue-doc-codeph\">INSERT ... SELECT</span> syntax and then extracting the data files from the\n        Impala data directory.\n      </p><p>\n        In Impala 1.3.1 and higher, you can specify a delimiter character <span class=\"hue-doc-codeph\">'\\</span><span class=\"hue-doc-codeph\">0'</span> to\n        use the ASCII 0 (<span class=\"hue-doc-codeph\">nul</span>) character for text tables:\n      </p><div class=\"hue-doc-codeblock\">create table nul_separated(id int, s string, n int, t timestamp, b boolean)\n  row format delimited\n  fields terminated by '\\0'\n  stored as textfile;\n</div><div class=\"hue-doc-note\"><p>\n          Do not surround string values with quotation marks in text data files that you construct. If you need to\n          include the separator character inside a field value, for example to put a string value with a comma\n          inside a CSV-format data file, specify an escape character on the <span class=\"hue-doc-codeph\">CREATE TABLE</span> statement\n          with the <span class=\"hue-doc-codeph\">ESCAPED BY</span> clause, and insert that character immediately before any separator\n          characters that need escaping.\n        </p></div><p>\n        Issue a <span class=\"hue-doc-codeph\">DESCRIBE FORMATTED <span class=\"hue-doc-varname\">table_name</span></span> statement to see the details of\n        how each table is represented internally in Impala.\n      </p><p id=\"complex_types_unsupported_filetype\"><b>Complex type considerations:</b> Although you can create tables in this file format\n        using the complex types (<span class=\"hue-doc-codeph\">ARRAY</span>, <span class=\"hue-doc-codeph\">STRUCT</span>, and\n        <span class=\"hue-doc-codeph\">MAP</span>) available in Impala 2.3 and higher,\n        currently, Impala can query these types only in Parquet tables. <span class=\"hue-doc-ph\">\n        The one exception to the preceding rule is <span class=\"hue-doc-codeph\">COUNT(*)</span> queries on RCFile\n        tables that include complex types. Such queries are allowed in\n        Impala 2.6 and higher. </span></p></div></div><div id=\"text_data_files\"><div class=\"hue-doc-title\">Data Files for Text Tables</div><div><p>\n        When Impala queries a table with data in text format, it consults all the data files in the data directory\n        for that table, with some exceptions:\n      </p><ul><li><p>\n            Impala ignores any hidden files, that is, files whose names start with a dot or an underscore.\n          </p></li><li><p id=\"ignore_file_extensions\">\n        Impala queries ignore files with extensions commonly used for temporary work files by\n        Hadoop tools. Any files with extensions <span class=\"hue-doc-codeph\">.tmp</span> or\n        <span class=\"hue-doc-codeph\">.copying</span> are not considered part of the Impala table. The suffix\n        matching is case-insensitive, so for example Impala ignores both\n        <span class=\"hue-doc-codeph\">.copying</span> and <span class=\"hue-doc-codeph\">.COPYING</span> suffixes.\n      </p></li><li><p> Impala uses suffixes to recognize when text data files are compressed text. For Impala\n            to recognize the compressed text files, they must have the appropriate file extension\n            corresponding to the compression codec, either <span class=\"hue-doc-codeph\">.bz2</span>, <span class=\"hue-doc-codeph\">.deflate</span><span class=\"hue-doc-codeph\">.gz</span>, <span class=\"hue-doc-codeph\">.snappy</span>, or <span class=\"hue-doc-codeph\">.zst</span>.\n            The extensions can be in uppercase or lowercase. </p></li><li> Otherwise, the file names are not significant. When you put files\n          into an HDFS directory through ETL jobs, or point Impala to an\n          existing HDFS directory with the <span class=\"hue-doc-codeph\">CREATE EXTERNAL\n            TABLE</span> statement, or move data files under external control\n          with the <span class=\"hue-doc-codeph\">LOAD DATA</span> statement, Impala preserves the\n          original file names. </li></ul><p> File names for data produced through Impala <span class=\"hue-doc-codeph\">INSERT</span>\n        statements are given unique names to avoid file name conflicts. </p><p>\n        An <span class=\"hue-doc-codeph\">INSERT ... SELECT</span> statement produces one data file from each node that processes the\n        <span class=\"hue-doc-codeph\">SELECT</span> part of the statement. An <span class=\"hue-doc-codeph\">INSERT ... VALUES</span> statement produces a\n        separate data file for each statement; because Impala is more efficient querying a small number of huge\n        files than a large number of tiny files, the <span class=\"hue-doc-codeph\">INSERT ... VALUES</span> syntax is not recommended\n        for loading a substantial volume of data. If you find yourself with a table that is inefficient due to too\n        many small data files, reorganize the data into a few large files by doing <span class=\"hue-doc-codeph\">INSERT ...\n        SELECT</span> to transfer the data to a new table.\n      </p><p><b>Special values within text data files:</b></p><ul><li><p>\n            Impala recognizes the literal strings <span class=\"hue-doc-codeph\">inf</span> for infinity and <span class=\"hue-doc-codeph\">nan</span> for\n            <q>Not a Number</q>, for <span class=\"hue-doc-codeph\">FLOAT</span> and <span class=\"hue-doc-codeph\">DOUBLE</span> columns.\n          </p></li><li><p> Impala recognizes the literal string <span class=\"hue-doc-codeph\">\\N</span> to\n            represent <span class=\"hue-doc-codeph\">NULL</span>. When using Sqoop, specify the\n            options <span class=\"hue-doc-codeph\">--null-non-string</span> and\n              <span class=\"hue-doc-codeph\">--null-string</span> to ensure all <span class=\"hue-doc-codeph\">NULL</span>\n            values are represented correctly in the Sqoop output files.\n              <span class=\"hue-doc-codeph\">\\N</span> needs to be escaped as in the below example:\n            <div class=\"hue-doc-codeblock\">--null-string '\\\\N' --null-non-string '\\\\N'</div></p></li><li><p>By default, Sqoop writes <span class=\"hue-doc-codeph\">NULL</span> values using the\n            string <span class=\"hue-doc-codeph\">null</span>, which causes a conversion error when\n            such rows are evaluated by Impala. A workaround for existing tables\n            and data files is to change the table properties through\n              <span class=\"hue-doc-codeph\">ALTER TABLE <span class=\"hue-doc-varname\">name</span> SET\n              TBLPROPERTIES(\"serialization.null.format\"=\"null\")</span>.</p></li><li><p id=\"skip_header_lines\">\n        In Impala 2.6 and higher, Impala can optionally skip an arbitrary\n        number of header lines from text input files on HDFS based on the\n        <span class=\"hue-doc-codeph\">skip.header.line.count</span> value in the <span class=\"hue-doc-codeph\">TBLPROPERTIES</span>\n        field of the table metadata. For example:\n<div class=\"hue-doc-codeblock\">create table header_line(first_name string, age int)\n  row format delimited fields terminated by ',';\n\n-- Back in the shell, load data into the table with commands such as:\n-- cat &gt;data.csv\n-- Name,Age\n-- Alice,25\n-- Bob,19\n-- hdfs dfs -put data.csv /user/hive/warehouse/header_line\n\nrefresh header_line;\n\n-- Initially, the Name,Age header line is treated as a row of the table.\nselect * from header_line limit 10;\n+------------+------+\n| first_name | age  |\n+------------+------+\n| Name       | NULL |\n| Alice      | 25   |\n| Bob        | 19   |\n+------------+------+\n\nalter table header_line set tblproperties('skip.header.line.count'='1');\n\n-- Once the table property is set, queries skip the specified number of lines\n-- at the beginning of each text data file. Therefore, all the files in the table\n-- should follow the same convention for header lines.\nselect * from header_line limit 10;\n+------------+-----+\n| first_name | age |\n+------------+-----+\n| Alice      | 25  |\n| Bob        | 19  |\n+------------+-----+\n</div></p></li></ul></div></div><div id=\"text_etl\"><div class=\"hue-doc-title\">Loading Data into Impala Text Tables</div><div><p>\n        To load an existing text file into an Impala text table, use the <span class=\"hue-doc-codeph\">LOAD DATA</span> statement and\n        specify the path of the file in HDFS. That file is moved into the appropriate Impala data directory.\n      </p><p>\n        To load multiple existing text files into an Impala text table, use the <span class=\"hue-doc-codeph\">LOAD DATA</span>\n        statement and specify the HDFS path of the directory containing the files. All non-hidden files are moved\n        into the appropriate Impala data directory.\n      </p><p>\n        To convert data to text from any other file format supported by Impala, use a SQL statement such as:\n      </p><div class=\"hue-doc-codeblock\">-- Text table with default delimiter, the hex 01 character.\nCREATE TABLE text_table AS SELECT * FROM other_file_format_table;\n\n-- Text table with user-specified delimiter. Currently, you cannot specify\n-- the delimiter as part of CREATE TABLE LIKE or CREATE TABLE AS SELECT.\n-- But you can change an existing text table to have a different delimiter.\nCREATE TABLE csv LIKE other_file_format_table;\nALTER TABLE csv SET SERDEPROPERTIES ('serialization.format'=',', 'field.delim'=',');\nINSERT INTO csv SELECT * FROM other_file_format_table;</div><p>\n        This can be a useful technique to see how Impala represents special values within a text-format data file.\n        Use the <span class=\"hue-doc-codeph\">DESCRIBE FORMATTED</span> statement to see the HDFS directory where the data files are\n        stored, then use Linux commands such as <span class=\"hue-doc-codeph\">hdfs dfs -ls <span class=\"hue-doc-varname\">hdfs_directory</span></span> and\n        <span class=\"hue-doc-codeph\">hdfs dfs -cat <span class=\"hue-doc-varname\">hdfs_file</span></span> to display the contents of an Impala-created\n        text file.\n      </p><p>\n        To create a few rows in a text table for test purposes, you can use the <span class=\"hue-doc-codeph\">INSERT ... VALUES</span>\n        syntax:\n      </p><div class=\"hue-doc-codeblock\">INSERT INTO <span class=\"hue-doc-varname\">text_table</span> VALUES ('string_literal',100,hex('hello world'));</div><div class=\"hue-doc-note\">        Because Impala and the HDFS infrastructure are optimized for multi-megabyte files, avoid the <span class=\"hue-doc-codeph\">INSERT\n        ... VALUES</span> notation when you are inserting many rows. Each <span class=\"hue-doc-codeph\">INSERT ... VALUES</span>\n        statement produces a new tiny file, leading to fragmentation and reduced performance. When creating any\n        substantial volume of new data, use one of the bulk loading techniques such as <span class=\"hue-doc-codeph\">LOAD DATA</span>\n        or <span class=\"hue-doc-codeph\">INSERT ... SELECT</span>. Or, <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_hbase.xml\" data-doc-anchor-id=\"impala_hbase\">use an HBase\n        table</a> for single-row <span class=\"hue-doc-codeph\">INSERT</span> operations, because HBase tables are not subject to the\n        same fragmentation issues as tables stored on HDFS.\n      </div><p> When you create a text file for use with an Impala text table, specify\n          <span class=\"hue-doc-codeph\">\\N</span> to represent a <span class=\"hue-doc-codeph\">NULL</span> value. For\n        the differences between <span class=\"hue-doc-codeph\">NULL</span> and empty strings, see\n          <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_literals.xml\" data-doc-anchor-id=\"null\">NULL</a>. </p><p>\n        If a text file has fewer fields than the columns in the corresponding Impala table, all the corresponding\n        columns are set to <span class=\"hue-doc-codeph\">NULL</span> when the data in that file is read by an Impala query.\n      </p><p>\n        If a text file has more fields than the columns in the corresponding Impala table, the extra fields are\n        ignored when the data in that file is read by an Impala query.\n      </p><p>\n        You can also use manual HDFS operations such as <span class=\"hue-doc-codeph\">hdfs dfs -put</span> or <span class=\"hue-doc-codeph\">hdfs dfs\n        -cp</span> to put data files in the data directory for an Impala table. When you copy or move new data\n        files into the HDFS directory for the Impala table, issue a <span class=\"hue-doc-codeph\">REFRESH\n        <span class=\"hue-doc-varname\">table_name</span></span> statement in <span class=\"hue-doc-cmdname\">impala-shell</span> before issuing the next\n        query against that table, to make Impala recognize the newly added files.\n      </p></div></div><div id=\"lzo\"><div class=\"hue-doc-title\">Using LZO-Compressed Text Files</div><div><p> Impala supports using text data files that employ LZO compression.\n        Where practical, apply compression to text data files. Impala queries\n        are usually I/O-bound; reducing the amount of data read from disk\n        typically speeds up a query, despite the extra CPU work to uncompress\n        the data in memory. </p><p>\n        Impala can work with LZO-compressed text files are preferable to files compressed by other codecs, because\n        LZO-compressed files are <q>splittable</q>, meaning that different portions of a file can be uncompressed\n        and processed independently by different nodes.\n      </p><p>\n        Impala does not currently support writing LZO-compressed text files.\n      </p><p>\n        Because Impala can query LZO-compressed files but currently cannot write them, you use Hive to do the\n        initial <span class=\"hue-doc-codeph\">CREATE TABLE</span> and load the data, then switch back to Impala to run queries. For\n        instructions on setting up LZO compression for Hive <span class=\"hue-doc-codeph\">CREATE TABLE</span> and\n        <span class=\"hue-doc-codeph\">INSERT</span> statements, see\n        <a class=\"hue-doc-external-link\" href=\"https://cwiki.apache.org/confluence/display/Hive/LanguageManual+LZO\" target=\"_blank\">the\n        LZO page on the Hive wiki</a>. Once you have created an LZO text table, you can also manually add\n        LZO-compressed text files to it, produced by the\n        <a class=\"hue-doc-external-link\" href=\"http://www.lzop.org/\" target=\"_blank\"><span class=\"hue-doc-cmdname\">lzop</span></a> command\n        or similar method.\n      </p><div class=\"hue-doc-section\" id=\"lzo_setup\"><div class=\"hue-doc-title\">Preparing to Use LZO-Compressed Text Files</div><p>\n          Before using LZO-compressed tables in Impala, do the following one-time setup for each machine in the\n          cluster. Install the necessary packages using either the public repository, a private repository\n          you establish, or by using packages. You must do these steps manually, whether or not you\n          are using cluster management software.\n        </p><ol><li><b>Prepare your systems to work with LZO by downloading and installing the appropriate libraries:</b><p>\n              Download and install the appropriate file to each machine on which you intend to use LZO with Impala.\n            </p></li><li><b>Configure Impala to use LZO:</b><p>\n              Use <b>one</b> of the following sets of commands to refresh your package management system's\n              repository information, install the base LZO support for Hadoop, and install the LZO support for\n              Impala.\n            </p><div class=\"hue-doc-note\"><p>\n                The name of the Hadoop LZO package changed in the distant past.\n                Currently, the package name is <span class=\"hue-doc-codeph\">hadoop-lzo</span>.\n              </p></div><p><b>For RHEL/CentOS systems:</b></p><div class=\"hue-doc-codeblock\">$ sudo yum update\n$ sudo yum install hadoop-lzo\n$ sudo yum install impala-lzo</div><p><b>For SUSE systems:</b></p><div class=\"hue-doc-codeblock\">$ sudo apt-get update\n$ sudo zypper install hadoop-lzo\n$ sudo zypper install impala-lzo</div><p><b>For Debian/Ubuntu systems:</b></p><div class=\"hue-doc-codeblock\">$ sudo zypper update\n$ sudo apt-get install hadoop-lzo\n$ sudo apt-get install impala-lzo</div><div class=\"hue-doc-note\"><p>\n                The level of the <span class=\"hue-doc-codeph\">impala-lzo</span> package is closely tied to the version of Impala\n                you use. Any time you upgrade Impala, re-do the installation command for\n                <span class=\"hue-doc-codeph\">impala-lzo</span> on each applicable machine to make sure you have the appropriate\n                version of that package.\n              </p></div></li><li>\n            For <span class=\"hue-doc-codeph\">core-site.xml</span> on the client <b>and</b> server (that is, in the configuration\n            directories for both Impala and Hadoop), append <span class=\"hue-doc-codeph\">com.hadoop.compression.lzo.LzopCodec</span>\n            to the comma-separated list of codecs. For example:\n<div class=\"hue-doc-codeblock\">&lt;property&gt;\n  &lt;name&gt;io.compression.codecs&lt;/name&gt;\n  &lt;value&gt;org.apache.hadoop.io.compress.DefaultCodec,org.apache.hadoop.io.compress.GzipCodec,\n        org.apache.hadoop.io.compress.BZip2Codec,org.apache.hadoop.io.compress.DeflateCodec,\n        org.apache.hadoop.io.compress.SnappyCodec,com.hadoop.compression.lzo.LzopCodec&lt;/value&gt;\n&lt;/property&gt;</div><div class=\"hue-doc-note\"><p>\n                If this is the first time you have edited the Hadoop <span class=\"hue-doc-filepath\">core-site.xml</span> file, note\n                that the <span class=\"hue-doc-filepath\">/etc/hadoop/conf</span> directory is typically a symbolic link, so the\n                canonical <span class=\"hue-doc-filepath\">core-site.xml</span> might reside in a different directory:\n              </p><div class=\"hue-doc-codeblock\">$ ls -l /etc/hadoop\ntotal 8\nlrwxrwxrwx. 1 root root   29 Feb 26  2013 conf -&gt; /etc/alternatives/hadoop-conf\nlrwxrwxrwx. 1 root root   10 Feb 26  2013 conf.dist -&gt; conf.empty\ndrwxr-xr-x. 2 root root 4096 Feb 26  2013 conf.empty\ndrwxr-xr-x. 2 root root 4096 Oct 28 15:46 conf.pseudo</div><p>\n                If the <span class=\"hue-doc-codeph\">io.compression.codecs</span> property is missing from\n                <span class=\"hue-doc-filepath\">core-site.xml</span>, only add <span class=\"hue-doc-codeph\">com.hadoop.compression.lzo.LzopCodec</span>\n                to the new property value, not all the names from the preceding example.\n              </p></div></li><li>\n            Restart the MapReduce and Impala services.\n          </li></ol></div><div class=\"hue-doc-section\" id=\"lzo_create_table\"><div class=\"hue-doc-title\">Creating LZO Compressed Text Tables</div><p>\n          A table containing LZO-compressed text files must be created in Hive with the following storage clause:\n        </p><div class=\"hue-doc-codeblock\">STORED AS\n    INPUTFORMAT 'com.hadoop.mapred.DeprecatedLzoTextInputFormat'\n    OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'</div><p>\n          Also, certain Hive settings need to be in effect. For example:\n        </p><div class=\"hue-doc-codeblock\">hive&gt; SET mapreduce.output.fileoutputformat.compress=true;\nhive&gt; SET hive.exec.compress.output=true;\nhive&gt; SET mapreduce.output.fileoutputformat.compress.codec=com.hadoop.compression.lzo.LzopCodec;\nhive&gt; CREATE TABLE lzo_t (s string) STORED AS\n  &gt; INPUTFORMAT 'com.hadoop.mapred.DeprecatedLzoTextInputFormat'\n  &gt; OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat';\nhive&gt; INSERT INTO TABLE lzo_t SELECT col1, col2 FROM uncompressed_text_table;</div><p>\n          Once you have created LZO-compressed text tables, you can convert data stored in other tables (regardless\n          of file format) by using the <span class=\"hue-doc-codeph\">INSERT ... SELECT</span> statement in Hive.\n        </p><p>\n          Files in an LZO-compressed table must use the <span class=\"hue-doc-codeph\">.lzo</span> extension. Examine the files in the\n          HDFS data directory after doing the <span class=\"hue-doc-codeph\">INSERT</span> in Hive, to make sure the files have the\n          right extension. If the required settings are not in place, you end up with regular uncompressed files,\n          and Impala cannot access the table because it finds data files with the wrong (uncompressed) format.\n        </p><p>\n          After loading data into an LZO-compressed text table, index the files so that they can be split. You\n          index the files by running a Java class,\n          <span class=\"hue-doc-codeph\">com.hadoop.compression.lzo.DistributedLzoIndexer</span>, through the Linux command line. This\n          Java class is included in the <span class=\"hue-doc-codeph\">hadoop-lzo</span> package.\n        </p><p>\n          Run the indexer using a command like the following:\n        </p><div class=\"hue-doc-codeblock\">$ hadoop jar /usr/lib/hadoop/lib/hadoop-lzo-<span class=\"hue-doc-varname\">version</span>-gplextras.jar\n  com.hadoop.compression.lzo.DistributedLzoIndexer /<span class=\"hue-doc-varname\">hdfs_location_of_table</span>/</div><div class=\"hue-doc-note\">          If the path of the JAR file in the preceding example is not recognized, do a <span class=\"hue-doc-cmdname\">find</span>\n          command to locate <span class=\"hue-doc-filepath\">hadoop-lzo-*-gplextras.jar</span> and use that path.\n        </div><p>\n          Indexed files have the same name as the file they index, with the <span class=\"hue-doc-codeph\">.index</span> extension. If\n          the data files are not indexed, Impala queries still work, but the queries read the data from remote\n          DataNodes, which is very inefficient.\n        </p><p>\n          Once the LZO-compressed tables are created, and data is loaded and indexed, you can query them through\n          Impala. As always, the first time you start <span class=\"hue-doc-cmdname\">impala-shell</span> after creating a table in\n          Hive, issue an <span class=\"hue-doc-codeph\">INVALIDATE METADATA</span> statement so that Impala recognizes the new table.\n          (In Impala 1.2 and higher, you only have to run <span class=\"hue-doc-codeph\">INVALIDATE METADATA</span> on one node, rather\n          than on all the Impala nodes.)\n        </p></div></div></div><div id=\"gzip\"><div class=\"hue-doc-title\">Using bzip2, deflate, gzip, Snappy, or zstd Text Files</div><div><p> Impala supports using text data files that employ bzip2, deflate, gzip, Snappy, or zstd\n        compression. These compression types are primarily for convenience within an existing ETL\n        pipeline rather than maximum performance. Although it requires less I/O to read compressed\n        text than the equivalent uncompressed text, files compressed by these codecs are not\n          <q>splittable</q> and therefore cannot take full advantage of the Impala parallel query\n        capability. Impala can read compressed text files written by Hive.</p><p> As each Snappy-compressed file is processed, the node doing the work reads the entire file\n        into memory and then decompresses it. Therefore, the node must have enough memory to hold\n        both the compressed and uncompressed data from the text file. The memory required to hold\n        the uncompressed data is difficult to estimate in advance, potentially causing problems on\n        systems with low memory limits or with resource management enabled. <span class=\"hue-doc-ph\">This\n          memory overhead is reduced for bzip2-, deflate-, gzip-, and zstd-compressed text files. The\n          compressed data is decompressed as it is read, rather than all at once.</span></p><p> To create a table to hold compressed text, create a text table with no special compression\n        options. Specify the delimiter and escape character if required, using the <span class=\"hue-doc-codeph\">ROW\n          FORMAT</span> clause. </p><p>\n        Because Impala can query compressed text files but currently cannot write them, produce the compressed text\n        files outside Impala and use the <span class=\"hue-doc-codeph\">LOAD DATA</span> statement, manual HDFS commands to move them to\n        the appropriate Impala data directory. (Or, you can use <span class=\"hue-doc-codeph\">CREATE EXTERNAL TABLE</span> and point\n        the <span class=\"hue-doc-codeph\">LOCATION</span> attribute at a directory containing existing compressed text files.)\n      </p><p>\n        The following example shows how you can create a regular text table, put different kinds of compressed and\n        uncompressed files into it, and Impala automatically recognizes and decompresses each one based on their\n        file extensions:\n      </p><div class=\"hue-doc-codeblock\">create table csv_compressed (a string, b string, c string)\n  row format delimited fields terminated by \",\";\n\ninsert into csv_compressed values\n  ('one - uncompressed', 'two - uncompressed', 'three - uncompressed'),\n  ('abc - uncompressed', 'xyz - uncompressed', '123 - uncompressed');\n...make equivalent .bz2, .gz, .snappy, and .zst files and load them into same table directory...\n\nselect * from csv_compressed;\n+--------------------+--------------------+----------------------+\n| a                  | b                  | c                    |\n+--------------------+--------------------+----------------------+\n| one - snappy       | two - snappy       | three - snappy       |\n| one - uncompressed | two - uncompressed | three - uncompressed |\n| abc - uncompressed | xyz - uncompressed | 123 - uncompressed   |\n| one - bz2          | two - bz2          | three - bz2          |\n| abc - bz2          | xyz - bz2          | 123 - bz2            |\n| one - gzip         | two - gzip         | three - gzip         |\n| abc - gzip         | xyz - gzip         | 123 - gzip           |\n| one - zstd         | two - zstd         | three - zstd         |\n| abc - zstd         | xyz - zstd         | 123 - zstd           |\n| one - deflate      | two - deflate      | three - deflate      |\n| abc - deflate      | xyz - deflate      | 123 - deflate        |\n+--------------------+--------------------+----------------------+\n\n$ hdfs dfs -ls 'hdfs://127.0.0.1:8020/user/hive/warehouse/file_formats.db/csv_compressed/';\n...truncated for readability...\n75 hdfs://127.0.0.1:8020/user/hive/warehouse/file_formats.db/csv_compressed/csv_compressed.snappy\n79 hdfs://127.0.0.1:8020/user/hive/warehouse/file_formats.db/csv_compressed/csv_compressed_bz2.csv.bz2\n80 hdfs://127.0.0.1:8020/user/hive/warehouse/file_formats.db/csv_compressed/csv_compressed_gzip.csv.gz\n58 hdfs://127.0.0.1:8020/user/hive/warehouse/file_formats.db/csv_compressed/csv_compressed_zstd.csv.zst\n48 hdfs://127.0.0.1:8020/user/hive/warehouse/file_formats.db/csv_compressed/csv_compressed_deflate.csv.deflate\n116 hdfs://127.0.0.1:8020/user/hive/warehouse/file_formats.db/csv_compressed/dd414df64d67d49b_data.0.\n</div></div></div></div></div>","title":"Using Text Data Files with Impala Tables"}