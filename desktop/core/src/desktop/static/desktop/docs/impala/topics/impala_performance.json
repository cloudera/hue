{"body":"<div><div id=\"performance\"><div class=\"hue-doc-title\">Tuning Impala for Performance</div><div><p>\n      The following sections explain the factors affecting the performance of Impala features, and procedures for\n      tuning, monitoring, and benchmarking Impala queries and other SQL operations.\n    </p><p>\n      This section also describes techniques for maximizing Impala scalability. Scalability is tied to performance:\n      it means that performance remains high as the system workload increases. For example, reducing the disk I/O\n      performed by a query can speed up an individual query, and at the same time improve scalability by making it\n      practical to run more queries simultaneously. Sometimes, an optimization technique improves scalability more\n      than performance. For example, reducing memory usage for a query might not change the query performance much,\n      but might improve scalability by allowing more Impala queries or other kinds of jobs to run at the same time\n      without running out of memory.\n    </p><div class=\"hue-doc-note\"><p>\n        Before starting any performance tuning or benchmarking, make sure your system is configured with all the\n        recommended minimum hardware requirements from <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_prereqs.html#prereqs_hardware\" target=\"_blank\">Hardware Requirements</a> and\n        software settings from <a class=\"hue-doc-external-link\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_config_performance.html#config_performance\" target=\"_blank\">Post-Installation Configuration for Impala</a>.\n      </p></div><ul><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_partitioning.xml\" data-doc-anchor-id=\"partitioning\">Partitioning for Impala Tables</a>. This technique physically divides the data based on\n        the different values in frequently queried columns, allowing queries to skip reading a large percentage of\n        the data in a table.\n      </li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_joins.xml\" data-doc-anchor-id=\"perf_joins\">Performance Considerations for Join Queries</a>. Joins are the main class of queries that you can tune at\n        the SQL level, as opposed to changing physical factors such as the file format or the hardware\n        configuration. The related topics <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_stats.xml\" data-doc-anchor-id=\"perf_column_stats\">Overview of Column Statistics</a> and\n        <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_stats.xml\" data-doc-anchor-id=\"perf_table_stats\">Overview of Table Statistics</a> are also important primarily for join performance.\n      </li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_stats.xml\" data-doc-anchor-id=\"perf_table_stats\">Overview of Table Statistics</a> and\n        <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_stats.xml\" data-doc-anchor-id=\"perf_column_stats\">Overview of Column Statistics</a>. Gathering table and column statistics, using the\n        <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement, helps Impala automatically optimize the performance for join\n        queries, without requiring changes to SQL query statements. (This process is greatly simplified in Impala\n        1.2.2 and higher, because the <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement gathers both kinds of statistics in\n        one operation, and does not require any setup and configuration as was previously necessary for the\n        <span class=\"hue-doc-codeph\">ANALYZE TABLE</span> statement in Hive.)\n      </li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_testing.xml\" data-doc-anchor-id=\"performance_testing\">Testing Impala Performance</a>. Do some post-setup testing to ensure Impala is\n        using optimal settings for performance, before conducting any benchmark tests.\n      </li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_benchmarking.xml\" data-doc-anchor-id=\"perf_benchmarks\">Benchmarking Impala Queries</a>. The configuration and sample data that you use\n        for initial experiments with Impala is often not appropriate for doing performance tests.\n      </li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_resources.xml\" data-doc-anchor-id=\"mem_limits\">Controlling Impala Resource Usage</a>. The more memory Impala can utilize, the better query\n        performance you can expect. In a cluster running other kinds of workloads as well, you must make tradeoffs\n        to make sure all Hadoop components have enough memory to perform well, so you might cap the memory that\n        Impala can use.\n      </li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_s3.xml\" data-doc-anchor-id=\"s3\">Using Impala with Amazon S3 Object Store</a>. Queries against data stored in the Amazon Simple Storage Service (S3)\n        have different performance characteristics than when the data is stored in HDFS.\n      </li></ul><div><div>Continue reading:</div><ul><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_cookbook.xml\">Impala Performance Guidelines and Best Practices</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_joins.xml\">Performance Considerations for Join Queries</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_stats.xml\">Table and Column Statistics</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_benchmarking.xml\">Benchmarking Impala Queries</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_resources.xml\">Controlling Impala Resource Usage</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_runtime_filtering.xml\">Runtime Filtering for Impala Queries (Impala 2.5 or higher only)</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_hdfs_caching.xml\">Using HDFS Caching with Impala (Impala 2.1 or higher only)</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_skew.xml\">Detecting and Correcting HDFS Block Skew Conditions</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_data_cache.xml\">Data Cache for Remote Reads</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_testing.xml\">Testing Impala Performance</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_explain_plan.xml\">Understanding Impala Query Performance - EXPLAIN Plans and Query Profiles</a></li></ul></div><p id=\"cookbook_blurb\">\n        A good source of tips related to scalability and performance tuning is the\n        <a class=\"hue-doc-external-link\" href=\"http://www.slideshare.net/cloudera/the-impala-cookbook-42530186\" target=\"_blank\">Impala\n        Cookbook</a> presentation. These slides are updated periodically as new features come\n        out and new benchmarks are performed.\n      </p></div><div style=\"display:none;\" id=\"perf_network\"><div class=\"hue-doc-title\">Network Traffic</div><div/></div><div style=\"display:none;\" id=\"perf_partition_schema\"><div class=\"hue-doc-title\">Designing Partitioned Tables</div><div/></div><div style=\"display:none;\" id=\"perf_partition_query\"><div class=\"hue-doc-title\">Queries on Partitioned Tables</div><div/></div><div style=\"display:none;\" id=\"perf_monitoring\"><div class=\"hue-doc-title\">Monitoring Performance through the Impala Web Interface</div><div/></div><div style=\"display:none;\" id=\"perf_query_coord\"><div class=\"hue-doc-title\">Query Coordination</div><div/></div><div style=\"display:none;\" id=\"perf_bottlenecks\"><div class=\"hue-doc-title\">Performance Bottlenecks</div><div/></div><div style=\"display:none;\" id=\"perf_long_queries\"><div class=\"hue-doc-title\">Managing Long-Running Queries</div><div/></div><div style=\"display:none;\" id=\"perf_load\"><div class=\"hue-doc-title\">Performance Considerations for Loading Data</div><div/></div><div style=\"display:none;\" id=\"perf_file_formats\"><div class=\"hue-doc-title\">Performance Considerations for File Formats</div><div/></div><div style=\"display:none;\" id=\"perf_compression\"><div class=\"hue-doc-title\">Performance Considerations for Compression</div><div/></div><div style=\"display:none;\" id=\"perf_codegen\"><div class=\"hue-doc-title\">Native Code Generation</div><div/></div></div></div>","title":"Tuning Impala for Performance"}