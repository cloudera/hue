{"body":"<div><div id=\"adls\"><div class=\"hue-doc-title\">Using Impala with the Azure Data Lake Store (ADLS)</div><div><p>\n      You can use Impala to query data residing on the Azure Data Lake Store\n      (ADLS) filesystem. This capability allows convenient access to a storage\n      system that is remotely managed, accessible from anywhere, and integrated\n      with various cloud-based services. Impala can query files in any supported\n      file format from ADLS. The ADLS storage location can be for an entire\n      table or individual partitions in a partitioned table.\n    </p><p>\n      The default Impala tables use data files stored on HDFS, which are ideal for bulk loads and queries using\n      full-table scans. In contrast, queries against ADLS data are less performant, making ADLS suitable for holding\n      <q>cold</q> data that is only queried occasionally, while more frequently accessed <q>hot</q> data resides in\n      HDFS. In a partitioned table, you can set the <span class=\"hue-doc-codeph\">LOCATION</span> attribute for individual partitions\n      to put some partitions on HDFS and others on ADLS, typically depending on the age of the data.\n    </p><p>Starting in Impala 3.1, Impala supports ADLS Gen2\n      filesystem, Azure Blob File System (ABFS).</p><p/></div><div id=\"prereqs\"><div class=\"hue-doc-title\">Prerequisites</div><div><p>\n        These procedures presume that you have already set up an Azure account,\n        configured an ADLS store, and configured your Hadoop cluster with appropriate\n        credentials to be able to access ADLS. See the following resources for information:\n      </p><ul><li><p><a class=\"hue-doc-external-link\" href=\"https://docs.microsoft.com/en-us/azure/data-lake-store/data-lake-store-get-started-portal\" target=\"_blank\">Get started with Azure Data Lake Store using the Azure Portal</a></p></li><li><a class=\"hue-doc-external-link\" href=\"https://docs.microsoft.com/en-us/azure/storage/data-lake-storage/quickstart-create-account\" target=\"_blank\">Azure Data Lake Storage Gen2</a></li><li><p><a class=\"hue-doc-external-link\" href=\"https://hadoop.apache.org/docs/current/hadoop-azure-datalake/index.html\" target=\"_blank\">Hadoop Azure Data Lake Support</a></p></li></ul></div></div><div id=\"sql\"><div class=\"hue-doc-title\">How Impala SQL Statements Work with ADLS</div><div><p> Impala SQL statements work with data on ADLS as follows. </p><ul><li><p> The <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_create_table.xml\" data-doc-anchor-id=\"create_table\">CREATE TABLE Statement</a> or <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_alter_table.xml\" data-doc-anchor-id=\"alter_table\">ALTER TABLE Statement</a> statements can specify\n            that a table resides on the ADLS filesystem by using one of the\n            following ADLS prefixes in the <span class=\"hue-doc-codeph\">LOCATION</span> property.<ul><li>For ADLS Gen1: <span class=\"hue-doc-codeph\">adl://</span></li><li>For ADLS Gen2: <span class=\"hue-doc-codeph\">abfs://</span> or\n                  <span class=\"hue-doc-codeph\">abfss://</span></li></ul></p><p><span class=\"hue-doc-codeph\">ALTER TABLE</span> can also set the\n              <span class=\"hue-doc-codeph\">LOCATION</span> property for an individual partition, so\n            that some data in a table resides on ADLS and other data in the same\n            table resides on HDFS. </p> See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_adls.xml\" data-doc-anchor-id=\"ddl\">Creating Impala Databases, Tables, and Partitions for Data Stored on ADLS</a>\n          for usage information.</li><li><p>\n            Once a table or partition is designated as residing on ADLS, the <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_select.xml\" data-doc-anchor-id=\"select\">SELECT Statement</a>\n            statement transparently accesses the data files from the appropriate storage layer.\n          </p></li><li><p>\n            If the ADLS table is an internal table, the <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_drop_table.xml\" data-doc-anchor-id=\"drop_table\">DROP TABLE Statement</a> statement\n            removes the corresponding data files from ADLS when the table is dropped.\n          </p></li><li><p>\n            The <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_truncate_table.xml\" data-doc-anchor-id=\"truncate_table\">TRUNCATE TABLE Statement (Impala 2.3 or higher only)</a> statement always removes the corresponding\n            data files from ADLS when the table is truncated.\n          </p></li><li><p>\n            The <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_load_data.xml\" data-doc-anchor-id=\"load_data\">LOAD DATA Statement</a> can move data files residing in HDFS into\n            an ADLS table.\n          </p></li><li><p>\n            The <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_insert.xml\" data-doc-anchor-id=\"insert\">INSERT Statement</a>, or the <span class=\"hue-doc-codeph\">CREATE TABLE AS SELECT</span>\n            form of the <span class=\"hue-doc-codeph\">CREATE TABLE</span> statement, can copy data from an HDFS table or another ADLS\n            table into an ADLS table.\n          </p></li></ul><p> For usage information about Impala SQL statements with ADLS tables,\n        see <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_adls.xml\" data-doc-anchor-id=\"dml\">Using Impala DML Statements for ADLS Data</a>. </p></div></div><div id=\"creds\"><div class=\"hue-doc-title\">Specifying Impala Credentials to Access Data in ADLS</div><div><p> To allow Impala to access data in ADLS, specify values for the\n        following configuration settings in your\n          <span class=\"hue-doc-filepath\">core-site.xml</span> file.</p><p>For ADLS Gen1:</p><div class=\"hue-doc-codeblock\">&lt;property&gt;\n   &lt;name&gt;dfs.adls.oauth2.access.token.provider.type&lt;/name&gt;\n   &lt;value&gt;ClientCredential&lt;/value&gt;\n&lt;/property&gt;\n&lt;property&gt;\n   &lt;name&gt;dfs.adls.oauth2.client.id&lt;/name&gt;\n   &lt;value&gt;<span class=\"hue-doc-varname\">your_client_id</span>&lt;/value&gt;\n&lt;/property&gt;\n&lt;property&gt;\n   &lt;name&gt;dfs.adls.oauth2.credential&lt;/name&gt;\n   &lt;value&gt;<span class=\"hue-doc-varname\">your_client_secret</span>&lt;/value&gt;\n&lt;/property&gt;\n&lt;property&gt;\n   &lt;name&gt;dfs.adls.oauth2.refresh.url&lt;/name&gt;\n   &lt;value&gt;https://login.windows.net/<span class=\"hue-doc-varname\">your_azure_tenant_id</span>/oauth2/token&lt;/value&gt;\n&lt;/property&gt;\n\n</div><p>For ADLS Gen2:</p><div class=\"hue-doc-codeblock\"> &lt;property&gt;\n    &lt;name&gt;fs.azure.account.auth.type&lt;/name&gt;\n    &lt;value&gt;OAuth&lt;/value&gt;\n  &lt;/property&gt;\n\n  &lt;property&gt;\n    &lt;name&gt;fs.azure.account.oauth.provider.type&lt;/name&gt;\n    &lt;value&gt;org.apache.hadoop.fs.azurebfs.oauth2.ClientCredsTokenProvider&lt;/value&gt;\n  &lt;/property&gt;\n\n  &lt;property&gt;\n    &lt;name&gt;fs.azure.account.oauth2.client.id&lt;/name&gt;\n    &lt;value&gt;<span class=\"hue-doc-varname\">your_client_id</span>&lt;/value&gt;\n  &lt;/property&gt;\n\n  &lt;property&gt;\n    &lt;name&gt;fs.azure.account.oauth2.client.secret&lt;/name&gt;\n    &lt;value&gt;<span class=\"hue-doc-varname\">your_client_secret</span>&lt;/value&gt;\n  &lt;/property&gt;\n\n  &lt;property&gt;\n    &lt;name&gt;fs.azure.account.oauth2.client.endpoint&lt;/name&gt;\n    &lt;value&gt;https://login.microsoftonline.com/<span class=\"hue-doc-varname\">your_azure_tenant_id</span>/oauth2/token&lt;/value&gt;\n  &lt;/property&gt;</div><div class=\"hue-doc-note\"><p>\n          Check if your Hadoop distribution or cluster management tool includes support for\n          filling in and distributing credentials across the cluster in an automated way.\n        </p></div><p> After specifying the credentials, restart both the Impala and Hive\n        services. Restarting Hive is required because certain Impala queries,\n        such as <span class=\"hue-doc-codeph\">CREATE TABLE</span> statements, go through the Hive\n        metastore.</p></div></div><div id=\"etl\"><div class=\"hue-doc-title\">Loading Data into ADLS for Impala Queries</div><div><p>\n        If your ETL pipeline involves moving data into ADLS and then querying through Impala,\n        you can either use Impala DML statements to create, move, or copy the data, or\n        use the same data loading techniques as you would for non-Impala data.\n      </p></div><div id=\"dml\"><div class=\"hue-doc-title\">Using Impala DML Statements for ADLS Data</div><div><p id=\"adls_dml\">\n        In Impala 2.9 and higher, the Impala DML statements\n        (<span class=\"hue-doc-codeph\">INSERT</span>, <span class=\"hue-doc-codeph\">LOAD DATA</span>, and <span class=\"hue-doc-codeph\">CREATE TABLE AS\n        SELECT</span>) can write data into a table or partition that resides in the Azure Data\n        Lake Store (ADLS). ADLS Gen2 is supported in Impala 3.1 and higher.\n      </p></div></div><div id=\"manual_etl\"><div class=\"hue-doc-title\">Manually Loading Data into Impala Tables on ADLS</div><div><p>\n          As an alternative, you can use the Microsoft-provided methods to bring data files\n          into ADLS for querying through Impala. See\n          <a class=\"hue-doc-external-link\" href=\"https://docs.microsoft.com/en-us/azure/data-lake-store/data-lake-store-copy-data-azure-storage-blob\" target=\"_blank\">the Microsoft ADLS documentation</a>\n          for details.\n        </p><p>\n          After you upload data files to a location already mapped to an Impala table or partition, or if you delete\n          files in ADLS from such a location, issue the <span class=\"hue-doc-codeph\">REFRESH <span class=\"hue-doc-varname\">table_name</span></span>\n          statement to make Impala aware of the new set of data files.\n        </p></div></div></div><div id=\"ddl\"><div class=\"hue-doc-title\">Creating Impala Databases, Tables, and Partitions for Data Stored on ADLS</div><div><p>\n        Impala reads data for a table or partition from ADLS based on the\n          <span class=\"hue-doc-codeph\">LOCATION</span> attribute for the table or partition.\n        Specify the ADLS details in the <span class=\"hue-doc-codeph\">LOCATION</span> clause of a\n          <span class=\"hue-doc-codeph\">CREATE TABLE</span> or <span class=\"hue-doc-codeph\">ALTER TABLE</span>\n        statement. The syntax for the <span class=\"hue-doc-codeph\">LOCATION</span> clause is:\n        <ul><li>\n            For ADLS Gen1:\n<div class=\"hue-doc-codeblock\">adl://<span class=\"hue-doc-varname\">account</span>.azuredatalakestore.net/<span class=\"hue-doc-varname\">path/file</span></div></li><li>\n            For ADLS Gen2:\n<div class=\"hue-doc-codeblock\">abfs://<span class=\"hue-doc-varname\">container</span>@<span class=\"hue-doc-varname\">account</span>.dfs.core.windows.net/<span class=\"hue-doc-varname\">path</span>/<span class=\"hue-doc-varname\">file</span></div><p>\n              or\n            </p><div class=\"hue-doc-codeblock\">abfss://<span class=\"hue-doc-varname\">container</span>@<span class=\"hue-doc-varname\">account</span>.dfs.core.windows.net/<span class=\"hue-doc-varname\">path</span>/<span class=\"hue-doc-varname\">file</span></div></li></ul></p><p><span class=\"hue-doc-codeph\"><span class=\"hue-doc-varname\">container</span></span> denotes the parent\n        location that holds the files and folders, which is the Containers in\n        the Azure Storage Blobs service.\n      </p><p><span class=\"hue-doc-codeph\"><span class=\"hue-doc-varname\">account</span></span> is the name given for your\n        storage account.\n      </p><div class=\"hue-doc-note\"><p> By default, TLS is enabled both with <span class=\"hue-doc-codeph\">abfs://</span> and\n            <span class=\"hue-doc-codeph\">abfss://</span>. </p><p>\n          When you set the <span class=\"hue-doc-codeph\">fs.azure.always.use.https=false</span>\n          property, TLS is disabled with <span class=\"hue-doc-codeph\">abfs://</span>, and TLS is\n          enabled with <span class=\"hue-doc-codeph\">abfss://</span></p></div><p>\n        For a partitioned table, either specify a separate <span class=\"hue-doc-codeph\">LOCATION</span> clause for each new partition,\n        or specify a base <span class=\"hue-doc-codeph\">LOCATION</span> for the table and set up a directory structure in ADLS to mirror\n        the way Impala partitioned tables are structured in HDFS. Although, strictly speaking, ADLS filenames do not\n        have directory paths, Impala treats ADLS filenames with <span class=\"hue-doc-codeph\">/</span> characters the same as HDFS\n        pathnames that include directories.\n      </p><p>\n        To point a nonpartitioned table or an individual partition at ADLS, specify a single directory\n        path in ADLS, which could be any arbitrary directory. To replicate the structure of an entire Impala\n        partitioned table or database in ADLS requires more care, with directories and subdirectories nested and\n        named to match the equivalent directory tree in HDFS. Consider setting up an empty staging area if\n        necessary in HDFS, and recording the complete directory structure so that you can replicate it in ADLS.\n      </p><p>\n        For example, the following session creates a partitioned table where only a single partition resides on ADLS.\n        The partitions for years 2013 and 2014 are located on HDFS. The partition for year 2015 includes a\n        <span class=\"hue-doc-codeph\">LOCATION</span> attribute with an <span class=\"hue-doc-codeph\">adl://</span> URL, and so refers to data residing on\n        ADLS, under a specific path underneath the store <span class=\"hue-doc-codeph\">impalademo</span>.\n      </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; create database db_on_hdfs;\n[localhost:21000] &gt; use db_on_hdfs;\n[localhost:21000] &gt; create table mostly_on_hdfs (x int) partitioned by (year int);\n[localhost:21000] &gt; alter table mostly_on_hdfs add partition (year=2013);\n[localhost:21000] &gt; alter table mostly_on_hdfs add partition (year=2014);\n[localhost:21000] &gt; alter table mostly_on_hdfs add partition (year=2015)\n                  &gt;   location 'adl://impalademo.azuredatalakestore.net/dir1/dir2/dir3/t1';\n</div><p> For convenience when working with multiple tables with data files\n        stored in ADLS, you can create a database with a\n          <span class=\"hue-doc-codeph\">LOCATION</span> attribute pointing to an ADLS path. Specify\n        a URL of the form as shown above. Any tables created inside that\n        database automatically create directories underneath the one specified\n        by the database <span class=\"hue-doc-codeph\">LOCATION</span> attribute. </p><p>\n        The following session creates a database and two partitioned tables residing entirely on ADLS, one\n        partitioned by a single column and the other partitioned by multiple columns. Because a\n        <span class=\"hue-doc-codeph\">LOCATION</span> attribute with an <span class=\"hue-doc-codeph\">adl://</span> URL is specified for the database, the\n        tables inside that database are automatically created on ADLS underneath the database directory. To see the\n        names of the associated subdirectories, including the partition key values, we use an ADLS client tool to\n        examine how the directory structure is organized on ADLS. For example, Impala partition directories such as\n        <span class=\"hue-doc-codeph\">month=1</span> do not include leading zeroes, which sometimes appear in partition directories created\n        through Hive.\n      </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; create database db_on_adls location 'adl://impalademo.azuredatalakestore.net/dir1/dir2/dir3';\n[localhost:21000] &gt; use db_on_adls;\n\n[localhost:21000] &gt; create table partitioned_on_adls (x int) partitioned by (year int);\n[localhost:21000] &gt; alter table partitioned_on_adls add partition (year=2013);\n[localhost:21000] &gt; alter table partitioned_on_adls add partition (year=2014);\n[localhost:21000] &gt; alter table partitioned_on_adls add partition (year=2015);\n\n[localhost:21000] &gt; ! hadoop fs -ls adl://impalademo.azuredatalakestore.net/dir1/dir2/dir3 --recursive;\n2015-03-17 13:56:34          0 dir1/dir2/dir3/\n2015-03-17 16:43:28          0 dir1/dir2/dir3/partitioned_on_adls/\n2015-03-17 16:43:49          0 dir1/dir2/dir3/partitioned_on_adls/year=2013/\n2015-03-17 16:43:53          0 dir1/dir2/dir3/partitioned_on_adls/year=2014/\n2015-03-17 16:43:58          0 dir1/dir2/dir3/partitioned_on_adls/year=2015/\n\n[localhost:21000] &gt; create table partitioned_multiple_keys (x int)\n                  &gt;   partitioned by (year smallint, month tinyint, day tinyint);\n[localhost:21000] &gt; alter table partitioned_multiple_keys\n                  &gt;   add partition (year=2015,month=1,day=1);\n[localhost:21000] &gt; alter table partitioned_multiple_keys\n                  &gt;   add partition (year=2015,month=1,day=31);\n[localhost:21000] &gt; alter table partitioned_multiple_keys\n                  &gt;   add partition (year=2015,month=2,day=28);\n\n[localhost:21000] &gt; ! hadoop fs -ls adl://impalademo.azuredatalakestore.net/dir1/dir2/dir3 --recursive;\n2015-03-17 13:56:34          0 dir1/dir2/dir3/\n2015-03-17 16:47:13          0 dir1/dir2/dir3/partitioned_multiple_keys/\n2015-03-17 16:47:44          0 dir1/dir2/dir3/partitioned_multiple_keys/year=2015/month=1/day=1/\n2015-03-17 16:47:50          0 dir1/dir2/dir3/partitioned_multiple_keys/year=2015/month=1/day=31/\n2015-03-17 16:47:57          0 dir1/dir2/dir3/partitioned_multiple_keys/year=2015/month=2/day=28/\n2015-03-17 16:43:28          0 dir1/dir2/dir3/partitioned_on_adls/\n2015-03-17 16:43:49          0 dir1/dir2/dir3/partitioned_on_adls/year=2013/\n2015-03-17 16:43:53          0 dir1/dir2/dir3/partitioned_on_adls/year=2014/\n2015-03-17 16:43:58          0 dir1/dir2/dir3/partitioned_on_adls/year=2015/\n</div><p>\n        The <span class=\"hue-doc-codeph\">CREATE DATABASE</span> and <span class=\"hue-doc-codeph\">CREATE TABLE</span> statements create the associated\n        directory paths if they do not already exist. You can specify multiple levels of directories, and the\n        <span class=\"hue-doc-codeph\">CREATE</span> statement creates all appropriate levels, similar to using <span class=\"hue-doc-codeph\">mkdir\n        -p</span>.\n      </p><p>\n        Use the standard ADLS file upload methods to actually put the data files into the right locations. You can\n        also put the directory paths and data files in place before creating the associated Impala databases or\n        tables, and Impala automatically uses the data from the appropriate location after the associated databases\n        and tables are created.\n      </p><p> You can switch whether an existing table or partition points to data\n        in HDFS or ADLS. For example, if you have an Impala table or partition\n        pointing to data files in HDFS or ADLS, and you later transfer those\n        data files to the other filesystem, use an <span class=\"hue-doc-codeph\">ALTER TABLE</span>\n        statement to adjust the <span class=\"hue-doc-codeph\">LOCATION</span> attribute of the\n        corresponding table or partition to reflect that change. This\n        location-switching technique is not practical for entire databases that\n        have a custom <span class=\"hue-doc-codeph\">LOCATION</span> attribute. </p></div></div><div id=\"internal_external\"><div class=\"hue-doc-title\">Internal and External Tables Located on ADLS</div><div><p>\n        Just as with tables located on HDFS storage, you can designate ADLS-based tables as either internal (managed\n        by Impala) or external, by using the syntax <span class=\"hue-doc-codeph\">CREATE TABLE</span> or <span class=\"hue-doc-codeph\">CREATE EXTERNAL\n        TABLE</span> respectively. When you drop an internal table, the files associated with the table are\n        removed, even if they are on ADLS storage. When you drop an external table, the files associated with the\n        table are left alone, and are still available for access by other tools or components. See\n        <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_tables.xml\" data-doc-anchor-id=\"tables\">Overview of Impala Tables</a> for details.\n      </p><p>\n        If the data on ADLS is intended to be long-lived and accessed by other tools in addition to Impala, create\n        any associated ADLS tables with the <span class=\"hue-doc-codeph\">CREATE EXTERNAL TABLE</span> syntax, so that the files are not\n        deleted from ADLS when the table is dropped.\n      </p><p>\n        If the data on ADLS is only needed for querying by Impala and can be safely discarded once the Impala\n        workflow is complete, create the associated ADLS tables using the <span class=\"hue-doc-codeph\">CREATE TABLE</span> syntax, so\n        that dropping the table also deletes the corresponding data files on ADLS.\n      </p><p>\n        For example, this session creates a table in ADLS with the same column layout as a table in HDFS, then\n        examines the ADLS table and queries some data from it. The table in ADLS works the same as a table in HDFS as\n        far as the expected file format of the data, table and column statistics, and other table properties. The\n        only indication that it is not an HDFS table is the <span class=\"hue-doc-codeph\">adl://</span> URL in the\n        <span class=\"hue-doc-codeph\">LOCATION</span> property. Many data files can reside in the ADLS directory, and their combined\n        contents form the table data. Because the data in this example is uploaded after the table is created, a\n        <span class=\"hue-doc-codeph\">REFRESH</span> statement prompts Impala to update its cached information about the data files.\n      </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; create table usa_cities_adls like usa_cities location 'adl://impalademo.azuredatalakestore.net/usa_cities';\n[localhost:21000] &gt; desc usa_cities_adls;\n+-------+----------+---------+\n| name  | type     | comment |\n+-------+----------+---------+\n| id    | smallint |         |\n| city  | string   |         |\n| state | string   |         |\n+-------+----------+---------+\n\n-- Now from a web browser, upload the same data file(s) to ADLS as in the HDFS table,\n-- under the relevant store and path. If you already have the data in ADLS, you would\n-- point the table LOCATION at an existing path.\n\n[localhost:21000] &gt; refresh usa_cities_adls;\n[localhost:21000] &gt; select count(*) from usa_cities_adls;\n+----------+\n| count(*) |\n+----------+\n| 289      |\n+----------+\n[localhost:21000] &gt; select distinct state from sample_data_adls limit 5;\n+----------------------+\n| state                |\n+----------------------+\n| Louisiana            |\n| Minnesota            |\n| Georgia              |\n| Alaska               |\n| Ohio                 |\n+----------------------+\n[localhost:21000] &gt; desc formatted usa_cities_adls;\n+------------------------------+----------------------------------------------------+---------+\n| name                         | type                                               | comment |\n+------------------------------+----------------------------------------------------+---------+\n| # col_name                   | data_type                                          | comment |\n|                              | NULL                                               | NULL    |\n| id                           | smallint                                           | NULL    |\n| city                         | string                                             | NULL    |\n| state                        | string                                             | NULL    |\n|                              | NULL                                               | NULL    |\n| # Detailed Table Information | NULL                                               | NULL    |\n| Database:                    | adls_testing                                       | NULL    |\n| Owner:                       | jrussell                                           | NULL    |\n| CreateTime:                  | Mon Mar 16 11:36:25 PDT 2017                       | NULL    |\n| LastAccessTime:              | UNKNOWN                                            | NULL    |\n| Protect Mode:                | None                                               | NULL    |\n| Retention:                   | 0                                                  | NULL    |\n| Location:                    | adl://impalademo.azuredatalakestore.net/usa_cities | NULL    |\n| Table Type:                  | MANAGED_TABLE                                      | NULL    |\n...\n+------------------------------+----------------------------------------------------+---------+\n</div><p>\n        In this case, we have already uploaded a Parquet file with a million rows of data to the\n        <span class=\"hue-doc-codeph\">sample_data</span> directory underneath the <span class=\"hue-doc-codeph\">impalademo</span> store on ADLS. This\n        session creates a table with matching column settings pointing to the corresponding location in ADLS, then\n        queries the table. Because the data is already in place on ADLS when the table is created, no\n        <span class=\"hue-doc-codeph\">REFRESH</span> statement is required.\n      </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; create table sample_data_adls\n                  &gt; (id int, id bigint, val int, zerofill string,\n                  &gt; name string, assertion boolean, city string, state string)\n                  &gt; stored as parquet location 'adl://impalademo.azuredatalakestore.net/sample_data';\n[localhost:21000] &gt; select count(*) from sample_data_adls;\n+----------+\n| count(*) |\n+----------+\n| 1000000  |\n+----------+\n[localhost:21000] &gt; select count(*) howmany, assertion from sample_data_adls group by assertion;\n+---------+-----------+\n| howmany | assertion |\n+---------+-----------+\n| 667149  | true      |\n| 332851  | false     |\n+---------+-----------+\n</div></div></div><div id=\"queries\"><div class=\"hue-doc-title\">Running and Tuning Impala Queries for Data Stored on ADLS</div><div><p>\n        Once the appropriate <span class=\"hue-doc-codeph\">LOCATION</span> attributes are set up at the table or partition level, you\n        query data stored in ADLS exactly the same as data stored on HDFS or in HBase:\n      </p><ul><li>\n          Queries against ADLS data support all the same file formats as for HDFS data.\n        </li><li>\n          Tables can be unpartitioned or partitioned. For partitioned tables, either manually construct paths in ADLS\n          corresponding to the HDFS directories representing partition key values, or use <span class=\"hue-doc-codeph\">ALTER TABLE ...\n          ADD PARTITION</span> to set up the appropriate paths in ADLS.\n        </li><li>\n          HDFS, Kudu, and HBase tables can be joined to ADLS tables, or ADLS tables can be joined with each other.\n        </li><li>\n          Authorization using the Ranger framework to control access to databases, tables, or columns works the\n          same whether the data is in HDFS or in ADLS.\n        </li><li>\n          The <span class=\"hue-doc-cmdname\">catalogd</span> daemon caches metadata for both HDFS and ADLS tables. Use\n          <span class=\"hue-doc-codeph\">REFRESH</span> and <span class=\"hue-doc-codeph\">INVALIDATE METADATA</span> for ADLS tables in the same situations\n          where you would issue those statements for HDFS tables.\n        </li><li>\n          Queries against ADLS tables are subject to the same kinds of admission control and resource management as\n          HDFS tables.\n        </li><li>\n          Metadata about ADLS tables is stored in the same metastore database as for HDFS tables.\n        </li><li>\n          You can set up views referring to ADLS tables, the same as for HDFS tables.\n        </li><li>\n          The <span class=\"hue-doc-codeph\">COMPUTE STATS</span>, <span class=\"hue-doc-codeph\">SHOW TABLE STATS</span>, and <span class=\"hue-doc-codeph\">SHOW COLUMN\n          STATS</span> statements work for ADLS tables also.\n        </li></ul></div><div id=\"performance\"><div class=\"hue-doc-title\">Understanding and Tuning Impala Query Performance for ADLS Data</div><div><p>\n          Although Impala queries for data stored in ADLS might be less performant than queries against the\n          equivalent data stored in HDFS, you can still do some tuning. Here are techniques you can use to\n          interpret explain plans and profiles for queries against ADLS data, and tips to achieve the best\n          performance possible for such queries.\n        </p><p>\n          All else being equal, performance is expected to be lower for queries running against data on ADLS rather\n          than HDFS. The actual mechanics of the <span class=\"hue-doc-codeph\">SELECT</span> statement are somewhat different when the\n          data is in ADLS. Although the work is still distributed across the datanodes of the cluster, Impala might\n          parallelize the work for a distributed query differently for data on HDFS and ADLS. ADLS does not have the\n          same block notion as HDFS, so Impala uses heuristics to determine how to split up large ADLS files for\n          processing in parallel. Because all hosts can access any ADLS data file with equal efficiency, the\n          distribution of work might be different than for HDFS data, where the data blocks are physically read\n          using short-circuit local reads by hosts that contain the appropriate block replicas. Although the I/O to\n          read the ADLS data might be spread evenly across the hosts of the cluster, the fact that all data is\n          initially retrieved across the network means that the overall query performance is likely to be lower for\n          ADLS data than for HDFS data.\n        </p><p id=\"adls_block_splitting\">\n        Because ADLS does not expose the block sizes of data files the way HDFS does, any Impala\n        <span class=\"hue-doc-codeph\">INSERT</span> or <span class=\"hue-doc-codeph\">CREATE TABLE AS SELECT</span> statements use the\n        <span class=\"hue-doc-codeph\">PARQUET_FILE_SIZE</span> query option setting to define the size of Parquet\n        data files. (Using a large block size is more important for Parquet tables than for\n        tables that use other file formats.)\n      </p><p>\n          When optimizing aspects of for complex queries such as the join order, Impala treats tables on HDFS and\n          ADLS the same way. Therefore, follow all the same tuning recommendations for ADLS tables as for HDFS ones,\n          such as using the <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement to help Impala construct accurate estimates of\n          row counts and cardinality. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_performance.xml\" data-doc-anchor-id=\"performance\">Tuning Impala for Performance</a> for details.\n        </p><p>\n          In query profile reports, the numbers for <span class=\"hue-doc-codeph\">BytesReadLocal</span>,\n          <span class=\"hue-doc-codeph\">BytesReadShortCircuit</span>, <span class=\"hue-doc-codeph\">BytesReadDataNodeCached</span>, and\n          <span class=\"hue-doc-codeph\">BytesReadRemoteUnexpected</span> are blank because those metrics come from HDFS.\n          If you do see any indications that a query against an ADLS table performed <q>remote read</q>\n          operations, do not be alarmed. That is expected because, by definition, all the I/O for ADLS tables involves\n          remote reads.\n        </p></div></div></div><div id=\"restrictions\"><div class=\"hue-doc-title\">Restrictions on Impala Support for ADLS</div><div><p>\n        Impala requires that the default filesystem for the cluster be HDFS. You cannot use ADLS as the only\n        filesystem in the cluster.\n      </p><p>\n        Although ADLS is often used to store JSON-formatted data, the current Impala support for ADLS does not include\n        directly querying JSON data. For Impala queries, use data files in one of the file formats listed in\n        <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_file_formats.xml\" data-doc-anchor-id=\"file_formats\">How Impala Works with Hadoop File Formats</a>. If you have data in JSON format, you can prepare a\n        flattened version of that data for querying by Impala as part of your ETL cycle.\n      </p><p>\n        You cannot use the <span class=\"hue-doc-codeph\">ALTER TABLE ... SET CACHED</span> statement for tables or partitions that are\n        located in ADLS.\n      </p></div></div><div id=\"best_practices\"><div class=\"hue-doc-title\">Best Practices for Using Impala with ADLS</div><div><p>\n        The following guidelines represent best practices derived from testing and real-world experience with Impala on ADLS:\n      </p><ul><li><p>\n            Any reference to an ADLS location must be fully qualified. (This rule applies when\n            ADLS is not designated as the default filesystem.)\n          </p></li><li><p>\n            Set any appropriate configuration settings for <span class=\"hue-doc-cmdname\">impalad</span>.\n          </p></li></ul></div></div></div></div>","title":"Using Impala with the Azure Data Lake Store (ADLS)"}