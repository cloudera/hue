{"body":"<div><div id=\"explain_plan\"><div class=\"hue-doc-title\">Understanding Impala Query Performance - EXPLAIN Plans and Query Profiles</div><div><p>\n      To understand the high-level performance considerations for Impala queries, read the\n      output of the <span class=\"hue-doc-codeph\">EXPLAIN</span> statement for the query. You can get the\n      <span class=\"hue-doc-codeph\">EXPLAIN</span> plan without actually running the query itself.\n    </p><p>\n      For an overview of the physical performance characteristics for a query, issue the\n      <span class=\"hue-doc-codeph\">SUMMARY</span> statement in <span class=\"hue-doc-cmdname\">impala-shell</span> immediately after\n      executing a query. This condensed information shows which phases of execution took the\n      most time, and how the estimates for memory usage and number of rows at each phase compare\n      to the actual values.\n    </p><p>\n      To understand the detailed performance characteristics for a query, issue the\n      <span class=\"hue-doc-codeph\">PROFILE</span> statement in <span class=\"hue-doc-cmdname\">impala-shell</span> immediately after\n      executing a query. This low-level information includes physical details about memory, CPU,\n      I/O, and network usage, and thus is only available after the query is actually run.\n    </p><p/><p>\n      Also, see <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_hbase.xml\" data-doc-anchor-id=\"hbase_performance\">Performance Considerations for the Impala-HBase Integration</a> and\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_s3.xml\" data-doc-anchor-id=\"s3_performance\">Understanding and Tuning Impala Query Performance for S3 Data</a> for examples of interpreting\n      <span class=\"hue-doc-codeph\">EXPLAIN</span> plans for queries against HBase tables <span class=\"hue-doc-ph\">and data\n      stored in the Amazon Simple Storage System (S3)</span>.\n    </p></div><div id=\"perf_explain\"><div class=\"hue-doc-title\">Using the EXPLAIN Plan for Performance Tuning</div><div><p>\n        The <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_explain.xml\" data-doc-anchor-id=\"explain\">EXPLAIN</a></span> statement\n        gives you an outline of the logical steps that a query will perform, such as how the\n        work will be distributed among the nodes and how intermediate results will be combined\n        to produce the final result set. You can see these details before actually running the\n        query. You can use this information to check that the query will not operate in some\n        very unexpected or inefficient way.\n      </p><div class=\"hue-doc-codeblock\" id=\"explain_plan_simple\">[impalad-host:21000] &gt; EXPLAIN SELECT COUNT(*) FROM customer_address;\n+----------------------------------------------------------+\n| Explain String                                           |\n+----------------------------------------------------------+\n| ...                                                      |\n|                                                          |\n| 03:AGGREGATE [FINALIZE]                                  |\n| |  output: sum(count(*))                                 |\n| |                                                        |\n| 02:EXCHANGE [UNPARTITIONED]                              |\n| |                                                        |\n| 01:AGGREGATE                                             |\n| |  output: count(*)                                      |\n| |                                                        |\n| 00:SCAN HDFS [default.customer_address]                  |\n|    partitions=1/1 size=5.25MB                            |\n+----------------------------------------------------------+\n</div><p id=\"explain_interpret\">\n        Read the <span class=\"hue-doc-codeph\">EXPLAIN</span> plan from bottom to top:\n        <ul><li>\n            The last part of the plan shows the low-level details such as the expected amount of\n            data that will be read, where you can judge the effectiveness of your partitioning\n            strategy and estimate how long it will take to scan a table based on total data size\n            and the size of the cluster.\n          </li><li>\n            As you work your way up, next you see the operations that will be parallelized and\n            performed on each Impala node.\n          </li><li>\n            At the higher levels, you see how data flows when intermediate result sets are\n            combined and transmitted from one node to another.\n          </li><li>\n            See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_explain_level.xml\" data-doc-anchor-id=\"explain_level\">EXPLAIN_LEVEL Query Option</a> for details\n            about the <span class=\"hue-doc-codeph\">EXPLAIN_LEVEL</span> query option, which lets you customize how\n            much detail to show in the <span class=\"hue-doc-codeph\">EXPLAIN</span> plan depending on whether you\n            are doing high-level or low-level tuning, dealing with logical or physical aspects\n            of the query.\n          </li></ul></p><p>\n        The <span class=\"hue-doc-codeph\">EXPLAIN</span> plan is also printed at the beginning of the query profile\n        report described in <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_explain_plan.xml\" data-doc-anchor-id=\"perf_profile\">Using the Query Profile for Performance Tuning</a>, for convenience in examining both the\n        logical and physical aspects of the query side-by-side.\n      </p><p>\n        The amount of detail displayed in the <span class=\"hue-doc-codeph\">EXPLAIN</span> output is controlled by\n        the <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_explain_level.xml\" data-doc-anchor-id=\"explain_level\">EXPLAIN_LEVEL</a> query\n        option. You typically increase this setting from <span class=\"hue-doc-codeph\">standard</span> to\n        <span class=\"hue-doc-codeph\">extended</span> (or from <span class=\"hue-doc-codeph\">1</span> to <span class=\"hue-doc-codeph\">2</span>) when\n        doublechecking the presence of table and column statistics during performance tuning, or\n        when estimating query resource usage in conjunction with the resource management\n        features.\n      </p></div></div><div id=\"perf_summary\"><div class=\"hue-doc-title\">Using the SUMMARY Report for Performance Tuning</div><div><p>\n        The\n        <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_shell_commands.xml\" data-doc-anchor-id=\"shell_commands\">SUMMARY</a></span>\n        command within the <span class=\"hue-doc-cmdname\">impala-shell</span> interpreter gives you an\n        easy-to-digest overview of the timings for the different phases of execution for a\n        query. Like the <span class=\"hue-doc-codeph\">EXPLAIN</span> plan, it is easy to see potential performance\n        bottlenecks. Like the <span class=\"hue-doc-codeph\">PROFILE</span> output, it is available after the query\n        is run and so displays actual timing numbers.\n      </p><p>\n        The <span class=\"hue-doc-codeph\">SUMMARY</span> report is also printed at the beginning of the query\n        profile report described in <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_explain_plan.xml\" data-doc-anchor-id=\"perf_profile\">Using the Query Profile for Performance Tuning</a>, for convenience in examining\n        high-level and low-level aspects of the query side-by-side.\n      </p><p>\n        When the <span class=\"hue-doc-codeph\">MT_DOP</span> query option is set to a value larger than\n        <span class=\"hue-doc-codeph\">0</span>, the <span class=\"hue-doc-codeph\">#Inst</span> column in the output shows the number of\n        fragment instances. Impala decomposes each query into smaller units of work that are\n        distributed across the cluster, and these units are referred as fragments.\n      </p><p>\n        When the <span class=\"hue-doc-codeph\">MT_DOP</span> query option is set to 0, the <span class=\"hue-doc-codeph\">#Inst</span>\n        column in the output shows the same value as the <span class=\"hue-doc-codeph\">#Hosts</span> column, since\n        there is exactly one fragment for each host.\n      </p><p>\n        For example, here is a query involving an aggregate function, on a single-node cluster.\n        The different stages of the query and their timings are shown (rolled up for all nodes),\n        along with estimated and actual values used in planning the query. In this case, the\n        <span class=\"hue-doc-codeph\">AVG()</span> function is computed for a subset of data on each node (stage 01)\n        and then the aggregated results from all nodes are combined at the end (stage 03). You\n        can see which stages took the most time, and whether any estimates were substantially\n        different than the actual data distribution.\n      </p><div class=\"hue-doc-codeblock\">&gt; SELECT AVG(ss_sales_price) FROM store_sales WHERE ss_coupon_amt = 0;\n&gt; SUMMARY;\n+--------------+--------+--------+----------+----------+-------+------------+----------+---------------+-----------------+\n| Operator     | #Hosts | #Inst  | Avg Time | Max Time | #Rows | Est. #Rows | Peak Mem | Est. Peak Mem | Detail          |\n+--------------+--------+--------+----------+----------+-------+------------+----------+---------------+-----------------+\n| 03:AGGREGATE | 1      | 1      | 1.03ms   | 1.03ms   | 1     | 1          | 48.00 KB | -1 B          | MERGE FINALIZE  |\n| 02:EXCHANGE  | 1      | 1      | 0ns      | 0ns      | 1     | 1          | 0 B      | -1 B          | UNPARTITIONED   |\n| 01:AGGREGATE | 1      | 1      |30.79ms   | 30.79ms  | 1     | 1          | 80.00 KB | 10.00 MB      |                 |\n| 00:SCAN HDFS | 1      | 1      | 5.45s    | 5.45s    | 2.21M | -1         | 64.05 MB | 432.00 MB     | tpc.store_sales |\n+--------------+--------+--------+----------+----------+-------+------------+----------+---------------+-----------------+\n</div><p>\n        Notice how the longest initial phase of the query is measured in seconds (s), while\n        later phases working on smaller intermediate results are measured in milliseconds (ms)\n        or even nanoseconds (ns).\n      </p></div></div><div id=\"perf_profile\"><div class=\"hue-doc-title\">Using the Query Profile for Performance Tuning</div><div><p>\n        The <span class=\"hue-doc-codeph\">PROFILE</span> command, available in the <span class=\"hue-doc-cmdname\">impala-shell</span>\n        interpreter, produces a detailed low-level report showing how the most recent query was\n        executed. Unlike the <span class=\"hue-doc-codeph\">EXPLAIN</span> plan described in\n        <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_explain_plan.xml\" data-doc-anchor-id=\"perf_explain\">Using the EXPLAIN Plan for Performance Tuning</a>, this information is only available after the\n        query has finished. It shows physical details such as the number of bytes read, maximum\n        memory usage, and so on for each node. You can use this information to determine if the\n        query is I/O-bound or CPU-bound, whether some network condition is imposing a\n        bottleneck, whether a slowdown is affecting some nodes but not others, and to check that\n        recommended configuration settings such as short-circuit local reads are in effect.\n      </p><p>\n        By default, time values in the profile output reflect the wall-clock time taken by an\n        operation. For values denoting system time or user time, the measurement unit is\n        reflected in the metric name, such as <span class=\"hue-doc-codeph\">ScannerThreadsSysTime</span> or\n        <span class=\"hue-doc-codeph\">ScannerThreadsUserTime</span>. For example, a multi-threaded I/O operation\n        might show a small figure for wall-clock time, while the corresponding system time is\n        larger, representing the sum of the CPU time taken by each thread. Or a wall-clock time\n        figure might be larger because it counts time spent waiting, while the corresponding\n        system and user time figures only measure the time while the operation is actively using\n        CPU cycles.\n      </p><p>\n        The <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_explain_plan.xml\" data-doc-anchor-id=\"perf_explain\"><span class=\"hue-doc-codeph\">EXPLAIN</span>\n        plan</a> is also printed at the beginning of the query profile report, for\n        convenience in examining both the logical and physical aspects of the query\n        side-by-side. The\n        <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_explain_level.xml\" data-doc-anchor-id=\"explain_level\">EXPLAIN_LEVEL</a> query option\n        also controls the verbosity of the <span class=\"hue-doc-codeph\">EXPLAIN</span> output printed by the\n        <span class=\"hue-doc-codeph\">PROFILE</span> command.\n      </p><p>\n        In Impala 3.2, a new <span class=\"hue-doc-codeph\">Per Node Profiles</span> section\n        was added to the profile output. The new section includes the following metrics that can\n        be controlled by the\n        <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_resource_trace_ratio.xml\" data-doc-anchor-id=\"resource_trace_ratio\">RESOURCE_TRACE_RATIO</a></span>\n        query option.\n      </p><ul><li><span class=\"hue-doc-codeph\">CpuIoWaitPercentage</span></li><li><span class=\"hue-doc-codeph\">CpuSysPercentage</span></li><li><span class=\"hue-doc-codeph\">CpuUserPercentage</span></li><li><span class=\"hue-doc-codeph\">HostDiskReadThroughput</span>: All data read by the host as part of the\n          execution of this query (spilling), by the HDFS data node, and by other processes\n          running on the same system.\n        </li><li><span class=\"hue-doc-codeph\">HostDiskWriteThroughput</span>: All data written by the host as part of the\n          execution of this query (spilling), by the HDFS data node, and by other processes\n          running on the same system.\n        </li><li><span class=\"hue-doc-codeph\">HostNetworkRx</span>: All data received by the host as part of the execution\n          of this query, other queries, and other processes running on the same system.\n        </li><li><span class=\"hue-doc-codeph\">HostNetworkTx</span>: All data transmitted by the host as part of the\n          execution of this query, other queries, and other processes running on the same\n          system.\n        </li></ul></div></div></div></div>","title":"Understanding Impala Query Performance - EXPLAIN Plans and Query Profiles"}