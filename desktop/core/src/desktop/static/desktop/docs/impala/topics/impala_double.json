{"body":"<div><div><div class=\"hue-doc-title\">DOUBLE Data Type</div><div><p>\n      A double precision floating-point data type used in <span class=\"hue-doc-codeph\">CREATE TABLE</span> and <span class=\"hue-doc-codeph\">ALTER\n      TABLE</span> statements.\n    </p><p><b>Syntax:</b></p><p>\n      In the column definition of a <span class=\"hue-doc-codeph\">CREATE TABLE</span> statement:\n    </p><div class=\"hue-doc-codeblock\"><span class=\"hue-doc-varname\">column_name</span> DOUBLE</div><p><b>Range:</b> 4.94065645841246544e-324d .. 1.79769313486231570e+308, positive or negative\n    </p><p><b>Precision:</b> 15 to 17 significant digits, depending on usage. The number of significant digits does\n      not depend on the position of the decimal point.\n    </p><p><b>Representation:</b> The values are stored in 8 bytes, using\n      <a class=\"hue-doc-external-link\" href=\"https://en.wikipedia.org/wiki/Double-precision_floating-point_format\" target=\"_blank\">IEEE 754 Double Precision Binary Floating Point</a> format.\n    </p><p><b>Conversions:</b> Impala does not automatically convert <span class=\"hue-doc-codeph\">DOUBLE</span> to any other type. You can\n      use <span class=\"hue-doc-codeph\">CAST()</span> to convert <span class=\"hue-doc-codeph\">DOUBLE</span> values to <span class=\"hue-doc-codeph\">FLOAT</span>,\n      <span class=\"hue-doc-codeph\">TINYINT</span>, <span class=\"hue-doc-codeph\">SMALLINT</span>, <span class=\"hue-doc-codeph\">INT</span>, <span class=\"hue-doc-codeph\">BIGINT</span>,\n      <span class=\"hue-doc-codeph\">STRING</span>, <span class=\"hue-doc-codeph\">TIMESTAMP</span>, or <span class=\"hue-doc-codeph\">BOOLEAN</span>. You can use exponential\n      notation in <span class=\"hue-doc-codeph\">DOUBLE</span> literals or when casting from <span class=\"hue-doc-codeph\">STRING</span>, for example\n      <span class=\"hue-doc-codeph\">1.0e6</span> to represent one million.\n      <span class=\"hue-doc-ph\">\n          Casting an integer or floating-point value <span class=\"hue-doc-codeph\">N</span> to\n        <span class=\"hue-doc-codeph\">TIMESTAMP</span> produces a value that is <span class=\"hue-doc-codeph\">N</span> seconds past the start of the epoch\n        date (January 1, 1970). By default, the result value represents a date and time in the UTC time zone.\n        If the setting <span class=\"hue-doc-codeph\">--use_local_tz_for_unix_timestamp_conversions=true</span> is in effect,\n        the resulting <span class=\"hue-doc-codeph\">TIMESTAMP</span> represents a date and time in the local time zone.\n        </span></p><p><b>Usage notes:</b></p><p>\n      The data type <span class=\"hue-doc-codeph\">REAL</span> is an alias for <span class=\"hue-doc-codeph\">DOUBLE</span>.\n    </p><p>\n        Impala does not evaluate NaN (not a number) as equal to any other numeric values,\n        including other NaN values. For example, the following statement, which evaluates equality\n        between two NaN values, returns <span class=\"hue-doc-codeph\">false</span>:\n      </p><div class=\"hue-doc-codeblock\">\nSELECT CAST('nan' AS DOUBLE)=CAST('nan' AS DOUBLE);\n</div><p><b>Examples:</b></p><div class=\"hue-doc-codeblock\">CREATE TABLE t1 (x DOUBLE);\nSELECT CAST(1000.5 AS DOUBLE);\n</div><p><b>Partitioning:</b> Because fractional values of this type are not always represented precisely, when this\n        type is used for a partition key column, the underlying HDFS directories might not be named exactly as you\n        expect. Prefer to partition on a <span class=\"hue-doc-codeph\">DECIMAL</span> column instead.\n      </p><p><b>HBase considerations:</b> This data type is fully compatible with HBase tables.\n      </p><p><b>Parquet considerations:</b> This type is fully compatible with Parquet tables.\n      </p><p><b>Text table considerations:</b> Values of this type are potentially larger in text tables than in tables\n        using Parquet or other binary formats.\n      </p><p><b>Internal details:</b> Represented in memory as an 8-byte value.\n      </p><p><b>Column statistics considerations:</b> Because this type has a fixed size, the maximum and average size\n        fields are always filled in for column statistics, even before you run the <span class=\"hue-doc-codeph\">COMPUTE STATS</span>\n        statement.\n      </p><p><b>Restrictions:</b></p><p>\n        Due to the way arithmetic on <span class=\"hue-doc-codeph\">FLOAT</span> and <span class=\"hue-doc-codeph\">DOUBLE</span> columns uses\n        high-performance hardware instructions, and distributed queries can perform these operations in different\n        order for each query, results can vary slightly for aggregate function calls such as <span class=\"hue-doc-codeph\">SUM()</span>\n        and <span class=\"hue-doc-codeph\">AVG()</span> for <span class=\"hue-doc-codeph\">FLOAT</span> and <span class=\"hue-doc-codeph\">DOUBLE</span> columns, particularly on\n        large data sets where millions or billions of values are summed or averaged. For perfect consistency and\n        repeatability, use the <span class=\"hue-doc-codeph\">DECIMAL</span> data type for such operations instead of\n        <span class=\"hue-doc-codeph\">FLOAT</span> or <span class=\"hue-doc-codeph\">DOUBLE</span>.\n      </p><p>\n        The inability to exactly represent certain floating-point values means that\n        <span class=\"hue-doc-codeph\">DECIMAL</span> is sometimes a better choice than <span class=\"hue-doc-codeph\">DOUBLE</span>\n        or <span class=\"hue-doc-codeph\">FLOAT</span> when precision is critical, particularly when\n        transferring data from other database systems that use different representations\n        or file formats.\n      </p><p><b>Kudu considerations:</b></p><p>\n        Currently, the data types <span class=\"hue-doc-codeph\">BOOLEAN</span>, <span class=\"hue-doc-codeph\">FLOAT</span>,\n        and <span class=\"hue-doc-codeph\">DOUBLE</span> cannot be used for primary key columns in Kudu tables.\n      </p><p><b>Related information:</b></p><p><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_literals.xml\" data-doc-anchor-id=\"numeric_literals\">Numeric Literals</a>, <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions\">Impala Mathematical Functions</a>,\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_float.xml\" data-doc-anchor-id=\"float\">FLOAT Data Type</a></p></div></div></div>","title":"DOUBLE Data Type"}