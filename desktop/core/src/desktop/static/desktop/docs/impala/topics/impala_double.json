{"body":"<div><div id=\"double\"><div class=\"hue-doc-title\">DOUBLE Data Type</div><div><p>\n      A double precision floating-point data type used in <span class=\"hue-doc-codeph\">CREATE TABLE</span> and <span class=\"hue-doc-codeph\">ALTER\n      TABLE</span> statements.\n    </p><p id=\"syntax_blurb\"><b>Syntax:</b></p><p>\n      In the column definition of a <span class=\"hue-doc-codeph\">CREATE TABLE</span> statement:\n    </p><div class=\"hue-doc-codeblock\"><span class=\"hue-doc-varname\">column_name</span> DOUBLE</div><p><b>Range:</b> 4.94065645841246544e-324d .. 1.79769313486231570e+308, positive or negative\n    </p><p><b>Precision:</b> 15 to 17 significant digits, depending on usage. The number of significant digits does\n      not depend on the position of the decimal point.\n    </p><p><b>Representation:</b> The values are stored in 8 bytes, using\n      <a class=\"hue-doc-external-link\" href=\"https://en.wikipedia.org/wiki/Double-precision_floating-point_format\" target=\"_blank\">IEEE 754 Double Precision Binary Floating Point</a> format.\n    </p><p><b>Conversions:</b> Impala does not automatically convert <span class=\"hue-doc-codeph\">DOUBLE</span> to any other type. You can\n      use <span class=\"hue-doc-codeph\">CAST()</span> to convert <span class=\"hue-doc-codeph\">DOUBLE</span> values to <span class=\"hue-doc-codeph\">FLOAT</span>,\n      <span class=\"hue-doc-codeph\">TINYINT</span>, <span class=\"hue-doc-codeph\">SMALLINT</span>, <span class=\"hue-doc-codeph\">INT</span>, <span class=\"hue-doc-codeph\">BIGINT</span>,\n      <span class=\"hue-doc-codeph\">STRING</span>, <span class=\"hue-doc-codeph\">TIMESTAMP</span>, or <span class=\"hue-doc-codeph\">BOOLEAN</span>. You can use exponential\n      notation in <span class=\"hue-doc-codeph\">DOUBLE</span> literals or when casting from <span class=\"hue-doc-codeph\">STRING</span>, for example\n      <span class=\"hue-doc-codeph\">1.0e6</span> to represent one million.\n      <span class=\"hue-doc-ph\" id=\"cast_int_to_timestamp\"> Casting an integer or floating-point value\n        <span class=\"hue-doc-codeph\">N</span> to <span class=\"hue-doc-codeph\">TIMESTAMP</span> produces a value that is\n        <span class=\"hue-doc-codeph\">N</span> seconds past the start of the epoch date (January 1, 1970). By\n        default, the result value represents a date and time in the UTC time zone. If the\n        setting <span class=\"hue-doc-codeph\">‑‑use_local_tz_for_unix_timestamp_conversions=true</span>\n        is in effect, the resulting <span class=\"hue-doc-codeph\">TIMESTAMP</span> represents a date and time in the\n        local time zone. </span></p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n      The data type <span class=\"hue-doc-codeph\">REAL</span> is an alias for <span class=\"hue-doc-codeph\">DOUBLE</span>.\n    </p><p id=\"how_impala_handles_nan_values\">\n        Impala does not evaluate NaN (not a number) as equal to any other numeric values,\n        including other NaN values. For example, the following statement, which evaluates\n        equality between two NaN values, returns <span class=\"hue-doc-codeph\">false</span>:\n      </p><div class=\"hue-doc-codeblock\">SELECT CAST('nan' AS DOUBLE)=CAST('nan' AS DOUBLE);\n</div><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">CREATE TABLE t1 (x DOUBLE);\nSELECT CAST(1000.5 AS DOUBLE);\n</div><p id=\"partitioning_imprecise\"><b>Partitioning:</b> Because fractional values of this type are not always represented\n        precisely, when this type is used for a partition key column, the underlying HDFS\n        directories might not be named exactly as you expect. Prefer to partition on a\n        <span class=\"hue-doc-codeph\">DECIMAL</span> column instead.\n      </p><p id=\"hbase_ok\"><b>HBase considerations:</b> This data type is fully compatible with HBase tables.\n      </p><p id=\"parquet_ok\"><b>Parquet considerations:</b> This type is fully compatible with Parquet tables.\n      </p><p id=\"text_bulky\"><b>Text table considerations:</b> Values of this type are potentially larger in text\n        tables than in tables using Parquet or other binary formats.\n      </p><p id=\"internals_8_bytes\"><b>Internal details:</b> Represented in memory as an 8-byte value.\n      </p><p id=\"column_stats_constant\"><b>Column statistics considerations:</b> Because this type has a fixed size, the maximum\n        and average size fields are always filled in for column statistics, even before you run\n        the <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement.\n      </p><p id=\"restrictions_blurb\"><b>Restrictions:</b></p><p id=\"sum_double\">\n        Due to the way arithmetic on <span class=\"hue-doc-codeph\">FLOAT</span> and <span class=\"hue-doc-codeph\">DOUBLE</span> columns\n        uses high-performance hardware instructions, and distributed queries can perform these\n        operations in different order for each query, results can vary slightly for aggregate\n        function calls such as <span class=\"hue-doc-codeph\">SUM()</span> and <span class=\"hue-doc-codeph\">AVG()</span> for\n        <span class=\"hue-doc-codeph\">FLOAT</span> and <span class=\"hue-doc-codeph\">DOUBLE</span> columns, particularly on large data\n        sets where millions or billions of values are summed or averaged. For perfect\n        consistency and repeatability, use the <span class=\"hue-doc-codeph\">DECIMAL</span> data type for such\n        operations instead of <span class=\"hue-doc-codeph\">FLOAT</span> or <span class=\"hue-doc-codeph\">DOUBLE</span>.\n      </p><p id=\"float_double_decimal_caveat\">\n        The inability to exactly represent certain floating-point values means that\n        <span class=\"hue-doc-codeph\">DECIMAL</span> is sometimes a better choice than <span class=\"hue-doc-codeph\">DOUBLE</span> or\n        <span class=\"hue-doc-codeph\">FLOAT</span> when precision is critical, particularly when transferring data\n        from other database systems that use different representations or file formats.\n      </p><p id=\"kudu_blurb\"><b>Kudu considerations:</b></p><p id=\"kudu_non_pk_data_type\">\n        Currently, the data types <span class=\"hue-doc-codeph\">BOOLEAN</span>, <span class=\"hue-doc-codeph\">FLOAT</span>, and\n        <span class=\"hue-doc-codeph\">DOUBLE</span> cannot be used for primary key columns in Kudu tables.\n      </p><p id=\"related_info\"><b>Related information:</b></p><p><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_literals.xml\" data-doc-anchor-id=\"numeric_literals\">Numeric Literals</a>, <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions\">Impala Mathematical Functions</a>,\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_float.xml\" data-doc-anchor-id=\"float\">FLOAT Data Type</a></p></div></div></div>","title":"DOUBLE Data Type"}