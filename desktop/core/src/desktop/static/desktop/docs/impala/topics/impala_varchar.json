{"body":"<div><div id=\"varchar\"><div class=\"hue-doc-title\">VARCHAR Data Type (Impala 2.0 or higher only)</div><div><p>\n      A variable-length character type, truncated during processing if necessary to fit within the specified\n      length.\n    </p><p id=\"syntax_blurb\"><b>Syntax:</b></p><p>\n      In the column definition of a <span class=\"hue-doc-codeph\">CREATE TABLE</span> statement:\n    </p><div class=\"hue-doc-codeblock\"><span class=\"hue-doc-varname\">column_name</span> VARCHAR(<span class=\"hue-doc-varname\">max_length</span>)</div><p>\n      The maximum length you can specify is 65,535.\n    </p><p id=\"partitioning_bad\"><b>Partitioning:</b> This type can be used for partition key columns. Because of the\n        efficiency advantage of numeric values over character-based values, if the partition key\n        is a string representation of a number, prefer to use an integer type with sufficient\n        range (<span class=\"hue-doc-codeph\">INT</span>, <span class=\"hue-doc-codeph\">BIGINT</span>, and so on) where practical.\n      </p><p id=\"hbase_no\"><b>HBase considerations:</b> This data type cannot be used with HBase tables.\n      </p><p id=\"parquet_blurb\"><b>Parquet considerations:</b></p><ul><li>\n        This type can be read from and written to Parquet files.\n      </li><li>\n        There is no requirement for a particular level of Parquet.\n      </li><li>\n        Parquet files generated by Impala and containing this type can be freely interchanged with other components\n        such as Hive and MapReduce.\n      </li><li>\n        Parquet data files can contain values that are longer than allowed by the\n        <span class=\"hue-doc-codeph\">VARCHAR(<span class=\"hue-doc-varname\">n</span>)</span> length limit. Impala ignores any extra trailing characters\n        when it processes those values during a query.\n      </li></ul><p id=\"text_blurb\"><b>Text table considerations:</b></p><p>\n      Text data files can contain values that are longer than allowed by the\n      <span class=\"hue-doc-codeph\">VARCHAR(<span class=\"hue-doc-varname\">n</span>)</span> length limit. Any extra trailing characters are ignored when\n      Impala processes those values during a query.\n    </p><p><b>Avro considerations:</b></p><p id=\"avro_2gb_strings\">\n        The Avro specification allows string values up to 2**64 bytes in length. Impala queries\n        for Avro tables use 32-bit integers to hold string lengths. In\n        Impala 2.5 and higher, Impala truncates <span class=\"hue-doc-codeph\">CHAR</span> and\n        <span class=\"hue-doc-codeph\">VARCHAR</span> values in Avro tables to (2**31)-1 bytes. If a query encounters\n        a <span class=\"hue-doc-codeph\">STRING</span> value longer than (2**31)-1 bytes in an Avro table, the query\n        fails. In earlier releases, encountering such long values in an Avro table could cause a\n        crash.\n      </p><p id=\"schema_evolution_blurb\"><b>Schema evolution considerations:</b></p><p>\n      You can use <span class=\"hue-doc-codeph\">ALTER TABLE ... CHANGE</span> to switch column data types to and from\n      <span class=\"hue-doc-codeph\">VARCHAR</span>. You can convert from <span class=\"hue-doc-codeph\">STRING</span> to\n      <span class=\"hue-doc-codeph\">VARCHAR(<span class=\"hue-doc-varname\">n</span>)</span>, or from <span class=\"hue-doc-codeph\">VARCHAR(<span class=\"hue-doc-varname\">n</span>)</span> to\n      <span class=\"hue-doc-codeph\">STRING</span>, or from <span class=\"hue-doc-codeph\">CHAR(<span class=\"hue-doc-varname\">n</span>)</span> to\n      <span class=\"hue-doc-codeph\">VARCHAR(<span class=\"hue-doc-varname\">n</span>)</span>, or from <span class=\"hue-doc-codeph\">VARCHAR(<span class=\"hue-doc-varname\">n</span>)</span> to\n      <span class=\"hue-doc-codeph\">CHAR(<span class=\"hue-doc-varname\">n</span>)</span>. When switching back and forth between <span class=\"hue-doc-codeph\">VARCHAR</span>\n      and <span class=\"hue-doc-codeph\">CHAR</span>, you can also change the length value. This schema evolution works the same for\n      tables using any file format. If a table contains values longer than the maximum length defined for a\n      <span class=\"hue-doc-codeph\">VARCHAR</span> column, Impala does not return an error. Any extra trailing characters are ignored\n      when Impala processes those values during a query.\n    </p><p id=\"compatibility_blurb\"><b>Compatibility:</b></p><p>\n      This type is available in Impala 2.0 or higher.\n    </p><p id=\"internals_min_bytes\"><b>Internal details:</b> Represented in memory as a byte array with the minimum size\n        needed to represent each value.\n      </p><p id=\"added_in_20\"><b>Added in:</b>Impala 2.0.0</p><p id=\"column_stats_variable\"><b>Column statistics considerations:</b> Because the values of this type have variable\n        size, none of the column statistics fields are filled in until you run the\n        <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement.\n      </p><p id=\"kudu_blurb\"><b>Kudu considerations:</b></p><p id=\"kudu_unsupported_data_type\"> Currently, the data types\n        <span class=\"hue-doc-codeph\">CHAR</span>, <span class=\"hue-doc-codeph\">ARRAY</span>, <span class=\"hue-doc-codeph\">MAP</span>, and\n          <span class=\"hue-doc-codeph\">STRUCT</span> cannot be used with Kudu tables.\n      </p><p id=\"restrictions_blurb\"><b>Restrictions:</b></p><p id=\"blobs_are_strings\">\n        All data in <span class=\"hue-doc-codeph\">CHAR</span> and <span class=\"hue-doc-codeph\">VARCHAR</span> columns must be in a\n        character encoding that is compatible with UTF-8. If you have binary data from another\n        database system (that is, a BLOB type), use a <span class=\"hue-doc-codeph\">STRING</span> column to hold it.\n      </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n      The following examples show how long and short <span class=\"hue-doc-codeph\">VARCHAR</span> values are treated. Values longer\n      than the maximum specified length are truncated by <span class=\"hue-doc-codeph\">CAST()</span>, or when queried from existing\n      data files. Values shorter than the maximum specified length are represented as the actual length of the\n      value, with no extra padding as seen with <span class=\"hue-doc-codeph\">CHAR</span> values.\n    </p><div class=\"hue-doc-codeblock\">create table varchar_1 (s varchar(1));\ncreate table varchar_4 (s varchar(4));\ncreate table varchar_20 (s varchar(20));\n\ninsert into varchar_1 values (cast('a' as varchar(1))), (cast('b' as varchar(1))), (cast('hello' as varchar(1))), (cast('world' as varchar(1)));\ninsert into varchar_4 values (cast('a' as varchar(4))), (cast('b' as varchar(4))), (cast('hello' as varchar(4))), (cast('world' as varchar(4)));\ninsert into varchar_20 values (cast('a' as varchar(20))), (cast('b' as varchar(20))), (cast('hello' as varchar(20))), (cast('world' as varchar(20)));\n\nselect * from varchar_1;\n+---+\n| s |\n+---+\n| a |\n| b |\n| h |\n| w |\n+---+\nselect * from varchar_4;\n+------+\n| s    |\n+------+\n| a    |\n| b    |\n| hell |\n| worl |\n+------+\n[localhost:21000] &gt; select * from varchar_20;\n+-------+\n| s     |\n+-------+\n| a     |\n| b     |\n| hello |\n| world |\n+-------+\nselect concat('[',s,']') as s from varchar_20;\n+---------+\n| s       |\n+---------+\n| [a]     |\n| [b]     |\n| [hello] |\n| [world] |\n+---------+\n</div><p>\n      The following example shows how identical <span class=\"hue-doc-codeph\">VARCHAR</span> values compare as equal, even if the\n      columns are defined with different maximum lengths. Both tables contain <span class=\"hue-doc-codeph\">'a'</span> and\n      <span class=\"hue-doc-codeph\">'b'</span> values. The longer <span class=\"hue-doc-codeph\">'hello'</span> and <span class=\"hue-doc-codeph\">'world'</span> values from the\n      <span class=\"hue-doc-codeph\">VARCHAR_20</span> table were truncated when inserted into the <span class=\"hue-doc-codeph\">VARCHAR_1</span> table.\n    </p><div class=\"hue-doc-codeblock\">select s from varchar_1 join varchar_20 using (s);\n+-------+\n| s     |\n+-------+\n| a     |\n| b     |\n+-------+\n</div><p>\n      The following examples show how <span class=\"hue-doc-codeph\">VARCHAR</span> values are freely interchangeable with\n      <span class=\"hue-doc-codeph\">STRING</span> values in contexts such as comparison operators and built-in functions:\n    </p><div class=\"hue-doc-codeblock\">select length(cast('foo' as varchar(100))) as length;\n+--------+\n| length |\n+--------+\n| 3      |\n+--------+\nselect cast('xyz' as varchar(5)) &gt; cast('abc' as varchar(10)) as greater;\n+---------+\n| greater |\n+---------+\n| true    |\n+---------+\n</div><p id=\"udf_blurb_no\"><b>UDF considerations:</b> This type cannot be used for the argument or return type of a\n        user-defined function (UDF) or user-defined aggregate function (UDA).\n      </p><p id=\"related_info\"><b>Related information:</b></p><p><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string.xml\" data-doc-anchor-id=\"string\">STRING Data Type</a>, <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_char.xml\" data-doc-anchor-id=\"char\">CHAR Data Type (Impala 2.0 or higher only)</a>,\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_literals.xml\" data-doc-anchor-id=\"string_literals\">String Literals</a>,\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions\">Impala String Functions</a></p></div></div></div>","title":"VARCHAR Data Type (Impala 2.0 or higher only)"}