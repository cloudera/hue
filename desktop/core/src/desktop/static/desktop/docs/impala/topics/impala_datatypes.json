{"body":"<div><div id=\"datatypes\"><div class=\"hue-doc-title\">Data Types</div><div><p>Impala supports a set of data types that you can use for table columns,\n      expression values, and function arguments and return values. </p><div class=\"hue-doc-note\"> Currently, Impala supports only scalar types, not composite or nested\n      types. Accessing a table containing any columns with unsupported types\n      causes an error. </div><div><div>Continue reading:</div><ul><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_array.xml\">ARRAY Complex Type (Impala 2.3 or higher only)</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_bigint.xml\">BIGINT Data Type</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_boolean.xml\">BOOLEAN Data Type</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_char.xml\">CHAR Data Type (Impala 2.0 or higher only)</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_date.xml\">DATE Data Type</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_decimal.xml\">DECIMAL Data Type (Impala 3.0 or higher only)</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_double.xml\">DOUBLE Data Type</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_float.xml\">FLOAT Data Type</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_int.xml\">INT Data Type</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_map.xml\">MAP Complex Type (Impala 2.3 or higher only)</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_real.xml\">REAL Data Type</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_smallint.xml\">SMALLINT Data Type</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string.xml\">STRING Data Type</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_struct.xml\">STRUCT Complex Type (Impala 2.3 or higher only)</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\">TIMESTAMP Data Type</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_tinyint.xml\">TINYINT Data Type</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_varchar.xml\">VARCHAR Data Type (Impala 2.0 or higher only)</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_complex_types.xml\">Complex Types (Impala 2.3 or higher only)</a></li></ul></div><p> For the notation to write literals of each of these data types, see\n        <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_literals.xml\" data-doc-anchor-id=\"literals\">Literals</a>. </p><p> Impala supports a limited set of implicit casts to avoid undesired\n      results from unexpected casting behavior. </p><ul><li> Impala does not implicitly cast between string and numeric or Boolean\n        types. Always use <span class=\"hue-doc-codeph\">CAST()</span> for these conversions. </li><li> Impala does perform implicit casts among the numeric types, when\n        going from a smaller or less precise type to a larger or more precise\n        one. For example, Impala will implicitly convert a\n          <span class=\"hue-doc-codeph\">SMALLINT</span> to a <span class=\"hue-doc-codeph\">BIGINT</span> or\n          <span class=\"hue-doc-codeph\">FLOAT</span>, but to convert from <span class=\"hue-doc-codeph\">DOUBLE</span> to\n          <span class=\"hue-doc-codeph\">FLOAT</span> or <span class=\"hue-doc-codeph\">INT</span> to\n          <span class=\"hue-doc-codeph\">TINYINT</span> requires a call to <span class=\"hue-doc-codeph\">CAST()</span> in\n        the query. </li><li> Impala does perform implicit casts from <span class=\"hue-doc-codeph\">STRING</span> to\n          <span class=\"hue-doc-codeph\">TIMESTAMP</span>. Impala has a restricted set of literal\n        formats for the <span class=\"hue-doc-codeph\">TIMESTAMP</span> data type and the\n          <span class=\"hue-doc-codeph\">FROM_UNIXTIME()</span> format string; see <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a> for details. </li></ul><p>See the topics under this section for full details on implicit and\n      explicit casting for each data type, and see <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_conversion_functions.xml\" data-doc-anchor-id=\"conversion_functions\">Impala Type Conversion Functions</a> for\n      details about the <span class=\"hue-doc-codeph\">CAST()</span> function.</p></div></div></div>","title":"Data Types"}