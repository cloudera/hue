{"body":"<div><div id=\"conversion_functions\"><div class=\"hue-doc-title\">Impala Type Conversion Functions</div><div><p>\n      Conversion functions are typically used in combination with other functions to explicitly\n      pass the expected data types. Impala has strict rules regarding data types for function\n      parameters. For example, Impala does not automatically convert a <span class=\"hue-doc-codeph\">DOUBLE</span>\n      value to <span class=\"hue-doc-codeph\">FLOAT</span>, a <span class=\"hue-doc-codeph\">BIGINT</span> value to <span class=\"hue-doc-codeph\">INT</span>,\n      or other conversion where precision could be lost or overflow could occur. Also, for\n      reporting or dealing with loosely defined schemas in big data contexts, you might need to\n      convert values to or from the <span class=\"hue-doc-codeph\">STRING</span> type.\n    </p><p><b>Function reference:</b></p><p>\n      Impala supports the following type conversion functions:\n    </p><ul><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_conversion_functions.xml\" data-doc-anchor-id=\"conversion_functions/cast\">CAST</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_conversion_functions.xml\" data-doc-anchor-id=\"conversion_functions/typeof\">TYPEOF</a></li></ul><dl><dt id=\"cast\">\n          CAST(expression AS type)\n        </dt><dd><b>Purpose:</b> Returns <span class=\"hue-doc-varname\">expression</span> converted to the\n          <span class=\"hue-doc-varname\">type</span> data type.\n          <p>\n            If the <span class=\"hue-doc-varname\">expression</span> value is of a type that cannot be converted to\n            the target <span class=\"hue-doc-varname\">type</span>:\n            <ul><li>\n                Of <span class=\"hue-doc-codeph\">DECIMAL</span>, <span class=\"hue-doc-codeph\">DATE</span>, and\n                <span class=\"hue-doc-codeph\">BOOLEAN</span>, the function returns an error.\n              </li><li>\n                Of all other types, the function returns <span class=\"hue-doc-codeph\">NULL</span>.\n              </li></ul></p><p><b>Usage notes:</b></p><p>\n            Use <span class=\"hue-doc-codeph\">CAST</span> when passing a column value or literal to a function that\n            expects a parameter with a different type. Frequently used in SQL operations such as\n            <span class=\"hue-doc-codeph\">CREATE TABLE AS SELECT</span> and <span class=\"hue-doc-codeph\">INSERT ... VALUES</span> to\n            ensure that values from various sources are of the appropriate type for the\n            destination columns.\n          </p><p>\n            Where practical, do a one-time <span class=\"hue-doc-codeph\">CAST()</span> operation during the\n            ingestion process to make each column into the appropriate type, rather than using\n            many <span class=\"hue-doc-codeph\">CAST()</span> operations in each query; doing type conversions for\n            each row during each query can be expensive for tables with millions or billions of\n            rows.\n          </p><p id=\"timezone_conversion_caveat\">\n        The way this function deals with time zones when converting to or from\n        <span class=\"hue-doc-codeph\">TIMESTAMP</span> values is affected by the\n        <span class=\"hue-doc-codeph\">‑‑use_local_tz_for_unix_timestamp_conversions</span> startup flag\n        for the <span class=\"hue-doc-cmdname\">impalad</span> daemon. See\n        <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a> for details about how\n        Impala handles time zone considerations for the <span class=\"hue-doc-codeph\">TIMESTAMP</span> data type.\n      </p><p id=\"related_info\"><b>Related information:</b></p><p>\n            For details of casts from each kind of data type, see the description of the\n            appropriate type: <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_tinyint.xml\" data-doc-anchor-id=\"tinyint\">TINYINT Data Type</a>,\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_smallint.xml\" data-doc-anchor-id=\"smallint\">SMALLINT Data Type</a>,\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_int.xml\" data-doc-anchor-id=\"int\">INT Data Type</a>,\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_bigint.xml\" data-doc-anchor-id=\"bigint\">BIGINT Data Type</a>,\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_float.xml\" data-doc-anchor-id=\"float\">FLOAT Data Type</a>,\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_double.xml\" data-doc-anchor-id=\"double\">DOUBLE Data Type</a>,\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_decimal.xml\" data-doc-anchor-id=\"decimal\">DECIMAL Data Type</a>,\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string.xml\" data-doc-anchor-id=\"string\">STRING Data Type</a>,\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_char.xml\" data-doc-anchor-id=\"char\">CHAR Data Type</a>,\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_varchar.xml\" data-doc-anchor-id=\"varchar\">VARCHAR Data Type</a>,\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a>,\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_boolean.xml\" data-doc-anchor-id=\"boolean\">BOOLEAN Data Type</a></p></dd><dt id=\"cast_format\">\n          CAST(expression AS type FORMAT pattern)\n        </dt><dd><b>Purpose:</b> Returns <span class=\"hue-doc-varname\">expression</span> converted to the\n          <span class=\"hue-doc-varname\">type</span> data type based on the <span class=\"hue-doc-varname\">pattern</span> format\n          string. This signature of <span class=\"hue-doc-codeph\">CAST()</span> with the <span class=\"hue-doc-codeph\">FORMAT</span>\n          clause is supported only for casts between <span class=\"hue-doc-codeph\">STRING</span> /\n          <span class=\"hue-doc-codeph\">CHAR</span> / <span class=\"hue-doc-codeph\">VARCHAR</span> types and <span class=\"hue-doc-codeph\">TIMESTAMP</span>\n          / <span class=\"hue-doc-codeph\">DATE</span> types.\n          <div class=\"hue-doc-note\">            The patterns allowed in the <span class=\"hue-doc-codeph\">FORMAT</span> clause support ISO SQL:2016\n            standard patterns. Those patterns are not the same format patterns used with the\n            other Impala conversion functions, e.g. <span class=\"hue-doc-codeph\">TO_TIMESTAMP()</span> and\n            <span class=\"hue-doc-codeph\">FROM_TIMESTAMP()</span>.\n          </div><p>\n            The following rules apply to <span class=\"hue-doc-varname\">pattern</span>. Any exceptions to these\n            rules are noted in the Details column of the table below.\n            <ul><li><span class=\"hue-doc-varname\">pattern</span> is a case-insensitive <span class=\"hue-doc-codeph\">STRING</span> unless\n                noted otherwise in the table below.\n              </li><li>\n                If <span class=\"hue-doc-varname\">pattern</span> is <span class=\"hue-doc-codeph\">NULL</span>, an empty string, or a\n                number, an error returns.\n              </li><li>\n                A fewer digits in <span class=\"hue-doc-varname\">expression</span> than specified in the\n                <span class=\"hue-doc-varname\">pattern</span> is accepted if a separator is correctly specified in\n                the <span class=\"hue-doc-varname\">pattern</span>. For example, <span class=\"hue-doc-codeph\">CAST('5-01-2017' AS DATE\n                FORMAT 'MM-dd-yyyy')</span> returns <span class=\"hue-doc-codeph\">DATE'2017-05-01'</span>.\n              </li><li>\n                If fewer number of digits are in <span class=\"hue-doc-varname\">expression</span> than specified in\n                the <span class=\"hue-doc-varname\">pattern</span>, the current date is used to complete the year\n                pattern. For example, <span class=\"hue-doc-codeph\">CAST('19/05' AS DATE FORMAT 'YYYY/MM')</span>\n                will return <span class=\"hue-doc-codeph\">DATE'2019-05-01'</span> when executed on August 8, 2019.\n              </li></ul></p><p>\n            The following format patterns are supported in the <span class=\"hue-doc-codeph\">FORMAT</span> clause.\n            <table id=\"table_gbt_5ym_r3b\"><thead><tr><td>\n                      Pattern\n                    </td><td>\n                      Description\n                    </td><td>\n                      Details\n                    </td></tr></thead><tbody><tr><td><span class=\"hue-doc-codeph\">YYYY</span></td><td>\n                      4-digit year.\n                    </td><td/></tr><tr><td><span class=\"hue-doc-codeph\">YYY</span></td><td>\n                      Last 3 digits of a year.\n                    </td><td/></tr><tr><td><span class=\"hue-doc-codeph\">YY</span></td><td>\n                      Last 2 digits of a year.\n                    </td><td/></tr><tr><td><span class=\"hue-doc-codeph\">Y</span></td><td>\n                      Last digit of a year\n                    </td><td/></tr><tr><td><span class=\"hue-doc-codeph\">RRRR</span></td><td>\n                      4-digit round year\n                    </td><td><p>\n                        If 1,3 or 4-digit year values are provided in\n                        <span class=\"hue-doc-varname\">expression</span>, treated as <span class=\"hue-doc-codeph\">YYYY</span>.\n                      </p><p>\n                        If 2-digit years are provided in <span class=\"hue-doc-varname\">expression</span>, treated\n                        as <span class=\"hue-doc-codeph\">RR</span>.\n                      </p><p>\n                        For date/time to string conversions, treated as <span class=\"hue-doc-codeph\">YYYY</span>.\n                      </p><p>\n                        If <span class=\"hue-doc-codeph\">YYYY</span>, <span class=\"hue-doc-codeph\">YYY</span>, <span class=\"hue-doc-codeph\">YY</span>,\n                        <span class=\"hue-doc-codeph\">Y</span>, or <span class=\"hue-doc-codeph\">RR</span> is given in the same\n                        <span class=\"hue-doc-varname\">pattern</span> for a string to date/time conversion, an\n                        error returns.\n                      </p></td></tr><tr><td><span class=\"hue-doc-codeph\">RR</span></td><td>\n                      2-digit round year.\n                    </td><td><p>\n                        For date/time to string conversions, same as <span class=\"hue-doc-codeph\">YY</span>.\n                      </p><p>\n                        For string to date/time conversions, the first 2 digits of the year in\n                        the return value depends on the specified two-digit year and the last\n                        two digits of the current year as follows:\n                        <ul><li><p>\n                              If the specified 2-digit year is 00 to 49:\n                            </p><ul><li><p>\n                                  If the last 2 digits of the current year are 00 to 49, the\n                                  returned year has the same first 2 digits as the current year.\n                                </p></li><li><p>\n                                  If the last 2 digits of the current year are 50 to 99, the\n                                  first 2 digits of the returned year are 1 greater than the\n                                  first 2 digits of the current year.\n                                </p></li></ul></li><li><p>\n                              If the specified 2-digit year is 50 to 99:\n                            </p><ul><li><p>\n                                  If the last 2 digits of the current year are 00 to 49, the\n                                  first 2 digits of the returned year are 1 less than the first\n                                  2 digits of the current year.\n                                </p></li><li><p>\n                                  If the last 2 digits of the current year are 50 to 99, the\n                                  returned year has the same first 2 digits as the current year.\n                                </p></li></ul></li></ul></p><p>\n                        If <span class=\"hue-doc-codeph\">YYYY</span>, <span class=\"hue-doc-codeph\">YYY</span>, <span class=\"hue-doc-codeph\">YY</span>,\n                        <span class=\"hue-doc-codeph\">Y</span>, or <span class=\"hue-doc-codeph\">RR</span> is given in the same\n                        <span class=\"hue-doc-varname\">pattern</span> for a string to date/time conversion, an\n                        error returns.\n                      </p><p>\n                        If 1-digit year values are provided in <span class=\"hue-doc-varname\">expression</span>, it\n                        is treated as <span class=\"hue-doc-codeph\">YYYY</span>.\n                      </p></td></tr><tr><td><span class=\"hue-doc-codeph\">Q</span></td><td>\n                      Quarter of year (1-4)\n                    </td><td><p>\n                        Not supported in string to date/time conversions.\n                      </p></td></tr><tr><td><span class=\"hue-doc-codeph\">MM</span></td><td>\n                      Month number\n                    </td><td><p> In date/time to string conversions, 1-digit months are\n                        prefixed with a zero. </p></td></tr><tr><td><span class=\"hue-doc-codeph\">MONTH</span><p><span class=\"hue-doc-codeph\">Month</span></p><p><span class=\"hue-doc-codeph\">month</span></p></td><td>\n                      Full month name\n                    </td><td>\n                      In string to date/time conversions:\n\n                      <ul><li> Converts a textual month name to a 2-digit month\n                          number. </li><li>\n                          The input strings are expected without trailing spaces, e.g.\n                          \"<span class=\"hue-doc-codeph\">June</span>\", \"<span class=\"hue-doc-codeph\">August</span>\".\n                        </li><li>\n                          If the <span class=\"hue-doc-codeph\">FX</span> modifier is active for the token, a\n                          9-character-long full month name with trailing spaces is expected for\n                          the input string.\n                        </li></ul><p>\n                        In date/time to string conversions:\n                        <ul><li>\n                            Converts to a 9-character-long full month name with trailing spaces.\n                          </li><li>\n                            If the <span class=\"hue-doc-codeph\">FM</span> modifier is active for this token,\n                            converts to a month name without trailing spaces.\n                          </li></ul></p><p>\n                        This pattern token is case sensitive. <span class=\"hue-doc-codeph\">MONTH</span>,\n                        <span class=\"hue-doc-codeph\">Month</span>, <span class=\"hue-doc-codeph\">month</span> would require different\n                        casing of the input in string to date/time conversions and would produce\n                        cased outputs in date/time to string conversions, For example,\n                        <span class=\"hue-doc-codeph\">MONTH</span>, <span class=\"hue-doc-codeph\">Month</span>, <span class=\"hue-doc-codeph\">month</span>\n                        would convert respectively <span class=\"hue-doc-codeph\">JULY</span>, <span class=\"hue-doc-codeph\">July</span>,\n                        and <span class=\"hue-doc-codeph\">july</span>.\n                      </p></td></tr><tr><td><span class=\"hue-doc-codeph\">MON</span><p><span class=\"hue-doc-codeph\">Mon</span></p><p><span class=\"hue-doc-codeph\">mon</span></p></td><td>\n                      Abbreviated 3-character month name\n                    </td><td><p>\n                        This pattern token is case sensitive. <span class=\"hue-doc-codeph\">MON</span>,\n                        <span class=\"hue-doc-codeph\">Mon</span>, <span class=\"hue-doc-codeph\">mon</span> would require different\n                        casing of the input in string to date/time conversions and would produce\n                        cased outputs in date/time to string conversions, For example,\n                        <span class=\"hue-doc-codeph\">MON</span>, <span class=\"hue-doc-codeph\">Mon</span>, <span class=\"hue-doc-codeph\">mon</span> would\n                        convert respectively <span class=\"hue-doc-codeph\">JUL</span>, <span class=\"hue-doc-codeph\">Jul</span>, and\n                        <span class=\"hue-doc-codeph\">jul</span>.\n                      </p></td></tr><tr><td><span class=\"hue-doc-codeph\">WW</span></td><td>\n                      Week of year (1-53)\n                    </td><td><p> Not supported in string to date/time conversions. </p><p> The 1st week begins on January 1st and ends on January\n                        7th. </p></td></tr><tr><td><span class=\"hue-doc-codeph\">W</span></td><td>\n                      Week of month (1-5)\n                    </td><td><p>\n                        Not supported in string to date/time conversions.\n                      </p><p>\n                        1st week begins on the 1st of the month and ends on the 7th.\n                      </p></td></tr><tr><td><span class=\"hue-doc-codeph\">D</span></td><td>\n                      Day of week (1-7)\n                    </td><td><p>\n                        Not supported in string to date/time conversions.\n                      </p>\n\n                      In date/time to string conversions, converts to a day number, for example,\n                      1 for Sunday, 2 for Monday.\n                    </td></tr><tr><td><span class=\"hue-doc-codeph\">DD</span></td><td>\n                      Day of month (1-31)\n                    </td><td><p> In date/time to string conversions, 1-digit days are\n                        prefixed with a zero. </p></td></tr><tr><td><span class=\"hue-doc-codeph\">DDD</span></td><td>\n                      Day of year (1-366)\n                    </td><td><p>\n                        In string to date/time conversions, providing <span class=\"hue-doc-codeph\">MM</span> and\n                        <span class=\"hue-doc-codeph\">DD</span> along with <span class=\"hue-doc-codeph\">DDD</span> results an error,\n                        e.g. <span class=\"hue-doc-codeph\">YYYY-MM-DDD</span>.\n                      </p></td></tr><tr><td><span class=\"hue-doc-codeph\">DAY</span><p><span class=\"hue-doc-codeph\">Day</span></p><p><span class=\"hue-doc-codeph\">day</span></p></td><td>\n                      Day name\n                    </td><td><p>\n                        Not supported in string to date/time conversions.\n                      </p><p>\n                        In date/time to string conversions:\n                        <ul><li>\n                            Converts to a 9-character-long full day name with trailing spaces.\n                          </li><li>\n                            If the <span class=\"hue-doc-codeph\">FM</span> modifier is active for this token,\n                            converts to a day name without trailing spaces.\n                          </li></ul></p><p>\n                        This pattern token is case sensitive. <span class=\"hue-doc-codeph\">DAY</span>,\n                        <span class=\"hue-doc-codeph\">Day</span>, <span class=\"hue-doc-codeph\">day</span> would produce cased outputs\n                        in date/time to string conversions, For example, <span class=\"hue-doc-codeph\">DAY</span>,\n                        <span class=\"hue-doc-codeph\">Day</span>, <span class=\"hue-doc-codeph\">day</span> would convert respectively\n                        <span class=\"hue-doc-codeph\">MONDAY</span>, <span class=\"hue-doc-codeph\">Monday</span>, and\n                        <span class=\"hue-doc-codeph\">monday</span>.\n                      </p></td></tr><tr><td><span class=\"hue-doc-codeph\">DY</span><p><span class=\"hue-doc-codeph\">Dy</span></p><p><span class=\"hue-doc-codeph\">dy</span></p></td><td>\n                      Abbreviated 3-character day name\n                    </td><td><p>\n                        Not supported in string to date/time conversions.\n                      </p><p>\n                        This pattern token is case sensitive. <span class=\"hue-doc-codeph\">DY</span>,\n                        <span class=\"hue-doc-codeph\">Dy</span>, <span class=\"hue-doc-codeph\">dy</span> would produce cased outputs in\n                        date/time to string conversions, For example, <span class=\"hue-doc-codeph\">DY</span>,\n                        <span class=\"hue-doc-codeph\">Dy</span>, <span class=\"hue-doc-codeph\">dy</span> would convert respectively\n                        <span class=\"hue-doc-codeph\">MON</span>, <span class=\"hue-doc-codeph\">Mon</span>, and <span class=\"hue-doc-codeph\">mon</span>.\n                      </p></td></tr><tr><td><span class=\"hue-doc-codeph\">HH</span><p><span class=\"hue-doc-codeph\">HH12</span></p></td><td>\n                      Hour of day (1-12)\n                    </td><td><p>\n                        In date/time to string conversions, 1-digit hours are prefixed with a\n                        zero.\n                      </p><p>\n                        If provided hour in <span class=\"hue-doc-varname\">expression</span> is not between 1 and\n                        12, returns an error.\n                      </p><p>\n                        If no AM/PM is provided in <span class=\"hue-doc-varname\">expression</span>, the default is\n                        <span class=\"hue-doc-codeph\">AM</span>.\n                      </p></td></tr><tr><td><span class=\"hue-doc-codeph\">HH24</span></td><td>\n                      Hour of day (0-23)\n                    </td><td><p>\n                        In string to date/time conversions, if <span class=\"hue-doc-codeph\">HH12</span>,\n                        <span class=\"hue-doc-codeph\">AM</span>, <span class=\"hue-doc-codeph\">PM</span> are given in the same\n                        <span class=\"hue-doc-varname\">pattern</span>, an error returns.\n                      </p></td></tr><tr><td><span class=\"hue-doc-codeph\">MI</span></td><td>\n                      Minute of hour (0-59)\n                    </td><td><p>\n                        In date/time to string conversions, 1-digit minutes are prefixed with a\n                        zero.\n                      </p></td></tr><tr><td><span class=\"hue-doc-codeph\">SS</span></td><td>\n                      Second of minute (0-59)\n                    </td><td><p>\n                        In date/time to string conversions, 1-digit seconds are prefixed with a\n                        zero.\n                      </p></td></tr><tr><td><span class=\"hue-doc-codeph\">SSSSS</span></td><td>\n                      Second of Day (0-86399)\n                    </td><td><p>\n                        In string to timestamp conversions, if <span class=\"hue-doc-codeph\">SS</span>,\n                        <span class=\"hue-doc-codeph\">HH</span>, <span class=\"hue-doc-codeph\">HH12</span>, <span class=\"hue-doc-codeph\">HH24</span>,\n                        <span class=\"hue-doc-codeph\">MI</span>, <span class=\"hue-doc-codeph\">AM</span>/<span class=\"hue-doc-codeph\">PM</span> are given\n                        in the same <span class=\"hue-doc-varname\">pattern</span>, an error returns.\n                      </p></td></tr><tr><td><span class=\"hue-doc-codeph\">FF</span><p><span class=\"hue-doc-codeph\">FF1</span>, ..., <span class=\"hue-doc-codeph\">FF9</span></p></td><td>\n                      Fractional second\n                    </td><td><p>\n                        A number, 1 to 9, can be used to indicate the number of digits.\n                      </p><p><span class=\"hue-doc-codeph\">FF</span> specifies a 9 digits fractional second.\n                      </p></td></tr><tr><td><span class=\"hue-doc-codeph\">AM</span><p><span class=\"hue-doc-codeph\">PM</span></p><p><span class=\"hue-doc-codeph\">A.M.</span></p><p><span class=\"hue-doc-codeph\">P.M.</span></p></td><td>\n                      Meridiem indicator\n                    </td><td><p>\n                        For date/time to string conversions, <span class=\"hue-doc-codeph\">AM</span> and\n                        <span class=\"hue-doc-codeph\">PM</span> are treated as synonyms. For example, casting\n                        <span class=\"hue-doc-codeph\">'2019-01-01 11:00 am'</span> to <span class=\"hue-doc-codeph\">TIMESTAMP</span>\n                        with the <span class=\"hue-doc-codeph\">'YYYY-MM-DD HH12:MI PM'</span> pattern returns\n                        <span class=\"hue-doc-codeph\">01-JAN-19 11.00.00.000000 AM</span>.\n                      </p><p>\n                        For string to date/time conversion, <span class=\"hue-doc-codeph\">HH24</span> in the same\n                        <span class=\"hue-doc-varname\">pattern</span> returns an error.\n                      </p></td></tr><tr><td><span class=\"hue-doc-codeph\">TZH</span></td><td>\n                      Timezone offset hour\n                    </td><td><p>\n                        An optional sign, + or -, and 2 digits for the value of signed numbers\n                        are allowed for the source <span class=\"hue-doc-varname\">expression</span>, e.g.\n                        <span class=\"hue-doc-codeph\">+10</span>, <span class=\"hue-doc-codeph\">-05</span>, <span class=\"hue-doc-codeph\">04</span>.\n                      </p><p>\n                        The allowed values are from <span class=\"hue-doc-codeph\">-15</span> to <span class=\"hue-doc-codeph\">+5</span>.\n                      </p></td></tr><tr><td><span class=\"hue-doc-codeph\">TZM</span></td><td>\n                      Timezone offset minute\n                    </td><td><p>\n                        Unsigned numbers are allowed for the source\n                        <span class=\"hue-doc-varname\">expression</span>.\n                      </p><p>\n                        The allowed values are from <span class=\"hue-doc-codeph\">0</span> to <span class=\"hue-doc-codeph\">59</span>.\n                      </p></td></tr><tr><td><span class=\"hue-doc-codeph\">-</span><p><span class=\"hue-doc-codeph\">.</span></p><p><span class=\"hue-doc-codeph\">/</span></p><p><span class=\"hue-doc-codeph\">,</span></p><p><span class=\"hue-doc-codeph\">'</span></p><p><span class=\"hue-doc-codeph\">;</span></p><p><span class=\"hue-doc-codeph\">:</span></p><p>\n                        &lt;space&gt;\n                      </p></td><td>\n                      Separator\n                    </td><td><p>\n                        For string to date/time conversions, any separator character in the\n                        <span class=\"hue-doc-varname\">pattern</span> string would match any separator character in\n                        the input <span class=\"hue-doc-varname\">expression</span>.\n                      </p><p>\n                        For example, <span class=\"hue-doc-codeph\">CAST(“20191010” AS DATE FORMAT\n                        “YYYY-MM-DD”)</span> returns an error, but <span class=\"hue-doc-codeph\">CAST(\"2019-.;10\n                        10\" AS DATE FORMAT \"YYYY-MM-DD\")</span> succeeds.\n                      </p></td></tr><tr><td><span class=\"hue-doc-codeph\">T</span></td><td>\n                      Separates the date from the time.\n                    </td><td><p>\n                        This pattern is used for accepting ISO 8601 date/time formats.\n                      </p><p>\n                        Example: <span class=\"hue-doc-codeph\">YYYY-MM-DD<b>T</b>HH24:MI:SS.FF9Z</span></p></td></tr><tr><td><span class=\"hue-doc-codeph\">Z</span></td><td>\n                      Indicates the zero hour offset from UTC.\n                    </td><td><p>\n                        This pattern is used for accepting ISO 8601 date/time formats.\n                      </p></td></tr><tr><td><span class=\"hue-doc-codeph\">FX</span></td><td>\n                      Forces an exact match between the format pattern,\n                      <span class=\"hue-doc-varname\">pattern</span>, and the input argument,\n                      <span class=\"hue-doc-varname\">expression</span>.\n                    </td><td><p>\n                        Must be specified at the beginning of the format\n                        <span class=\"hue-doc-varname\">pattern</span> and is valid for the whole\n                        <span class=\"hue-doc-varname\">pattern</span>.\n                      </p><p>\n                        In string to date/time conversions:\n                      </p><ul><li>\n                          Forces strict separator matching, including the separator character.\n                        </li><li>\n                          Expects all the tokens to have the maximum possible length.\n                        </li></ul><p>\n                        In date/time to string conversions, the outputs are padded as follows:\n                      </p><ul><li>\n                          Numeric outputs are left padded with zeros.\n                        </li><li>\n                          Text outputs are right padded with spaces.\n                        </li></ul></td></tr><tr><td><span class=\"hue-doc-codeph\">FM</span></td><td>\n                      Overrides <span class=\"hue-doc-codeph\">FX</span>.\n                    </td><td><p>\n                        In a date/time to string conversions, <span class=\"hue-doc-codeph\">FM</span> suppresses\n                        blank padding for the element immediately following the\n                        <span class=\"hue-doc-codeph\">FM</span> in the <span class=\"hue-doc-varname\">pattern</span> string, e.g.\n                        \"<span class=\"hue-doc-codeph\">2010-1-9</span>\".\n                      </p><p>\n                        In string to date/time conversions, <span class=\"hue-doc-codeph\">FM</span> is used to\n                        override the effect of <span class=\"hue-doc-codeph\">FX</span> for certain tokens as\n                        follows:\n                        <ul><li><p>\n                              The length of the token in the input argument can be shorter than\n                              the max length of that token type if followed by a separator, e.g.\n                              1-digit month, less than 4-digit year.\n                            </p></li><li><p><span class=\"hue-doc-codeph\">FM</span> modifier skips the separators and affects the\n                              next non-separator token. For example, <span class=\"hue-doc-codeph\">CAST('1999-10-2' AS\n                              TIMESTAMP FORMAT 'FXYYYY-MM<b>FM</b>-DD') </span>returns\n                              <span class=\"hue-doc-codeph\">1999-10-02 00:00:00</span> as <span class=\"hue-doc-codeph\">FM</span> is\n                              applied to <span class=\"hue-doc-codeph\">DD</span> and not to the\n                              separator(<span class=\"hue-doc-codeph\">-</span>).\n                            </p></li></ul></p></td></tr><tr><td>\n                      Free text\n                    </td><td>\n                      Nested string\n                    </td><td><p>\n                        You can specify a free text with surrounding double quotes (\") in\n                        <span class=\"hue-doc-varname\">pattern</span> where the same text is expected in the input\n                        argument without surrounding double quotes.\n                      </p><p>\n                        In date/time to string conversions, the string is included in the output\n                        with the characters' case preserved.\n                      </p><p>\n                        In string to date/time conversions, the nested string is not included in\n                        the resulting date/time object. However, the nested string has to match\n                        the related part of the input string, including the case.\n                      </p><p>\n                        The following rules apply:\n                        <ul><li><p>\n                              If the <span class=\"hue-doc-varname\">pattern</span> is surrounded by double quotes,\n                              double quotes surrounding the free text token must be escaped with\n                              a single backslash (<span class=\"hue-doc-codeph\">\\\"</span>).\n                            </p><p>\n                              For example: <span class=\"hue-doc-codeph\">CAST('\"Date:\"2019-11-10' AS DATE FORMAT\n                              \"<b>\\\"Date:\\\"</b>YYYY-MM-DD\")</span></p></li><li><p>\n                              If the <span class=\"hue-doc-varname\">pattern</span> is surrounded by double quotes,\n                              and there is an escaped double quotes inside a text token that is\n                              itself surrounded by escaped double quotes, escape the double\n                              quotes in the free text token with a triple backslash:\n                              (<span class=\"hue-doc-codeph\">\\\\\\\"</span>)\n                            </p><p>\n                              For example: <span class=\"hue-doc-codeph\">CAST(\"1985 some \\\"text 11-28\" AS DATE'''\n                              FORMAT \"YYYY<b>\\\" some \\\\\\\"text \\\"</b>MM-DD\")</span></p></li><li><p>\n                              If the <span class=\"hue-doc-varname\">pattern</span> is surrounded by single quotes,\n                              the free text token can be surrounded by (non-escaped) double\n                              quotes. To include double quotes within the free text token, those\n                              double quotes must be escaped by a single backslash.\n                            </p><p>\n                              For example: <span class=\"hue-doc-codeph\">CAST('\"Date:\"2019-11-10' AS DATE FORMAT\n                              '\"<b>\\\"Date:\\\"</b>\"YYYY-MM-DD')</span></p></li><li><p>\n                              Literal single quotes/apostrophes (<span class=\"hue-doc-codeph\">'</span>) in the\n                              nested string must be escaped with a single backslash if the whole\n                              pattern string is delimited by single quotes.\n                            </p></li><li><p>\n                              If a free text token contains any separator characters in the\n                              beginning, and the text token is right after a separator token\n                              sequence, an error returns as it's not trivial to find where the\n                              separator sequence ends and where the free text starts. In this\n                              case, use <span class=\"hue-doc-codeph\">FX</span> for strict matching.\n                            </p><p>\n                              For example: <span class=\"hue-doc-codeph\">CAST(\"1985-11- ' 10\" AS DATE FORMAT\n                              \"YYYY-MM-<b>\\\" ' \\\"</b>DD\")</span> returns an error, but\n                              removing the dash before the text token makes this succeed.\n                            </p></li></ul></p></td></tr></tbody></table></p><p><b>Examples:</b></p><table id=\"table_qqg_txn_r3b\"><thead><tr><td>\n                    Input\n                  </td><td>\n                    Output\n                  </td></tr></thead><tbody><tr><td><div class=\"hue-doc-codeblock\">CAST(\"02-11-2014\" AS DATE FORMAT 'dd-mm-yyyy')</div></td><td>\n                    2014-11-02\n                  </td></tr><tr><td><div class=\"hue-doc-codeblock\">CAST(\"365 2014\" AS DATE FORMAT 'DDD-YYYY')</div></td><td>\n                    2014-12-31\n                  </td></tr><tr><td><div class=\"hue-doc-codeblock\">CAST(\"5-01-26\" AS DATE FORMAT 'YY-MM-DD')</div></td><td>\n                    Executed at 2019-01-01 11:11:11:\n\n                    <p>\n                      2015-01-26\n                    </p></td></tr><tr><td><div class=\"hue-doc-codeblock\">CAST('2018-11-10T15:11:04Z' AS TIMESTAMP\n   FORMAT 'YYYY-MM-DDTHH24:MI:SSZ')</div></td><td>\n                    2018-11-10 15:11:04\n                  </td></tr><tr><td><div class=\"hue-doc-codeblock\">CAST(\"95-01-28\" AS DATE\n   FORMAT 'YYY-MM-DD')</div></td><td>\n                    Executed at 2019-01-01 11:11:11:\n\n                    <p>\n                      2095-01-28\n                    </p></td></tr><tr><td><div class=\"hue-doc-codeblock\">CAST(\"49-01-15\" AS DATE \n   FORMAT 'RR-MM-DD')</div></td><td>\n                    Round year when last 2 digits of current year is greater than 49.\n\n                    <p>\n                      Executed at 2099-01-01 11:11:11:\n                    </p><p>\n                      2149-01-15\n                    </p></td></tr><tr><td><div class=\"hue-doc-codeblock\">CAST('2019.10.10 13:30:40.123456 +01:30'\n   AS TIMESTAMP\n   FORMAT 'YYYY-MM-DD HH24:MI:SS.FF9 TZH:TZM') </div></td><td>\n                    2019-10-10 13:30:40.123456000\n                  </td></tr><tr><td><div class=\"hue-doc-codeblock\">CAST('2001-03-01 03:10:15.123456 -01:30'\n   AS TIMESTAMP\n   FORMAT 'FXYYYY-MM-DD HH12:MI:SS.FF6 TZH:TZM')</div></td><td>\n                    2001-03-01 03:10:15.123456000\n                  </td></tr><tr><td><div class=\"hue-doc-codeblock\">CAST('2001-03-02 03:10:15'\n   AS TIMESTAMP\n   FORMAT 'FXYYYY MM-DD HH12:MI:SS')</div></td><td>\n                    NULL because the separator between the year and month do not match.\n                  </td></tr><tr><td><div class=\"hue-doc-codeblock\">CAST('2001-3-05'\n   AS TIMESTAMP\n   FORMAT 'FXYYYY-MM-DD')</div></td><td>\n                    NULL because the length of the month token does not match the\n                    <span class=\"hue-doc-varname\">pattern</span>.\n                  </td></tr><tr><td><div class=\"hue-doc-codeblock\">CAST('2001-3-11 3:15:00.12345'\n   AS TIMESTAMP\n   FORMAT 'FXYYYY-FMMM-DD FMHH12:MI:SS.FMFF')</div></td><td>\n                    2001-03-11 03:15:00.123450000\n\n                    <p>\n                      The multiple <span class=\"hue-doc-codeph\">FM</span> modifiers for the month and hour override\n                      the <span class=\"hue-doc-codeph\">FX</span> and suppress padding.\n                    </p></td></tr><tr><td><div class=\"hue-doc-codeblock\">CAST('2019-01-01 01:01:01'\n   AS TIMESTAMP\n   FORMAT 'FMHH12:MI:FMSS')</div></td><td>\n                    1:01:1\n                  </td></tr><tr><td><div class=\"hue-doc-codeblock\">CAST('Date: 2019-11-10'\n   AS DATE\n   FORMAT '\"Date: \"YYYY-MM-DD')\n</div></td><td>\n                    2019-11-10\n                  </td></tr></tbody></table></dd><dt id=\"typeof\">\n          TYPEOF(expression)\n        </dt><dd><b>Purpose:</b> Returns the name of the data type corresponding to\n          <span class=\"hue-doc-varname\">expression</span>. For types with extra attributes, such as length for\n          <span class=\"hue-doc-codeph\">CHAR</span> and <span class=\"hue-doc-codeph\">VARCHAR</span>, or precision and scale for\n          <span class=\"hue-doc-codeph\">DECIMAL</span>, includes the full specification of the type.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p><b>Usage notes:</b> Typically used in interactive exploration of a schema, or in\n            application code that programmatically generates schema definitions such as\n            <span class=\"hue-doc-codeph\">CREATE TABLE</span> statements, for example, to get the type of an\n            expression such as <span class=\"hue-doc-codeph\">col1 / col2</span> or <span class=\"hue-doc-codeph\">CONCAT(col1, col2,\n            col3)</span>. This function is especially useful for arithmetic expressions\n            involving <span class=\"hue-doc-codeph\">DECIMAL</span> types because the precision and scale of the\n            result is can be different than that of the operands.\n          </p><p id=\"example_blurb\"><b>Examples:</b></p><p><span class=\"hue-doc-codeph\">TYPEOF(2)</span> returns <span class=\"hue-doc-codeph\">TINYINT</span>.\n          </p><p><span class=\"hue-doc-codeph\">TYPEOF(NOW())</span> returns <span class=\"hue-doc-codeph\">TIMESTAMP</span>.\n          </p></dd></dl></div></div></div>","title":"Impala Type Conversion Functions"}