{"body":"<div><div id=\"conversion_functions\"><div class=\"hue-doc-title\">Impala Type Conversion Functions</div><div><p>\n      Conversion functions are usually used in combination with other functions, to explicitly\n      pass the expected data types. Impala has strict rules regarding data types for function\n      parameters. For example, Impala does not automatically convert a <span class=\"hue-doc-codeph\">DOUBLE</span>\n      value to <span class=\"hue-doc-codeph\">FLOAT</span>, a <span class=\"hue-doc-codeph\">BIGINT</span> value to <span class=\"hue-doc-codeph\">INT</span>,\n      or other conversion where precision could be lost or overflow could occur. Also, for\n      reporting or dealing with loosely defined schemas in big data contexts, you might\n      frequently need to convert values to or from the <span class=\"hue-doc-codeph\">STRING</span> type.\n    </p><div class=\"hue-doc-note\">      Although in Impala 2.3, the <span class=\"hue-doc-codeph\">SHOW FUNCTIONS</span> output\n      for database <span class=\"hue-doc-codeph\">_IMPALA_BUILTINS</span> contains some function signatures matching\n      the pattern <span class=\"hue-doc-codeph\">castto*</span>, these functions are not intended for public use and\n      are expected to be hidden in future.\n    </div><p><b>Function reference:</b></p><p>\n      Impala supports the following type conversion functions:\n    </p><ul><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_conversion_functions.xml\" data-doc-anchor-id=\"conversion_functions/cast\">CAST</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_conversion_functions.xml\" data-doc-anchor-id=\"conversion_functions/typeof\">TYPEOF</a></li></ul><dl><dt id=\"cast\">\n          CAST(expr AS type)\n        </dt><dd><b>Purpose:</b> Converts the value of an expression to any other type. If the\n          expression value is of a type that cannot be converted to the target type, the result\n          is <span class=\"hue-doc-codeph\">NULL</span>.\n          <p><b>Usage notes:</b> Use <span class=\"hue-doc-codeph\">CAST</span> when passing a column value or literal\n            to a function that expects a parameter with a different type. Frequently used in SQL\n            operations such as <span class=\"hue-doc-codeph\">CREATE TABLE AS SELECT</span> and <span class=\"hue-doc-codeph\">INSERT ...\n            VALUES</span> to ensure that values from various sources are of the appropriate\n            type for the destination columns. Where practical, do a one-time\n            <span class=\"hue-doc-codeph\">CAST()</span> operation during the ingestion process to make each column\n            into the appropriate type, rather than using many <span class=\"hue-doc-codeph\">CAST()</span> operations\n            in each query; doing type conversions for each row during each query can be\n            expensive for tables with millions or billions of rows.\n          </p><p id=\"timezone_conversion_caveat\">\n        The way this function deals with time zones when converting to or from\n        <span class=\"hue-doc-codeph\">TIMESTAMP</span> values is affected by the\n        <span class=\"hue-doc-codeph\">‑‑use_local_tz_for_unix_timestamp_conversions</span> startup flag\n        for the <span class=\"hue-doc-cmdname\">impalad</span> daemon. See\n        <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a> for details about how\n        Impala handles time zone considerations for the <span class=\"hue-doc-codeph\">TIMESTAMP</span> data type.\n      </p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">SELECT CONCAT('Here are the first ',10,' results.'); -- Fails\nSELECT CONCAT('Here are the first ',CAST(10 AS STRING),' results.'); -- Succeeds\n</div><p>\n            The following example starts with a text table where every column has a type of\n            <span class=\"hue-doc-codeph\">STRING</span>, which might be how you ingest data of unknown schema until\n            you can verify the cleanliness of the underlying values. Then it uses\n            <span class=\"hue-doc-codeph\">CAST()</span> to create a new Parquet table with the same data, but using\n            specific numeric data types for the columns with numeric data. Using numeric types\n            of appropriate sizes can result in substantial space savings on disk and in memory,\n            and performance improvements in queries, over using strings or larger-than-necessary\n            numeric types.\n          </p><div class=\"hue-doc-codeblock\">CREATE TABLE t1 (name STRING, x STRING, y STRING, z STRING);\n\nCREATE TABLE t2 STORED AS PARQUET\nAS SELECT\n  name,\n  CAST(x AS BIGINT) x,\n  CAST(y AS TIMESTAMP) y,\n  CAST(z AS SMALLINT) z\nFROM t1;</div><p id=\"related_info\"><b>Related information:</b></p><p>\n            For details of casts from each kind of data type, see the description of the\n            appropriate type: <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_tinyint.xml\" data-doc-anchor-id=\"tinyint\">TINYINT Data Type</a>,\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_smallint.xml\" data-doc-anchor-id=\"smallint\">SMALLINT Data Type</a>,\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_int.xml\" data-doc-anchor-id=\"int\">INT Data Type</a>,\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_bigint.xml\" data-doc-anchor-id=\"bigint\">BIGINT Data Type</a>,\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_float.xml\" data-doc-anchor-id=\"float\">FLOAT Data Type</a>,\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_double.xml\" data-doc-anchor-id=\"double\">DOUBLE Data Type</a>,\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_decimal.xml\" data-doc-anchor-id=\"decimal\">DECIMAL Data Type (Impala 3.0 or higher only)</a>,\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string.xml\" data-doc-anchor-id=\"string\">STRING Data Type</a>,\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_char.xml\" data-doc-anchor-id=\"char\">CHAR Data Type (Impala 2.0 or higher only)</a>,\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_varchar.xml\" data-doc-anchor-id=\"varchar\">VARCHAR Data Type (Impala 2.0 or higher only)</a>,\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a>,\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_boolean.xml\" data-doc-anchor-id=\"boolean\">BOOLEAN Data Type</a></p></dd><dt id=\"typeof\">\n          TYPEOF(type value)\n        </dt><dd><b>Purpose:</b> Returns the name of the data type corresponding to an expression. For\n          types with extra attributes, such as length for <span class=\"hue-doc-codeph\">CHAR</span> and\n          <span class=\"hue-doc-codeph\">VARCHAR</span>, or precision and scale for <span class=\"hue-doc-codeph\">DECIMAL</span>,\n          includes the full specification of the type.\n<p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p><b>Usage notes:</b> Typically used in interactive exploration of a schema, or in\n            application code that programmatically generates schema definitions such as\n            <span class=\"hue-doc-codeph\">CREATE TABLE</span> statements, for example, to get the type of an\n            expression such as <span class=\"hue-doc-codeph\">col1 / col2</span> or <span class=\"hue-doc-codeph\">CONCAT(col1, col2,\n            col3)</span>. This function is especially useful for arithmetic expressions\n            involving <span class=\"hue-doc-codeph\">DECIMAL</span> types because the precision and scale of the\n            result is can be different than that of the operands.\n          </p><p id=\"added_in_230\"><b>Added in:</b>Impala 2.3.0</p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">SELECT TYPEOF(2), TYPEOF(2+2);\n+-----------+---------------+\n| typeof(2) | typeof(2 + 2) |\n+-----------+---------------+\n| TINYINT   | SMALLINT      |\n+-----------+---------------+\n</div></dd></dl></div></div></div>","title":"Impala Type Conversion Functions"}