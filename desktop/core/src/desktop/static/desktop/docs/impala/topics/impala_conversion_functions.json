{"body":"<div><div><div class=\"hue-doc-title\">Impala Type Conversion Functions</div><div><p>\n      Conversion functions are usually used in combination with other functions, to explicitly pass the expected\n      data types. Impala has strict rules regarding data types for function parameters. For example, Impala does\n      not automatically convert a <span class=\"hue-doc-codeph\">DOUBLE</span> value to <span class=\"hue-doc-codeph\">FLOAT</span>, a\n      <span class=\"hue-doc-codeph\">BIGINT</span> value to <span class=\"hue-doc-codeph\">INT</span>, or other conversion where precision could be lost or\n      overflow could occur. Also, for reporting or dealing with loosely defined schemas in big data contexts,\n      you might frequently need to convert values to or from the <span class=\"hue-doc-codeph\">STRING</span> type.\n    </p><div class=\"hue-doc-note\">\n      Although in Impala 2.3, the <span class=\"hue-doc-codeph\">SHOW FUNCTIONS</span> output for\n      database <span class=\"hue-doc-codeph\">_IMPALA_BUILTINS</span> contains some function signatures\n      matching the pattern <span class=\"hue-doc-codeph\">castto*</span>, these functions are not intended\n      for public use and are expected to be hidden in future.\n    </div><p><b>Function reference:</b></p><p>\n      Impala supports the following type conversion functions:\n    </p><dl><dt><span class=\"hue-doc-codeph\">cast(<span class=\"hue-doc-varname\">expr</span> AS <span class=\"hue-doc-varname\">type</span>)</span></dt><dd><b>Purpose:</b> Converts the value of an expression to any other type.\nIf the expression value is of a type that cannot be converted to the target type, the result is <span class=\"hue-doc-codeph\">NULL</span>.\n<p><b>Usage notes:</b>\nUse <span class=\"hue-doc-codeph\">CAST</span> when passing a column value or literal to a function that\nexpects a parameter with a different type.\nFrequently used in SQL operations such as <span class=\"hue-doc-codeph\">CREATE TABLE AS SELECT</span>\nand <span class=\"hue-doc-codeph\">INSERT ... VALUES</span> to ensure that values from various sources\nare of the appropriate type for the destination columns.\nWhere practical, do a one-time <span class=\"hue-doc-codeph\">CAST()</span> operation during the ingestion process\nto make each column into the appropriate type, rather than using many <span class=\"hue-doc-codeph\">CAST()</span>\noperations in each query; doing type conversions for each row during each query can be expensive\nfor tables with millions or billions of rows.\n</p><p>\n        The way this function deals with time zones when converting to or from <span class=\"hue-doc-codeph\">TIMESTAMP</span>\n        values is affected by the <span class=\"hue-doc-codeph\">--use_local_tz_for_unix_timestamp_conversions</span> startup flag for the\n        <span class=\"hue-doc-cmdname\">impalad</span> daemon. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a> for details about\n        how Impala handles time zone considerations for the <span class=\"hue-doc-codeph\">TIMESTAMP</span> data type.\n      </p><p><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select concat('Here are the first ',10,' results.'); -- Fails\nselect concat('Here are the first ',cast(10 as string),' results.'); -- Succeeds\n</div><p>\nThe following example starts with a text table where every column has a type of <span class=\"hue-doc-codeph\">STRING</span>,\nwhich might be how you ingest data of unknown schema until you can verify the cleanliness of the underly values.\nThen it uses <span class=\"hue-doc-codeph\">CAST()</span> to create a new Parquet table with the same data, but using specific\nnumeric data types for the columns with numeric data. Using numeric types of appropriate sizes can result in\nsubstantial space savings on disk and in memory, and performance improvements in queries,\nover using strings or larger-than-necessary numeric types.\n</p><div class=\"hue-doc-codeblock\">create table t1 (name string, x string, y string, z string);\n\ncreate table t2 stored as parquet\nas select\n  name,\n  cast(x as bigint) x,\n  cast(y as timestamp) y,\n  cast(z as smallint) z\nfrom t1;\n\ndescribe t2;\n+------+----------+---------+\n| name | type     | comment |\n+------+----------+---------+\n| name | string   |         |\n| x    | bigint   |         |\n| y    | smallint |         |\n| z    | tinyint  |         |\n+------+----------+---------+\n</div><p><b>Related information:</b></p><p>\n  For details of casts from each kind of data type, see the description of\n  the appropriate type:\n  <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_tinyint.xml\" data-doc-anchor-id=\"tinyint\">TINYINT Data Type</a>,\n  <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_smallint.xml\" data-doc-anchor-id=\"smallint\">SMALLINT Data Type</a>,\n  <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_int.xml\" data-doc-anchor-id=\"int\">INT Data Type</a>,\n  <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_bigint.xml\" data-doc-anchor-id=\"bigint\">BIGINT Data Type</a>,\n  <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_float.xml\" data-doc-anchor-id=\"float\">FLOAT Data Type</a>,\n  <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_double.xml\" data-doc-anchor-id=\"double\">DOUBLE Data Type</a>,\n  <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_decimal.xml\" data-doc-anchor-id=\"decimal\">DECIMAL Data Type (Impala 1.4 or higher only)</a>,\n  <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string.xml\" data-doc-anchor-id=\"string\">STRING Data Type</a>,\n  <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_char.xml\" data-doc-anchor-id=\"char\">CHAR Data Type (Impala 2.0 or higher only)</a>,\n  <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_varchar.xml\" data-doc-anchor-id=\"varchar\">VARCHAR Data Type (Impala 2.0 or higher only)</a>,\n  <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a>,\n  <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_boolean.xml\" data-doc-anchor-id=\"boolean\">BOOLEAN Data Type</a></p></dd><dt><span class=\"hue-doc-codeph\">casttobigint(type value)</span></dt><dd><b>Purpose:</b> Converts the value of an expression to <span class=\"hue-doc-codeph\">BIGINT</span>. If the expression value is of a type that cannot be converted to the target type, the result is <span class=\"hue-doc-codeph\">NULL</span>.\n<p><b>Return type:</b><span class=\"hue-doc-codeph\">bigint</span></p><p><b>Usage notes:</b>\n        A convenience function to skip the SQL <span class=\"hue-doc-codeph\">CAST <span class=\"hue-doc-varname\">value</span> AS <span class=\"hue-doc-varname\">type</span></span> syntax,\n        for example when programmatically generating SQL statements where a regular function call might be easier to construct.\n      </p><p><b>Added in:</b>Impala 2.3.0</p><p><b>Examples:</b></p><p>\n        This example shows how to use the <span class=\"hue-doc-codeph\">castto*()</span> functions as an equivalent\n        to <span class=\"hue-doc-codeph\">CAST(<span class=\"hue-doc-varname\">value</span> AS <span class=\"hue-doc-varname\">type</span>)</span> expressions.\n      </p><div class=\"hue-doc-codeblock\">create table small_types (x tinyint, y smallint, z int);\n\ncreate table big_types as\n  select casttobigint(x) as x, casttobigint(y) as y, casttobigint(z) as z\n    from small_types;\n\ndescribe big_types;\n+------+--------+---------+\n| name | type   | comment |\n+------+--------+---------+\n| x    | bigint |         |\n| y    | bigint |         |\n| z    | bigint |         |\n+------+--------+---------+\n</div></dd><dt><span class=\"hue-doc-codeph\">casttoboolean(type value)</span></dt><dd><b>Purpose:</b> Converts the value of an expression to <span class=\"hue-doc-codeph\">BOOLEAN</span>.\nNumeric values of 0 evaluate to <span class=\"hue-doc-codeph\">false</span>, and non-zero values evaluate to <span class=\"hue-doc-codeph\">true</span>.\nIf the expression value is of a type that cannot be converted to the target type, the result is <span class=\"hue-doc-codeph\">NULL</span>.\nIn particular, <span class=\"hue-doc-codeph\">STRING</span> values (even <span class=\"hue-doc-codeph\">'1'</span>, <span class=\"hue-doc-codeph\">'0'</span>, <span class=\"hue-doc-codeph\">'true'</span>\nor <span class=\"hue-doc-codeph\">'false'</span>) always return <span class=\"hue-doc-codeph\">NULL</span> when converted to <span class=\"hue-doc-codeph\">BOOLEAN</span>.\n<p><b>Return type:</b><span class=\"hue-doc-codeph\">boolean</span></p><p><b>Usage notes:</b>\n        A convenience function to skip the SQL <span class=\"hue-doc-codeph\">CAST <span class=\"hue-doc-varname\">value</span> AS <span class=\"hue-doc-varname\">type</span></span> syntax,\n        for example when programmatically generating SQL statements where a regular function call might be easier to construct.\n      </p><p><b>Added in:</b>Impala 2.3.0</p><p><b>Examples:</b></p><p>\n        This example shows how to use the <span class=\"hue-doc-codeph\">castto*()</span> functions as an equivalent\n        to <span class=\"hue-doc-codeph\">CAST(<span class=\"hue-doc-varname\">value</span> AS <span class=\"hue-doc-varname\">type</span>)</span> expressions.\n      </p><div class=\"hue-doc-codeblock\">select casttoboolean(0);\n+------------------+\n| casttoboolean(0) |\n+------------------+\n| false            |\n+------------------+\n\nselect casttoboolean(1);\n+------------------+\n| casttoboolean(1) |\n+------------------+\n| true             |\n+------------------+\n\nselect casttoboolean(99);\n+-------------------+\n| casttoboolean(99) |\n+-------------------+\n| true              |\n+-------------------+\n\nselect casttoboolean(0.0);\n+--------------------+\n| casttoboolean(0.0) |\n+--------------------+\n| false              |\n+--------------------+\n\nselect casttoboolean(0.5);\n+--------------------+\n| casttoboolean(0.5) |\n+--------------------+\n| true               |\n+--------------------+\n\nselect casttoboolean('');\n+-------------------+\n| casttoboolean('') |\n+-------------------+\n| NULL              |\n+-------------------+\n\nselect casttoboolean('yes');\n+----------------------+\n| casttoboolean('yes') |\n+----------------------+\n| NULL                 |\n+----------------------+\n\nselect casttoboolean('0');\n+--------------------+\n| casttoboolean('0') |\n+--------------------+\n| NULL               |\n+--------------------+\n\nselect casttoboolean('true');\n+-----------------------+\n| casttoboolean('true') |\n+-----------------------+\n| NULL                  |\n+-----------------------+\n\nselect casttoboolean('false');\n+------------------------+\n| casttoboolean('false') |\n+------------------------+\n| NULL                   |\n+------------------------+\n</div></dd><dt><span class=\"hue-doc-codeph\">casttochar(type value)</span></dt><dd><b>Purpose:</b> Converts the value of an expression to <span class=\"hue-doc-codeph\">CHAR</span>. If the expression value is of a type that cannot be converted to the target type, the result is <span class=\"hue-doc-codeph\">NULL</span>.\n<p><b>Return type:</b><span class=\"hue-doc-codeph\">char</span></p><p><b>Usage notes:</b>\n        A convenience function to skip the SQL <span class=\"hue-doc-codeph\">CAST <span class=\"hue-doc-varname\">value</span> AS <span class=\"hue-doc-varname\">type</span></span> syntax,\n        for example when programmatically generating SQL statements where a regular function call might be easier to construct.\n      </p><p><b>Added in:</b>Impala 2.3.0</p><p><b>Examples:</b></p><p>\n        This example shows how to use the <span class=\"hue-doc-codeph\">castto*()</span> functions as an equivalent\n        to <span class=\"hue-doc-codeph\">CAST(<span class=\"hue-doc-varname\">value</span> AS <span class=\"hue-doc-varname\">type</span>)</span> expressions.\n      </p><div class=\"hue-doc-codeblock\">create table char_types as select casttochar('hello world') as c1, casttochar('xyz') as c2, casttochar('x') as c3;\n+-------------------+\n| summary           |\n+-------------------+\n| Inserted 1 row(s) |\n+-------------------+\n\ndescribe char_types;\n+------+--------+---------+\n| name | type   | comment |\n+------+--------+---------+\n| c1   | string |         |\n| c2   | string |         |\n| c3   | string |         |\n+------+--------+---------+\n</div></dd><dt><span class=\"hue-doc-codeph\">casttodecimal(type value)</span></dt><dd><b>Purpose:</b> Converts the value of an expression to <span class=\"hue-doc-codeph\">DECIMAL</span>. If the expression value is of a type that cannot be converted to the target type, the result is <span class=\"hue-doc-codeph\">NULL</span>.\n<p><b>Return type:</b><span class=\"hue-doc-codeph\">decimal</span></p><p><b>Usage notes:</b>\n        A convenience function to skip the SQL <span class=\"hue-doc-codeph\">CAST <span class=\"hue-doc-varname\">value</span> AS <span class=\"hue-doc-varname\">type</span></span> syntax,\n        for example when programmatically generating SQL statements where a regular function call might be easier to construct.\n      </p><p><b>Added in:</b>Impala 2.3.0</p><p><b>Examples:</b></p><p>\n        This example shows how to use the <span class=\"hue-doc-codeph\">castto*()</span> functions as an equivalent\n        to <span class=\"hue-doc-codeph\">CAST(<span class=\"hue-doc-varname\">value</span> AS <span class=\"hue-doc-varname\">type</span>)</span> expressions.\n      </p><div class=\"hue-doc-codeblock\">select casttodecimal(5.4);\n+--------------------+\n| casttodecimal(5.4) |\n+--------------------+\n| 5.4                |\n+--------------------+\n</div></dd><dt><span class=\"hue-doc-codeph\">casttodouble(type value)</span></dt><dd><b>Purpose:</b> Converts the value of an expression to <span class=\"hue-doc-codeph\">DOUBLE</span>. If the expression value is of a type that cannot be converted to the target type, the result is <span class=\"hue-doc-codeph\">NULL</span>.\n<p><b>Return type:</b><span class=\"hue-doc-codeph\">double</span></p><p><b>Usage notes:</b>\n        A convenience function to skip the SQL <span class=\"hue-doc-codeph\">CAST <span class=\"hue-doc-varname\">value</span> AS <span class=\"hue-doc-varname\">type</span></span> syntax,\n        for example when programmatically generating SQL statements where a regular function call might be easier to construct.\n      </p><p><b>Added in:</b>Impala 2.3.0</p><p><b>Examples:</b></p><p>\n        This example shows how to use the <span class=\"hue-doc-codeph\">castto*()</span> functions as an equivalent\n        to <span class=\"hue-doc-codeph\">CAST(<span class=\"hue-doc-varname\">value</span> AS <span class=\"hue-doc-varname\">type</span>)</span> expressions.\n      </p><div class=\"hue-doc-codeblock\">select casttodouble(5);\n+-----------------+\n| casttodouble(5) |\n+-----------------+\n| 5               |\n+-----------------+\n\nselect casttodouble('3.141');\n+-----------------------+\n| casttodouble('3.141') |\n+-----------------------+\n| 3.141                 |\n+-----------------------+\n\nselect casttodouble(1e6);\n+--------------------+\n| casttodouble(1e+6) |\n+--------------------+\n| 1000000            |\n+--------------------+\n\nselect casttodouble(true);\n+--------------------+\n| casttodouble(true) |\n+--------------------+\n| 1                  |\n+--------------------+\n\nselect casttodouble(now());\n+---------------------+\n| casttodouble(now()) |\n+---------------------+\n| 1447622306.031178   |\n+---------------------+\n</div></dd><dt><span class=\"hue-doc-codeph\">casttofloat(type value)</span></dt><dd><b>Purpose:</b> Converts the value of an expression to <span class=\"hue-doc-codeph\">FLOAT</span>. If the expression value is of a type that cannot be converted to the target type, the result is <span class=\"hue-doc-codeph\">NULL</span>.\n<p><b>Return type:</b><span class=\"hue-doc-codeph\">float</span></p><p><b>Usage notes:</b>\n        A convenience function to skip the SQL <span class=\"hue-doc-codeph\">CAST <span class=\"hue-doc-varname\">value</span> AS <span class=\"hue-doc-varname\">type</span></span> syntax,\n        for example when programmatically generating SQL statements where a regular function call might be easier to construct.\n      </p><p><b>Added in:</b>Impala 2.3.0</p><p><b>Examples:</b></p><p>\n        This example shows how to use the <span class=\"hue-doc-codeph\">castto*()</span> functions as an equivalent\n        to <span class=\"hue-doc-codeph\">CAST(<span class=\"hue-doc-varname\">value</span> AS <span class=\"hue-doc-varname\">type</span>)</span> expressions.\n      </p><div class=\"hue-doc-codeblock\">select casttofloat(5);\n+----------------+\n| casttofloat(5) |\n+----------------+\n| 5              |\n+----------------+\n\nselect casttofloat('3.141');\n+----------------------+\n| casttofloat('3.141') |\n+----------------------+\n| 3.141000032424927    |\n+----------------------+\n\nselect casttofloat(1e6);\n+-------------------+\n| casttofloat(1e+6) |\n+-------------------+\n| 1000000           |\n+-------------------+\n\nselect casttofloat(true);\n+-------------------+\n| casttofloat(true) |\n+-------------------+\n| 1                 |\n+-------------------+\n\nselect casttofloat(now());\n+--------------------+\n| casttofloat(now()) |\n+--------------------+\n| 1447622400         |\n+--------------------+\n</div></dd><dt><span class=\"hue-doc-codeph\">casttoint(type value)</span></dt><dd><b>Purpose:</b> Converts the value of an expression to <span class=\"hue-doc-codeph\">INT</span>. If the expression value is of a type that cannot be converted to the target type, the result is <span class=\"hue-doc-codeph\">NULL</span>.\n<p><b>Return type:</b><span class=\"hue-doc-codeph\">int</span></p><p><b>Usage notes:</b>\n        A convenience function to skip the SQL <span class=\"hue-doc-codeph\">CAST <span class=\"hue-doc-varname\">value</span> AS <span class=\"hue-doc-varname\">type</span></span> syntax,\n        for example when programmatically generating SQL statements where a regular function call might be easier to construct.\n      </p><p><b>Added in:</b>Impala 2.3.0</p><p><b>Examples:</b></p><p>\n        This example shows how to use the <span class=\"hue-doc-codeph\">castto*()</span> functions as an equivalent\n        to <span class=\"hue-doc-codeph\">CAST(<span class=\"hue-doc-varname\">value</span> AS <span class=\"hue-doc-varname\">type</span>)</span> expressions.\n      </p><div class=\"hue-doc-codeblock\">select casttoint(5.4);\n+----------------+\n| casttoint(5.4) |\n+----------------+\n| 5              |\n+----------------+\n\nselect casttoint(true);\n+-----------------+\n| casttoint(true) |\n+-----------------+\n| 1               |\n+-----------------+\n\nselect casttoint(now());\n+------------------+\n| casttoint(now()) |\n+------------------+\n| 1447622487       |\n+------------------+\n\nselect casttoint('3.141');\n+--------------------+\n| casttoint('3.141') |\n+--------------------+\n| NULL               |\n+--------------------+\n\nselect casttoint('3');\n+----------------+\n| casttoint('3') |\n+----------------+\n| 3              |\n+----------------+\n</div></dd><dt><span class=\"hue-doc-codeph\">casttosmallint(type value)</span></dt><dd><b>Purpose:</b> Converts the value of an expression to <span class=\"hue-doc-codeph\">SMALLINT</span>. If the expression value is of a type that cannot be converted to the target type, the result is <span class=\"hue-doc-codeph\">NULL</span>.\n<p><b>Return type:</b><span class=\"hue-doc-codeph\">smallint</span></p><p><b>Usage notes:</b>\n        A convenience function to skip the SQL <span class=\"hue-doc-codeph\">CAST <span class=\"hue-doc-varname\">value</span> AS <span class=\"hue-doc-varname\">type</span></span> syntax,\n        for example when programmatically generating SQL statements where a regular function call might be easier to construct.\n      </p><p><b>Added in:</b>Impala 2.3.0</p><p><b>Examples:</b></p><p>\n        This example shows how to use the <span class=\"hue-doc-codeph\">castto*()</span> functions as an equivalent\n        to <span class=\"hue-doc-codeph\">CAST(<span class=\"hue-doc-varname\">value</span> AS <span class=\"hue-doc-varname\">type</span>)</span> expressions.\n      </p><div class=\"hue-doc-codeblock\">create table big_types (x bigint, y int, z smallint);\n\ncreate table small_types as\n  select casttosmallint(x) as x, casttosmallint(y) as y, casttosmallint(z) as z\n    from big_types;\n\ndescribe small_types;\n+------+----------+---------+\n| name | type     | comment |\n+------+----------+---------+\n| x    | smallint |         |\n| y    | smallint |         |\n| z    | smallint |         |\n+------+----------+---------+\n</div></dd><dt><span class=\"hue-doc-codeph\">casttostring(type value)</span></dt><dd><b>Purpose:</b> Converts the value of an expression to <span class=\"hue-doc-codeph\">STRING</span>. If the expression value is of a type that cannot be converted to the target type, the result is <span class=\"hue-doc-codeph\">NULL</span>.\n<p><b>Return type:</b><span class=\"hue-doc-codeph\">string</span></p><p><b>Usage notes:</b>\n        A convenience function to skip the SQL <span class=\"hue-doc-codeph\">CAST <span class=\"hue-doc-varname\">value</span> AS <span class=\"hue-doc-varname\">type</span></span> syntax,\n        for example when programmatically generating SQL statements where a regular function call might be easier to construct.\n      </p><p><b>Added in:</b>Impala 2.3.0</p><p><b>Examples:</b></p><p>\n        This example shows how to use the <span class=\"hue-doc-codeph\">castto*()</span> functions as an equivalent\n        to <span class=\"hue-doc-codeph\">CAST(<span class=\"hue-doc-varname\">value</span> AS <span class=\"hue-doc-varname\">type</span>)</span> expressions.\n      </p><div class=\"hue-doc-codeblock\">create table numeric_types (x int, y bigint, z tinyint);\n\ncreate table string_types as\n  select casttostring(x) as x, casttostring(y) as y, casttostring(z) as z\n    from numeric_types;\n\ndescribe string_types;\n+------+--------+---------+\n| name | type   | comment |\n+------+--------+---------+\n| x    | string |         |\n| y    | string |         |\n| z    | string |         |\n+------+--------+---------+\n</div></dd><dt><span class=\"hue-doc-codeph\">casttotimestamp(type value)</span></dt><dd><b>Purpose:</b> Converts the value of an expression to <span class=\"hue-doc-codeph\">TIMESTAMP</span>. If the expression value is of a type that cannot be converted to the target type, the result is <span class=\"hue-doc-codeph\">NULL</span>.\n<p><b>Return type:</b><span class=\"hue-doc-codeph\">timestamp</span></p><p><b>Usage notes:</b>\n        A convenience function to skip the SQL <span class=\"hue-doc-codeph\">CAST <span class=\"hue-doc-varname\">value</span> AS <span class=\"hue-doc-varname\">type</span></span> syntax,\n        for example when programmatically generating SQL statements where a regular function call might be easier to construct.\n      </p><p><b>Added in:</b>Impala 2.3.0</p><p><b>Examples:</b></p><p>\n        This example shows how to use the <span class=\"hue-doc-codeph\">castto*()</span> functions as an equivalent\n        to <span class=\"hue-doc-codeph\">CAST(<span class=\"hue-doc-varname\">value</span> AS <span class=\"hue-doc-varname\">type</span>)</span> expressions.\n      </p><div class=\"hue-doc-codeblock\">select casttotimestamp(1000);\n+-----------------------+\n| casttotimestamp(1000) |\n+-----------------------+\n| 1970-01-01 00:16:40   |\n+-----------------------+\n\nselect casttotimestamp(1000.0);\n+-------------------------+\n| casttotimestamp(1000.0) |\n+-------------------------+\n| 1970-01-01 00:16:40     |\n+-------------------------+\n\nselect casttotimestamp('1000');\n+-------------------------+\n| casttotimestamp('1000') |\n+-------------------------+\n| NULL                    |\n+-------------------------+\n</div></dd><dt><span class=\"hue-doc-codeph\">casttotinyint(type value)</span></dt><dd><b>Purpose:</b> Converts the value of an expression to <span class=\"hue-doc-codeph\">TINYINT</span>. If the expression value is of a type that cannot be converted to the target type, the result is <span class=\"hue-doc-codeph\">NULL</span>.\n<p><b>Return type:</b><span class=\"hue-doc-codeph\">tinyint</span></p><p><b>Usage notes:</b>\n        A convenience function to skip the SQL <span class=\"hue-doc-codeph\">CAST <span class=\"hue-doc-varname\">value</span> AS <span class=\"hue-doc-varname\">type</span></span> syntax,\n        for example when programmatically generating SQL statements where a regular function call might be easier to construct.\n      </p><p><b>Added in:</b>Impala 2.3.0</p><p><b>Examples:</b></p><p>\n        This example shows how to use the <span class=\"hue-doc-codeph\">castto*()</span> functions as an equivalent\n        to <span class=\"hue-doc-codeph\">CAST(<span class=\"hue-doc-varname\">value</span> AS <span class=\"hue-doc-varname\">type</span>)</span> expressions.\n      </p><div class=\"hue-doc-codeblock\">create table big_types (x bigint, y int, z smallint);\n\ncreate table tiny_types as\n  select casttotinyint(x) as x, casttotinyint(y) as y, casttotinyint(z) as z\n    from big_types;\n\ndescribe tiny_types;\n+------+---------+---------+\n| name | type    | comment |\n+------+---------+---------+\n| x    | tinyint |         |\n| y    | tinyint |         |\n| z    | tinyint |         |\n+------+---------+---------+\n</div></dd><dt><span class=\"hue-doc-codeph\">casttovarchar(type value)</span></dt><dd><b>Purpose:</b> Converts the value of an expression to <span class=\"hue-doc-codeph\">VARCHAR</span>. If the expression value is of a type that cannot be converted to the target type, the result is <span class=\"hue-doc-codeph\">NULL</span>.\n<p><b>Return type:</b><span class=\"hue-doc-codeph\">varchar</span></p><p><b>Usage notes:</b>\n        A convenience function to skip the SQL <span class=\"hue-doc-codeph\">CAST <span class=\"hue-doc-varname\">value</span> AS <span class=\"hue-doc-varname\">type</span></span> syntax,\n        for example when programmatically generating SQL statements where a regular function call might be easier to construct.\n      </p><p><b>Added in:</b>Impala 2.3.0</p><p><b>Examples:</b></p><p>\n        This example shows how to use the <span class=\"hue-doc-codeph\">castto*()</span> functions as an equivalent\n        to <span class=\"hue-doc-codeph\">CAST(<span class=\"hue-doc-varname\">value</span> AS <span class=\"hue-doc-varname\">type</span>)</span> expressions.\n      </p><div class=\"hue-doc-codeblock\">select casttovarchar('abcd');\n+-----------------------+\n| casttovarchar('abcd') |\n+-----------------------+\n| abcd                  |\n+-----------------------+\n\nselect casttovarchar(999);\n+--------------------+\n| casttovarchar(999) |\n+--------------------+\n| 999                |\n+--------------------+\n\nselect casttovarchar(999.5);\n+----------------------+\n| casttovarchar(999.5) |\n+----------------------+\n| 999.5                |\n+----------------------+\n\nselect casttovarchar(now());\n+-------------------------------+\n| casttovarchar(now())          |\n+-------------------------------+\n| 2015-11-15 21:26:13.528073000 |\n+-------------------------------+\n\nselect casttovarchar(true);\n+---------------------+\n| casttovarchar(true) |\n+---------------------+\n| 1                   |\n+---------------------+\n</div></dd><dt><span class=\"hue-doc-codeph\">typeof(type value)</span></dt><dd><b>Purpose:</b> Returns the name of the data type corresponding to an expression. For types with\nextra attributes, such as length for <span class=\"hue-doc-codeph\">CHAR</span> and <span class=\"hue-doc-codeph\">VARCHAR</span>,\nor precision and scale for <span class=\"hue-doc-codeph\">DECIMAL</span>, includes the full specification of the type.\n<p><b>Return type:</b><span class=\"hue-doc-codeph\">string</span></p><p><b>Usage notes:</b> Typically used in interactive exploration of a schema, or in application code that programmatically generates schema definitions such as <span class=\"hue-doc-codeph\">CREATE TABLE</span> statements.\nFor example, previously, to understand the type of an expression such as\n<span class=\"hue-doc-codeph\">col1 / col2</span> or <span class=\"hue-doc-codeph\">concat(col1, col2, col3)</span>,\nyou might have created a dummy table with a single row, using syntax such as <span class=\"hue-doc-codeph\">CREATE TABLE foo AS SELECT 5 / 3.0</span>,\nand then doing a <span class=\"hue-doc-codeph\">DESCRIBE</span> to see the type of the row.\nOr you might have done a <span class=\"hue-doc-codeph\">CREATE TABLE AS SELECT</span> operation to create a table and\ncopy data into it, only learning the types of the columns by doing a <span class=\"hue-doc-codeph\">DESCRIBE</span> afterward.\nThis technique is especially useful for arithmetic expressions involving <span class=\"hue-doc-codeph\">DECIMAL</span> types,\nbecause the precision and scale of the result is typically different than that of the operands.\n</p><p><b>Added in:</b>Impala 2.3.0</p><p><b>Examples:</b></p><p>\nThese examples show how to check the type of a simple literal or function value.\nNotice how adding even tiny integers together changes the data type of the result to\navoid overflow, and how the results of arithmetic operations on <span class=\"hue-doc-codeph\">DECIMAL</span> values\nhave specific precision and scale attributes.\n</p><div class=\"hue-doc-codeblock\">select typeof(2)\n+-----------+\n| typeof(2) |\n+-----------+\n| TINYINT   |\n+-----------+\n\nselect typeof(2+2)\n+---------------+\n| typeof(2 + 2) |\n+---------------+\n| SMALLINT      |\n+---------------+\n\nselect typeof('xyz')\n+---------------+\n| typeof('xyz') |\n+---------------+\n| STRING        |\n+---------------+\n\nselect typeof(now())\n+---------------+\n| typeof(now()) |\n+---------------+\n| TIMESTAMP     |\n+---------------+\n\nselect typeof(5.3 / 2.1)\n+-------------------+\n| typeof(5.3 / 2.1) |\n+-------------------+\n| DECIMAL(6,4)      |\n+-------------------+\n\nselect typeof(5.30001 / 2342.1);\n+--------------------------+\n| typeof(5.30001 / 2342.1) |\n+--------------------------+\n| DECIMAL(13,11)           |\n+--------------------------+\n\nselect typeof(typeof(2+2))\n+-----------------------+\n| typeof(typeof(2 + 2)) |\n+-----------------------+\n| STRING                |\n+-----------------------+\n</div><p>\nThis example shows how even if you do not have a record of the type of a column,\nfor example because the type was changed by <span class=\"hue-doc-codeph\">ALTER TABLE</span> after the\noriginal <span class=\"hue-doc-codeph\">CREATE TABLE</span>, you can still find out the type in a\nmore compact form than examining the full <span class=\"hue-doc-codeph\">DESCRIBE</span> output.\nRemember to use <span class=\"hue-doc-codeph\">LIMIT 1</span> in such cases, to avoid an identical\nresult value for every row in the table.\n</p><div class=\"hue-doc-codeblock\">create table typeof_example (a int, b tinyint, c smallint, d bigint);\n\n/* Empty result set if there is no data in the table. */\nselect typeof(a) from typeof_example;\n\n/* OK, now we have some data but the type of column A is being changed. */\ninsert into typeof_example values (1, 2, 3, 4);\nalter table typeof_example change a a bigint;\n\n/* We can always find out the current type of that column without doing a full DESCRIBE. */\nselect typeof(a) from typeof_example limit 1;\n+-----------+\n| typeof(a) |\n+-----------+\n| BIGINT    |\n+-----------+\n</div><p>\nThis example shows how you might programmatically generate a <span class=\"hue-doc-codeph\">CREATE TABLE</span> statement\nwith the appropriate column definitions to hold the result values of arbitrary expressions.\nThe <span class=\"hue-doc-codeph\">typeof()</span> function lets you construct a detailed <span class=\"hue-doc-codeph\">CREATE TABLE</span> statement\nwithout actually creating the table, as opposed to <span class=\"hue-doc-codeph\">CREATE TABLE AS SELECT</span> operations\nwhere you create the destination table but only learn the column data types afterward through <span class=\"hue-doc-codeph\">DESCRIBE</span>.\n</p><div class=\"hue-doc-codeblock\">describe typeof_example;\n+------+----------+---------+\n| name | type     | comment |\n+------+----------+---------+\n| a    | bigint   |         |\n| b    | tinyint  |         |\n| c    | smallint |         |\n| d    | bigint   |         |\n+------+----------+---------+\n\n/* An ETL or business intelligence tool might create variations on a table with different file formats,\n   different sets of columns, and so on. TYPEOF() lets an application introspect the types of the original columns. */\nselect concat('create table derived_table (a ', typeof(a), ', b ', typeof(b), ', c ',\n    typeof(c), ', d ', typeof(d), ') stored as parquet;')\n  as 'create table statement'\nfrom typeof_example limit 1;\n+-------------------------------------------------------------------------------------------+\n| create table statement                                                                    |\n+-------------------------------------------------------------------------------------------+\n| create table derived_table (a BIGINT, b TINYINT, c SMALLINT, d BIGINT) stored as parquet; |\n+-------------------------------------------------------------------------------------------+\n</div></dd></dl></div></div></div>","title":"Impala Type Conversion Functions"}