{"body":"<div><div><div class=\"hue-doc-title\">Impala Built-In Functions</div><div><p>\n      Impala supports several categories of built-in functions. These functions let you perform mathematical\n      calculations, string manipulation, date calculations, and other kinds of data transformations directly in\n      <span class=\"hue-doc-codeph\">SELECT</span> statements. The built-in functions let a SQL query return results with all\n      formatting, calculating, and type conversions applied, rather than performing time-consuming postprocessing\n      in another application. By applying function calls where practical, you can make a SQL query that is as\n      convenient as an expression in a procedural programming language or a formula in a spreadsheet.\n    </p><p>\n      The categories of functions supported by Impala are:\n    </p><ul><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions\">Impala Mathematical Functions</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_conversion_functions.xml\" data-doc-anchor-id=\"conversion_functions\">Impala Type Conversion Functions</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions\">Impala Date and Time Functions</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_conditional_functions.xml\" data-doc-anchor-id=\"conditional_functions\">Impala Conditional Functions</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\" data-doc-anchor-id=\"string_functions\">Impala String Functions</a></li><li>\n        Aggregation functions, explained in <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_aggregate_functions.xml\" data-doc-anchor-id=\"aggregate_functions\">Impala Aggregate Functions</a>.\n      </li></ul><p>\n      You call any of these functions through the <span class=\"hue-doc-codeph\">SELECT</span> statement. For most functions, you can\n      omit the <span class=\"hue-doc-codeph\">FROM</span> clause and supply literal values for any required arguments:\n    </p><div class=\"hue-doc-codeblock\">select abs(-1);\n+---------+\n| abs(-1) |\n+---------+\n| 1       |\n+---------+\n\nselect concat('The rain ', 'in Spain');\n+---------------------------------+\n| concat('the rain ', 'in spain') |\n+---------------------------------+\n| The rain in Spain               |\n+---------------------------------+\n\nselect power(2,5);\n+-------------+\n| power(2, 5) |\n+-------------+\n| 32          |\n+-------------+\n</div><p>\n      When you use a <span class=\"hue-doc-codeph\">FROM</span> clause and specify a column name as a function argument, the function is\n      applied for each item in the result set:\n    </p><div class=\"hue-doc-codeblock\">select concat('Country = ',country_code) from all_countries where population &gt; 100000000;\nselect round(price) as dollar_value from product_catalog where price between 0.0 and 100.0;\n</div><p>\n      Typically, if any argument to a built-in function is <span class=\"hue-doc-codeph\">NULL</span>, the result value is also\n      <span class=\"hue-doc-codeph\">NULL</span>:\n    </p><div class=\"hue-doc-codeblock\">select cos(null);\n+-----------+\n| cos(null) |\n+-----------+\n| NULL      |\n+-----------+\n\nselect power(2,null);\n+----------------+\n| power(2, null) |\n+----------------+\n| NULL           |\n+----------------+\n\nselect concat('a',null,'b');\n+------------------------+\n| concat('a', null, 'b') |\n+------------------------+\n| NULL                   |\n+------------------------+\n</div><p>\n        Aggregate functions are a special category with different rules. These functions calculate a return value\n        across all the items in a result set, so they require a <span class=\"hue-doc-codeph\">FROM</span> clause in the query:\n      </p><div class=\"hue-doc-codeblock\">select count(product_id) from product_catalog;\nselect max(height), avg(height) from census_data where age &gt; 20;\n</div><p>\n        Aggregate functions also ignore <span class=\"hue-doc-codeph\">NULL</span> values rather than returning a <span class=\"hue-doc-codeph\">NULL</span>\n        result. For example, if some rows have <span class=\"hue-doc-codeph\">NULL</span> for a particular column, those rows are\n        ignored when computing the <span class=\"hue-doc-codeph\">AVG()</span> for that column. Likewise, specifying\n        <span class=\"hue-doc-codeph\">COUNT(<span class=\"hue-doc-varname\">col_name</span>)</span> in a query counts only those rows where\n        <span class=\"hue-doc-varname\">col_name</span> contains a non-<span class=\"hue-doc-codeph\">NULL</span> value.\n      </p><p>\n      Aggregate functions are a special category with different rules. These functions calculate a return value\n      across all the items in a result set, so they do require a <span class=\"hue-doc-codeph\">FROM</span> clause in the query:\n    </p><div class=\"hue-doc-codeblock\">select count(product_id) from product_catalog;\nselect max(height), avg(height) from census_data where age &gt; 20;\n</div><p>\n      Aggregate functions also ignore <span class=\"hue-doc-codeph\">NULL</span> values rather than returning a <span class=\"hue-doc-codeph\">NULL</span>\n      result. For example, if some rows have <span class=\"hue-doc-codeph\">NULL</span> for a particular column, those rows are ignored\n      when computing the AVG() for that column. Likewise, specifying <span class=\"hue-doc-codeph\">COUNT(col_name)</span> in a query\n      counts only those rows where <span class=\"hue-doc-codeph\">col_name</span> contains a non-<span class=\"hue-doc-codeph\">NULL</span> value.\n    </p><p>\n      Analytic functions are a variation on aggregate functions. Instead of returning a single value, or an\n      identical value for each group of rows, they can compute values that vary based on a <q>window</q> consisting\n      of other rows around them in the result set.\n    </p><div><div>Continue reading:</div><ul><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\">Impala Mathematical Functions</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_bit_functions.xml\">Impala Bit Functions</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_conversion_functions.xml\">Impala Type Conversion Functions</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\">Impala Date and Time Functions</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_conditional_functions.xml\">Impala Conditional Functions</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_string_functions.xml\">Impala String Functions</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_misc_functions.xml\">Impala Miscellaneous Functions</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_aggregate_functions.xml\">Impala Aggregate Functions</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_analytic_functions.xml\">Impala Analytic Functions</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_udf.xml\">Impala User-Defined Functions (UDFs)</a></li></ul></div></div></div></div>","title":"Impala Built-In Functions"}