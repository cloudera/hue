{"body":"<div><div id=\"compute_stats\"><div class=\"hue-doc-title\">COMPUTE STATS Statement</div><div><p> The\n      COMPUTE STATS statement gathers information about volume and distribution\n      of data in a table and all associated columns and partitions. The\n      information is stored in the metastore database, and used by Impala to\n      help optimize queries. For example, if Impala can determine that a table\n      is large or small, or has many or few distinct values it can organize and\n      parallelize the work appropriately for a join query or insert operation.\n      For details about the kinds of information gathered by this statement, see\n        <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_stats.xml\" data-doc-anchor-id=\"perf_stats\">Table and Column Statistics</a>.\n    </p><p id=\"syntax_blurb\"><b>Syntax:</b></p><div class=\"hue-doc-codeblock\"><span class=\"hue-doc-ph\">COMPUTE STATS [<span class=\"hue-doc-varname\">db_name</span>.]<span class=\"hue-doc-varname\">table_name</span>  [ ( <span class=\"hue-doc-varname\">column_list</span> ) ] [TABLESAMPLE SYSTEM(<span class=\"hue-doc-varname\">percentage</span>) [REPEATABLE(<span class=\"hue-doc-varname\">seed</span>)]]</span><span class=\"hue-doc-varname\">column_list</span> ::= <span class=\"hue-doc-varname\">column_name</span> [ , <span class=\"hue-doc-varname\">column_name</span>, ... ]\n\nCOMPUTE INCREMENTAL STATS [<span class=\"hue-doc-varname\">db_name</span>.]<span class=\"hue-doc-varname\">table_name</span> [PARTITION (<span class=\"hue-doc-varname\">partition_spec</span>)]\n\n<span class=\"hue-doc-varname\">partition_spec</span> ::= <span class=\"hue-doc-varname\">simple_partition_spec</span> | <span class=\"hue-doc-ph\"><span class=\"hue-doc-varname\">complex_partition_spec</span></span><span class=\"hue-doc-varname\">simple_partition_spec</span> ::= <span class=\"hue-doc-varname\">partition_col</span>=<span class=\"hue-doc-varname\">constant_value</span><span class=\"hue-doc-ph\"><span class=\"hue-doc-varname\">complex_partition_spec</span> ::= <span class=\"hue-doc-varname\">comparison_expression_on_partition_col</span></span></div><p id=\"incremental_partition_spec\">\n        The <span class=\"hue-doc-codeph\">PARTITION</span> clause is only allowed in combination with the\n        <span class=\"hue-doc-codeph\">INCREMENTAL</span> clause. It is optional for <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL\n        STATS</span>, and required for <span class=\"hue-doc-codeph\">DROP INCREMENTAL STATS</span>. Whenever you\n        specify partitions through the <span class=\"hue-doc-codeph\">PARTITION\n        (<span class=\"hue-doc-varname\">partition_spec</span>)</span> clause in a <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL\n        STATS</span> or <span class=\"hue-doc-codeph\">DROP INCREMENTAL STATS</span> statement, you must include\n        all the partitioning columns in the specification, and specify constant values for all\n        the partition key columns.\n      </p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n      Originally, Impala relied on users to run the Hive <span class=\"hue-doc-codeph\">ANALYZE\n        TABLE</span> statement, but that method of gathering statistics proved\n      unreliable and difficult to use. The Impala <span class=\"hue-doc-codeph\">COMPUTE STATS</span>\n      statement was built to improve the reliability and user-friendliness of\n      this operation. <span class=\"hue-doc-codeph\">COMPUTE STATS</span> does not require any setup\n      steps or special configuration. You only run a single Impala\n        <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement to gather both table and column\n      statistics, rather than separate Hive <span class=\"hue-doc-codeph\">ANALYZE TABLE</span>\n      statements for each kind of statistics.\n    </p><p>\n      For non-incremental <span class=\"hue-doc-codeph\">COMPUTE STATS</span>\n      statement, the columns for which statistics are computed can be specified\n      with an optional comma-separate list of columns.\n    </p><p>\n      If no column list is given, the <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement\n      computes column-level statistics for all columns of the table. This adds\n      potentially unneeded work for columns whose stats are not needed by\n      queries. It can be especially costly for very wide tables and unneeded\n      large string fields.\n    </p><p><span class=\"hue-doc-codeph\">COMPUTE STATS</span> returns an error when a specified column\n      cannot be analyzed, such as when the column does not exist, the column is\n      of an unsupported type for COMPUTE STATS, e.g. colums of complex types,\n      or the column is a partitioning column.\n\n    </p><p>\n      If an empty column list is given, no column is analyzed by <span class=\"hue-doc-codeph\">COMPUTE\n        STATS</span>.\n    </p><p>\n      In Impala 2.12 and\n      higher, an optional <span class=\"hue-doc-codeph\">TABLESAMPLE</span> clause immediately after\n      a table reference specifies that the <span class=\"hue-doc-codeph\">COMPUTE STATS</span>\n      operation only processes a specified percentage of the table data. For\n      tables that are so large that a full <span class=\"hue-doc-codeph\">COMPUTE STATS</span>\n      operation is impractical, you can use <span class=\"hue-doc-codeph\">COMPUTE STATS</span> with\n      a <span class=\"hue-doc-codeph\">TABLESAMPLE</span> clause to extrapolate statistics from a\n      sample of the table data. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_stats.xml\" data-doc-anchor-id=\"perf_stats\">Table and Column Statistics</a>about the\n      experimental stats extrapolation and sampling features.\n    </p><p>\n      The <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span> variation is a shortcut for partitioned tables that works on a\n      subset of partitions rather than the entire table. The incremental nature makes it suitable for large tables\n      with many partitions, where a full <span class=\"hue-doc-codeph\">COMPUTE STATS</span> operation takes too long to be practical\n      each time a partition is added or dropped. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_stats.xml\" data-doc-anchor-id=\"perf_stats_incremental\">Table and Column Statistics</a>\n      for full usage details.\n    </p><div class=\"hue-doc-note\"><p id=\"cs_or_cis\">\n        For a particular table, use either <span class=\"hue-doc-codeph\">COMPUTE STATS</span> or <span class=\"hue-doc-codeph\">COMPUTE\n        INCREMENTAL STATS</span>, but never combine the two or alternate between them. If you\n        switch from <span class=\"hue-doc-codeph\">COMPUTE STATS</span> to <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span>\n        during the lifetime of a table, or vice versa, drop all statistics by running\n        <span class=\"hue-doc-codeph\">DROP STATS</span> before making the switch.\n      </p><p id=\"incremental_stats_after_full\">\n        When you run <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span> on a table for the first time,\n        the statistics are computed again from scratch regardless of whether the table already\n        has statistics. Therefore, expect a one-time resource-intensive operation for scanning\n        the entire table when running <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span> for the first\n        time on a given table.\n      </p><p id=\"incremental_stats_caveats\">\n        In Impala 3.0 and lower, approximately 400 bytes of metadata per column per partition\n        are needed for caching. Tables with a big number of partitions and many columns can add\n        up to a significant memory overhead as the metadata must be cached on the\n        <span class=\"hue-doc-cmdname\">catalogd</span> host and on every <span class=\"hue-doc-cmdname\">impalad</span> host that is\n        eligible to be a coordinator. If this metadata for all tables exceeds 2 GB, you might\n        experience service downtime. In Impala 3.1 and higher, the issue was alleviated with an\n        improved handling of incremental stats.\n      </p></div><p><span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span> only applies to partitioned tables. If you use the\n      <span class=\"hue-doc-codeph\">INCREMENTAL</span> clause for an unpartitioned table, Impala automatically uses the original\n      <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement. Such tables display <span class=\"hue-doc-codeph\">false</span> under the\n      <span class=\"hue-doc-codeph\">Incremental stats</span> column of the <span class=\"hue-doc-codeph\">SHOW TABLE STATS</span> output.\n    </p><div class=\"hue-doc-note\"><p>\n        Because many of the most performance-critical and resource-intensive\n        operations rely on table and column statistics to construct accurate and\n        efficient plans, <span class=\"hue-doc-codeph\">COMPUTE STATS</span> is an important step at\n        the end of your ETL process. Run <span class=\"hue-doc-codeph\">COMPUTE STATS</span> on all\n        tables as your first step during performance tuning for slow queries, or\n        troubleshooting for out-of-memory conditions:\n        <ul><li>\n            Accurate statistics help Impala construct an efficient query plan\n            for join queries, improving performance and reducing memory usage.\n          </li><li>\n            Accurate statistics help Impala distribute the work effectively\n            for insert operations into Parquet tables, improving performance and\n            reducing memory usage.\n          </li><li>\n            Accurate statistics help Impala estimate the memory\n            required for each query, which is important when you use resource\n            management features, such as admission control and the YARN resource\n            management framework. The statistics help Impala to achieve high\n            concurrency, full utilization of available memory, and avoid\n            contention with workloads from other Hadoop components.\n          </li><li>\n            In Impala 2.8 and\n            higher, when you run the <span class=\"hue-doc-codeph\">COMPUTE STATS</span> or\n              <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span> statement against a\n            Parquet table, Impala automatically applies the query option setting\n              <span class=\"hue-doc-codeph\">MT_DOP=4</span> to increase the amount of intra-node\n            parallelism during this CPU-intensive operation. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_mt_dop.xml\" data-doc-anchor-id=\"mt_dop\">MT_DOP Query Option</a> for details about what this query option does\n            and how to use it with CPU-intensive <span class=\"hue-doc-codeph\">SELECT</span>\n            statements.\n          </li></ul></p></div><p><b>Computing stats for groups of partitions:</b></p><p>\n      In Impala 2.8 and higher, you can run <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span>\n      on multiple partitions, instead of the entire table or one partition at a time. You include\n      comparison operators other than <span class=\"hue-doc-codeph\">=</span> in the <span class=\"hue-doc-codeph\">PARTITION</span> clause,\n      and the <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span> statement applies to all partitions that\n      match the comparison expression.\n    </p><p>\n      For example, the <span class=\"hue-doc-codeph\">INT_PARTITIONS</span> table contains 4 partitions.\n      The following <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span> statements affect some but not all\n      partitions, as indicated by the <span class=\"hue-doc-codeph\">Updated <span class=\"hue-doc-varname\">n</span> partition(s)</span>\n      messages. The partitions that are affected depend on values in the partition key column <span class=\"hue-doc-codeph\">X</span>\n      that match the comparison expression in the <span class=\"hue-doc-codeph\">PARTITION</span> clause.\n    </p><div class=\"hue-doc-codeblock\">show partitions int_partitions;\n+-------+-------+--------+------+--------------+-------------------+---------+...\n| x     | #Rows | #Files | Size | Bytes Cached | Cache Replication | Format  |...\n+-------+-------+--------+------+--------------+-------------------+---------+...\n| 99    | -1    | 0      | 0B   | NOT CACHED   | NOT CACHED        | PARQUET |...\n| 120   | -1    | 0      | 0B   | NOT CACHED   | NOT CACHED        | TEXT    |...\n| 150   | -1    | 0      | 0B   | NOT CACHED   | NOT CACHED        | TEXT    |...\n| 200   | -1    | 0      | 0B   | NOT CACHED   | NOT CACHED        | TEXT    |...\n| Total | -1    | 0      | 0B   | 0B           |                   |         |...\n+-------+-------+--------+------+--------------+-------------------+---------+...\n\ncompute incremental stats int_partitions partition (x &lt; 100);\n+-----------------------------------------+\n| summary                                 |\n+-----------------------------------------+\n| Updated 1 partition(s) and 1 column(s). |\n+-----------------------------------------+\n\ncompute incremental stats int_partitions partition (x in (100, 150, 200));\n+-----------------------------------------+\n| summary                                 |\n+-----------------------------------------+\n| Updated 2 partition(s) and 1 column(s). |\n+-----------------------------------------+\n\ncompute incremental stats int_partitions partition (x between 100 and 175);\n+-----------------------------------------+\n| summary                                 |\n+-----------------------------------------+\n| Updated 2 partition(s) and 1 column(s). |\n+-----------------------------------------+\n\ncompute incremental stats int_partitions partition (x in (100, 150, 200) or x &lt; 100);\n+-----------------------------------------+\n| summary                                 |\n+-----------------------------------------+\n| Updated 3 partition(s) and 1 column(s). |\n+-----------------------------------------+\n\ncompute incremental stats int_partitions partition (x != 150);\n+-----------------------------------------+\n| summary                                 |\n+-----------------------------------------+\n| Updated 3 partition(s) and 1 column(s). |\n+-----------------------------------------+\n</div><p id=\"complex_types_blurb\"><b>Complex type considerations:</b></p><p>\n      Currently, the statistics created by the <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement do not include\n      information about complex type columns. The column stats metrics for complex columns are always shown\n      as -1. For queries involving complex type columns, Impala uses\n      heuristics to estimate the data distribution within such columns.\n    </p><p id=\"hbase_blurb\"><b>HBase considerations:</b></p><p><span class=\"hue-doc-codeph\">COMPUTE STATS</span> works for HBase tables also. The statistics gathered for HBase tables are\n      somewhat different than for HDFS-backed tables, but that metadata is still used for optimization when HBase\n      tables are involved in join queries.\n    </p><p id=\"s3_blurb\"><b>Amazon S3 considerations:</b></p><p><span class=\"hue-doc-codeph\">COMPUTE STATS</span> also works for tables where data resides in the Amazon Simple Storage Service (S3).\n      See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_s3.xml\" data-doc-anchor-id=\"s3\">Using Impala with Amazon S3 Object Store</a> for details.\n    </p><p id=\"performance_blurb\"><b>Performance considerations:</b></p><p>\n      The statistics collected by <span class=\"hue-doc-codeph\">COMPUTE STATS</span> are used to optimize join queries\n      <span class=\"hue-doc-codeph\">INSERT</span> operations into Parquet tables, and other resource-intensive kinds of SQL statements.\n      See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_stats.xml\" data-doc-anchor-id=\"perf_stats\">Table and Column Statistics</a> for details.\n    </p><p>\n      For large tables, the <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement itself might take a long time and you\n      might need to tune its performance. The <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement does not work with the\n      <span class=\"hue-doc-codeph\">EXPLAIN</span> statement, or the <span class=\"hue-doc-codeph\">SUMMARY</span> command in <span class=\"hue-doc-cmdname\">impala-shell</span>.\n      You can use the <span class=\"hue-doc-codeph\">PROFILE</span> statement in <span class=\"hue-doc-cmdname\">impala-shell</span> to examine timing information\n      for the statement as a whole. If a basic <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement takes a long time for a\n      partitioned table, consider switching to the <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span> syntax so that only\n      newly added partitions are analyzed each time.\n    </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n      This example shows two tables, <span class=\"hue-doc-codeph\">T1</span> and <span class=\"hue-doc-codeph\">T2</span>, with a small number distinct\n      values linked by a parent-child relationship between <span class=\"hue-doc-codeph\">T1.ID</span> and <span class=\"hue-doc-codeph\">T2.PARENT</span>.\n      <span class=\"hue-doc-codeph\">T1</span> is tiny, while <span class=\"hue-doc-codeph\">T2</span> has approximately 100K rows. Initially, the statistics\n      includes physical measurements such as the number of files, the total size, and size measurements for\n      fixed-length columns such as with the <span class=\"hue-doc-codeph\">INT</span> type. Unknown values are represented by -1. After\n      running <span class=\"hue-doc-codeph\">COMPUTE STATS</span> for each table, much more information is available through the\n      <span class=\"hue-doc-codeph\">SHOW STATS</span> statements. If you were running a join query involving both of these tables, you\n      would need statistics for both tables to get the most effective optimization for the query.\n    </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; show table stats t1;\nQuery: show table stats t1\n+-------+--------+------+--------+\n| #Rows | #Files | Size | Format |\n+-------+--------+------+--------+\n| -1    | 1      | 33B  | TEXT   |\n+-------+--------+------+--------+\nReturned 1 row(s) in 0.02s\n[localhost:21000] &gt; show table stats t2;\nQuery: show table stats t2\n+-------+--------+----------+--------+\n| #Rows | #Files | Size     | Format |\n+-------+--------+----------+--------+\n| -1    | 28     | 960.00KB | TEXT   |\n+-------+--------+----------+--------+\nReturned 1 row(s) in 0.01s\n[localhost:21000] &gt; show column stats t1;\nQuery: show column stats t1\n+--------+--------+------------------+--------+----------+----------+\n| Column | Type   | #Distinct Values | #Nulls | Max Size | Avg Size |\n+--------+--------+------------------+--------+----------+----------+\n| id     | INT    | -1               | -1     | 4        | 4        |\n| s      | STRING | -1               | -1     | -1       | -1       |\n+--------+--------+------------------+--------+----------+----------+\nReturned 2 row(s) in 1.71s\n[localhost:21000] &gt; show column stats t2;\nQuery: show column stats t2\n+--------+--------+------------------+--------+----------+----------+\n| Column | Type   | #Distinct Values | #Nulls | Max Size | Avg Size |\n+--------+--------+------------------+--------+----------+----------+\n| parent | INT    | -1               | -1     | 4        | 4        |\n| s      | STRING | -1               | -1     | -1       | -1       |\n+--------+--------+------------------+--------+----------+----------+\nReturned 2 row(s) in 0.01s\n[localhost:21000] &gt; compute stats t1;\nQuery: compute stats t1\n+-----------------------------------------+\n| summary                                 |\n+-----------------------------------------+\n| Updated 1 partition(s) and 2 column(s). |\n+-----------------------------------------+\nReturned 1 row(s) in 5.30s\n[localhost:21000] &gt; show table stats t1;\nQuery: show table stats t1\n+-------+--------+------+--------+\n| #Rows | #Files | Size | Format |\n+-------+--------+------+--------+\n| 3     | 1      | 33B  | TEXT   |\n+-------+--------+------+--------+\nReturned 1 row(s) in 0.01s\n[localhost:21000] &gt; show column stats t1;\nQuery: show column stats t1\n+--------+--------+------------------+--------+----------+----------+\n| Column | Type   | #Distinct Values | #Nulls | Max Size | Avg Size |\n+--------+--------+------------------+--------+----------+----------+\n| id     | INT    | 3                | -1     | 4        | 4        |\n| s      | STRING | 3                | -1     | -1       | -1       |\n+--------+--------+------------------+--------+----------+----------+\nReturned 2 row(s) in 0.02s\n[localhost:21000] &gt; compute stats t2;\nQuery: compute stats t2\n+-----------------------------------------+\n| summary                                 |\n+-----------------------------------------+\n| Updated 1 partition(s) and 2 column(s). |\n+-----------------------------------------+\nReturned 1 row(s) in 5.70s\n[localhost:21000] &gt; show table stats t2;\nQuery: show table stats t2\n+-------+--------+----------+--------+\n| #Rows | #Files | Size     | Format |\n+-------+--------+----------+--------+\n| 98304 | 1      | 960.00KB | TEXT   |\n+-------+--------+----------+--------+\nReturned 1 row(s) in 0.03s\n[localhost:21000] &gt; show column stats t2;\nQuery: show column stats t2\n+--------+--------+------------------+--------+----------+----------+\n| Column | Type   | #Distinct Values | #Nulls | Max Size | Avg Size |\n+--------+--------+------------------+--------+----------+----------+\n| parent | INT    | 3                | -1     | 4        | 4        |\n| s      | STRING | 6                | -1     | 14       | 9.3      |\n+--------+--------+------------------+--------+----------+----------+\nReturned 2 row(s) in 0.01s</div><p>\n      The following example shows how to use the <span class=\"hue-doc-codeph\">INCREMENTAL</span> clause, available in Impala 2.1.0 and\n      higher. The <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span> syntax lets you collect statistics for newly added or\n      changed partitions, without rescanning the entire table.\n    </p><div class=\"hue-doc-codeblock\" id=\"compute_stats_walkthrough\">-- Initially the table has no incremental stats, as indicated\n-- 'false' under Incremental stats.\nshow table stats item_partitioned;\n+-------------+-------+--------+----------+--------------+---------+------------------\n| i_category  | #Rows | #Files | Size     | Bytes Cached | Format  | Incremental stats\n+-------------+-------+--------+----------+--------------+---------+------------------\n| Books       | -1    | 1      | 223.74KB | NOT CACHED   | PARQUET | false\n| Children    | -1    | 1      | 230.05KB | NOT CACHED   | PARQUET | false\n| Electronics | -1    | 1      | 232.67KB | NOT CACHED   | PARQUET | false\n| Home        | -1    | 1      | 232.56KB | NOT CACHED   | PARQUET | false\n| Jewelry     | -1    | 1      | 223.72KB | NOT CACHED   | PARQUET | false\n| Men         | -1    | 1      | 231.25KB | NOT CACHED   | PARQUET | false\n| Music       | -1    | 1      | 237.90KB | NOT CACHED   | PARQUET | false\n| Shoes       | -1    | 1      | 234.90KB | NOT CACHED   | PARQUET | false\n| Sports      | -1    | 1      | 227.97KB | NOT CACHED   | PARQUET | false\n| Women       | -1    | 1      | 226.27KB | NOT CACHED   | PARQUET | false\n| Total       | -1    | 10     | 2.25MB   | 0B           |         |\n+-------------+-------+--------+----------+--------------+---------+------------------\n\n-- After the first COMPUTE INCREMENTAL STATS,\n-- all partitions have stats. The first\n-- COMPUTE INCREMENTAL STATS scans the whole\n-- table, discarding any previous stats from\n-- a traditional COMPUTE STATS statement.\ncompute incremental stats item_partitioned;\n+-------------------------------------------+\n| summary                                   |\n+-------------------------------------------+\n| Updated 10 partition(s) and 21 column(s). |\n+-------------------------------------------+\nshow table stats item_partitioned;\n+-------------+-------+--------+----------+--------------+---------+------------------\n| i_category  | #Rows | #Files | Size     | Bytes Cached | Format  | Incremental stats\n+-------------+-------+--------+----------+--------------+---------+------------------\n| Books       | 1733  | 1      | 223.74KB | NOT CACHED   | PARQUET | true\n| Children    | 1786  | 1      | 230.05KB | NOT CACHED   | PARQUET | true\n| Electronics | 1812  | 1      | 232.67KB | NOT CACHED   | PARQUET | true\n| Home        | 1807  | 1      | 232.56KB | NOT CACHED   | PARQUET | true\n| Jewelry     | 1740  | 1      | 223.72KB | NOT CACHED   | PARQUET | true\n| Men         | 1811  | 1      | 231.25KB | NOT CACHED   | PARQUET | true\n| Music       | 1860  | 1      | 237.90KB | NOT CACHED   | PARQUET | true\n| Shoes       | 1835  | 1      | 234.90KB | NOT CACHED   | PARQUET | true\n| Sports      | 1783  | 1      | 227.97KB | NOT CACHED   | PARQUET | true\n| Women       | 1790  | 1      | 226.27KB | NOT CACHED   | PARQUET | true\n| Total       | 17957 | 10     | 2.25MB   | 0B           |         |\n+-------------+-------+--------+----------+--------------+---------+------------------\n\n-- Add a new partition...\nalter table item_partitioned add partition (i_category='Camping');\n-- Add or replace files in HDFS outside of Impala,\n-- rendering the stats for a partition obsolete.\n!import_data_into_sports_partition.sh\nrefresh item_partitioned;\ndrop incremental stats item_partitioned partition (i_category='Sports');\n-- Now some partitions have incremental stats\n-- and some do not.\nshow table stats item_partitioned;\n+-------------+-------+--------+----------+--------------+---------+------------------\n| i_category  | #Rows | #Files | Size     | Bytes Cached | Format  | Incremental stats\n+-------------+-------+--------+----------+--------------+---------+------------------\n| Books       | 1733  | 1      | 223.74KB | NOT CACHED   | PARQUET | true\n| Camping     | -1    | 1      | 408.02KB | NOT CACHED   | PARQUET | false\n| Children    | 1786  | 1      | 230.05KB | NOT CACHED   | PARQUET | true\n| Electronics | 1812  | 1      | 232.67KB | NOT CACHED   | PARQUET | true\n| Home        | 1807  | 1      | 232.56KB | NOT CACHED   | PARQUET | true\n| Jewelry     | 1740  | 1      | 223.72KB | NOT CACHED   | PARQUET | true\n| Men         | 1811  | 1      | 231.25KB | NOT CACHED   | PARQUET | true\n| Music       | 1860  | 1      | 237.90KB | NOT CACHED   | PARQUET | true\n| Shoes       | 1835  | 1      | 234.90KB | NOT CACHED   | PARQUET | true\n| Sports      | -1    | 1      | 227.97KB | NOT CACHED   | PARQUET | false\n| Women       | 1790  | 1      | 226.27KB | NOT CACHED   | PARQUET | true\n| Total       | 17957 | 11     | 2.65MB   | 0B           |         |\n+-------------+-------+--------+----------+--------------+---------+------------------\n\n-- After another COMPUTE INCREMENTAL STATS,\n-- all partitions have incremental stats, and only the 2\n-- partitions without incremental stats were scanned.\ncompute incremental stats item_partitioned;\n+------------------------------------------+\n| summary                                  |\n+------------------------------------------+\n| Updated 2 partition(s) and 21 column(s). |\n+------------------------------------------+\nshow table stats item_partitioned;\n+-------------+-------+--------+----------+--------------+---------+------------------\n| i_category  | #Rows | #Files | Size     | Bytes Cached | Format  | Incremental stats\n+-------------+-------+--------+----------+--------------+---------+------------------\n| Books       | 1733  | 1      | 223.74KB | NOT CACHED   | PARQUET | true\n| Camping     | 5328  | 1      | 408.02KB | NOT CACHED   | PARQUET | true\n| Children    | 1786  | 1      | 230.05KB | NOT CACHED   | PARQUET | true\n| Electronics | 1812  | 1      | 232.67KB | NOT CACHED   | PARQUET | true\n| Home        | 1807  | 1      | 232.56KB | NOT CACHED   | PARQUET | true\n| Jewelry     | 1740  | 1      | 223.72KB | NOT CACHED   | PARQUET | true\n| Men         | 1811  | 1      | 231.25KB | NOT CACHED   | PARQUET | true\n| Music       | 1860  | 1      | 237.90KB | NOT CACHED   | PARQUET | true\n| Shoes       | 1835  | 1      | 234.90KB | NOT CACHED   | PARQUET | true\n| Sports      | 1783  | 1      | 227.97KB | NOT CACHED   | PARQUET | true\n| Women       | 1790  | 1      | 226.27KB | NOT CACHED   | PARQUET | true\n| Total       | 17957 | 11     | 2.65MB   | 0B           |         |\n+-------------+-------+--------+----------+--------------+---------+------------------\n</div><p id=\"file_format_blurb\"><b>File format considerations:</b></p><p>\n      The <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement works with tables created with any of the file formats supported\n      by Impala. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_file_formats.xml\" data-doc-anchor-id=\"file_formats\">How Impala Works with Hadoop File Formats</a> for details about working with the\n      different file formats. The following considerations apply to <span class=\"hue-doc-codeph\">COMPUTE STATS</span> depending on the\n      file format of the table.\n    </p><p>\n      The <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement works with text tables with no restrictions. These tables can be\n      created through either Impala or Hive.\n    </p><p>\n      The <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement works with Parquet tables. These tables can be created through\n      either Impala or Hive.\n    </p><p>\n      The <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement works with Avro tables without restriction in Impala 2.2\n      and higher. In earlier releases, <span class=\"hue-doc-codeph\">COMPUTE STATS</span> worked only for Avro tables created through Hive,\n      and required the <span class=\"hue-doc-codeph\">CREATE TABLE</span> statement to use SQL-style column names and types rather than an\n      Avro-style schema specification.\n    </p><p>\n      The <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement works with RCFile tables with no restrictions. These tables can\n      be created through either Impala or Hive.\n    </p><p>\n      The <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement works with SequenceFile tables with no restrictions. These\n      tables can be created through either Impala or Hive.\n    </p><p>\n      The <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement works with partitioned tables, whether all the partitions use\n      the same file format, or some partitions are defined through <span class=\"hue-doc-codeph\">ALTER TABLE</span> to use different\n      file formats.\n    </p><p id=\"ddl_blurb\"><b>Statement type:</b> DDL\n      </p><p id=\"cancel_blurb_maybe\"><b>Cancellation:</b> Certain multi-stage statements (<span class=\"hue-doc-codeph\">CREATE TABLE AS\n        SELECT</span> and <span class=\"hue-doc-codeph\">COMPUTE STATS</span>) can be cancelled during some stages,\n        when running <span class=\"hue-doc-codeph\">INSERT</span> or <span class=\"hue-doc-codeph\">SELECT</span> operations internally.\n        To cancel this statement, use Ctrl-C from the <span class=\"hue-doc-cmdname\">impala-shell</span>\n        interpreter, the <div class=\"hue-doc-uicontrol\">Cancel</div> button from the\n        <div class=\"hue-doc-uicontrol\">Watch</div> page in Hue, or <div class=\"hue-doc-uicontrol\">Cancel</div> from the list\n        of in-flight queries (for a particular node) on the <div class=\"hue-doc-uicontrol\">Queries</div> tab\n        in the Impala web UI (port 25000).\n      </p><p id=\"restrictions_blurb\"><b>Restrictions:</b></p><div class=\"hue-doc-note\" id=\"compute_stats_nulls\">        Prior to Impala 1.4.0, <span class=\"hue-doc-codeph\">COMPUTE STATS</span> counted the number of\n        <span class=\"hue-doc-codeph\">NULL</span> values in each column and recorded that figure in the metastore\n        database. Because Impala does not currently use the <span class=\"hue-doc-codeph\">NULL</span> count during\n        query planning, Impala 1.4.0 and higher speeds up the <span class=\"hue-doc-codeph\">COMPUTE STATS</span>\n        statement by skipping this <span class=\"hue-doc-codeph\">NULL</span> counting.\n      </div><p id=\"internals_blurb\"><b>Internal details:</b></p><p>\n      Behind the scenes, the <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement\n      executes two statements: one to count the rows of each partition\n      in the table (or the entire table if unpartitioned) through the\n      <span class=\"hue-doc-codeph\">COUNT(*)</span> function,\n      and another to count the approximate number of distinct values\n      in each column through the <span class=\"hue-doc-codeph\">NDV()</span> function.\n      You might see these queries in your monitoring and diagnostic displays.\n      The same factors that affect the performance, scalability, and\n      execution of other queries (such as parallel execution, memory usage,\n      admission control, and timeouts) also apply to the queries run by the\n      <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement.\n    </p><p id=\"permissions_blurb\"><b>HDFS permissions:</b></p><p>\n      The user ID that the <span class=\"hue-doc-cmdname\">impalad</span> daemon runs under,\n      typically the <span class=\"hue-doc-codeph\">impala</span> user, must have read\n      permission for all affected files in the source directory:\n      all files in the case of an unpartitioned table or\n      a partitioned table in the case of <span class=\"hue-doc-codeph\">COMPUTE STATS</span>;\n      or all the files in partitions without incremental stats in\n      the case of <span class=\"hue-doc-codeph\">COMPUTE INCREMENTAL STATS</span>.\n      It must also have read and execute permissions for all\n      relevant directories holding the data files.\n      (Essentially, <span class=\"hue-doc-codeph\">COMPUTE STATS</span> requires the\n      same permissions as the underlying <span class=\"hue-doc-codeph\">SELECT</span> queries it runs\n      against the table.)\n    </p><p id=\"kudu_blurb\"><b>Kudu considerations:</b></p><p>\n      The <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement applies to Kudu tables.\n      Impala only computes the number of rows for the whole Kudu table,\n      partition level row counts are not available.\n    </p><p id=\"related_info\"><b>Related information:</b></p><p><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_drop_stats.xml\" data-doc-anchor-id=\"drop_stats\">DROP STATS Statement</a>, <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_show.xml\" data-doc-anchor-id=\"show_table_stats\">SHOW TABLE STATS Statement</a>,\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_show.xml\" data-doc-anchor-id=\"show_column_stats\">SHOW COLUMN STATS Statement</a>, <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_perf_stats.xml\" data-doc-anchor-id=\"perf_stats\">Table and Column Statistics</a></p></div></div></div>","title":"COMPUTE STATS Statement"}