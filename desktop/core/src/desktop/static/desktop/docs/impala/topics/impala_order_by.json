{"body":"<div><div id=\"order_by\"><div class=\"hue-doc-title\">ORDER BY Clause</div><div><p> The <span class=\"hue-doc-codeph\">ORDER BY</span> clause of a <span class=\"hue-doc-codeph\">SELECT</span>\n      statement sorts the result set based on the values from one or more\n      columns. </p><p> First, data is sorted locally by each <span class=\"hue-doc-codeph\">impalad</span> daemon,\n      then streamed to the coordinator daemon, which merges the sorted result\n      sets. For distributed queries, this is a relatively expensive operation\n      and can require more memory capacity than a query without <span class=\"hue-doc-codeph\">ORDER\n        BY</span>. Even if the query takes approximately the same time to\n      finish with or without the <span class=\"hue-doc-codeph\">ORDER BY</span> clause, subjectively\n      it can appear slower because no results are available until all processing\n      is finished, rather than results coming back gradually as rows matching\n      the <span class=\"hue-doc-codeph\">WHERE</span> clause are found. Therefore, if you only need\n      the first N results from the sorted result set, also include the\n        <span class=\"hue-doc-codeph\">LIMIT</span> clause, which reduces network overhead and the\n      memory requirement on the coordinator node. </p><p id=\"syntax_blurb\"><b>Syntax:</b></p><p>\n      The full syntax for the <span class=\"hue-doc-codeph\">ORDER BY</span> clause is:\n    </p><div class=\"hue-doc-codeblock\">ORDER BY <span class=\"hue-doc-varname\">col_ref</span> [, <span class=\"hue-doc-varname\">col_ref</span> ...] [ASC | DESC] [NULLS FIRST | NULLS LAST]\n\ncol_ref ::= <span class=\"hue-doc-varname\">column_name</span> | <span class=\"hue-doc-varname\">integer_literal</span></div><p>\n      Although the most common usage is <span class=\"hue-doc-codeph\">ORDER BY <span class=\"hue-doc-varname\">column_name</span></span>, you can also\n      specify <span class=\"hue-doc-codeph\">ORDER BY 1</span> to sort by the first column of the result set, <span class=\"hue-doc-codeph\">ORDER BY\n      2</span> to sort by the second column, and so on. The number must be a numeric literal, not some other kind\n      of constant expression. (If the argument is some other expression, even a <span class=\"hue-doc-codeph\">STRING</span> value, the\n      query succeeds but the order of results is undefined.)\n    </p><p><span class=\"hue-doc-codeph\">ORDER BY <span class=\"hue-doc-varname\">column_number</span></span> can only be used when the query explicitly lists\n      the columns in the <span class=\"hue-doc-codeph\">SELECT</span> list, not with <span class=\"hue-doc-codeph\">SELECT *</span> queries.\n    </p><p><b>Ascending and descending sorts:</b></p><p>\n      The default sort order (the same as using the <span class=\"hue-doc-codeph\">ASC</span> keyword) puts the smallest values at the\n      start of the result set, and the largest values at the end. Specifying the <span class=\"hue-doc-codeph\">DESC</span> keyword\n      reverses that order.\n    </p><p><b>Sort order for NULL values:</b></p><p>\n      See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_literals.xml\" data-doc-anchor-id=\"null\">NULL</a> for details about how <span class=\"hue-doc-codeph\">NULL</span> values are positioned\n      in the sorted result set, and how to use the <span class=\"hue-doc-codeph\">NULLS FIRST</span> and <span class=\"hue-doc-codeph\">NULLS LAST</span>\n      clauses. (The sort position for <span class=\"hue-doc-codeph\">NULL</span> values in <span class=\"hue-doc-codeph\">ORDER BY ... DESC</span> queries is\n      changed in Impala 1.2.1 and higher to be more standards-compliant, and the <span class=\"hue-doc-codeph\">NULLS FIRST</span> and\n      <span class=\"hue-doc-codeph\">NULLS LAST</span> keywords are new in Impala 1.2.1.)\n    </p><p id=\"order_by_limit\">\n        Prior to Impala 1.4.0, Impala required any query including an\n        <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_order_by.xml\" data-doc-anchor-id=\"order_by\">ORDER BY</a></span>\n        clause to also use a\n        <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_limit.xml\" data-doc-anchor-id=\"limit\">LIMIT</a></span> clause. In\n        Impala 1.4.0 and higher, the <span class=\"hue-doc-codeph\">LIMIT</span> clause is optional for <span class=\"hue-doc-codeph\">ORDER\n        BY</span> queries. In cases where sorting a huge result set requires enough memory to\n        exceed the Impala memory limit for a particular executor Impala daemon, Impala\n        automatically uses a temporary disk work area to perform the sort operation.\n      </p><p id=\"complex_types_blurb\"><b>Complex type considerations:</b></p><p>\n      In Impala 2.3 and higher, the complex data types <span class=\"hue-doc-codeph\">STRUCT</span>,\n      <span class=\"hue-doc-codeph\">ARRAY</span>, and <span class=\"hue-doc-codeph\">MAP</span> are available. These columns cannot\n      be referenced directly in the <span class=\"hue-doc-codeph\">ORDER BY</span> clause.\n      When you query a complex type column, you use join notation to <q>unpack</q> the elements\n      of the complex type, and within the join query you can include an <span class=\"hue-doc-codeph\">ORDER BY</span>\n      clause to control the order in the result set of the scalar elements from the complex type.\n      See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_complex_types.xml\" data-doc-anchor-id=\"complex_types\">Complex Types (Impala 2.3 or higher only)</a> for details about Impala support for complex types.\n    </p><p>\n      The following query shows how a complex type column cannot be directly used in an <span class=\"hue-doc-codeph\">ORDER BY</span> clause:\n    </p><div class=\"hue-doc-codeblock\">CREATE TABLE games (id BIGINT, score ARRAY &lt;BIGINT&gt;) STORED AS PARQUET;\n...use LOAD DATA to load externally created Parquet files into the table...\nSELECT id FROM games ORDER BY score DESC;\nERROR: AnalysisException: ORDER BY expression 'score' with complex type 'ARRAY&lt;BIGINT&gt;' is not supported.\n</div><p id=\"example_blurb\"><b>Examples:</b></p><p> The following query retrieves the user ID and score, only for scores\n      greater than one million, with the highest scores for each user listed\n      first. Because the individual array elements are now represented as\n      separate rows in the result set, they can be used in the <span class=\"hue-doc-codeph\">ORDER\n        BY</span> clause, referenced using the <span class=\"hue-doc-codeph\">ITEM</span>\n      pseudo-column that represents each array element. </p><div class=\"hue-doc-codeblock\">SELECT id, item FROM games, games.score\n  WHERE item &gt; 1000000\nORDER BY id, item desc;\n</div><p>\n      The following queries use similar <span class=\"hue-doc-codeph\">ORDER BY</span> techniques with variations of the <span class=\"hue-doc-codeph\">GAMES</span>\n      table, where the complex type is an <span class=\"hue-doc-codeph\">ARRAY</span> containing <span class=\"hue-doc-codeph\">STRUCT</span> or <span class=\"hue-doc-codeph\">MAP</span>\n      elements to represent additional details about each game that was played.\n      For an array of structures, the fields of the structure are referenced as <span class=\"hue-doc-codeph\">ITEM.<span class=\"hue-doc-varname\">field_name</span></span>.\n      For an array of maps, the keys and values within each array element are referenced as <span class=\"hue-doc-codeph\">ITEM.KEY</span>\n      and <span class=\"hue-doc-codeph\">ITEM.VALUE</span>.\n    </p><div class=\"hue-doc-codeblock\">CREATE TABLE games2 (id BIGINT, play array &lt; struct &lt;game_name: string, score: BIGINT, high_score: boolean&gt; &gt;) STORED AS PARQUET\n...use LOAD DATA to load externally created Parquet files into the table...\nSELECT id, item.game_name, item.score FROM games2, games2.play\n  WHERE item.score &gt; 1000000\nORDER BY id, item.score DESC;\n\nCREATE TABLE games3 (id BIGINT, play ARRAY &lt; MAP &lt;STRING, BIGINT&gt; &gt;) STORED AS PARQUET;\n...use LOAD DATA to load externally created Parquet files into the table...\nSELECT id, info.key AS k, info.value AS v from games3, games3.play AS plays, games3.play.item AS info\n  WHERE info.KEY = 'score' AND info.VALUE &gt; 1000000\nORDER BY id, info.value desc;\n</div><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p> Although the <span class=\"hue-doc-codeph\">LIMIT</span> clause is now optional on\n        <span class=\"hue-doc-codeph\">ORDER BY</span> queries, if your query only needs some number\n      of rows that you can predict in advance, use the <span class=\"hue-doc-codeph\">LIMIT</span>\n      clause to reduce unnecessary processing. For example, if the query has a\n      clause <span class=\"hue-doc-codeph\">LIMIT 10</span>, each executor Impala daemon sorts its\n      portion of the relevant result set and only returns 10 rows to the\n      coordinator node. The coordinator node picks the 10 highest or lowest row\n      values out of this small intermediate result set. </p><p>\n      If an <span class=\"hue-doc-codeph\">ORDER BY</span> clause is applied to an early phase of query processing, such as a subquery\n      or a view definition, Impala ignores the <span class=\"hue-doc-codeph\">ORDER BY</span> clause. To get ordered results from a\n      subquery or view, apply an <span class=\"hue-doc-codeph\">ORDER BY</span> clause to the outermost or final <span class=\"hue-doc-codeph\">SELECT</span>\n      level.\n    </p><p><span class=\"hue-doc-codeph\">ORDER BY</span> is often used in combination with <span class=\"hue-doc-codeph\">LIMIT</span> to perform <q>top-N</q>\n      queries:\n    </p><div class=\"hue-doc-codeblock\">SELECT user_id AS \"Top 10 Visitors\", SUM(page_views) FROM web_stats\n  GROUP BY page_views, user_id\n  ORDER BY SUM(page_views) DESC LIMIT 10;\n</div><p><span class=\"hue-doc-codeph\">ORDER BY</span> is sometimes used in combination with <span class=\"hue-doc-codeph\">OFFSET</span> and\n      <span class=\"hue-doc-codeph\">LIMIT</span> to paginate query results, although it is relatively inefficient to issue multiple\n      queries like this against the large tables typically used with Impala:\n    </p><div class=\"hue-doc-codeblock\">SELECT page_title AS \"Page 1 of search results\", page_url FROM search_content\n  WHERE LOWER(page_title) LIKE '%game%')\n  ORDER BY page_title LIMIT 10 OFFSET 0;\nSELECT page_title AS \"Page 2 of search results\", page_url FROM search_content\n  WHERE LOWER(page_title) LIKE '%game%')\n  ORDER BY page_title LIMIT 10 OFFSET 10;\nSELECT page_title AS \"Page 3 of search results\", page_url FROM search_content\n  WHERE LOWER(page_title) LIKE '%game%')\n  ORDER BY page_title LIMIT 10 OFFSET 20;\n</div><p id=\"internals_blurb\"><b>Internal details:</b></p><p> Impala sorts the intermediate results of an <span class=\"hue-doc-codeph\">ORDER BY</span>\n      clause in memory whenever practical. In a cluster of N executor Impala\n      daemons, each daemon sorts roughly 1/Nth of the result set, the exact\n      proportion varying depending on how the data matching the query is\n      distributed in HDFS. </p><p> If the size of the sorted intermediate result set on any executor Impala\n      daemon would cause the query to exceed the Impala memory limit, Impala\n      sorts as much as practical in memory, then writes partially sorted data to\n      disk. (This technique is known in industry terminology as <q>external\n        sorting</q> and <q>spilling to disk</q>.) As each 8 MB batch of data is\n      written to disk, Impala frees the corresponding memory to sort a new 8 MB\n      batch of data. When all the data has been processed, a final merge sort\n      operation is performed to correctly order the in-memory and on-disk\n      results as the result set is transmitted back to the coordinator node.\n      When external sorting becomes necessary, Impala requires approximately 60\n      MB of RAM at a minimum for the buffers needed to read, write, and sort the\n      intermediate results. If more RAM is available on the Impala daemon,\n      Impala will use the additional RAM to minimize the amount of disk I/O for\n      sorting. </p><p> This external sort technique is used as appropriate on each Impala\n      daemon (possibly including the coordinator node) to sort the portion of\n      the result set that is processed on that node. When the sorted\n      intermediate results are sent back to the coordinator node to produce the\n      final result set, the coordinator node uses a merge sort technique to\n      produce a final sorted result set without using any extra resources on the\n      coordinator node. </p><p><b>Configuration for disk usage:</b></p><p id=\"order_by_scratch_dir\"> By default, intermediate files used during\n        large sort, join, aggregation, or analytic function operations are\n        stored in the directory <span class=\"hue-doc-filepath\">/tmp/impala-scratch</span>, and\n        these intermediate files are removed when the operation finishes. You\n        can specify a different location by starting the\n          <span class=\"hue-doc-cmdname\">impalad</span> daemon with the\n            <span class=\"hue-doc-codeph\">‑‑scratch_dirs=\"<span class=\"hue-doc-varname\">path_to_directory</span>\"</span>\n        configuration option. </p><p id=\"insert_sort_blurb\"><b>Sorting considerations:</b> Although you can specify an <span class=\"hue-doc-codeph\">ORDER BY</span>\n        clause in an <span class=\"hue-doc-codeph\">INSERT ... SELECT</span> statement, any <span class=\"hue-doc-codeph\">ORDER BY</span>\n        clause is ignored and the results are not necessarily sorted. An <span class=\"hue-doc-codeph\">INSERT ...\n        SELECT</span> operation potentially creates many different data files, prepared by\n        different executor Impala daemons, and therefore the notion of the data being stored in\n        sorted order is impractical.\n      </p><p id=\"order_by_view_restriction\">\n        An <span class=\"hue-doc-codeph\">ORDER BY</span> clause without an additional <span class=\"hue-doc-codeph\">LIMIT</span> clause\n        is ignored in any view definition. If you need to sort the entire result set from a\n        view, use an <span class=\"hue-doc-codeph\">ORDER BY</span> clause in the <span class=\"hue-doc-codeph\">SELECT</span> statement\n        that queries the view. You can still make a simple <q>top 10</q> report by combining the\n        <span class=\"hue-doc-codeph\">ORDER BY</span> and <span class=\"hue-doc-codeph\">LIMIT</span> clauses in the same view\n        definition:\n<div class=\"hue-doc-codeblock\">[localhost:21000] &gt; create table unsorted (x bigint);\n[localhost:21000] &gt; insert into unsorted values (1), (9), (3), (7), (5), (8), (4), (6), (2);\n[localhost:21000] &gt; create view sorted_view as select x from unsorted order by x;\n[localhost:21000] &gt; select x from sorted_view; -- ORDER BY clause in view has no effect.\n+---+\n| x |\n+---+\n| 1 |\n| 9 |\n| 3 |\n| 7 |\n| 5 |\n| 8 |\n| 4 |\n| 6 |\n| 2 |\n+---+\n[localhost:21000] &gt; select x from sorted_view order by x; -- View query requires ORDER BY at outermost level.\n+---+\n| x |\n+---+\n| 1 |\n| 2 |\n| 3 |\n| 4 |\n| 5 |\n| 6 |\n| 7 |\n| 8 |\n| 9 |\n+---+\n[localhost:21000] &gt; create view top_3_view as select x from unsorted order by x limit 3;\n[localhost:21000] &gt; select x from top_3_view; -- ORDER BY and LIMIT together in view definition are preserved.\n+---+\n| x |\n+---+\n| 1 |\n| 2 |\n| 3 |\n+---+\n</div></p><p>\n      With the lifting of the requirement to include a <span class=\"hue-doc-codeph\">LIMIT</span> clause in every <span class=\"hue-doc-codeph\">ORDER\n      BY</span> query (in Impala 1.4 and higher):\n    </p><ul><li><p> Now the use of scratch disk space raises the possibility of an\n            <q>out of disk space</q> error on a particular Impala daemon, as\n          opposed to the previous possibility of an <q>out of memory</q> error.\n          Make sure to keep at least 1 GB free on the filesystem used for\n          temporary sorting work. </p></li></ul><p id=\"null_sorting_change\">\n        In Impala 1.2.1 and higher, all <span class=\"hue-doc-codeph\">NULL</span> values come at the end of the\n        result set for <span class=\"hue-doc-codeph\">ORDER BY ... ASC</span> queries, and at the beginning of the\n        result set for <span class=\"hue-doc-codeph\">ORDER BY ... DESC</span> queries. In effect,\n        <span class=\"hue-doc-codeph\">NULL</span> is considered greater than all other values for sorting purposes.\n        The original Impala behavior always put <span class=\"hue-doc-codeph\">NULL</span> values at the end, even\n        for <span class=\"hue-doc-codeph\">ORDER BY ... DESC</span> queries. The new behavior in Impala 1.2.1 makes\n        Impala more compatible with other popular database systems. In Impala 1.2.1 and higher,\n        you can override or specify the sorting behavior for <span class=\"hue-doc-codeph\">NULL</span> by adding the\n        clause <span class=\"hue-doc-codeph\">NULLS FIRST</span> or <span class=\"hue-doc-codeph\">NULLS LAST</span> at the end of the\n        <span class=\"hue-doc-codeph\">ORDER BY</span> clause.\n      </p><div class=\"hue-doc-codeblock\">[localhost:21000] &gt; create table numbers (x int);\n[localhost:21000] &gt; insert into numbers values (1), (null), (2), (null), (3);\n[localhost:21000] &gt; select x from numbers order by x nulls first;\n+------+\n| x    |\n+------+\n| NULL |\n| NULL |\n| 1    |\n| 2    |\n| 3    |\n+------+\n[localhost:21000] &gt; select x from numbers order by x desc nulls first;\n+------+\n| x    |\n+------+\n| NULL |\n| NULL |\n| 3    |\n| 2    |\n| 1    |\n+------+\n[localhost:21000] &gt; select x from numbers order by x nulls last;\n+------+\n| x    |\n+------+\n| 1    |\n| 2    |\n| 3    |\n| NULL |\n| NULL |\n+------+\n[localhost:21000] &gt; select x from numbers order by x desc nulls last;\n+------+\n| x    |\n+------+\n| 3    |\n| 2    |\n| 1    |\n| NULL |\n| NULL |\n+------+\n</div><p id=\"related_info\"><b>Related information:</b></p><p>\n      See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_select.xml\" data-doc-anchor-id=\"select\">SELECT Statement</a> for further examples of queries with the <span class=\"hue-doc-codeph\">ORDER\n      BY</span> clause.\n    </p><p>\n      Analytic functions use the <span class=\"hue-doc-codeph\">ORDER BY</span> clause in a different context to define the sequence in\n      which rows are analyzed. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_analytic_functions.xml\" data-doc-anchor-id=\"analytic_functions\">Impala Analytic Functions</a> for details.\n    </p></div></div></div>","title":"ORDER BY Clause"}