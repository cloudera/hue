{"body":"<div><div id=\"datetime_functions\"><div class=\"hue-doc-title\">Impala Date and Time Functions</div><div><p>\n      The underlying Impala data type for date and time data is\n      <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP</a></span>, which has\n      both a date and a time portion. Functions that extract a single field, such as\n      <span class=\"hue-doc-codeph\">hour()</span> or <span class=\"hue-doc-codeph\">minute()</span>, typically return an integer value.\n      Functions that format the date portion, such as <span class=\"hue-doc-codeph\">date_add()</span> or\n      <span class=\"hue-doc-codeph\">to_date()</span>, typically return a string value.\n    </p><p>\n      You can also adjust a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value by adding or subtracting an\n      <span class=\"hue-doc-codeph\">INTERVAL</span> expression. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a>\n      for details. <span class=\"hue-doc-codeph\">INTERVAL</span> expressions are also allowed as the second argument\n      for the <span class=\"hue-doc-codeph\">date_add()</span> and <span class=\"hue-doc-codeph\">date_sub()</span> functions, rather than\n      integers.\n    </p><p>\n      Some of these functions are affected by the setting of the\n      <span class=\"hue-doc-codeph\">‑‑use_local_tz_for_unix_timestamp_conversions</span> startup flag\n      for the <span class=\"hue-doc-cmdname\">impalad</span> daemon. This setting is off by default, meaning that\n      functions such as <span class=\"hue-doc-codeph\">from_unixtime()</span> and <span class=\"hue-doc-codeph\">unix_timestamp()</span>\n      consider the input values to always represent the UTC time zone. This setting also applies\n      when you <span class=\"hue-doc-codeph\">CAST()</span> a <span class=\"hue-doc-codeph\">BIGINT</span> value to\n      <span class=\"hue-doc-codeph\">TIMESTAMP</span>, or a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value to\n      <span class=\"hue-doc-codeph\">BIGINT</span>. When this setting is enabled, these functions and operations\n      convert to and from values representing the local time zone. See\n      <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a> for details about how Impala handles\n      time zone considerations for the <span class=\"hue-doc-codeph\">TIMESTAMP</span> data type.\n    </p><p><b>Function reference:</b></p><p>\n      Impala supports the following data and time functions:\n    </p><ul><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/add_months\">ADD_MONTHS</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/adddate\">ADDDATE</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/current_timestamp\">CURRENT_TIMESTAMP</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/date_add\">DATE_ADD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/date_part\">DATE_PART</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/date_sub\">DATE_SUB</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/date_trunc\">DATE_TRUNC</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/datediff\">DATEDIFF</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/day\">DAY</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/dayname\">DAYNAME</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/dayofweek\">DAYOFWEEK</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/dayofyear\">DAYOFYEAR</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/days_add\">DAYS_ADD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/days_sub\">DAYS_SUB</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/extract\">EXTRACT</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/from_timestamp\">FROM_TIMESTAMP</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/from_unixtime\">FROM_UNIXTIME</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/from_utc_timestamp\">FROM_UTC_TIMESTAMP</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/hour\">HOUR</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/hours_add\">HOURS_ADD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/hours_sub\">HOURS_SUB</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/int_months_between\">INT_MONTHS_BETWEEN</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/microseconds_add\">MICROSECONDS_ADD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/microseconds_sub\">MICROSECONDS_SUB</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/millisecond\">MILLISECOND</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/milliseconds_add\">MILLISECONDS_ADD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/milliseconds_sub\">MILLISECONDS_SUB</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/minute\">MINUTE</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/minutes_add\">MINUTES_ADD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/minutes_sub\">MINUTES_SUB</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/month\">MONTH</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/month\">MONTHNAME</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/monthname\">MONTHS_ADD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/months_between\">MONTHS_BETWEEN</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/months_sub\">MONTHS_SUB</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/nanoseconds_add\">NANOSECONDS_ADD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/nanoseconds_sub\">NANOSECONDS_SUB</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/next_day\">NEXT_DAY</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/now\">NOW</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/quarter\">QUARTER</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/second\">SECOND</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/seconds_add\">SECONDS_ADD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/seconds_sub\">SECONDS_SUB</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/subdate\">SUBDATE</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/timeofday\">TIMEOFDAY</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/timestamp_cmp\">TIMESTAMP_CMP</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/to_date\">TO_DATE</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/to_timestamp\">TO_TIMESTAMP</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/to_utc_timestamp\">TO_UTC_TIMESTAMP</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/trunc\">TRUNC</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/unix_timestamp\">UNIX_TIMESTAMP</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/utc_timestamp\">UTC_TIMESTAMP</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/weekofyear\">WEEKOFYEAR</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/weeks_add\">WEEKS_ADD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/weeks_sub\">WEEKS_SUB</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/year\">YEAR</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/years_add\">YEARS_ADD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/years_sub\">YEARS_SUB</a></li></ul><dl><dt id=\"add_months\">\n          ADD_MONTHS(TIMESTAMP date, INT months), ADD_MONTHS(TIMESTAMP date, BIGINT months)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time plus some number of months.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            Same as\n            <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/months_add\">MONTHS_ADD()</a></span>.\n            Available in Impala 1.4 and higher. For compatibility when porting code with vendor\n            extensions.\n          </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following examples demonstrate adding months to construct the same day of the\n            month in a different month; how if the current day of the month does not exist in\n            the target month, the last day of that month is substituted; and how a negative\n            argument produces a return value from a previous month.\n          </p><div class=\"hue-doc-codeblock\">select now(), add_months(now(), 2);\n+-------------------------------+-------------------------------+\n| now()                         | add_months(now(), 2)          |\n+-------------------------------+-------------------------------+\n| 2016-05-31 10:47:00.429109000 | 2016-07-31 10:47:00.429109000 |\n+-------------------------------+-------------------------------+\n\nselect now(), add_months(now(), 1);\n+-------------------------------+-------------------------------+\n| now()                         | add_months(now(), 1)          |\n+-------------------------------+-------------------------------+\n| 2016-05-31 10:47:14.540226000 | 2016-06-30 10:47:14.540226000 |\n+-------------------------------+-------------------------------+\n\nselect now(), add_months(now(), -1);\n+-------------------------------+-------------------------------+\n| now()                         | add_months(now(), -1)         |\n+-------------------------------+-------------------------------+\n| 2016-05-31 10:47:31.732298000 | 2016-04-30 10:47:31.732298000 |\n+-------------------------------+-------------------------------+\n</div></dd><dt id=\"adddate\">\n          ADDDATE(TIMESTAMP startdate, INT days), ADDDATE(TIMESTAMP startdate, BIGINT days)\n        </dt><dd><b>Purpose:</b> Adds a specified number of days to a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value.\n          Similar to <span class=\"hue-doc-codeph\">DATE_ADD()</span>, but starts with an actual\n          <span class=\"hue-doc-codeph\">TIMESTAMP</span> value instead of a string that is converted to a\n          <span class=\"hue-doc-codeph\">TIMESTAMP</span>.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following examples show how to add a number of days to a\n            <span class=\"hue-doc-codeph\">TIMESTAMP</span>. The number of days can also be negative, which gives the\n            same effect as the <span class=\"hue-doc-codeph\">subdate()</span> function.\n          </p><div class=\"hue-doc-codeblock\">select now() as right_now, adddate(now(), 30) as now_plus_30;\n+-------------------------------+-------------------------------+\n| right_now                     | now_plus_30                   |\n+-------------------------------+-------------------------------+\n| 2016-05-20 10:23:08.640111000 | 2016-06-19 10:23:08.640111000 |\n+-------------------------------+-------------------------------+\n\nselect now() as right_now, adddate(now(), -15) as now_minus_15;\n+-------------------------------+-------------------------------+\n| right_now                     | now_minus_15                  |\n+-------------------------------+-------------------------------+\n| 2016-05-20 10:23:38.214064000 | 2016-05-05 10:23:38.214064000 |\n+-------------------------------+-------------------------------+\n</div></dd><dt id=\"current_timestamp\">\n          CURRENT_TIMESTAMP()\n        </dt><dd><b>Purpose:</b> Alias for the <span class=\"hue-doc-codeph\">NOW()</span> function.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now(), current_timestamp();\n+-------------------------------+-------------------------------+\n| now()                         | current_timestamp()           |\n+-------------------------------+-------------------------------+\n| 2016-05-19 16:10:14.237849000 | 2016-05-19 16:10:14.237849000 |\n+-------------------------------+-------------------------------+\n\nselect current_timestamp() as right_now,\n  current_timestamp() + interval 3 hours as in_three_hours;\n+-------------------------------+-------------------------------+\n| right_now                     | in_three_hours                |\n+-------------------------------+-------------------------------+\n| 2016-05-19 16:13:20.017117000 | 2016-05-19 19:13:20.017117000 |\n+-------------------------------+-------------------------------+\n</div></dd><dt id=\"date_add\">\n          DATE_ADD(TIMESTAMP startdate, INT days), DATE_ADD(TIMESTAMP startdate,\n          interval_expression)\n        </dt><dd><b>Purpose:</b> Adds a specified number of days to a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value.\n\n          With an <span class=\"hue-doc-codeph\">INTERVAL</span> expression as the second argument, you can calculate\n          a delta value using other units such as weeks, years, hours, seconds, and so on; see\n          <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a> for details.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following example shows the simplest usage, of adding a specified number of days\n            to a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value:\n          </p><div class=\"hue-doc-codeblock\">select now() as right_now, date_add(now(), 7) as next_week;\n+-------------------------------+-------------------------------+\n| right_now                     | next_week                     |\n+-------------------------------+-------------------------------+\n| 2016-05-20 11:03:48.687055000 | 2016-05-27 11:03:48.687055000 |\n+-------------------------------+-------------------------------+\n</div><p>\n            The following examples show the shorthand notation of an <span class=\"hue-doc-codeph\">INTERVAL</span>\n            expression, instead of specifying the precise number of days. The\n            <span class=\"hue-doc-codeph\">INTERVAL</span> notation also lets you work with units smaller than a\n            single day.\n          </p><div class=\"hue-doc-codeblock\">select now() as right_now, date_add(now(), interval 3 weeks) as in_3_weeks;\n+-------------------------------+-------------------------------+\n| right_now                     | in_3_weeks                    |\n+-------------------------------+-------------------------------+\n| 2016-05-20 11:05:39.173331000 | 2016-06-10 11:05:39.173331000 |\n+-------------------------------+-------------------------------+\n\nselect now() as right_now, date_add(now(), interval 6 hours) as in_6_hours;\n+-------------------------------+-------------------------------+\n| right_now                     | in_6_hours                    |\n+-------------------------------+-------------------------------+\n| 2016-05-20 11:13:51.492536000 | 2016-05-20 17:13:51.492536000 |\n+-------------------------------+-------------------------------+\n</div><p>\n            Like all date/time functions that deal with months, <span class=\"hue-doc-codeph\">date_add()</span>\n            handles nonexistent dates past the end of a month by setting the date to the last\n            day of the month. The following example shows how the nonexistent date April 31st is\n            normalized to April 30th:\n          </p><div class=\"hue-doc-codeblock\">select date_add(cast('2016-01-31' as timestamp), interval 3 months) as 'april_31st';\n+---------------------+\n| april_31st          |\n+---------------------+\n| 2016-04-30 00:00:00 |\n+---------------------+\n</div></dd><dt id=\"date_part\">\n          DATE_PART(STRING part, TIMESTAMP date)\n        </dt><dd><b>Purpose:</b> Similar to\n          <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/extract\"><span class=\"hue-doc-codeph\">EXTRACT()</span></a>,\n          with the argument order reversed. Supports the same date and time units as\n          <span class=\"hue-doc-codeph\">EXTRACT()</span>. For compatibility with SQL code containing vendor\n          extensions.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">BIGINT</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select date_part('year',now()) as current_year;\n+--------------+\n| current_year |\n+--------------+\n| 2016         |\n+--------------+\n\nselect date_part('hour',now()) as hour_of_day;\n+-------------+\n| hour_of_day |\n+-------------+\n| 11          |\n+-------------+\n</div></dd><dt id=\"date_sub\">\n          DATE_SUB(TIMESTAMP startdate, INT days), DATE_SUB(TIMESTAMP startdate,\n          interval_expression)\n        </dt><dd><b>Purpose:</b> Subtracts a specified number of days from a <span class=\"hue-doc-codeph\">TIMESTAMP</span>\n          value.\n\n          With an <span class=\"hue-doc-codeph\">INTERVAL</span> expression as the second argument, you can calculate\n          a delta value using other units such as weeks, years, hours, seconds, and so on; see\n          <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a> for details.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following example shows the simplest usage, of subtracting a specified number of\n            days from a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value:\n          </p><div class=\"hue-doc-codeblock\">select now() as right_now, date_sub(now(), 7) as last_week;\n+-------------------------------+-------------------------------+\n| right_now                     | last_week                     |\n+-------------------------------+-------------------------------+\n| 2016-05-20 11:21:30.491011000 | 2016-05-13 11:21:30.491011000 |\n+-------------------------------+-------------------------------+\n</div><p>\n            The following examples show the shorthand notation of an <span class=\"hue-doc-codeph\">INTERVAL</span>\n            expression, instead of specifying the precise number of days. The\n            <span class=\"hue-doc-codeph\">INTERVAL</span> notation also lets you work with units smaller than a\n            single day.\n          </p><div class=\"hue-doc-codeblock\">select now() as right_now, date_sub(now(), interval 3 weeks) as 3_weeks_ago;\n+-------------------------------+-------------------------------+\n| right_now                     | 3_weeks_ago                   |\n+-------------------------------+-------------------------------+\n| 2016-05-20 11:23:05.176953000 | 2016-04-29 11:23:05.176953000 |\n+-------------------------------+-------------------------------+\n\nselect now() as right_now, date_sub(now(), interval 6 hours) as 6_hours_ago;\n+-------------------------------+-------------------------------+\n| right_now                     | 6_hours_ago                   |\n+-------------------------------+-------------------------------+\n| 2016-05-20 11:23:35.439631000 | 2016-05-20 05:23:35.439631000 |\n+-------------------------------+-------------------------------+\n</div><p>\n            Like all date/time functions that deal with months, <span class=\"hue-doc-codeph\">date_add()</span>\n            handles nonexistent dates past the end of a month by setting the date to the last\n            day of the month. The following example shows how the nonexistent date April 31st is\n            normalized to April 30th:\n          </p><div class=\"hue-doc-codeblock\">select date_sub(cast('2016-05-31' as timestamp), interval 1 months) as 'april_31st';\n+---------------------+\n| april_31st          |\n+---------------------+\n| 2016-04-30 00:00:00 |\n+---------------------+\n</div></dd><dt id=\"date_trunc\">\n          DATE_TRUNC(STRING unit, TIMESTAMP ts)\n        </dt><dd><b>Purpose:</b> Truncates a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value to the specified\n          precision.\n          <p><b>Unit argument:</b> The <span class=\"hue-doc-codeph\">unit</span> argument value for truncating\n            <span class=\"hue-doc-codeph\">TIMESTAMP</span> values is not case-sensitive. This argument string can be\n            one of:\n          </p><ul><li>\n              microseconds\n            </li><li>\n              milliseconds\n            </li><li>\n              second\n            </li><li>\n              minute\n            </li><li>\n              hour\n            </li><li>\n              day\n            </li><li>\n              week\n            </li><li>\n              month\n            </li><li>\n              year\n            </li><li>\n              decade\n            </li><li>\n              century\n            </li><li>\n              millennium\n            </li></ul><p>\n            For example, calling <span class=\"hue-doc-codeph\">DATE_TRUNC('hour',ts)</span> truncates\n            <span class=\"hue-doc-codeph\">ts</span> to the beginning of the corresponding hour, with all minutes,\n            seconds, milliseconds, and so on set to zero. Calling\n            <span class=\"hue-doc-codeph\">DATE_TRUNC('milliseconds',ts)</span> truncates <span class=\"hue-doc-codeph\">ts</span> to the\n            beginning of the corresponding millisecond, with all microseconds and nanoseconds\n            set to zero.\n          </p><div class=\"hue-doc-note\">            The sub-second units are specified in plural form. All units representing one second\n            or more are specified in singular form.\n          </div><p id=\"added_in_2110\"><b>Added in:</b>Impala 2.11.0</p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            Although this function is similar to calling <span class=\"hue-doc-codeph\">TRUNC()</span> with a\n            <span class=\"hue-doc-codeph\">TIMESTAMP</span> argument, the order of arguments and the recognized units\n            are different between <span class=\"hue-doc-codeph\">TRUNC()</span> and <span class=\"hue-doc-codeph\">DATE_TRUNC()</span>.\n            Therefore, these functions are not interchangeable.\n          </p><p>\n            This function is typically used in <span class=\"hue-doc-codeph\">GROUP BY</span> queries to aggregate\n            results from the same hour, day, week, month, quarter, and so on. You can also use\n            this function in an <span class=\"hue-doc-codeph\">INSERT ... SELECT</span> into a partitioned table to\n            divide <span class=\"hue-doc-codeph\">TIMESTAMP</span> values into the correct partition.\n          </p><p>\n            Because the return value is a <span class=\"hue-doc-codeph\">TIMESTAMP</span>, if you cast the result of\n            <span class=\"hue-doc-codeph\">DATE_TRUNC()</span> to <span class=\"hue-doc-codeph\">STRING</span>, you will often see\n            zeroed-out portions such as <span class=\"hue-doc-codeph\">00:00:00</span> in the time field. If you only\n            need the individual units such as hour, day, month, or year, use the\n            <span class=\"hue-doc-codeph\">EXTRACT()</span> function instead. If you need the individual units from a\n            truncated <span class=\"hue-doc-codeph\">TIMESTAMP</span> value, run the <span class=\"hue-doc-codeph\">TRUNCATE()</span>\n            function on the original value, then run <span class=\"hue-doc-codeph\">EXTRACT()</span> on the result.\n          </p><p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following examples show how to call <span class=\"hue-doc-codeph\">DATE_TRUNC()</span> with different\n            unit values:\n          </p><div class=\"hue-doc-codeblock\">select now(), date_trunc('second', now());\n+-------------------------------+-----------------------------------+\n| now()                         | date_trunc('second', now())       |\n+-------------------------------+-----------------------------------+\n| 2017-12-05 13:58:04.565403000 | 2017-12-05 13:58:04               |\n+-------------------------------+-----------------------------------+\n\nselect now(), date_trunc('hour', now());\n+-------------------------------+---------------------------+\n| now()                         | date_trunc('hour', now()) |\n+-------------------------------+---------------------------+\n| 2017-12-05 13:59:01.884459000 | 2017-12-05 13:00:00       |\n+-------------------------------+---------------------------+\n\nselect now(), date_trunc('millennium', now());\n+-------------------------------+---------------------------------+\n| now()                         | date_trunc('millennium', now()) |\n+-------------------------------+---------------------------------+\n| 2017-12-05 14:00:30.296812000 | 2000-01-01 00:00:00             |\n+-------------------------------+---------------------------------+\n</div></dd><dt id=\"datediff\">\n          DATEDIFF(TIMESTAMP enddate, TIMESTAMP startdate)\n        </dt><dd><b>Purpose:</b> Returns the number of days between two <span class=\"hue-doc-codeph\">TIMESTAMP</span>\n          values.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            If the first argument represents a later date than the second argument, the return\n            value is positive. If both arguments represent the same date, the return value is\n            zero. The time portions of the <span class=\"hue-doc-codeph\">TIMESTAMP</span> values are irrelevant. For\n            example, 11:59 PM on one day and 12:01 on the next day represent a\n            <span class=\"hue-doc-codeph\">datediff()</span> of -1 because the date/time values represent different\n            days, even though the <span class=\"hue-doc-codeph\">TIMESTAMP</span> values differ by only 2 minutes.\n          </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following example shows how comparing a <q>late</q> value with an <q>earlier</q>\n            value produces a positive number. In this case, the result is (365 * 5) + 1, because\n            one of the intervening years is a leap year.\n          </p><div class=\"hue-doc-codeblock\">select now() as right_now, datediff(now() + interval 5 years, now()) as in_5_years;\n+-------------------------------+------------+\n| right_now                     | in_5_years |\n+-------------------------------+------------+\n| 2016-05-20 13:43:55.873826000 | 1826       |\n+-------------------------------+------------+\n</div><p>\n            The following examples show how the return value represent the number of days\n            between the associated dates, regardless of the time portion of each\n            <span class=\"hue-doc-codeph\">TIMESTAMP</span>. For example, different times on the same day produce a\n            <span class=\"hue-doc-codeph\">date_diff()</span> of 0, regardless of which one is earlier or later. But\n            if the arguments represent different dates, <span class=\"hue-doc-codeph\">date_diff()</span> returns a\n            non-zero integer value, regardless of the time portions of the dates.\n          </p><div class=\"hue-doc-codeblock\">select now() as right_now, datediff(now(), now() + interval 4 hours) as in_4_hours;\n+-------------------------------+------------+\n| right_now                     | in_4_hours |\n+-------------------------------+------------+\n| 2016-05-20 13:42:05.302747000 | 0          |\n+-------------------------------+------------+\n\nselect now() as right_now, datediff(now(), now() - interval 4 hours) as 4_hours_ago;\n+-------------------------------+-------------+\n| right_now                     | 4_hours_ago |\n+-------------------------------+-------------+\n| 2016-05-20 13:42:21.134958000 | 0           |\n+-------------------------------+-------------+\n\nselect now() as right_now, datediff(now(), now() + interval 12 hours) as in_12_hours;\n+-------------------------------+-------------+\n| right_now                     | in_12_hours |\n+-------------------------------+-------------+\n| 2016-05-20 13:42:44.765873000 | -1          |\n+-------------------------------+-------------+\n\nselect now() as right_now, datediff(now(), now() - interval 18 hours) as 18_hours_ago;\n+-------------------------------+--------------+\n| right_now                     | 18_hours_ago |\n+-------------------------------+--------------+\n| 2016-05-20 13:54:38.829827000 | 1            |\n+-------------------------------+--------------+\n</div></dd><dt id=\"day\">\n          DAY(TIMESTAMP date), DAYOFMONTH(TIMESTAMP date)\n        </dt><dd><b>Purpose:</b> Returns the day field from the date portion of a\n          <span class=\"hue-doc-codeph\">TIMESTAMP</span>. The value represents the day of the month, therefore is in\n          the range 1-31, or less for months without 31 days.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following examples show how the day value corresponds to the day of the month,\n            resetting back to 1 at the start of each month.\n          </p><div class=\"hue-doc-codeblock\">select now(), day(now());\n+-------------------------------+------------+\n| now()                         | day(now()) |\n+-------------------------------+------------+\n| 2016-05-20 15:01:51.042185000 | 20         |\n+-------------------------------+------------+\n\nselect now() + interval 11 days, day(now() + interval 11 days);\n+-------------------------------+-------------------------------+\n| now() + interval 11 days      | day(now() + interval 11 days) |\n+-------------------------------+-------------------------------+\n| 2016-05-31 15:05:56.843139000 | 31                            |\n+-------------------------------+-------------------------------+\n\nselect now() + interval 12 days, day(now() + interval 12 days);\n+-------------------------------+-------------------------------+\n| now() + interval 12 days      | day(now() + interval 12 days) |\n+-------------------------------+-------------------------------+\n| 2016-06-01 15:06:05.074236000 | 1                             |\n+-------------------------------+-------------------------------+\n</div><p>\n            The following examples show how the day value is <span class=\"hue-doc-codeph\">NULL</span> for\n            nonexistent dates or misformatted date strings.\n          </p><div class=\"hue-doc-codeblock\">-- 2016 is a leap year, so it has a Feb. 29.\nselect day('2016-02-29');\n+-------------------+\n| day('2016-02-29') |\n+-------------------+\n| 29                |\n+-------------------+\n\n-- 2015 is not a leap year, so Feb. 29 is nonexistent.\nselect day('2015-02-29');\n+-------------------+\n| day('2015-02-29') |\n+-------------------+\n| NULL              |\n+-------------------+\n\n-- A string that does not match the expected YYYY-MM-DD format\n-- produces an invalid TIMESTAMP, causing day() to return NULL.\nselect day('2016-02-028');\n+--------------------+\n| day('2016-02-028') |\n+--------------------+\n| NULL               |\n+--------------------+\n</div></dd><dt id=\"dayname\">\n          DAYNAME(TIMESTAMP date)\n        </dt><dd><b>Purpose:</b> Returns the day field from a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value,\n          converted to the string corresponding to that day name. The range of return values is\n          <span class=\"hue-doc-codeph\">'Sunday'</span> to <span class=\"hue-doc-codeph\">'Saturday'</span>. Used in report-generating\n          queries, as an alternative to calling <span class=\"hue-doc-codeph\">DAYOFWEEK()</span> and turning that\n          numeric return value into a string using a <span class=\"hue-doc-codeph\">CASE</span> expression.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following examples show the day name associated with <span class=\"hue-doc-codeph\">TIMESTAMP</span>\n            values representing different days.\n          </p><div class=\"hue-doc-codeblock\">select now() as right_now,\n  dayofweek(now()) as todays_day_of_week,\n  dayname(now()) as todays_day_name;\n+-------------------------------+--------------------+-----------------+\n| right_now                     | todays_day_of_week | todays_day_name |\n+-------------------------------+--------------------+-----------------+\n| 2016-05-31 10:57:03.953670000 | 3                  | Tuesday         |\n+-------------------------------+--------------------+-----------------+\n\nselect now() + interval 1 day as tomorrow,\n  dayname(now() + interval 1 day) as tomorrows_day_name;\n+-------------------------------+--------------------+\n| tomorrow                      | tomorrows_day_name |\n+-------------------------------+--------------------+\n| 2016-06-01 10:58:53.945761000 | Wednesday          |\n+-------------------------------+--------------------+\n</div></dd><dt id=\"dayofweek\">\n          DAYOFWEEK(TIMESTAMP date)\n        </dt><dd><b>Purpose:</b> Returns the day field from the date portion of a\n          <span class=\"hue-doc-codeph\">TIMESTAMP</span>, corresponding to the day of the week. The range of return\n          values is 1 (Sunday) to 7 (Saturday).\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now() as right_now,\n  dayofweek(now()) as todays_day_of_week,\n  dayname(now()) as todays_day_name;\n+-------------------------------+--------------------+-----------------+\n| right_now                     | todays_day_of_week | todays_day_name |\n+-------------------------------+--------------------+-----------------+\n| 2016-05-31 10:57:03.953670000 | 3                  | Tuesday         |\n+-------------------------------+--------------------+-----------------+\n</div></dd><dt id=\"dayofyear\">\n          DAYOFYEAR(TIMESTAMP date)\n        </dt><dd><b>Purpose:</b> Returns the day field from a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value,\n          corresponding to the day of the year. The range of return values is 1 (January 1) to\n          366 (December 31 of a leap year).\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following examples show return values from the <span class=\"hue-doc-codeph\">DAYOFYEAR()</span>\n            function. The same date in different years returns a different day number for all\n            dates after February 28, because 2016 is a leap year while 2015 is not a leap year.\n          </p><div class=\"hue-doc-codeblock\">select now() as right_now,\n  dayofyear(now()) as today_day_of_year;\n+-------------------------------+-------------------+\n| right_now                     | today_day_of_year |\n+-------------------------------+-------------------+\n| 2016-05-31 11:05:48.314932000 | 152               |\n+-------------------------------+-------------------+\n\nselect now() - interval 1 year as last_year,\n  dayofyear(now() - interval 1 year) as year_ago_day_of_year;\n+-------------------------------+----------------------+\n| last_year                     | year_ago_day_of_year |\n+-------------------------------+----------------------+\n| 2015-05-31 11:07:03.733689000 | 151                  |\n+-------------------------------+----------------------+\n</div></dd><dt id=\"days_add\">\n          DAYS_ADD(TIMESTAMP startdate, INT days), DAYS_ADD(TIMESTAMP startdate, BIGINT days)\n        </dt><dd><b>Purpose:</b> Adds a specified number of days to a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value.\n          Similar to <span class=\"hue-doc-codeph\">date_add()</span>, but starts with an actual\n          <span class=\"hue-doc-codeph\">TIMESTAMP</span> value instead of a string that is converted to a\n          <span class=\"hue-doc-codeph\">TIMESTAMP</span>.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now() as right_now, days_add(now(), 31) as 31_days_later;\n+-------------------------------+-------------------------------+\n| right_now                     | 31_days_later                 |\n+-------------------------------+-------------------------------+\n| 2016-05-31 11:12:32.216764000 | 2016-07-01 11:12:32.216764000 |\n+-------------------------------+-------------------------------+\n</div></dd><dt id=\"days_sub\">\n          DAYS_SUB(TIMESTAMP startdate, INT days), DAYS_SUB(TIMESTAMP startdate, BIGINT days)\n        </dt><dd><b>Purpose:</b> Subtracts a specified number of days from a <span class=\"hue-doc-codeph\">TIMESTAMP</span>\n          value. Similar to <span class=\"hue-doc-codeph\">DATE_SUB()</span>, but starts with an actual\n          <span class=\"hue-doc-codeph\">TIMESTAMP</span> value instead of a string that is converted to a\n          <span class=\"hue-doc-codeph\">TIMESTAMP</span>.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now() as right_now, days_sub(now(), 31) as 31_days_ago;\n+-------------------------------+-------------------------------+\n| right_now                     | 31_days_ago                   |\n+-------------------------------+-------------------------------+\n| 2016-05-31 11:13:42.163905000 | 2016-04-30 11:13:42.163905000 |\n+-------------------------------+-------------------------------+\n</div></dd><dt id=\"extract\">\n          EXTRACT(TIMESTAMP ts, STRING unit), EXTRACT(unit FROM TIMESTAMP ts)\n        </dt><dd><b>Purpose:</b> Returns one of the numeric date or time fields from a\n          <span class=\"hue-doc-codeph\">TIMESTAMP</span> value.\n          <p><b>Unit argument:</b> The <span class=\"hue-doc-codeph\">unit</span> string can be one of\n            <span class=\"hue-doc-codeph\">epoch</span>, <span class=\"hue-doc-codeph\">year</span>, <span class=\"hue-doc-codeph\">quarter</span>,\n            <span class=\"hue-doc-codeph\">month</span>, <span class=\"hue-doc-codeph\">day</span>, <span class=\"hue-doc-codeph\">hour</span>,\n            <span class=\"hue-doc-codeph\">minute</span>, <span class=\"hue-doc-codeph\">second</span>, or <span class=\"hue-doc-codeph\">millisecond</span>.\n            This argument value is case-insensitive.\n          </p><p>\n            If you specify <span class=\"hue-doc-codeph\">millisecond</span> for the <span class=\"hue-doc-codeph\">unit</span> argument,\n            the function returns the seconds component and the milliseconds component. For\n            example, <span class=\"hue-doc-codeph\">EXTRACT(CAST('2006-05-12 18:27:28.123456789' AS TIMESTAMP),\n            'MILLISECOND')</span> will return <span class=\"hue-doc-codeph\">28123</span>.\n          </p><p>\n            In Impala 2.0 and higher, you can use special syntax rather than a regular function\n            call, for compatibility with code that uses the SQL-99 format with the\n            <span class=\"hue-doc-codeph\">FROM</span> keyword. With this style, the unit names are identifiers\n            rather than <span class=\"hue-doc-codeph\">STRING</span> literals. For example, the following calls are\n            equivalent:\n<div class=\"hue-doc-codeblock\">EXTRACT(year FROM NOW());\nEXTRACT(NOW(), 'year');\n</div></p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            Typically used in <span class=\"hue-doc-codeph\">GROUP BY</span> queries to arrange results by hour, day,\n            month, and so on. You can also use this function in an <span class=\"hue-doc-codeph\">INSERT ...\n            SELECT</span> statement to insert into a partitioned table to split up\n            <span class=\"hue-doc-codeph\">TIMESTAMP</span> values into individual parts, if the partitioned table\n            has separate partition key columns representing year, month, day, and so on. If you\n            need to divide by more complex units of time, such as by week or by quarter, use the\n            <span class=\"hue-doc-codeph\">TRUNC()</span> function instead.\n          </p><p><b>Return type:</b><span class=\"hue-doc-codeph\">BIGINT</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">SELECT NOW() AS right_now,\n  EXTRACT(day FROM NOW()) AS this_day,\n  EXTRACT(hour FROM NOW()) AS this_hour;\n+-------------------------------+----------+-----------+\n| right_now                     | this_day | this_hour |\n+-------------------------------+----------+-----------+\n| 2016-05-31 11:19:24.025303000 | 31       | 11        |\n+-------------------------------+----------+-----------+\n</div></dd><dt id=\"from_timestamp\">\n          FROM_TIMESTAMP(TIMESTAMP datetime, STRING pattern), FROM_TIMESTAMP(STRING datetime,\n          STRING pattern)\n        </dt><dd><b>Purpose:</b> Converts a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value into a string representing\n          the same value.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p id=\"added_in_230\"><b>Added in:</b>Impala 2.3.0</p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            The <span class=\"hue-doc-codeph\">FROM_TIMESTAMP()</span> function provides a flexible way to convert\n            <span class=\"hue-doc-codeph\">TIMESTAMP</span> values into arbitrary string formats for reporting\n            purposes.\n          </p><p>\n            Because Impala implicitly converts string values into <span class=\"hue-doc-codeph\">TIMESTAMP</span>,\n            you can pass date/time values represented as strings (in the standard\n            <span class=\"hue-doc-codeph\">yyyy-MM-dd HH:mm:ss.SSS</span> format) to this function. The result is a\n            string using different separator characters, order of fields, spelled-out month\n            names, or other variation of the date/time string representation.\n          </p><p>\n            The allowed tokens for the pattern string are the same as for the\n            <span class=\"hue-doc-codeph\">FROM_UNIXTIME()</span> function.\n          </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following examples show different ways to format a <span class=\"hue-doc-codeph\">TIMESTAMP</span>\n            value as a string:\n          </p><div class=\"hue-doc-codeblock\">-- Reformat a TIMESTAMP value.\nSELECT FROM_TIMESTAMP(NOW(), 'yyyy/MM/dd');\n+-------------------------------------+\n| from_timestamp(now(), 'yyyy/mm/dd') |\n+-------------------------------------+\n| 2018/10/09                          |\n+-------------------------------------+\n\n-- Alternative format for reporting purposes.\nSELECT FROM_TIMESTAMP('1984-09-25 16:45:30.125', 'MMM dd, yyyy HH:mm:ss.SSS');\n+------------------------------------------------------------------------+\n| from_timestamp('1984-09-25 16:45:30.125', 'mmm dd, yyyy hh:mm:ss.sss') |\n+------------------------------------------------------------------------+\n| Sep 25, 1984 16:45:30.125                                              |\n+------------------------------------------------------------------------+\n</div></dd><dt id=\"from_unixtime\">\n          FROM_UNIXTIME(BIGINT unixtime[, STRING format])\n        </dt><dd><b>Purpose:</b> Converts the number of seconds from the Unix epoch to the specified\n          time into a string in the local time zone.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p id=\"y2k38\">\n        In Impala 2.2.0 and higher, built-in functions that accept or return integers\n        representing <span class=\"hue-doc-codeph\">TIMESTAMP</span> values use the <span class=\"hue-doc-codeph\">BIGINT</span> type for\n        parameters and return values, rather than <span class=\"hue-doc-codeph\">INT</span>. This change lets the\n        date and time functions avoid an overflow error that would otherwise occur on January\n        19th, 2038 (known as the\n        <a class=\"hue-doc-external-link\" href=\"http://en.wikipedia.org/wiki/Year_2038_problem\" target=\"_blank\"><q>Year\n        2038 problem</q> or <q>Y2K38 problem</q></a>). This change affects the\n        <span class=\"hue-doc-codeph\">FROM_UNIXTIME()</span> and <span class=\"hue-doc-codeph\">UNIX_TIMESTAMP()</span> functions. You\n        might need to change application code that interacts with these functions, change the\n        types of columns that store the return values, or add <span class=\"hue-doc-codeph\">CAST()</span> calls to\n        SQL statements that call these functions.\n      </p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            The format string accepts the variations allowed for the <span class=\"hue-doc-codeph\">TIMESTAMP</span>\n            data type: date plus time, date by itself, time by itself, and optional fractional\n            seconds for the time. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a> for details.\n          </p><p>\n            Currently, the format string is case-sensitive, especially to distinguish\n            <span class=\"hue-doc-codeph\">m</span> for minutes and <span class=\"hue-doc-codeph\">M</span> for months. In Impala 1.3 and\n            later, you can switch the order of elements, use alternative separator characters,\n            and use a different number of placeholders for each unit. Adding more instances of\n            <span class=\"hue-doc-codeph\">y</span>, <span class=\"hue-doc-codeph\">d</span>, <span class=\"hue-doc-codeph\">H</span>, and so on produces\n            output strings zero-padded to the requested number of characters. The exception is\n            <span class=\"hue-doc-codeph\">M</span> for months, where <span class=\"hue-doc-codeph\">M</span> produces a non-padded value\n            such as <span class=\"hue-doc-codeph\">3</span>, <span class=\"hue-doc-codeph\">MM</span> produces a zero-padded value such as\n            <span class=\"hue-doc-codeph\">03</span>, <span class=\"hue-doc-codeph\">MMM</span> produces an abbreviated month name such as\n            <span class=\"hue-doc-codeph\">Mar</span>, and sequences of 4 or more <span class=\"hue-doc-codeph\">M</span> are not allowed.\n            A date string including all fields could be <span class=\"hue-doc-codeph\">'yyyy-MM-dd\n            HH:mm:ss.SSSSSS'</span>, <span class=\"hue-doc-codeph\">'dd/MM/yyyy HH:mm:ss.SSSSSS'</span>,\n            <span class=\"hue-doc-codeph\">'MMM dd, yyyy HH.mm.ss (SSSSSS)'</span> or other combinations of\n            placeholders and separator characters.\n          </p><p id=\"timezone_conversion_caveat\">\n        The way this function deals with time zones when converting to or from\n        <span class=\"hue-doc-codeph\">TIMESTAMP</span> values is affected by the\n        <span class=\"hue-doc-codeph\">‑‑use_local_tz_for_unix_timestamp_conversions</span> startup flag\n        for the <span class=\"hue-doc-cmdname\">impalad</span> daemon. See\n        <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a> for details about how\n        Impala handles time zone considerations for the <span class=\"hue-doc-codeph\">TIMESTAMP</span> data type.\n      </p><div class=\"hue-doc-note\"><p>\n              The more flexible format strings allowed with the built-in functions do not change\n              the rules about using <span class=\"hue-doc-codeph\">CAST()</span> to convert from a string to a\n              <span class=\"hue-doc-codeph\">TIMESTAMP</span> value. Strings being converted through\n              <span class=\"hue-doc-codeph\">CAST()</span> must still have the elements in the specified order and\n              use the specified delimiter characters, as described in\n              <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a>.\n            </p></div><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">SELECT FROM_UNIXTIME(1392394861,'yyyy-MM-dd HH:mm:ss.SSSS');\n+-------------------------------------------------------+\n| from_unixtime(1392394861, 'yyyy-mm-dd hh:mm:ss.ssss') |\n+-------------------------------------------------------+\n| 2014-02-14 16:21:01.0000                              |\n+-------------------------------------------------------+\n\nSELECT FROM_UNIXTIME(1392394861,'HH:mm:ss.SSSS');\n+--------------------------------------------+\n| from_unixtime(1392394861, 'hh:mm:ss.ssss') |\n+--------------------------------------------+\n| 16:21:01.0000                              |\n+--------------------------------------------+\n</div><p id=\"datetime_function_chaining\"><span class=\"hue-doc-codeph\">UNIX_TIMESTAMP()</span> and <span class=\"hue-doc-codeph\">FROM_UNIXTIME()</span> are often used in\n        combination to convert a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value into a particular string\n        format. For example:\n<div class=\"hue-doc-codeblock\">SELECT FROM_UNIXTIME(UNIX_TIMESTAMP(NOW() + interval 3 days),\n  'yyyy/MM/dd HH:mm') AS yyyy_mm_dd_hh_mm;\n+------------------+\n| yyyy_mm_dd_hh_mm |\n+------------------+\n| 2016/06/03 11:38 |\n+------------------+\n</div></p></dd><dt id=\"from_utc_timestamp\">\n          FROM_UTC_TIMESTAMP(TIMESTAMP ts, STRING timezone)\n        </dt><dd><b>Purpose:</b> Converts a specified UTC timestamp value into the appropriate value\n          for a specified time zone.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p><b>Usage notes:</b> Often used to translate UTC time zone data stored in a table\n            back to the local date and time for reporting. The opposite of the\n            <span class=\"hue-doc-codeph\">TO_UTC_TIMESTAMP()</span> function.\n          </p><p id=\"current_timezone_tip\">\n        To determine the time zone of the server you are connected to, in\n        Impala 2.3 and higher you can call the\n        <span class=\"hue-doc-codeph\">timeofday()</span> function, which includes the time zone specifier in its\n        return value. Remember that with cloud computing, the server you interact with might be\n        in a different time zone than you are, or different sessions might connect to servers in\n        different time zones, or a cluster might include servers in more than one time zone.\n      </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            See discussion of time zones in\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a> for information about\n            using this function for conversions between the local time zone and UTC.\n          </p><p>\n            The following example shows how when <span class=\"hue-doc-codeph\">TIMESTAMP</span> values representing\n            the UTC time zone are stored in a table, a query can display the equivalent local\n            date and time for a different time zone.\n          </p><div class=\"hue-doc-codeblock\">with t1 as (select cast('2016-06-02 16:25:36.116143000' as timestamp) as utc_datetime)\n  select utc_datetime as 'Date/time in Greenwich UK',\n    from_utc_timestamp(utc_datetime, 'PDT')\n      as 'Equivalent in California USA'\n  from t1;\n+-------------------------------+-------------------------------+\n| date/time in greenwich uk     | equivalent in california usa  |\n+-------------------------------+-------------------------------+\n| 2016-06-02 16:25:36.116143000 | 2016-06-02 09:25:36.116143000 |\n+-------------------------------+-------------------------------+\n</div><p>\n            The following example shows that for a date and time when daylight savings is in\n            effect (<span class=\"hue-doc-codeph\">PDT</span>), the UTC time is 7 hours ahead of the local California\n            time; while when daylight savings is not in effect (<span class=\"hue-doc-codeph\">PST</span>), the UTC\n            time is 8 hours ahead of the local California time.\n          </p><div class=\"hue-doc-codeblock\">select now() as local_datetime,\n  to_utc_timestamp(now(), 'PDT') as utc_datetime;\n+-------------------------------+-------------------------------+\n| local_datetime                | utc_datetime                  |\n+-------------------------------+-------------------------------+\n| 2016-05-31 11:50:02.316883000 | 2016-05-31 18:50:02.316883000 |\n+-------------------------------+-------------------------------+\n\nselect '2016-01-05' as local_datetime,\n  to_utc_timestamp('2016-01-05', 'PST') as utc_datetime;\n+----------------+---------------------+\n| local_datetime | utc_datetime        |\n+----------------+---------------------+\n| 2016-01-05     | 2016-01-05 08:00:00 |\n+----------------+---------------------+\n</div></dd><dt id=\"hour\">\n          HOUR(TIMESTAMP ts)\n        </dt><dd><b>Purpose:</b> Returns the hour field from a <span class=\"hue-doc-codeph\">TIMESTAMP</span> field.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now() as right_now, hour(now()) as current_hour;\n+-------------------------------+--------------+\n| right_now                     | current_hour |\n+-------------------------------+--------------+\n| 2016-06-01 14:14:12.472846000 | 14           |\n+-------------------------------+--------------+\n\nselect now() + interval 12 hours as 12_hours_from_now,\n  hour(now() + interval 12 hours) as hour_in_12_hours;\n+-------------------------------+-------------------+\n| 12_hours_from_now             | hour_in_12_hours  |\n+-------------------------------+-------------------+\n| 2016-06-02 02:15:32.454750000 | 2                 |\n+-------------------------------+-------------------+\n</div></dd><dt id=\"hours_add\">\n          HOURS_ADD(TIMESTAMP date, INT hours), HOURS_ADD(TIMESTAMP date, BIGINT hours)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time plus some number of hours.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now() as right_now,\n  hours_add(now(), 12) as in_12_hours;\n+-------------------------------+-------------------------------+\n| right_now                     | in_12_hours                   |\n+-------------------------------+-------------------------------+\n| 2016-06-01 14:19:48.948107000 | 2016-06-02 02:19:48.948107000 |\n+-------------------------------+-------------------------------+\n</div></dd><dt id=\"hours_sub\">\n          HOURS_SUB(TIMESTAMP date, INT hours), HOURS_SUB(TIMESTAMP date, BIGINT hours)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time minus some number of hours.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now() as right_now,\n  hours_sub(now(), 18) as 18_hours_ago;\n+-------------------------------+-------------------------------+\n| right_now                     | 18_hours_ago                  |\n+-------------------------------+-------------------------------+\n| 2016-06-01 14:23:13.868150000 | 2016-05-31 20:23:13.868150000 |\n+-------------------------------+-------------------------------+\n</div></dd><dt id=\"int_months_between\">\n          INT_MONTHS_BETWEEN(TIMESTAMP newer, TIMESTAMP older)\n        </dt><dd><b>Purpose:</b> Returns the number of months between the date portions of two\n          <span class=\"hue-doc-codeph\">TIMESTAMP</span> values, as an <span class=\"hue-doc-codeph\">INT</span> representing only the\n          full months that passed.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p><p id=\"added_in_230\"><b>Added in:</b>Impala 2.3.0</p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            Typically used in business contexts, for example to determine whether a specified\n            number of months have passed or whether some end-of-month deadline was reached.\n          </p><p>\n            The method of determining the number of elapsed months includes some special\n            handling of months with different numbers of days that creates edge cases for dates\n            between the 28th and 31st days of certain months. See\n            <span class=\"hue-doc-codeph\">MONTHS_BETWEEN()</span> for details. The\n            <span class=\"hue-doc-codeph\">INT_MONTHS_BETWEEN()</span> result is essentially the\n            <span class=\"hue-doc-codeph\">FLOOR()</span> of the <span class=\"hue-doc-codeph\">MONTHS_BETWEEN()</span> result.\n          </p><p>\n            If either value is <span class=\"hue-doc-codeph\">NULL</span>, which could happen for example when\n            converting a nonexistent date string such as <span class=\"hue-doc-codeph\">'2015-02-29'</span> to a\n            <span class=\"hue-doc-codeph\">TIMESTAMP</span>, the result is also <span class=\"hue-doc-codeph\">NULL</span>.\n          </p><p>\n            If the first argument represents an earlier time than the second argument, the\n            result is negative.\n          </p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">/* Less than a full month = 0. */\nselect int_months_between('2015-02-28', '2015-01-29');\n+------------------------------------------------+\n| int_months_between('2015-02-28', '2015-01-29') |\n+------------------------------------------------+\n| 0                                              |\n+------------------------------------------------+\n\n/* Last day of month to last day of next month = 1. */\nselect int_months_between('2015-02-28', '2015-01-31');\n+------------------------------------------------+\n| int_months_between('2015-02-28', '2015-01-31') |\n+------------------------------------------------+\n| 1                                              |\n+------------------------------------------------+\n\n/* Slightly less than 2 months = 1. */\nselect int_months_between('2015-03-28', '2015-01-31');\n+------------------------------------------------+\n| int_months_between('2015-03-28', '2015-01-31') |\n+------------------------------------------------+\n| 1                                              |\n+------------------------------------------------+\n\n/* 2 full months (identical days of the month) = 2. */\nselect int_months_between('2015-03-31', '2015-01-31');\n+------------------------------------------------+\n| int_months_between('2015-03-31', '2015-01-31') |\n+------------------------------------------------+\n| 2                                              |\n+------------------------------------------------+\n\n/* Last day of month to last day of month-after-next = 2. */\nselect int_months_between('2015-03-31', '2015-01-30');\n+------------------------------------------------+\n| int_months_between('2015-03-31', '2015-01-30') |\n+------------------------------------------------+\n| 2                                              |\n+------------------------------------------------+\n</div></dd><dt id=\"last_day\">\n          LAST_DAY(TIMESTAMP ts)\n        </dt><dd><b>Purpose:</b> Returns a <span class=\"hue-doc-codeph\">TIMESTAMP</span> corresponding to the beginning of\n          the last calendar day in the same month as the <span class=\"hue-doc-codeph\">TIMESTAMP</span> argument.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"added_in_290\"><b>Added in:</b>Impala 2.9.0</p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            If the input argument does not represent a valid Impala <span class=\"hue-doc-codeph\">TIMESTAMP</span>\n            including both date and time portions, the function returns <span class=\"hue-doc-codeph\">NULL</span>.\n            For example, if the input argument is a string that cannot be implicitly cast to\n            <span class=\"hue-doc-codeph\">TIMESTAMP</span>, does not include a date portion, or is out of the\n            allowed range for Impala <span class=\"hue-doc-codeph\">TIMESTAMP</span> values, the function returns\n            <span class=\"hue-doc-codeph\">NULL</span>.\n          </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following example shows how to examine the current date, and dates around the\n            end of the month, as <span class=\"hue-doc-codeph\">TIMESTAMP</span> values with any time portion\n            removed:\n          </p><div class=\"hue-doc-codeblock\">select\n    now() as right_now\n  , trunc(now(),'dd') as today\n  , last_day(now()) as last_day_of_month\n  , last_day(now()) + interval 1 day as first_of_next_month;\n+-------------------------------+---------------------+---------------------+---------------------+\n| right_now                     | today               | last_day_of_month   | first_of_next_month |\n+-------------------------------+---------------------+---------------------+---------------------+\n| 2017-08-15 15:07:58.823812000 | 2017-08-15 00:00:00 | 2017-08-31 00:00:00 | 2017-09-01 00:00:00 |\n+-------------------------------+---------------------+---------------------+---------------------+\n</div><p>\n            The following example shows how to examine the current date and dates around the end\n            of the month as integers representing the day of the month:\n          </p><div class=\"hue-doc-codeblock\">select\n    now() as right_now\n  , dayofmonth(now()) as day\n  , extract(day from now()) as also_day\n  , dayofmonth(last_day(now())) as last_day\n  , extract(day from last_day(now())) as also_last_day;\n+-------------------------------+-----+----------+----------+---------------+\n| right_now                     | day | also_day | last_day | also_last_day |\n+-------------------------------+-----+----------+----------+---------------+\n| 2017-08-15 15:07:59.417755000 | 15  | 15       | 31       | 31            |\n+-------------------------------+-----+----------+----------+---------------+\n</div></dd><dt id=\"microseconds_add\">\n          MICROSECONDS_ADD(TIMESTAMP date, INT microseconds), MICROSECONDS_ADD(TIMESTAMP date,\n          BIGINT microseconds)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time plus some number of microseconds.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now() as right_now,\n  microseconds_add(now(), 500000) as half_a_second_from_now;\n+-------------------------------+-------------------------------+\n| right_now                     | half_a_second_from_now        |\n+-------------------------------+-------------------------------+\n| 2016-06-01 14:25:11.455051000 | 2016-06-01 14:25:11.955051000 |\n+-------------------------------+-------------------------------+\n</div></dd><dt id=\"microseconds_sub\">\n          MICROSECONDS_SUB(TIMESTAMP date, INT microseconds), MICROSECONDS_SUB(TIMESTAMP date,\n          BIGINT microseconds)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time minus some number of microseconds.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now() as right_now,\n  microseconds_sub(now(), 500000) as half_a_second_ago;\n+-------------------------------+-------------------------------+\n| right_now                     | half_a_second_ago             |\n+-------------------------------+-------------------------------+\n| 2016-06-01 14:26:16.509990000 | 2016-06-01 14:26:16.009990000 |\n+-------------------------------+-------------------------------+\n</div></dd><dt id=\"millisecond\">\n          MILLISECOND(TIMESTAMP ts)\n        </dt><dd><b>Purpose:</b> Returns the millisecond portion of a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p><p id=\"added_in_250\"><b>Added in:</b>Impala 2.5.0</p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            The millisecond value is truncated, not rounded, if the <span class=\"hue-doc-codeph\">TIMESTAMP</span>\n            value contains more than 3 significant digits to the right of the decimal point.\n          </p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">252.4 milliseconds truncated to 252.\n\nselect now(), millisecond(now());\n+-------------------------------+--------------------+\n| now()                         | millisecond(now()) |\n+-------------------------------+--------------------+\n| 2016-03-14 22:30:25.252400000 | 252                |\n+-------------------------------+--------------------+\n\n761.767 milliseconds truncated to 761.\n\nselect now(), millisecond(now());\n+-------------------------------+--------------------+\n| now()                         | millisecond(now()) |\n+-------------------------------+--------------------+\n| 2016-03-14 22:30:58.761767000 | 761                |\n+-------------------------------+--------------------+\n</div></dd><dt id=\"milliseconds_add\">\n          MILLISECONDS_ADD(TIMESTAMP date, INT milliseconds), MILLISECONDS_ADD(TIMESTAMP date,\n          BIGINT milliseconds)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time plus some number of milliseconds.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now() as right_now,\n  milliseconds_add(now(), 1500) as 1_point_5_seconds_from_now;\n+-------------------------------+-------------------------------+\n| right_now                     | 1_point_5_seconds_from_now    |\n+-------------------------------+-------------------------------+\n| 2016-06-01 14:30:30.067366000 | 2016-06-01 14:30:31.567366000 |\n+-------------------------------+-------------------------------+\n</div></dd><dt id=\"milliseconds_sub\">\n          MILLISECONDS_SUB(TIMESTAMP date, INT milliseconds), MILLISECONDS_SUB(TIMESTAMP date,\n          BIGINT milliseconds)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time minus some number of milliseconds.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now() as right_now,\n  milliseconds_sub(now(), 1500) as 1_point_5_seconds_ago;\n+-------------------------------+-------------------------------+\n| right_now                     | 1_point_5_seconds_ago         |\n+-------------------------------+-------------------------------+\n| 2016-06-01 14:30:53.467140000 | 2016-06-01 14:30:51.967140000 |\n+-------------------------------+-------------------------------+\n</div></dd><dt id=\"minute\">\n          MINUTE(TIMESTAMP date)\n        </dt><dd><b>Purpose:</b> Returns the minute field from a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now() as right_now, minute(now()) as current_minute;\n+-------------------------------+----------------+\n| right_now                     | current_minute |\n+-------------------------------+----------------+\n| 2016-06-01 14:34:08.051702000 | 34             |\n+-------------------------------+----------------+\n</div></dd><dt id=\"minutes_add\">\n          MINUTES_ADD(TIMESTAMP date, INT minutes), MINUTES_ADD(TIMESTAMP date, BIGINT minutes)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time plus some number of minutes.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now() as right_now, minutes_add(now(), 90) as 90_minutes_from_now;\n+-------------------------------+-------------------------------+\n| right_now                     | 90_minutes_from_now           |\n+-------------------------------+-------------------------------+\n| 2016-06-01 14:36:04.887095000 | 2016-06-01 16:06:04.887095000 |\n+-------------------------------+-------------------------------+\n</div></dd><dt id=\"minutes_sub\">\n          MINUTES_SUB(TIMESTAMP date, INT minutes), MINUTES_SUB(TIMESTAMP date, BIGINT minutes)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time minus some number of minutes.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now() as right_now, minutes_sub(now(), 90) as 90_minutes_ago;\n+-------------------------------+-------------------------------+\n| right_now                     | 90_minutes_ago                |\n+-------------------------------+-------------------------------+\n| 2016-06-01 14:36:32.643061000 | 2016-06-01 13:06:32.643061000 |\n+-------------------------------+-------------------------------+\n</div></dd><dt id=\"month\">\n          MONTH(TIMESTAMP date)\n        </dt><dd><b>Purpose:</b> Returns the month field, represented as an integer, from the date\n          portion of a <span class=\"hue-doc-codeph\">TIMESTAMP</span>.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now() as right_now, month(now()) as current_month;\n+-------------------------------+---------------+\n| right_now                     | current_month |\n+-------------------------------+---------------+\n| 2016-06-01 14:43:37.141542000 | 6             |\n+-------------------------------+---------------+\n</div></dd><dt id=\"monthname\">\n          MONTHNAME(TIMESTAMP date)\n        </dt><dd><b>Purpose:</b> Returns the month field from a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value,\n          converted to the string corresponding to that month name.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p></dd><dt id=\"months_add\">\n          MONTHS_ADD(TIMESTAMP date, INT months), MONTHS_ADD(TIMESTAMP date, BIGINT months)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time plus some number of months.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following example shows the effects of adding some number of months to a\n            <span class=\"hue-doc-codeph\">TIMESTAMP</span> value, using both the <span class=\"hue-doc-codeph\">MONTHS_ADD()</span>\n            function and its <span class=\"hue-doc-codeph\">ADD_MONTHS()</span> alias. These examples use\n            <span class=\"hue-doc-codeph\">TRUNC()</span> to strip off the time portion and leave just the date.\n          </p><div class=\"hue-doc-codeblock\">with t1 as (select trunc(now(), 'dd') as today)\n  select today, months_add(today,1) as next_month from t1;\n+---------------------+---------------------+\n| today               | next_month          |\n+---------------------+---------------------+\n| 2016-05-19 00:00:00 | 2016-06-19 00:00:00 |\n+---------------------+---------------------+\n\nwith t1 as (select trunc(now(), 'dd') as today)\n  select today, add_months(today,1) as next_month from t1;\n+---------------------+---------------------+\n| today               | next_month          |\n+---------------------+---------------------+\n| 2016-05-19 00:00:00 | 2016-06-19 00:00:00 |\n+---------------------+---------------------+\n</div><p>\n            The following examples show how if <span class=\"hue-doc-codeph\">MONTHS_ADD()</span> would return a\n            nonexistent date, due to different months having different numbers of days, the\n            function returns a <span class=\"hue-doc-codeph\">TIMESTAMP</span> from the last day of the relevant\n            month. For example, adding one month to January 31 produces a date of February 29th\n            in the year 2016 (a leap year), and February 28th in the year 2015 (a non-leap\n            year).\n          </p><div class=\"hue-doc-codeblock\">with t1 as (select cast('2016-01-31' as timestamp) as jan_31)\n  select jan_31, months_add(jan_31,1) as feb_31 from t1;\n+---------------------+---------------------+\n| jan_31              | feb_31              |\n+---------------------+---------------------+\n| 2016-01-31 00:00:00 | 2016-02-29 00:00:00 |\n+---------------------+---------------------+\n\nwith t1 as (select cast('2015-01-31' as timestamp) as jan_31)\n  select jan_31, months_add(jan_31,1) as feb_31 from t1;\n+---------------------+---------------------+\n| jan_31              | feb_31              |\n+---------------------+---------------------+\n| 2015-01-31 00:00:00 | 2015-02-28 00:00:00 |\n+---------------------+---------------------+\n</div></dd><dt id=\"months_between\">\n          MONTHS_BETWEEN(TIMESTAMP newer, TIMESTAMP older)\n        </dt><dd><b>Purpose:</b> Returns the number of months between the date portions of two\n          <span class=\"hue-doc-codeph\">TIMESTAMP</span> values. Can include a fractional part representing extra\n          days in addition to the full months between the dates. The fractional component is\n          computed by dividing the difference in days by 31 (regardless of the month).\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p><p id=\"added_in_230\"><b>Added in:</b>Impala 2.3.0</p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            Typically used in business contexts, for example to determine whether a specified\n            number of months have passed or whether some end-of-month deadline was reached.\n          </p><p>\n            If the only consideration is the number of full months and any fractional value is\n            not significant, use <span class=\"hue-doc-codeph\">INT_MONTHS_BETWEEN()</span> instead.\n          </p><p>\n            The method of determining the number of elapsed months includes some special\n            handling of months with different numbers of days that creates edge cases for dates\n            between the 28th and 31st days of certain months.\n          </p><p>\n            If either value is <span class=\"hue-doc-codeph\">NULL</span>, which could happen for example when\n            converting a nonexistent date string such as <span class=\"hue-doc-codeph\">'2015-02-29'</span> to a\n            <span class=\"hue-doc-codeph\">TIMESTAMP</span>, the result is also <span class=\"hue-doc-codeph\">NULL</span>.\n          </p><p>\n            If the first argument represents an earlier time than the second argument, the\n            result is negative.\n          </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following examples show how dates that are on the same day of the month are\n            considered to be exactly N months apart, even if the months have different numbers\n            of days.\n          </p><div class=\"hue-doc-codeblock\">select months_between('2015-02-28', '2015-01-28');\n+--------------------------------------------+\n| months_between('2015-02-28', '2015-01-28') |\n+--------------------------------------------+\n| 1                                          |\n+--------------------------------------------+\n\nselect months_between(now(), now() + interval 1 month);\n+-------------------------------------------------+\n| months_between(now(), now() + interval 1 month) |\n+-------------------------------------------------+\n| -1                                              |\n+-------------------------------------------------+\n\nselect months_between(now() + interval 1 year, now());\n+------------------------------------------------+\n| months_between(now() + interval 1 year, now()) |\n+------------------------------------------------+\n| 12                                             |\n+------------------------------------------------+\n</div><p>\n            The following examples show how dates that are on the last day of the month are\n            considered to be exactly N months apart, even if the months have different numbers\n            of days. For example, from January 28th to February 28th is exactly one month\n            because the day of the month is identical; January 31st to February 28th is exactly\n            one month because in both cases it is the last day of the month; but January 29th or\n            30th to February 28th is considered a fractional month.\n          </p><div class=\"hue-doc-codeblock\">select months_between('2015-02-28', '2015-01-31');\n+--------------------------------------------+\n| months_between('2015-02-28', '2015-01-31') |\n+--------------------------------------------+\n| 1                                          |\n+--------------------------------------------+\n\nselect months_between('2015-02-28', '2015-01-29');\n+--------------------------------------------+\n| months_between('2015-02-28', '2015-01-29') |\n+--------------------------------------------+\n| 0.967741935483871                          |\n+--------------------------------------------+\n\nselect months_between('2015-02-28', '2015-01-30');;\n+--------------------------------------------+\n| months_between('2015-02-28', '2015-01-30') |\n+--------------------------------------------+\n| 0.935483870967742                          |\n+--------------------------------------------+\n</div><p>\n            The following examples show how dates that are not a precise number of months apart\n            result in a fractional return value.\n          </p><div class=\"hue-doc-codeblock\">select months_between('2015-03-01', '2015-01-28');\n+--------------------------------------------+\n| months_between('2015-03-01', '2015-01-28') |\n+--------------------------------------------+\n| 1.129032258064516                          |\n+--------------------------------------------+\n\nselect months_between('2015-03-01', '2015-02-28');\n+--------------------------------------------+\n| months_between('2015-03-01', '2015-02-28') |\n+--------------------------------------------+\n| 0.1290322580645161                         |\n+--------------------------------------------+\n\nselect months_between('2015-06-02', '2015-05-29');\n+--------------------------------------------+\n| months_between('2015-06-02', '2015-05-29') |\n+--------------------------------------------+\n| 0.1290322580645161                         |\n+--------------------------------------------+\n\nselect months_between('2015-03-01', '2015-01-25');\n+--------------------------------------------+\n| months_between('2015-03-01', '2015-01-25') |\n+--------------------------------------------+\n| 1.225806451612903                          |\n+--------------------------------------------+\n\nselect months_between('2015-03-01', '2015-02-25');\n+--------------------------------------------+\n| months_between('2015-03-01', '2015-02-25') |\n+--------------------------------------------+\n| 0.2258064516129032                         |\n+--------------------------------------------+\n\nselect months_between('2015-02-28', '2015-02-01');\n+--------------------------------------------+\n| months_between('2015-02-28', '2015-02-01') |\n+--------------------------------------------+\n| 0.8709677419354839                         |\n+--------------------------------------------+\n\nselect months_between('2015-03-28', '2015-03-01');\n+--------------------------------------------+\n| months_between('2015-03-28', '2015-03-01') |\n+--------------------------------------------+\n| 0.8709677419354839                         |\n+--------------------------------------------+\n</div><p>\n            The following examples show how the time portion of the <span class=\"hue-doc-codeph\">TIMESTAMP</span>\n            values are irrelevant for calculating the month interval. Even the fractional part\n            of the result only depends on the number of full days between the argument values,\n            regardless of the time portion.\n          </p><div class=\"hue-doc-codeblock\">select months_between('2015-05-28 23:00:00', '2015-04-28 11:45:00');\n+--------------------------------------------------------------+\n| months_between('2015-05-28 23:00:00', '2015-04-28 11:45:00') |\n+--------------------------------------------------------------+\n| 1                                                            |\n+--------------------------------------------------------------+\n\nselect months_between('2015-03-28', '2015-03-01');\n+--------------------------------------------+\n| months_between('2015-03-28', '2015-03-01') |\n+--------------------------------------------+\n| 0.8709677419354839                         |\n+--------------------------------------------+\n\nselect months_between('2015-03-28 23:00:00', '2015-03-01 11:45:00');\n+--------------------------------------------------------------+\n| months_between('2015-03-28 23:00:00', '2015-03-01 11:45:00') |\n+--------------------------------------------------------------+\n| 0.8709677419354839                                           |\n+--------------------------------------------------------------+\n</div></dd><dt id=\"months_sub\">\n          MONTHS_SUB(TIMESTAMP date, INT months), MONTHS_SUB(TIMESTAMP date, BIGINT months)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time minus some number of months.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">with t1 as (select trunc(now(), 'dd') as today)\n  select today, months_sub(today,1) as last_month from t1;\n+---------------------+---------------------+\n| today               | last_month          |\n+---------------------+---------------------+\n| 2016-06-01 00:00:00 | 2016-05-01 00:00:00 |\n+---------------------+---------------------+\n</div></dd><dt id=\"nanoseconds_add\">\n          NANOSECONDS_ADD(TIMESTAMP date, INT nanoseconds), NANOSECONDS_ADD(TIMESTAMP date,\n          BIGINT nanoseconds)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time plus some number of nanoseconds.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"kudu_blurb\"><b>Kudu considerations:</b></p><p id=\"kudu_timestamp_nanoseconds_caveat\">\n        The nanosecond portion of an Impala <span class=\"hue-doc-codeph\">TIMESTAMP</span> value is rounded to the\n        nearest microsecond when that value is stored in a Kudu table.\n      </p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now() as right_now, nanoseconds_add(now(), 1) as 1_nanosecond_later;\n+-------------------------------+-------------------------------+\n| right_now                     | 1_nanosecond_later            |\n+-------------------------------+-------------------------------+\n| 2016-06-01 15:42:00.361026000 | 2016-06-01 15:42:00.361026001 |\n+-------------------------------+-------------------------------+\n\n-- 1 billion nanoseconds = 1 second.\nselect now() as right_now, nanoseconds_add(now(), 1e9) as 1_second_later;\n+-------------------------------+-------------------------------+\n| right_now                     | 1_second_later                |\n+-------------------------------+-------------------------------+\n| 2016-06-01 15:42:52.926706000 | 2016-06-01 15:42:53.926706000 |\n+-------------------------------+-------------------------------+\n</div></dd><dt id=\"nanoseconds_sub\">\n          NANOSECONDS_SUB(TIMESTAMP date, INT nanoseconds), NANOSECONDS_SUB(TIMESTAMP date,\n          BIGINT nanoseconds)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time minus some number of nanoseconds.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"kudu_blurb\"><b>Kudu considerations:</b></p><p id=\"kudu_timestamp_nanoseconds_caveat\">\n        The nanosecond portion of an Impala <span class=\"hue-doc-codeph\">TIMESTAMP</span> value is rounded to the\n        nearest microsecond when that value is stored in a Kudu table.\n      </p><div class=\"hue-doc-codeblock\">select now() as right_now, nanoseconds_sub(now(), 1) as 1_nanosecond_earlier;\n+-------------------------------+-------------------------------+\n| right_now                     | 1_nanosecond_earlier          |\n+-------------------------------+-------------------------------+\n| 2016-06-01 15:44:14.355837000 | 2016-06-01 15:44:14.355836999 |\n+-------------------------------+-------------------------------+\n\n-- 1 billion nanoseconds = 1 second.\nselect now() as right_now, nanoseconds_sub(now(), 1e9) as 1_second_earlier;\n+-------------------------------+-------------------------------+\n| right_now                     | 1_second_earlier              |\n+-------------------------------+-------------------------------+\n| 2016-06-01 15:44:54.474929000 | 2016-06-01 15:44:53.474929000 |\n+-------------------------------+-------------------------------+\n</div></dd><dt id=\"next_day\">\n          NEXT_DAY(TIMESTAMP date, STRING weekday)\n        </dt><dd><b>Purpose:</b> Returns the date of the <span class=\"hue-doc-varname\">weekday</span> that follows the\n          specified <span class=\"hue-doc-varname\">date</span>.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            The <span class=\"hue-doc-varname\">weekday</span> parameter is case-insensitive. The following values\n            are accepted for <span class=\"hue-doc-varname\">weekday</span>:\n            <span class=\"hue-doc-codeph\">\"Sunday\"</span>/<span class=\"hue-doc-codeph\">\"Sun\"</span>,\n            <span class=\"hue-doc-codeph\">\"Monday\"</span>/<span class=\"hue-doc-codeph\">\"Mon\"</span>,\n            <span class=\"hue-doc-codeph\">\"Tuesday\"</span>/<span class=\"hue-doc-codeph\">\"Tue\"</span>,\n            <span class=\"hue-doc-codeph\">\"Wednesday\"</span>/<span class=\"hue-doc-codeph\">\"Wed\"</span>,\n            <span class=\"hue-doc-codeph\">\"Thursday\"</span>/<span class=\"hue-doc-codeph\">\"Thu\"</span>,\n            <span class=\"hue-doc-codeph\">\"Friday\"</span>/<span class=\"hue-doc-codeph\">\"Fri\"</span>,\n            <span class=\"hue-doc-codeph\">\"Saturday\"</span>/<span class=\"hue-doc-codeph\">\"Sat\"</span></p><p>\n            Calling the function with the current date and weekday returns the date that is one\n            week later.\n          </p><p id=\"example_blurb\"><b>Examples:</b></p><p><div class=\"hue-doc-codeblock\">select next_day('2013-12-25','Saturday');\n-- Returns '2013-12-28 00:00:00' the first Saturday after December 25, 2013.\nselect next_day(to_timestamp('08-1987-21', 'mm-yyyy-dd'), 'Friday');\n-- Returns '1987-08-28 00:00:00' the first Friday after August 28, 1987.\n\nselect next_day(now(), 'Thu');\n-- Executed on 2018-07-12, the function returns '2018-07-13 00:00:00', one week\n-- after the current date.</div></p></dd><dt id=\"now\">\n          NOW()\n        </dt><dd><b>Purpose:</b> Returns the current date and time (in the local time zone) as a\n          <span class=\"hue-doc-codeph\">TIMESTAMP</span> value.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            To find a date/time value in the future or the past relative to the current date and\n            time, add or subtract an <span class=\"hue-doc-codeph\">INTERVAL</span> expression to the return value of\n            <span class=\"hue-doc-codeph\">NOW()</span>. See\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a> for examples.\n          </p><p>\n            To produce a <span class=\"hue-doc-codeph\">TIMESTAMP</span> representing the current date and time that\n            can be shared or stored without interoperability problems due to time zone\n            differences, use the <span class=\"hue-doc-codeph\">TO_UTC_TIMESTAMP()</span> function and specify the\n            time zone of the server. When <span class=\"hue-doc-codeph\">TIMESTAMP</span> data is stored in UTC form,\n            any application that queries those values can convert them to the appropriate local\n            time zone by calling the inverse function, <span class=\"hue-doc-codeph\">FROM_UTC_TIMESTAMP()</span>.\n          </p><p id=\"current_timezone_tip\">\n        To determine the time zone of the server you are connected to, in\n        Impala 2.3 and higher you can call the\n        <span class=\"hue-doc-codeph\">timeofday()</span> function, which includes the time zone specifier in its\n        return value. Remember that with cloud computing, the server you interact with might be\n        in a different time zone than you are, or different sessions might connect to servers in\n        different time zones, or a cluster might include servers in more than one time zone.\n      </p><p>\n            Any references to the <span class=\"hue-doc-codeph\">NOW()</span> function are evaluated at the start of\n            a query. All calls to <span class=\"hue-doc-codeph\">NOW()</span> within the same query return the same\n            value, and the value does not depend on how long the query takes.\n          </p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now() as 'Current time in California USA',\n  to_utc_timestamp(now(), 'PDT') as 'Current time in Greenwich UK';\n+--------------------------------+-------------------------------+\n| current time in california usa | current time in greenwich uk  |\n+--------------------------------+-------------------------------+\n| 2016-06-01 15:52:08.980072000  | 2016-06-01 22:52:08.980072000 |\n+--------------------------------+-------------------------------+\n\nselect now() as right_now,\n  now() + interval 1 day as tomorrow,\n  now() + interval 1 week - interval 3 hours as almost_a_week_from_now;\n+-------------------------------+-------------------------------+-------------------------------+\n| right_now                     | tomorrow                      | almost_a_week_from_now        |\n+-------------------------------+-------------------------------+-------------------------------+\n| 2016-06-01 15:55:39.671690000 | 2016-06-02 15:55:39.671690000 | 2016-06-08 12:55:39.671690000 |\n+-------------------------------+-------------------------------+-------------------------------+\n</div></dd><dt id=\"quarter\">\n          QUARTER(TIMESTAMP date)\n        </dt><dd><b>Purpose:</b> Returns the quarter in the input <span class=\"hue-doc-codeph\">TIMESTAMP</span> expression\n          as an integer value, 1, 2, 3, or 4, where 1 represents January 1 through March 31.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p></dd><dt id=\"second\">\n          SECOND(TIMESTAMP date)\n        </dt><dd><b>Purpose:</b> Returns the second field from a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now() as right_now,\n  second(now()) as seconds_in_current_minute;\n+-------------------------------+---------------------------+\n| right_now                     | seconds_in_current_minute |\n+-------------------------------+---------------------------+\n| 2016-06-01 16:03:57.006603000 | 57                        |\n+-------------------------------+---------------------------+\n</div></dd><dt id=\"seconds_add\">\n          SECONDS_ADD(TIMESTAMP date, INT seconds), SECONDS_ADD(TIMESTAMP date, BIGINT seconds)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time plus some number of seconds.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now() as right_now,\n  seconds_add(now(), 10) as 10_seconds_from_now;\n+-------------------------------+-------------------------------+\n| right_now                     | 10_seconds_from_now           |\n+-------------------------------+-------------------------------+\n| 2016-06-01 16:05:21.573935000 | 2016-06-01 16:05:31.573935000 |\n+-------------------------------+-------------------------------+\n</div></dd><dt id=\"seconds_sub\">\n          SECONDS_SUB(TIMESTAMP date, INT seconds), SECONDS_SUB(TIMESTAMP date, BIGINT seconds)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time minus some number of seconds.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now() as right_now,\n  seconds_sub(now(), 10) as 10_seconds_ago;\n+-------------------------------+-------------------------------+\n| right_now                     | 10_seconds_ago                |\n+-------------------------------+-------------------------------+\n| 2016-06-01 16:06:03.467931000 | 2016-06-01 16:05:53.467931000 |\n+-------------------------------+-------------------------------+\n</div></dd><dt id=\"subdate\">\n          SUBDATE(TIMESTAMP startdate, INT days), SUBDATE(TIMESTAMP startdate, BIGINT days)\n        </dt><dd><b>Purpose:</b> Subtracts a specified number of days from a <span class=\"hue-doc-codeph\">TIMESTAMP</span>\n          value. Similar to <span class=\"hue-doc-codeph\">DATE_SUB()</span>, but starts with an actual\n          <span class=\"hue-doc-codeph\">TIMESTAMP</span> value instead of a string that is converted to a\n          <span class=\"hue-doc-codeph\">TIMESTAMP</span>.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following examples show how to subtract a number of days from a\n            <span class=\"hue-doc-codeph\">TIMESTAMP</span>. The number of days can also be negative, which gives the\n            same effect as the <span class=\"hue-doc-codeph\">ADDDATE()</span> function.\n          </p><div class=\"hue-doc-codeblock\">select now() as right_now, subdate(now(), 30) as now_minus_30;\n+-------------------------------+-------------------------------+\n| right_now                     | now_minus_30                  |\n+-------------------------------+-------------------------------+\n| 2016-05-20 11:00:15.084991000 | 2016-04-20 11:00:15.084991000 |\n+-------------------------------+-------------------------------+\n\nselect now() as right_now, subdate(now(), -15) as now_plus_15;\n+-------------------------------+-------------------------------+\n| right_now                     | now_plus_15                   |\n+-------------------------------+-------------------------------+\n| 2016-05-20 11:00:44.766091000 | 2016-06-04 11:00:44.766091000 |\n+-------------------------------+-------------------------------+\n</div></dd><dt id=\"timeofday\">\n          TIMEOFDAY()\n        </dt><dd><b>Purpose:</b> Returns a string representation of the current date and time,\n          according to the time of the local system, including any time zone designation.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p id=\"added_in_230\"><b>Added in:</b>Impala 2.3.0</p><p><b>Usage notes:</b> The result value represents similar information as the\n            <span class=\"hue-doc-codeph\">now()</span> function, only as a <span class=\"hue-doc-codeph\">STRING</span> type and with\n            somewhat different formatting. For example, the day of the week and the time zone\n            identifier are included. This function is intended primarily for compatibility with\n            SQL code from other systems that also have a <span class=\"hue-doc-codeph\">timeofday()</span> function.\n            Prefer to use <span class=\"hue-doc-codeph\">now()</span> if practical for any new Impala code.\n          </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following examples show the format of the <span class=\"hue-doc-codeph\">TIMEOFDAY()</span> return\n            value, illustrate how that value is represented as a <span class=\"hue-doc-codeph\">STRING</span> that\n            you can manipulate with string processing functions, and how the format compares\n            with the return value from the <span class=\"hue-doc-codeph\">NOW()</span> function.\n          </p><div class=\"hue-doc-codeblock\">/* Date and time fields in a STRING return value. */\nselect timeofday();\n+------------------------------+\n| timeofday()                  |\n+------------------------------+\n| Tue Sep 01 15:13:18 2015 PDT |\n+------------------------------+\n\n/* The return value can be processed by other string functions. */\nselect upper(timeofday());\n+------------------------------+\n| upper(timeofday())           |\n+------------------------------+\n| TUE SEP 01 15:13:38 2015 PDT |\n+------------------------------+\n\n/* The TIMEOFDAY() result is formatted differently than NOW(). NOW() returns a TIMESTAMP. */\nselect now(), timeofday();\n+-------------------------------+------------------------------+\n| now()                         | timeofday()                  |\n+-------------------------------+------------------------------+\n| 2015-09-01 15:15:25.930021000 | Tue Sep 01 15:15:25 2015 PDT |\n+-------------------------------+------------------------------+\n\n/* You can strip out the time zone field to use in calls to from_utc_timestamp(). */\nselect regexp_replace(timeofday(), '.* ([A-Z]+)$', '\\\\1') as current_timezone;\n+------------------+\n| current_timezone |\n+------------------+\n| PDT              |\n+------------------+\n</div></dd><dt id=\"timestamp_cmp\">\n          TIMESTAMP_CMP(TIMESTAMP t1, TIMESTAMP t2)\n        </dt><dd><b>Purpose:</b> Tests if one <span class=\"hue-doc-codeph\">TIMESTAMP</span> value is newer than, older\n          than, or identical to another <span class=\"hue-doc-codeph\">TIMESTAMP</span><p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span> (either -1, 0, 1, or <span class=\"hue-doc-codeph\">NULL</span>)\n          </p><p id=\"added_in_230\"><b>Added in:</b>Impala 2.3.0</p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p><b>Usage notes:</b> A comparison function for <span class=\"hue-doc-codeph\">TIMESTAMP</span> values that\n            only tests whether the date and time increases, decreases, or stays the same.\n            Similar to the <span class=\"hue-doc-codeph\">SIGN()</span> function for numeric values.\n          </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following examples show all the possible return values for\n            <span class=\"hue-doc-codeph\">TIMESTAMP_CMP()</span>. If the first argument represents a later point in\n            time than the second argument, the result is 1. The amount of the difference is\n            irrelevant, only the fact that one argument is greater than or less than the other.\n            If the first argument represents an earlier point in time than the second argument,\n            the result is -1. If the first and second arguments represent identical points in\n            time, the result is 0. If either argument is <span class=\"hue-doc-codeph\">NULL</span>, the result is\n            <span class=\"hue-doc-codeph\">NULL</span>.\n          </p><div class=\"hue-doc-codeblock\">/* First argument 'later' than second argument. */\n\nselect timestamp_cmp(now() + interval 70 minutes, now())\n  as now_vs_in_70_minutes;\n+----------------------+\n| now_vs_in_70_minutes |\n+----------------------+\n| 1                    |\n+----------------------+\n\nselect timestamp_cmp(now() +\n  interval 3 days +\n  interval 5 hours, now())\n  as now_vs_days_from_now;\n+----------------------+\n| now_vs_days_from_now |\n+----------------------+\n| 1                    |\n+----------------------+\n\n/* First argument 'earlier' than second argument. */\nselect timestamp_cmp(now(), now() + interval 2 hours)\n  as now_vs_2_hours_ago;\n+--------------------+\n| now_vs_2_hours_ago |\n+--------------------+\n| -1                 |\n+--------------------+\n\n/* Both arguments represent the same point in time. */\n\nselect timestamp_cmp(now(), now())\n  as identical_timestamps;\n+----------------------+\n| identical_timestamps |\n+----------------------+\n| 0                    |\n+----------------------+\n\nselect timestamp_cmp\n(\n  now() + interval 1 hour,\n  now() + interval 60 minutes\n) as equivalent_date_times;\n+-----------------------+\n| equivalent_date_times |\n+-----------------------+\n| 0                     |\n+-----------------------+\n\n/* Either argument NULL. */\n\nselect timestamp_cmp(now(), null)\n  as now_vs_null;\n+-------------+\n| now_vs_null |\n+-------------+\n| NULL        |\n+-------------+\n</div></dd><dt id=\"to_date\">\n          TO_DATE(TIMESTAMP ts)\n        </dt><dd><b>Purpose:</b> Returns a string representation of the date field from a timestamp\n          value.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now() as right_now,\n  concat('The date today is ',to_date(now()),'.') as date_announcement;\n+-------------------------------+-------------------------------+\n| right_now                     | date_announcement             |\n+-------------------------------+-------------------------------+\n| 2016-06-01 16:30:36.890325000 | The date today is 2016-06-01. |\n+-------------------------------+-------------------------------+\n</div></dd><dt id=\"to_timestamp\">\n          TO_TIMESTAMP(BIGINT unixtime), TO_TIMESTAMP(STRING date, STRING pattern)\n        </dt><dd><b>Purpose:</b> Converts an integer or string representing a date/time value into the\n          corresponding <span class=\"hue-doc-codeph\">TIMESTAMP</span> value.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"added_in_230\"><b>Added in:</b>Impala 2.3.0</p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            An integer argument represents the number of seconds past the epoch (midnight on\n            January 1, 1970). It is the converse of the <span class=\"hue-doc-codeph\">UNIX_TIMESTAMP()</span>\n            function, which produces a <span class=\"hue-doc-codeph\">BIGINT</span> representing the number of\n            seconds past the epoch.\n          </p><p>\n            A string argument, plus another string argument representing the pattern, turns an\n            arbitrary string representation of a date and time into a true\n            <span class=\"hue-doc-codeph\">TIMESTAMP</span> value. The ability to parse many kinds of date and time\n            formats allows you to deal with temporal data from diverse sources, and if desired\n            to convert to efficient <span class=\"hue-doc-codeph\">TIMESTAMP</span> values during your ETL process.\n            Using <span class=\"hue-doc-codeph\">TIMESTAMP</span> directly in queries and expressions lets you\n            perform date and time calculations without the overhead of extra function calls and\n            conversions each time you reference the applicable columns.\n          </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following examples demonstrate how to convert an arbitrary string representation\n            to <span class=\"hue-doc-codeph\">TIMESTAMP</span> based on a pattern string:\n          </p><div class=\"hue-doc-codeblock\">select to_timestamp('Sep 25, 1984', 'MMM dd, yyyy');\n+----------------------------------------------+\n| to_timestamp('sep 25, 1984', 'mmm dd, yyyy') |\n+----------------------------------------------+\n| 1984-09-25 00:00:00                          |\n+----------------------------------------------+\n\nselect to_timestamp('1984/09/25', 'yyyy/MM/dd');\n+------------------------------------------+\n| to_timestamp('1984/09/25', 'yyyy/mm/dd') |\n+------------------------------------------+\n| 1984-09-25 00:00:00                      |\n+------------------------------------------+\n</div><p>\n            The following examples show how to convert a <span class=\"hue-doc-codeph\">BIGINT</span> representing\n            seconds past epoch into a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value:\n          </p><div class=\"hue-doc-codeblock\">-- One day past the epoch.\nselect to_timestamp(24 * 60 * 60);\n+----------------------------+\n| to_timestamp(24 * 60 * 60) |\n+----------------------------+\n| 1970-01-02 00:00:00        |\n+----------------------------+\n\n-- 60 seconds in the past.\nselect now() as 'current date/time',\n  unix_timestamp(now()) 'now in seconds',\n  to_timestamp(unix_timestamp(now()) - 60) as '60 seconds ago';\n+-------------------------------+----------------+---------------------+\n| current date/time             | now in seconds | 60 seconds ago      |\n+-------------------------------+----------------+---------------------+\n| 2017-10-01 22:03:46.885624000 | 1506895426     | 2017-10-01 22:02:46 |\n+-------------------------------+----------------+---------------------+\n</div></dd><dt id=\"to_utc_timestamp\">\n          TO_UTC_TIMESTAMP(TIMESTAMP ts, STRING timezone)\n        </dt><dd><b>Purpose:</b> Converts a specified timestamp value in a specified time zone into the\n          corresponding value for the UTC time zone.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            Often used in combination with the <span class=\"hue-doc-codeph\">now()</span> function, to translate\n            local date and time values to the UTC time zone for consistent representation on\n            disk. The opposite of the <span class=\"hue-doc-codeph\">FROM_UTC_TIMESTAMP()</span> function.\n          </p><p>\n            See discussion of time zones in\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a> for information about\n            using this function for conversions between the local time zone and UTC.\n          </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The simplest use of this function is to turn a local date/time value to one with the\n            standardized UTC time zone. Because the time zone specifier is not saved as part of\n            the Impala <span class=\"hue-doc-codeph\">TIMESTAMP</span> value, all applications that refer to such\n            data must agree in advance which time zone the values represent. If different parts\n            of the ETL cycle, or different instances of the application, occur in different time\n            zones, the ideal reference point is to convert all <span class=\"hue-doc-codeph\">TIMESTAMP</span> values\n            to UTC for storage.\n          </p><div class=\"hue-doc-codeblock\">select now() as 'Current time in California USA',\n  to_utc_timestamp(now(), 'PDT') as 'Current time in Greenwich UK';\n+--------------------------------+-------------------------------+\n| current time in california usa | current time in greenwich uk  |\n+--------------------------------+-------------------------------+\n| 2016-06-01 15:52:08.980072000  | 2016-06-01 22:52:08.980072000 |\n+--------------------------------+-------------------------------+\n</div><p>\n            Once a value is converted to the UTC time zone by\n            <span class=\"hue-doc-codeph\">TO_UTC_TIMESTAMP()</span>, it can be converted back to the local time zone\n            with <span class=\"hue-doc-codeph\">FROM_UTC_TIMESTAMP()</span>. You can combine these functions using\n            different time zone identifiers to convert a <span class=\"hue-doc-codeph\">TIMESTAMP</span> between any\n            two time zones. This example starts with a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value\n            representing Pacific Daylight Time, converts it to UTC, and converts it to the\n            equivalent value in Eastern Daylight Time.\n          </p><div class=\"hue-doc-codeblock\">select now() as 'Current time in California USA',\n  from_utc_timestamp\n  (\n    to_utc_timestamp(now(), 'PDT'),\n    'EDT'\n  ) as 'Current time in New York, USA';\n+--------------------------------+-------------------------------+\n| current time in california usa | current time in new york, usa |\n+--------------------------------+-------------------------------+\n| 2016-06-01 18:14:12.743658000  | 2016-06-01 21:14:12.743658000 |\n+--------------------------------+-------------------------------+\n</div></dd><dt id=\"trunc\">\n          TRUNC(TIMESTAMP ts, STRING unit)\n        </dt><dd><b>Purpose:</b> Strips off fields from a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value.\n          <p><b>Unit argument:</b> The <span class=\"hue-doc-codeph\">unit</span> argument value for truncating\n            <span class=\"hue-doc-codeph\">TIMESTAMP</span> values is case-sensitive. This argument string can be one\n            of:\n<ul><li><span class=\"hue-doc-codeph\">SYYYY</span>, <span class=\"hue-doc-codeph\">YYYY</span>, <span class=\"hue-doc-codeph\">YEAR</span>,\n                <span class=\"hue-doc-codeph\">SYEAR</span>, <span class=\"hue-doc-codeph\">YYY</span>, <span class=\"hue-doc-codeph\">YY</span>,\n                <span class=\"hue-doc-codeph\">Y</span>: Year.\n              </li><li><span class=\"hue-doc-codeph\">Q</span>: Quarter.\n              </li><li><span class=\"hue-doc-codeph\">MONTH</span>, <span class=\"hue-doc-codeph\">MON</span>, <span class=\"hue-doc-codeph\">MM</span>,\n                <span class=\"hue-doc-codeph\">RM</span>: Month.\n              </li><li><span class=\"hue-doc-codeph\">WW</span>, <span class=\"hue-doc-codeph\">W</span>: Same day of the week as the first day\n                of the month.\n              </li><li><span class=\"hue-doc-codeph\">DDD</span>, <span class=\"hue-doc-codeph\">DD</span>, <span class=\"hue-doc-codeph\">J</span>: Day.\n              </li><li><span class=\"hue-doc-codeph\">DAY</span>, <span class=\"hue-doc-codeph\">DY</span>, <span class=\"hue-doc-codeph\">D</span>: Starting day of\n                the week. (Not necessarily the current day.)\n              </li><li><span class=\"hue-doc-codeph\">HH</span>, <span class=\"hue-doc-codeph\">HH12</span>, <span class=\"hue-doc-codeph\">HH24</span>: Hour. A\n                <span class=\"hue-doc-codeph\">TIMESTAMP</span> value truncated to the hour is always represented in\n                24-hour notation, even for the <span class=\"hue-doc-codeph\">HH12</span> argument string.\n              </li><li><span class=\"hue-doc-codeph\">MI</span>: Minute.\n              </li></ul></p><p><b>Added in:</b> The ability to truncate numeric values is new starting in\n            Impala 2.10.\n          </p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            The <span class=\"hue-doc-codeph\">TIMESTAMP</span> form is typically used in <span class=\"hue-doc-codeph\">GROUP BY</span>\n            queries to aggregate results from the same hour, day, week, month, quarter, and so\n            on. You can also use this function in an <span class=\"hue-doc-codeph\">INSERT ... SELECT</span> into a\n            partitioned table to divide <span class=\"hue-doc-codeph\">TIMESTAMP</span> values into the correct\n            partition.\n          </p><p>\n            Because the return value is a <span class=\"hue-doc-codeph\">TIMESTAMP</span>, if you cast the result of\n            <span class=\"hue-doc-codeph\">TRUNC()</span> to <span class=\"hue-doc-codeph\">STRING</span>, you will often see zeroed-out\n            portions such as <span class=\"hue-doc-codeph\">00:00:00</span> in the time field. If you only need the\n            individual units such as hour, day, month, or year, use the\n            <span class=\"hue-doc-codeph\">EXTRACT()</span> function instead. If you need the individual units from a\n            truncated <span class=\"hue-doc-codeph\">TIMESTAMP</span> value, run the <span class=\"hue-doc-codeph\">TRUNCATE()</span>\n            function on the original value, then run <span class=\"hue-doc-codeph\">EXTRACT()</span> on the result.\n          </p><p>\n            The <span class=\"hue-doc-codeph\">trunc()</span> function also has a signature that applies to\n            <span class=\"hue-doc-codeph\">DOUBLE</span> or <span class=\"hue-doc-codeph\">DECIMAL</span>values.\n            <span class=\"hue-doc-codeph\">TRUNCATE()</span>, <span class=\"hue-doc-codeph\">TRUNC()</span>, and <span class=\"hue-doc-codeph\">DTRUNC()</span>\n            are all aliased to the same function. See <span class=\"hue-doc-codeph\">TRUNCATE()</span> under\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_math_functions.xml\" data-doc-anchor-id=\"math_functions\">Impala Mathematical Functions</a> for details.\n          </p><p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following example shows how the argument <span class=\"hue-doc-codeph\">'Q'</span> returns a\n            <span class=\"hue-doc-codeph\">TIMESTAMP</span> representing the beginning of the appropriate calendar\n            quarter. This return value is the same for input values that could be separated by\n            weeks or months. If you stored the <span class=\"hue-doc-codeph\">TRUNC()</span> result in a partition\n            key column, the table would have four partitions per year.\n          </p><div class=\"hue-doc-codeblock\">select now() as right_now, trunc(now(), 'Q') as current_quarter;\n+-------------------------------+---------------------+\n| right_now                     | current_quarter     |\n+-------------------------------+---------------------+\n| 2016-06-01 18:32:02.097202000 | 2016-04-01 00:00:00 |\n+-------------------------------+---------------------+\n\nselect now() + interval 2 weeks as 2_weeks_from_now,\n  trunc(now() + interval 2 weeks, 'Q') as still_current_quarter;\n+-------------------------------+-----------------------+\n| 2_weeks_from_now              | still_current_quarter |\n+-------------------------------+-----------------------+\n| 2016-06-15 18:36:19.584257000 | 2016-04-01 00:00:00   |\n+-------------------------------+-----------------------+\n</div></dd><dt id=\"unix_timestamp\">\n          UNIX_TIMESTAMP(), UNIX_TIMESTAMP(STRING datetime), UNIX_TIMESTAMP(STRING datetime,\n          STRING format), UNIX_TIMESTAMP(TIMESTAMP datetime)\n        </dt><dd><b>Purpose:</b> Returns a Unix time, which is a number of seconds elapsed since\n          '1970-01-01 00:00:00' UTC. If called with no argument, the current date and time is\n          converted to its Unix time. If called with arguments, the first argument represented\n          as the <span class=\"hue-doc-codeph\">TIMESTAMP</span> or <span class=\"hue-doc-codeph\">STRING</span> is converted to its Unix\n          time.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">BIGINT</span></p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            See <span class=\"hue-doc-codeph\">FROM_UNIXTIME()</span> for details about the patterns you can use in\n            the <span class=\"hue-doc-codeph\">format</span> string to represent the position of year, month, day,\n            and so on in the <span class=\"hue-doc-codeph\">date</span> string. In Impala 1.3 and higher, you have\n            more flexibility to switch the positions of elements and use different separator\n            characters.\n          </p><p>\n            In Impala 2.2.3 and higher, you can include a trailing uppercase\n            <span class=\"hue-doc-codeph\">Z</span> qualifier to indicate <q>Zulu</q> time, a synonym for UTC.\n          </p><p>\n            In Impala 2.3 and higher, you can include a timezone offset\n            specified as minutes and hours, provided you also specify the details in the format\n            string argument. The offset is specified in the format string as a plus or minus\n            sign followed by <span class=\"hue-doc-codeph\">hh:mm</span>, <span class=\"hue-doc-codeph\">hhmm</span>, or\n            <span class=\"hue-doc-codeph\">hh</span>. The <span class=\"hue-doc-codeph\">hh</span> must be lowercase, to distinguish it\n            from the <span class=\"hue-doc-codeph\">HH</span> represent hours in the actual time value. Currently,\n            only numeric timezone offsets are allowed, not symbolic names.\n          </p><p id=\"y2k38\">\n        In Impala 2.2.0 and higher, built-in functions that accept or return integers\n        representing <span class=\"hue-doc-codeph\">TIMESTAMP</span> values use the <span class=\"hue-doc-codeph\">BIGINT</span> type for\n        parameters and return values, rather than <span class=\"hue-doc-codeph\">INT</span>. This change lets the\n        date and time functions avoid an overflow error that would otherwise occur on January\n        19th, 2038 (known as the\n        <a class=\"hue-doc-external-link\" href=\"http://en.wikipedia.org/wiki/Year_2038_problem\" target=\"_blank\"><q>Year\n        2038 problem</q> or <q>Y2K38 problem</q></a>). This change affects the\n        <span class=\"hue-doc-codeph\">FROM_UNIXTIME()</span> and <span class=\"hue-doc-codeph\">UNIX_TIMESTAMP()</span> functions. You\n        might need to change application code that interacts with these functions, change the\n        types of columns that store the return values, or add <span class=\"hue-doc-codeph\">CAST()</span> calls to\n        SQL statements that call these functions.\n      </p><p id=\"datetime_function_chaining\"><span class=\"hue-doc-codeph\">UNIX_TIMESTAMP()</span> and <span class=\"hue-doc-codeph\">FROM_UNIXTIME()</span> are often used in\n        combination to convert a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value into a particular string\n        format. For example:\n<div class=\"hue-doc-codeblock\">SELECT FROM_UNIXTIME(UNIX_TIMESTAMP(NOW() + interval 3 days),\n  'yyyy/MM/dd HH:mm') AS yyyy_mm_dd_hh_mm;\n+------------------+\n| yyyy_mm_dd_hh_mm |\n+------------------+\n| 2016/06/03 11:38 |\n+------------------+\n</div></p><p id=\"timezone_conversion_caveat\">\n        The way this function deals with time zones when converting to or from\n        <span class=\"hue-doc-codeph\">TIMESTAMP</span> values is affected by the\n        <span class=\"hue-doc-codeph\">‑‑use_local_tz_for_unix_timestamp_conversions</span> startup flag\n        for the <span class=\"hue-doc-cmdname\">impalad</span> daemon. See\n        <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a> for details about how\n        Impala handles time zone considerations for the <span class=\"hue-doc-codeph\">TIMESTAMP</span> data type.\n      </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following examples show different ways of turning the same date and time into an\n            integer value. A format string that Impala recognizes by default is interpreted as a\n            UTC date and time. The trailing <span class=\"hue-doc-codeph\">Z</span> is a confirmation that the\n            timezone is UTC. If the date and time string is formatted differently, a second\n            argument specifies the position and units for each of the date and time values.\n          </p><p>\n            The final two examples show how to specify a timezone offset of Pacific Daylight\n            Saving Time, which is 7 hours earlier than UTC. You can use the numeric offset\n            <span class=\"hue-doc-codeph\">-07:00</span> and the equivalent suffix of <span class=\"hue-doc-codeph\">-hh:mm</span> in the\n            format string, or specify the mnemonic name for the time zone in a call to\n            <span class=\"hue-doc-codeph\">TO_UTC_TIMESTAMP()</span>. This particular date and time expressed in PDT\n            translates to a different number than the same date and time expressed in UTC.\n          </p><div class=\"hue-doc-codeblock\">-- 3 ways of expressing the same date/time in UTC and converting to an integer.\n\nselect unix_timestamp('2015-05-15 12:00:00');\n+---------------------------------------+\n| unix_timestamp('2015-05-15 12:00:00') |\n+---------------------------------------+\n| 1431691200                            |\n+---------------------------------------+\n\nselect unix_timestamp('2015-05-15 12:00:00Z');\n+----------------------------------------+\n| unix_timestamp('2015-05-15 12:00:00z') |\n+----------------------------------------+\n| 1431691200                             |\n+----------------------------------------+\n\nselect unix_timestamp\n(\n  'May 15, 2015 12:00:00',\n  'MMM dd, yyyy HH:mm:ss'\n) as may_15_month_day_year;\n+-----------------------+\n| may_15_month_day_year |\n+-----------------------+\n| 1431691200            |\n+-----------------------+\n\n-- 2 ways of expressing the same date and time but in a different timezone.\n-- The resulting integer is different from the previous examples.\n\nselect unix_timestamp\n(\n  '2015-05-15 12:00:00-07:00',\n  'yyyy-MM-dd HH:mm:ss-hh:mm'\n) as may_15_year_month_day;\n+-----------------------+\n| may_15_year_month_day |\n+-----------------------+\n| 1431716400            |\n+-----------------------+\n\nselect unix_timestamp\n  (to_utc_timestamp(\n    '2015-05-15 12:00:00',\n    'PDT')\n  ) as may_15_pdt;\n+------------+\n| may_15_pdt |\n+------------+\n| 1431716400 |\n+------------+\n</div></dd><dt id=\"utc_timestamp\">\n          UTC_TIMESTAMP()\n        </dt><dd><b>Purpose:</b> Returns a <span class=\"hue-doc-codeph\">TIMESTAMP</span> corresponding to the current date\n          and time in the UTC time zone.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"added_in_210\"><b>Added in:</b>Impala 2.10</p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            Similar to the <span class=\"hue-doc-codeph\">NOW()</span> or <span class=\"hue-doc-codeph\">CURRENT_TIMESTAMP()</span>\n            functions, but does not use the local time zone as those functions do. Use\n            <span class=\"hue-doc-codeph\">UTC_TIMESTAMP()</span> to record <span class=\"hue-doc-codeph\">TIMESTAMP</span> values that\n            are interoperable with servers around the world, in arbitrary time zones, without\n            the need for additional conversion functions to standardize the time zone of each\n            value representing a date/time.\n          </p><p>\n            For working with date/time values represented as integer values, you can convert\n            back and forth between <span class=\"hue-doc-codeph\">TIMESTAMP</span> and <span class=\"hue-doc-codeph\">BIGINT</span> with\n            the <span class=\"hue-doc-codeph\">UNIX_MICROS_TO_UTC_TIMESTAMP()</span> and\n            <span class=\"hue-doc-codeph\">UTC_TO_UNIX_MICROS()</span> functions. The integer values represent the\n            number of microseconds since the Unix epoch (midnight on January 1, 1970).\n          </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following example shows how <span class=\"hue-doc-codeph\">NOW()</span> and\n            <span class=\"hue-doc-codeph\">CURRENT_TIMESTAMP()</span> represent the current date/time in the local\n            time zone (in this case, UTC-7), while <span class=\"hue-doc-codeph\">utc_timestamp()</span> represents\n            the same date/time in the standardized UTC time zone:\n          </p><div class=\"hue-doc-codeblock\">select now(), utc_timestamp();\n+-------------------------------+-------------------------------+\n| now()                         | utc_timestamp()               |\n+-------------------------------+-------------------------------+\n| 2017-10-01 23:33:58.919688000 | 2017-10-02 06:33:58.919688000 |\n+-------------------------------+-------------------------------+\n\nselect current_timestamp(), utc_timestamp();\n+-------------------------------+-------------------------------+\n| current_timestamp()           | utc_timestamp()               |\n+-------------------------------+-------------------------------+\n| 2017-10-01 23:34:07.400642000 | 2017-10-02 06:34:07.400642000 |\n+-------------------------------+-------------------------------+\n</div></dd><dt id=\"weekofyear\">\n          WEEK(TIMESTAMP date), WEEKOFYEAR(TIMESTAMP date)\n        </dt><dd><b>Purpose:</b> Returns the corresponding week (1-53) from the date portion of a\n          <span class=\"hue-doc-codeph\">TIMESTAMP</span>.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now() as right_now, weekofyear(now()) as this_week;\n+-------------------------------+-----------+\n| right_now                     | this_week |\n+-------------------------------+-----------+\n| 2016-06-01 22:40:06.763771000 | 22        |\n+-------------------------------+-----------+\n\nselect now() + interval 2 weeks as in_2_weeks,\n  weekofyear(now() + interval 2 weeks) as week_after_next;\n+-------------------------------+-----------------+\n| in_2_weeks                    | week_after_next |\n+-------------------------------+-----------------+\n| 2016-06-15 22:41:22.098823000 | 24              |\n+-------------------------------+-----------------+\n</div></dd><dt id=\"weeks_add\">\n          WEEKS_ADD(TIMESTAMP date, INT weeks), WEEKS_ADD(TIMESTAMP date, BIGINT weeks)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time plus some number of weeks.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now() as right_now, weeks_add(now(), 2) as week_after_next;\n+-------------------------------+-------------------------------+\n| right_now                     | week_after_next               |\n+-------------------------------+-------------------------------+\n| 2016-06-01 22:43:20.973834000 | 2016-06-15 22:43:20.973834000 |\n+-------------------------------+-------------------------------+\n</div></dd><dt id=\"weeks_sub\">\n          WEEKS_SUB(TIMESTAMP date, INT weeks), WEEKS_SUB(TIMESTAMP date, BIGINT weeks)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time minus some number of weeks.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now() as right_now, weeks_sub(now(), 2) as week_before_last;\n+-------------------------------+-------------------------------+\n| right_now                     | week_before_last              |\n+-------------------------------+-------------------------------+\n| 2016-06-01 22:44:21.291913000 | 2016-05-18 22:44:21.291913000 |\n+-------------------------------+-------------------------------+\n</div></dd><dt id=\"year\">\n          YEAR(TIMESTAMP date)\n        </dt><dd><b>Purpose:</b> Returns the year field from the date portion of a\n          <span class=\"hue-doc-codeph\">TIMESTAMP</span>.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now() as right_now, year(now()) as this_year;\n+-------------------------------+-----------+\n| right_now                     | this_year |\n+-------------------------------+-----------+\n| 2016-06-01 22:46:23.647925000 | 2016      |\n+-------------------------------+-----------+\n</div></dd><dt id=\"years_add\">\n          YEARS_ADD(TIMESTAMP date, INT years), YEARS_ADD(TIMESTAMP date, BIGINT years)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time plus some number of years.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now() as right_now, years_add(now(), 1) as next_year;\n+-------------------------------+-------------------------------+\n| right_now                     | next_year                     |\n+-------------------------------+-------------------------------+\n| 2016-06-01 22:47:45.556851000 | 2017-06-01 22:47:45.556851000 |\n+-------------------------------+-------------------------------+\n</div><p>\n            The following example shows how if the equivalent date does not exist in the year of\n            the result due to a leap year, the date is changed to the last day of the\n            appropriate month.\n          </p><div class=\"hue-doc-codeblock\">-- Spoiler alert: there is no Feb. 29, 2017\nselect cast('2016-02-29' as timestamp) as feb_29_2016,\n  years_add('2016-02-29', 1) as feb_29_2017;\n+---------------------+---------------------+\n| feb_29_2016         | feb_29_2017         |\n+---------------------+---------------------+\n| 2016-02-29 00:00:00 | 2017-02-28 00:00:00 |\n+---------------------+---------------------+\n</div></dd><dt id=\"years_sub\">\n          YEARS_SUB(TIMESTAMP date, INT years), YEARS_SUB(TIMESTAMP date, BIGINT years)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time minus some number of years.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-codeblock\">select now() as right_now, years_sub(now(), 1) as last_year;\n+-------------------------------+-------------------------------+\n| right_now                     | last_year                     |\n+-------------------------------+-------------------------------+\n| 2016-06-01 22:48:11.851780000 | 2015-06-01 22:48:11.851780000 |\n+-------------------------------+-------------------------------+\n</div><p>\n            The following example shows how if the equivalent date does not exist in the year of\n            the result due to a leap year, the date is changed to the last day of the\n            appropriate month.\n          </p><div class=\"hue-doc-codeblock\">-- Spoiler alert: there is no Feb. 29, 2015\nselect cast('2016-02-29' as timestamp) as feb_29_2016,\n  years_sub('2016-02-29', 1) as feb_29_2015;\n+---------------------+---------------------+\n| feb_29_2016         | feb_29_2015         |\n+---------------------+---------------------+\n| 2016-02-29 00:00:00 | 2015-02-28 00:00:00 |\n+---------------------+---------------------+\n</div></dd></dl></div></div></div>","title":"Impala Date and Time Functions"}