{"body":"<div><div id=\"datetime_functions\"><div class=\"hue-doc-title\">Impala Date and Time Functions</div><div><p>\n      The underlying Impala data types for date and time data are <span class=\"hue-doc-codeph\">TIMESTAMP</span> and\n      <span class=\"hue-doc-codeph\">DATE</span>.\n    </p><p>\n      Some of the date/time functions are affected by the setting of the\n      <span class=\"hue-doc-codeph\">‑‑use_local_tz_for_unix_timestamp_conversions</span> startup flag\n      for the <span class=\"hue-doc-cmdname\">impalad</span> daemon:\n      <ul><li>\n          The setting is off by default, meaning that functions such as\n          <span class=\"hue-doc-codeph\">FROM_UNIXTIME()</span> and <span class=\"hue-doc-codeph\">UNIX_TIMESTAMP()</span> consider the\n          input values to always represent the UTC time zone.\n        </li><li>\n          The setting also applies when you <span class=\"hue-doc-codeph\">CAST()</span> a <span class=\"hue-doc-codeph\">BIGINT</span>\n          value to <span class=\"hue-doc-codeph\">TIMESTAMP</span>, or a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value to\n          <span class=\"hue-doc-codeph\">BIGINT</span>. When this setting is enabled, these functions and operations\n          convert to and from values representing the local time zone. See\n          <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a> for details about how Impala\n          handles time zone considerations for the <span class=\"hue-doc-codeph\">TIMESTAMP</span> data type.\n        </li></ul></p><p><b>Function reference:</b></p><p>\n      Impala supports the following date and time functions:\n    </p><ul><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/add_months\">ADD_MONTHS</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/adddate\">ADDDATE</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/current_date\">CURRENT_DATE</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/current_timestamp\">CURRENT_TIMESTAMP</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/date_add\">DATE_ADD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/date_part\">DATE_PART</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/date_sub\">DATE_SUB</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/date_trunc\">DATE_TRUNC</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/datediff\">DATEDIFF</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/day\">DAY</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/dayname\">DAYNAME</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/dayofweek\">DAYOFWEEK</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/dayofyear\">DAYOFYEAR</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/days_add\">DAYS_ADD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/days_sub\">DAYS_SUB</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/extract\">EXTRACT</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/from_timestamp\">FROM_TIMESTAMP</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/from_unixtime\">FROM_UNIXTIME</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/from_utc_timestamp\">FROM_UTC_TIMESTAMP</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/hour\">HOUR</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/hours_add\">HOURS_ADD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/hours_sub\">HOURS_SUB</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/int_months_between\">INT_MONTHS_BETWEEN</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/microseconds_add\">MICROSECONDS_ADD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/microseconds_sub\">MICROSECONDS_SUB</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/millisecond\">MILLISECOND</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/milliseconds_add\">MILLISECONDS_ADD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/milliseconds_sub\">MILLISECONDS_SUB</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/minute\">MINUTE</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/minutes_add\">MINUTES_ADD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/minutes_sub\">MINUTES_SUB</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/month\">MONTH</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/month\">MONTHNAME</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/monthname\">MONTHS_ADD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/months_between\">MONTHS_BETWEEN</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/months_sub\">MONTHS_SUB</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/nanoseconds_add\">NANOSECONDS_ADD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/nanoseconds_sub\">NANOSECONDS_SUB</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/next_day\">NEXT_DAY</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/now\">NOW</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/quarter\">QUARTER</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/second\">SECOND</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/seconds_add\">SECONDS_ADD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/seconds_sub\">SECONDS_SUB</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/subdate\">SUBDATE</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/timeofday\">TIMEOFDAY</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/timestamp_cmp\">TIMESTAMP_CMP</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/to_date\">TO_DATE</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/to_timestamp\">TO_TIMESTAMP</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/to_utc_timestamp\">TO_UTC_TIMESTAMP</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/trunc\">TRUNC</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/unix_timestamp\">UNIX_TIMESTAMP</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/utc_timestamp\">UTC_TIMESTAMP</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/weekofyear\">WEEKOFYEAR</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/weeks_add\">WEEKS_ADD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/weeks_sub\">WEEKS_SUB</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/year\">YEAR</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/years_add\">YEARS_ADD</a></li><li><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/years_sub\">YEARS_SUB</a></li></ul><dl><dt id=\"add_months\">\n          ADD_MONTHS(TIMESTAMP / DATE date, INT months), ADD_MONTHS(TIMESTAMP / DATE date,\n          BIGINT months)\n        </dt><dd><b>Purpose:</b> Adds <span class=\"hue-doc-varname\">months</span> to <span class=\"hue-doc-varname\">date</span> and returns\n          the new date value.\n          <p><b>Return type:</b><ul><li>\n                If <span class=\"hue-doc-varname\">date</span> is <span class=\"hue-doc-codeph\">TIMESTAMP</span>, returns\n                <span class=\"hue-doc-codeph\">TIMESTAMP</span>.\n              </li><li>\n                If <span class=\"hue-doc-varname\">date</span> is <span class=\"hue-doc-codeph\">DATE</span>, returns\n                <span class=\"hue-doc-codeph\">DATE</span>.\n              </li></ul></p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            Same as\n            <span class=\"hue-doc-codeph\"><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/months_add\">MONTHS_ADD()</a></span>.\n            Available in Impala 1.4 and higher. For compatibility when porting code with vendor\n            extensions.\n          </p></dd><dt id=\"adddate\">\n          ADDDATE(TIMESTAMP / DATE date, INT / BIGINT days)\n        </dt><dd><b>Purpose:</b> Adds <span class=\"hue-doc-varname\">days</span> to <span class=\"hue-doc-varname\">date</span> and returns\n          the new date value.\n          <p>\n            The <span class=\"hue-doc-varname\">days</span> value can be negative, which gives the same result as\n            the <span class=\"hue-doc-codeph\">SUBDATE()</span> function.\n          </p><p><b>Return type:</b><ul><li>\n                If <span class=\"hue-doc-varname\">date</span> is <span class=\"hue-doc-codeph\">TIMESTAMP</span>, returns\n                <span class=\"hue-doc-codeph\">TIMESTAMP</span>.\n              </li><li>\n                If <span class=\"hue-doc-varname\">date</span> is <span class=\"hue-doc-codeph\">DATE</span>, returns\n                <span class=\"hue-doc-codeph\">DATE</span>.\n              </li></ul></p></dd><dt id=\"current_date\">\n          CURRENT_DATE()\n        </dt><dd><b>Purpose:</b> Returns the current date.\n          <p>\n            Any references to the <span class=\"hue-doc-codeph\">CURRENT_DATE()</span> function are evaluated at the\n            start of a query. All calls to <span class=\"hue-doc-codeph\">CURRENT_DATE()</span> within the same query\n            return the same value, and the value does not depend on how long the query takes.\n          </p><p><b>Return type:</b><span class=\"hue-doc-codeph\">DATE</span></p></dd><dt id=\"current_timestamp\">\n          CURRENT_TIMESTAMP()\n        </dt><dd><b>Purpose:</b> Alias for the <span class=\"hue-doc-codeph\">NOW()</span> function.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p></dd><dt id=\"date_add\">\n          DATE_ADD(TIMESTAMP / DATE date, INT / BIGINT days), DATE_ADD(TIMESTAMP / DATE date,\n          interval_expression)\n        </dt><dd><b>Purpose:</b> Adds a specified number of days to the <span class=\"hue-doc-varname\">date</span>\n          argument.\n        </dd><dd>\n          With an <span class=\"hue-doc-codeph\">INTERVAL</span> expression as the second argument, you can calculate\n          a delta value using other units such as weeks, years, hours, seconds, and so on; see\n          <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a> for details.\n          <p><b>Return type:</b><ul><li>\n                If <span class=\"hue-doc-varname\">date</span> is <span class=\"hue-doc-codeph\">TIMESTAMP</span>, returns\n                <span class=\"hue-doc-codeph\">TIMESTAMP</span>.\n              </li><li>\n                If <span class=\"hue-doc-varname\">date</span> is <span class=\"hue-doc-codeph\">DATE</span>, returns\n                <span class=\"hue-doc-codeph\">DATE</span>.\n              </li></ul></p><p>\n            The following examples show the shorthand notation of an <span class=\"hue-doc-codeph\">INTERVAL</span>\n            expression, instead of specifying the precise number of days. The\n            <span class=\"hue-doc-codeph\">INTERVAL</span> notation also lets you work with units smaller than a\n            single day.\n          </p><div class=\"hue-doc-codeblock\">select now() as right_now, date_add(now(), interval 3 weeks) as in_3_weeks;\n+-------------------------------+-------------------------------+\n| right_now                     | in_3_weeks                    |\n+-------------------------------+-------------------------------+\n| 2016-05-20 11:05:39.173331000 | 2016-06-10 11:05:39.173331000 |\n+-------------------------------+-------------------------------+\n\nselect now() as right_now, date_add(now(), interval 6 hours) as in_6_hours;\n+-------------------------------+-------------------------------+\n| right_now                     | in_6_hours                    |\n+-------------------------------+-------------------------------+\n| 2016-05-20 11:13:51.492536000 | 2016-05-20 17:13:51.492536000 |\n+-------------------------------+-------------------------------+\n</div><p>\n            Like all date/time functions that deal with months, <span class=\"hue-doc-codeph\">date_add()</span>\n            handles nonexistent dates past the end of a month by setting the date to the last\n            day of the month. The following example shows how the nonexistent date April 31st is\n            normalized to April 30th:\n          </p><div class=\"hue-doc-codeblock\">select date_add(cast('2016-01-31' as timestamp), interval 3 months) as 'april_31st';\n+---------------------+\n| april_31st          |\n+---------------------+\n| 2016-04-30 00:00:00 |\n+---------------------+\n</div></dd><dt>\n          DATE_CMP(DATE date1, DATE date2)\n        </dt><dd><b>Purpose:</b> Compares <span class=\"hue-doc-varname\">date1</span> and <span class=\"hue-doc-varname\">date2</span> and\n          returns:\n          <ul><li><span class=\"hue-doc-codeph\">0</span> if the dates are identical.\n            </li><li>\n              1 if <span class=\"hue-doc-varname\">date1</span> &gt; <span class=\"hue-doc-varname\">date2</span>.\n            </li><li>\n              -1 if <span class=\"hue-doc-varname\">date1</span> &lt; <span class=\"hue-doc-varname\">date2</span>.\n            </li><li><span class=\"hue-doc-codeph\">NULL</span> if <span class=\"hue-doc-varname\">date1</span> or <span class=\"hue-doc-varname\">date2</span> is\n              <span class=\"hue-doc-codeph\">NULL</span>.\n            </li></ul><p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p></dd><dt id=\"date_part\">\n          DATE_PART(STRING part, TIMESTAMP / DATE date)\n        </dt><dd><b>Purpose:</b> Similar to\n          <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_datetime_functions.xml\" data-doc-anchor-id=\"datetime_functions/extract\"><span class=\"hue-doc-codeph\">EXTRACT()</span></a>,\n          with the argument order reversed. Supports the same date and time units as\n          <span class=\"hue-doc-codeph\">EXTRACT()</span>. For compatibility with SQL code containing vendor\n          extensions.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">BIGINT</span></p></dd><dt id=\"date_sub\">\n          DATE_SUB(TIMESTAMP startdate, INT days), DATE_SUB(TIMESTAMP startdate,\n          interval_expression)\n        </dt><dd><b>Purpose:</b> Subtracts a specified number of days from a <span class=\"hue-doc-codeph\">TIMESTAMP</span>\n          value. With an <span class=\"hue-doc-codeph\">INTERVAL</span> expression as the second argument, you can\n          calculate a delta value using other units such as weeks, years, hours, seconds, and so\n          on; see <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a> for details.\n          <p><b>Return type:</b><ul><li>\n                If <span class=\"hue-doc-varname\">date</span> is <span class=\"hue-doc-codeph\">TIMESTAMP</span>, returns\n                <span class=\"hue-doc-codeph\">TIMESTAMP</span>.\n              </li><li>\n                If <span class=\"hue-doc-varname\">date</span> is <span class=\"hue-doc-codeph\">DATE</span>, returns\n                <span class=\"hue-doc-codeph\">DATE</span>.\n              </li></ul></p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following example shows the simplest usage, of subtracting a specified number of\n            days from a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value:\n          </p><div class=\"hue-doc-codeblock\">select now() as right_now, date_sub(now(), 7) as last_week;\n+-------------------------------+-------------------------------+\n| right_now                     | last_week                     |\n+-------------------------------+-------------------------------+\n| 2016-05-20 11:21:30.491011000 | 2016-05-13 11:21:30.491011000 |\n+-------------------------------+-------------------------------+\n</div><p>\n            The following examples show the shorthand notation of an <span class=\"hue-doc-codeph\">INTERVAL</span>\n            expression, instead of specifying the precise number of days. The\n            <span class=\"hue-doc-codeph\">INTERVAL</span> notation also lets you work with units smaller than a\n            single day.\n          </p><div class=\"hue-doc-codeblock\">select now() as right_now, date_sub(now(), interval 3 weeks) as 3_weeks_ago;\n+-------------------------------+-------------------------------+\n| right_now                     | 3_weeks_ago                   |\n+-------------------------------+-------------------------------+\n| 2016-05-20 11:23:05.176953000 | 2016-04-29 11:23:05.176953000 |\n+-------------------------------+-------------------------------+\n\nselect now() as right_now, date_sub(now(), interval 6 hours) as 6_hours_ago;\n+-------------------------------+-------------------------------+\n| right_now                     | 6_hours_ago                   |\n+-------------------------------+-------------------------------+\n| 2016-05-20 11:23:35.439631000 | 2016-05-20 05:23:35.439631000 |\n+-------------------------------+-------------------------------+\n</div><p>\n            Like all date/time functions that deal with months, <span class=\"hue-doc-codeph\">date_add()</span>\n            handles nonexistent dates past the end of a month by setting the date to the last\n            day of the month. The following example shows how the nonexistent date April 31st is\n            normalized to April 30th:\n          </p><div class=\"hue-doc-codeblock\">select date_sub(cast('2016-05-31' as timestamp), interval 1 months) as 'april_31st';\n+---------------------+\n| april_31st          |\n+---------------------+\n| 2016-04-30 00:00:00 |\n+---------------------+\n</div></dd><dt id=\"date_trunc\">\n          DATE_TRUNC(STRING unit, TIMESTAMP / DATE ts)\n        </dt><dd><b>Purpose:</b> Returns the <span class=\"hue-doc-varname\">ts</span> value truncated to the specified\n          <span class=\"hue-doc-varname\">unit</span>.\n          <p><b>Argument:</b> The <span class=\"hue-doc-codeph\">unit</span> argument is not case-sensitive. This\n            argument string can be one of:\n          </p><table id=\"table_ucy_trp_p3b\"><thead><tr><td>\n                    Unit\n                  </td><td>\n                    Supported for TIMESTAMP\n                  </td><td>\n                    Supported for DATE\n                  </td></tr></thead><tbody><tr><td><span class=\"hue-doc-codeph\">'MICROSECONDS'</span></td><td>\n                    Yes\n                  </td><td>\n                    No\n                  </td></tr><tr><td><span class=\"hue-doc-codeph\">'MILLISECONDS'</span></td><td>\n                    Yes\n                  </td><td>\n                    No\n                  </td></tr><tr><td><span class=\"hue-doc-codeph\">'SECOND'</span></td><td>\n                    Yes\n                  </td><td>\n                    No\n                  </td></tr><tr><td><span class=\"hue-doc-codeph\">'MINUTE'</span></td><td>\n                    Yes\n                  </td><td>\n                    No\n                  </td></tr><tr><td><span class=\"hue-doc-codeph\">'HOUR'</span></td><td>\n                    Yes\n                  </td><td>\n                    No\n                  </td></tr><tr><td><span class=\"hue-doc-codeph\">'DAY'</span></td><td>\n                    Yes\n                  </td><td>\n                    Yes\n                  </td></tr><tr><td><span class=\"hue-doc-codeph\">'WEEK'</span></td><td>\n                    Yes\n                  </td><td>\n                    Yes\n                  </td></tr><tr><td><span class=\"hue-doc-codeph\">'MONTH'</span></td><td>\n                    Yes\n                  </td><td>\n                    Yes\n                  </td></tr><tr><td><span class=\"hue-doc-codeph\">'YEAR'</span></td><td>\n                    Yes\n                  </td><td>\n                    Yes\n                  </td></tr><tr><td><span class=\"hue-doc-codeph\">'DECADE'</span></td><td>\n                    Yes\n                  </td><td>\n                    Yes\n                  </td></tr><tr><td><span class=\"hue-doc-codeph\">'CENTURY'</span></td><td>\n                    Yes\n                  </td><td>\n                    Yes\n                  </td></tr><tr><td><span class=\"hue-doc-codeph\">'MILLENNIUM'</span></td><td>\n                    Yes\n                  </td><td>\n                    Yes\n                  </td></tr></tbody></table><p id=\"added_in_2110\"><b>Added in:</b>Impala 2.11.0</p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            Although this function is similar to calling <span class=\"hue-doc-codeph\">TRUNC()</span> with a\n            <span class=\"hue-doc-codeph\">TIMESTAMP</span> or <span class=\"hue-doc-codeph\">DATE</span> argument, the order of arguments\n            and the recognized units are different between <span class=\"hue-doc-codeph\">TRUNC()</span> and\n            <span class=\"hue-doc-codeph\">DATE_TRUNC()</span>. Therefore, these functions are not interchangeable.\n          </p><p>\n            This function is typically used in <span class=\"hue-doc-codeph\">GROUP BY</span> queries to aggregate\n            results from the same hour, day, week, month, quarter, and so on. You can also use\n            this function in an <span class=\"hue-doc-codeph\">INSERT ... SELECT</span> into a partitioned table to\n            divide <span class=\"hue-doc-codeph\">TIMESTAMP</span> or <span class=\"hue-doc-codeph\">DATE</span> values into the correct\n            partition.\n          </p><p><b>Return type:</b><ul><li><span class=\"hue-doc-codeph\">TIMESTAMP</span> if the second argument, <span class=\"hue-doc-varname\">ts</span>, is\n                <span class=\"hue-doc-codeph\">TIMESTAMP</span>.\n              </li><li><span class=\"hue-doc-codeph\">DATE</span> if the second argument, <span class=\"hue-doc-varname\">ts</span>, is\n                <span class=\"hue-doc-codeph\">DATE</span>.\n              </li></ul></p><p><b>Examples:</b></p><p><span class=\"hue-doc-codeph\">DATE_TRUNC('HOUR', NOW())</span> returns <span class=\"hue-doc-codeph\">2017-12-05\n            13:00:00</span>.\n          </p><p><span class=\"hue-doc-codeph\">DATE_TRUNC('MILLENNIUM', DATE'2019-08-02')</span> returns\n            <span class=\"hue-doc-codeph\">2001-01-01</span>.\n          </p></dd><dt id=\"datediff\">\n          DATEDIFF(TIMESTAMP / DATE enddate, TIMESTAMP / DATE startdate)\n        </dt><dd><b>Purpose:</b> Returns the number of days from <span class=\"hue-doc-varname\">startdate</span> to\n          <span class=\"hue-doc-varname\">enddate</span>.\n          <p>\n            If <span class=\"hue-doc-varname\">enddate</span> &gt; <span class=\"hue-doc-varname\">startdate</span>, the return value is\n            positive.\n          </p><p>\n            If <span class=\"hue-doc-varname\">enddate</span> &lt; <span class=\"hue-doc-varname\">startdate</span>, the return value is\n            negative.\n          </p><p>\n            If <span class=\"hue-doc-varname\">enddate</span> = <span class=\"hue-doc-varname\">startdate</span>, the return value is\n            zero.\n          </p><p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p><p><b>Usage notes:</b></p><p>\n            The time portions of the <span class=\"hue-doc-varname\">enddate</span> and <span class=\"hue-doc-varname\">startdate</span>\n            values are ignored. For example, 11:59 PM on one day and 12:01 AM on the next day\n            represent a <span class=\"hue-doc-codeph\">DATEDIFF()</span> of -1 because the date/time values represent\n            different days, even though the <span class=\"hue-doc-codeph\">TIMESTAMP</span> values differ by only 2\n            minutes.\n          </p></dd><dt id=\"day\">\n          DAY(TIMESTAMP / DATE date), DAYOFMONTH(TIMESTAMP / DATE date)\n        </dt><dd><b>Purpose:</b> Returns the day value from the <span class=\"hue-doc-varname\">date</span> argument. The\n          value represents the day of the month, therefore is in the range 1-31, or less for\n          months without 31 days.\n          <p>\n            Returns <span class=\"hue-doc-codeph\">NULL</span> for nonexistent dates, e.g. <span class=\"hue-doc-codeph\">Feb 30</span>,\n            or misformatted date strings, e.g. <span class=\"hue-doc-codeph\">'1999-02-013'</span>.\n          </p><p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p></dd><dt id=\"dayname\">\n          DAYNAME(TIMESTAMP / DATE date)\n        </dt><dd><b>Purpose:</b> Returns the day name of the <span class=\"hue-doc-varname\">date</span> argument. The\n          range of return values is <span class=\"hue-doc-codeph\">'Sunday'</span> to <span class=\"hue-doc-codeph\">'Saturday'</span>.\n          Used in report-generating queries, as an alternative to calling\n          <span class=\"hue-doc-codeph\">DAYOFWEEK()</span> and turning that numeric return value into a string using\n          a <span class=\"hue-doc-codeph\">CASE</span> expression.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p></dd><dt id=\"dayofweek\">\n          DAYOFWEEK(TIMESTAMP / DATE date)\n        </dt><dd><b>Purpose:</b> Returns the day field of the <span class=\"hue-doc-varname\">date</span> arguement,\n          corresponding to the day of the week. The range of return values is 1 (Sunday) to 7\n          (Saturday).\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p></dd><dt id=\"dayofyear\">\n          DAYOFYEAR(TIMESTAMP / DATE date)\n        </dt><dd><b>Purpose:</b> Returns the day field from the <span class=\"hue-doc-varname\">date</span> argument,\n          corresponding to the day of the year. The range of return values is 1 (January 1) to\n          366 (December 31 of a leap year).\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p></dd><dt id=\"days_add\">\n          DAYS_ADD(TIMESTAMP / DATE date, INT / BIGINT days)\n        </dt><dd><b>Purpose:</b> Returns the value with the number of <span class=\"hue-doc-varname\">days</span> added to\n          <span class=\"hue-doc-varname\">date</span>.\n          <p><b>Return type:</b><ul><li>\n                If <span class=\"hue-doc-varname\">date</span> is <span class=\"hue-doc-codeph\">TIMESTAMP</span>, returns\n                <span class=\"hue-doc-codeph\">TIMESTAMP</span>.\n              </li><li>\n                If <span class=\"hue-doc-varname\">date</span> is <span class=\"hue-doc-codeph\">DATE</span>, returns\n                <span class=\"hue-doc-codeph\">DATE</span>.\n              </li></ul></p></dd><dt id=\"days_sub\">\n          DAYS_SUB(TIMESTAMP / DATE date, INT / BIGINT days)\n        </dt><dd><b>Purpose:</b> Returns the value with the number of <span class=\"hue-doc-varname\">days</span>\n          subtracted from <span class=\"hue-doc-varname\">date</span>.\n          <p><b>Return type:</b><ul><li>\n                If <span class=\"hue-doc-varname\">date</span> is <span class=\"hue-doc-codeph\">TIMESTAMP</span>, returns\n                <span class=\"hue-doc-codeph\">TIMESTAMP</span>.\n              </li><li>\n                If <span class=\"hue-doc-varname\">date</span> is <span class=\"hue-doc-codeph\">DATE</span>, returns\n                <span class=\"hue-doc-codeph\">DATE</span>.\n              </li></ul></p></dd><dt id=\"extract\">\n          EXTRACT(TIMESTAMP / DATE ts, STRING unit), EXTRACT(unit FROM TIMESTAMP / DATE ts)\n        </dt><dd><b>Purpose:</b> Returns one of the numeric date or time fields, specified by\n          <span class=\"hue-doc-varname\">unit</span>, from <span class=\"hue-doc-varname\">ts</span>.\n          <p><b>Argument:</b> The <span class=\"hue-doc-codeph\">unit</span> argument value is not case-sensitive. The\n            <span class=\"hue-doc-codeph\">unit</span> string can be one of:\n          </p><p><table id=\"table_itt_ktp_p3b\"><thead><tr><td>\n                      Unit\n                    </td><td>\n                      Supported for TIMESTAMP ts\n                    </td><td>\n                      Supported for DATE ts\n                    </td></tr></thead><tbody><tr><td><span class=\"hue-doc-codeph\">'EPOCH'</span></td><td>\n                      Yes\n                    </td><td>\n                      No\n                    </td></tr><tr><td><span class=\"hue-doc-codeph\">'MILLISECOND'</span></td><td>\n                      Yes\n                    </td><td>\n                      No\n                    </td></tr><tr><td><span class=\"hue-doc-codeph\">'SECOND'</span></td><td>\n                      Yes\n                    </td><td>\n                      No\n                    </td></tr><tr><td><span class=\"hue-doc-codeph\">'MINUTE'</span></td><td>\n                      Yes\n                    </td><td>\n                      No\n                    </td></tr><tr><td><span class=\"hue-doc-codeph\">'HOUR'</span></td><td>\n                      Yes\n                    </td><td>\n                      No\n                    </td></tr><tr><td><span class=\"hue-doc-codeph\">'DAY'</span></td><td>\n                      Yes\n                    </td><td>\n                      Yes\n                    </td></tr><tr><td><span class=\"hue-doc-codeph\">'MONTH'</span></td><td>\n                      Yes\n                    </td><td>\n                      Yes\n                    </td></tr><tr><td><span class=\"hue-doc-codeph\">'QUARTER'</span></td><td>\n                      Yes\n                    </td><td>\n                      Yes\n                    </td></tr><tr><td><span class=\"hue-doc-codeph\">'YEAR'</span></td><td>\n                      Yes\n                    </td><td>\n                      Yes\n                    </td></tr></tbody></table></p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            Typically used in <span class=\"hue-doc-codeph\">GROUP BY</span> queries to arrange results by hour, day,\n            month, and so on. You can also use this function in an <span class=\"hue-doc-codeph\">INSERT ...\n            SELECT</span> statement to insert into a partitioned table to split up\n            <span class=\"hue-doc-codeph\">TIMESTAMP</span> values into individual parts, if the partitioned table\n            has separate partition key columns representing year, month, day, and so on. If you\n            need to divide by more complex units of time, such as by week or by quarter, use the\n            <span class=\"hue-doc-codeph\">TRUNC()</span> function instead.\n          </p><p><b>Return type:</b><span class=\"hue-doc-codeph\">BIGINT</span></p><p id=\"example_blurb\"><b>Examples:</b></p><span class=\"hue-doc-codeph\">EXTRACT(DAY FROM DATE'2019-08-17')</span> returns <span class=\"hue-doc-codeph\">17</span>.\n          <p>\n            If you specify <span class=\"hue-doc-codeph\">'MILLISECOND'</span> for the <span class=\"hue-doc-varname\">unit</span>\n            argument, the function returns the seconds component and the milliseconds component.\n          </p><p><span class=\"hue-doc-codeph\">EXTRACT(CAST('2006-05-12 18:27:28.123456789' AS TIMESTAMP),\n            'MILLISECOND')</span> returns <span class=\"hue-doc-codeph\">28123</span>.\n          </p></dd><dt id=\"from_timestamp\">\n          FROM_TIMESTAMP(TIMESTAMP datetime, STRING pattern), FROM_TIMESTAMP(STRING datetime,\n          STRING pattern)\n        </dt><dd><b>Purpose:</b> Converts a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value into a string representing\n          the same value.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            The <span class=\"hue-doc-codeph\">FROM_TIMESTAMP()</span> function provides a flexible way to convert\n            <span class=\"hue-doc-codeph\">TIMESTAMP</span> values into arbitrary string formats for reporting\n            purposes.\n          </p><p>\n            Because Impala implicitly converts string values into <span class=\"hue-doc-codeph\">TIMESTAMP</span>,\n            you can pass date/time values represented as strings (in the standard\n            <span class=\"hue-doc-codeph\">yyyy-MM-dd HH:mm:ss.SSS</span> format) to this function. The result is a\n            string using different separator characters, order of fields, spelled-out month\n            names, or other variation of the date/time string representation.\n          </p><p>\n            The allowed tokens for the pattern string are the same as for the\n            <span class=\"hue-doc-codeph\">FROM_UNIXTIME()</span> function.\n          </p></dd><dt id=\"from_unixtime\">\n          FROM_UNIXTIME(BIGINT unixtime [, STRING pattern])\n        </dt><dd><b>Purpose:</b> Converts the number of seconds from the Unix epoch to the specified time\n          into a string in the local time zone. <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p> The <span class=\"hue-doc-varname\">pattern</span> string supports the following subset of\n            Java SimpleDateFormat. </p><table id=\"table_dzg_zpm_1jb\"><thead><tr><td> Pattern </td><td> Description </td></tr></thead><tbody><tr><td><span class=\"hue-doc-codeph\">y</span></td><td> Year </td></tr><tr><td><span class=\"hue-doc-codeph\">M</span></td><td> Month </td></tr><tr><td><span class=\"hue-doc-codeph\">d</span></td><td> Day </td></tr><tr><td><span class=\"hue-doc-codeph\">H</span></td><td> Hour </td></tr><tr><td><span class=\"hue-doc-codeph\">m</span></td><td> Minute </td></tr><tr><td><span class=\"hue-doc-codeph\">s</span></td><td> Second </td></tr><tr><td><span class=\"hue-doc-codeph\">S</span></td><td> Fractional second </td></tr></tbody></table><p> The following rules apply to the <span class=\"hue-doc-varname\">pattern</span> string: </p><ul><li> The <span class=\"hue-doc-varname\">pattern</span> string is case-sensitive. </li><li> All fields are variable length, and thus must use separators to specify the\n              boundaries of the fields, with the exception of the time zone values.</li><li>Time zone offsets will be disregarded. The FROM_UNIXTIME() function accepts a bigint\n              number as input (seconds from Unix epoch) but will not hold the timezone related\n              information and will be excluded in the output.</li><li> Formatting character groups can appear in any order along with any separators. For\n              example: <ul><li><span class=\"hue-doc-codeph\">yyyy/MM/dd</span></li><li><span class=\"hue-doc-codeph\">dd-MMM-yy</span></li><li><span class=\"hue-doc-codeph\">(dd)(MM)(yyyy) HH:mm:ss</span></li><li><span class=\"hue-doc-codeph\">yyyy-MM-dd HH:mm:ss</span></li></ul></li></ul><p> In Impala 1.3 and later, you can switch the order of elements, use\n            alternative separator characters, and use a different number of placeholders for each\n            unit. Adding more instances of <span class=\"hue-doc-codeph\">y</span>, <span class=\"hue-doc-codeph\">d</span>,\n              <span class=\"hue-doc-codeph\">H</span>, and so on produces output strings zero-padded to the requested\n            number of characters. The exception is <span class=\"hue-doc-codeph\">M</span> for months, where\n              <span class=\"hue-doc-codeph\">M</span> produces a non-padded value such as <span class=\"hue-doc-codeph\">3</span>,\n              <span class=\"hue-doc-codeph\">MM</span> produces a zero-padded value such as <span class=\"hue-doc-codeph\">03</span>,\n              <span class=\"hue-doc-codeph\">MMM</span> produces an abbreviated month name such as <span class=\"hue-doc-codeph\">Mar</span>,\n            and sequences of 4 or more <span class=\"hue-doc-codeph\">M</span> are not allowed. </p><p> A date string including all fields could be <span class=\"hue-doc-codeph\">'yyyy-MM-dd\n              HH:mm:ss.SSSSSS'</span>, <span class=\"hue-doc-codeph\">'dd/MM/yyyy HH:mm:ss.SSSSSS'</span>, <span class=\"hue-doc-codeph\">'MMM\n              dd, yyyy HH.mm.ss (SSSSSS)'</span> or other combinations of placeholders and\n            separator characters. </p><p id=\"y2k38\">\n        In Impala 2.2.0 and higher, built-in functions that accept or return integers\n        representing <span class=\"hue-doc-codeph\">TIMESTAMP</span> values use the <span class=\"hue-doc-codeph\">BIGINT</span> type for\n        parameters and return values, rather than <span class=\"hue-doc-codeph\">INT</span>. This change lets the\n        date and time functions avoid an overflow error that would otherwise occur on January\n        19th, 2038 (known as the\n        <a class=\"hue-doc-external-link\" href=\"http://en.wikipedia.org/wiki/Year_2038_problem\" target=\"_blank\"><q>Year\n        2038 problem</q> or <q>Y2K38 problem</q></a>). This change affects the\n        <span class=\"hue-doc-codeph\">FROM_UNIXTIME()</span> and <span class=\"hue-doc-codeph\">UNIX_TIMESTAMP()</span> functions. You\n        might need to change application code that interacts with these functions, change the\n        types of columns that store the return values, or add <span class=\"hue-doc-codeph\">CAST()</span> calls to\n        SQL statements that call these functions.\n      </p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p id=\"timezone_conversion_caveat\">\n        The way this function deals with time zones when converting to or from\n        <span class=\"hue-doc-codeph\">TIMESTAMP</span> values is affected by the\n        <span class=\"hue-doc-codeph\">‑‑use_local_tz_for_unix_timestamp_conversions</span> startup flag\n        for the <span class=\"hue-doc-cmdname\">impalad</span> daemon. See\n        <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a> for details about how\n        Impala handles time zone considerations for the <span class=\"hue-doc-codeph\">TIMESTAMP</span> data type.\n      </p></dd><dt id=\"from_utc_timestamp\">\n          FROM_UTC_TIMESTAMP(TIMESTAMP ts, STRING timezone)\n        </dt><dd><b>Purpose:</b> Converts a specified UTC timestamp value into the appropriate value\n          for a specified time zone.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p><b>Usage notes:</b> Often used to translate UTC time zone data stored in a table\n            back to the local date and time for reporting. The opposite of the\n            <span class=\"hue-doc-codeph\">TO_UTC_TIMESTAMP()</span> function.\n          </p><p id=\"current_timezone_tip\">\n        To determine the time zone of the server you are connected to, in\n        Impala 2.3 and higher you can call the\n        <span class=\"hue-doc-codeph\">timeofday()</span> function, which includes the time zone specifier in its\n        return value. Remember that with cloud computing, the server you interact with might be\n        in a different time zone than you are, or different sessions might connect to servers in\n        different time zones, or a cluster might include servers in more than one time zone.\n      </p><p>\n            See discussion of time zones in\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a> for information about\n            using this function for conversions between the local time zone and UTC.\n          </p></dd><dt id=\"hour\">\n          HOUR(TIMESTAMP ts)\n        </dt><dd><b>Purpose:</b> Returns the hour field from a <span class=\"hue-doc-codeph\">TIMESTAMP</span> field.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p></dd><dt id=\"hours_add\">\n          HOURS_ADD(TIMESTAMP date, INT hours), HOURS_ADD(TIMESTAMP date, BIGINT hours)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time plus some number of hours.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p></dd><dt id=\"hours_sub\">\n          HOURS_SUB(TIMESTAMP date, INT hours), HOURS_SUB(TIMESTAMP date, BIGINT hours)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time minus some number of hours.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p></dd><dt id=\"int_months_between\">\n          INT_MONTHS_BETWEEN(TIMESTAMP / DATE enddate, TIMESTAMP / DATE startdate)\n        </dt><dd><b>Purpose:</b> Returns the number of months from <span class=\"hue-doc-varname\">startdate</span> to\n          <span class=\"hue-doc-varname\">enddate</span>, representing only the full months that passed.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p><p id=\"added_in_230\"><b>Added in:</b>Impala 2.3.0</p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            Typically used in business contexts, for example to determine whether a specified\n            number of months have passed or whether some end-of-month deadline was reached.\n          </p><p>\n            The method of determining the number of elapsed months includes some special\n            handling of months with different numbers of days that creates edge cases for dates\n            between the 28th and 31st days of certain months. See\n            <span class=\"hue-doc-codeph\">MONTHS_BETWEEN()</span> for details. The\n            <span class=\"hue-doc-codeph\">INT_MONTHS_BETWEEN()</span> result is essentially the\n            <span class=\"hue-doc-codeph\">FLOOR()</span> of the <span class=\"hue-doc-codeph\">MONTHS_BETWEEN()</span> result.\n          </p><p>\n            If either value is <span class=\"hue-doc-codeph\">NULL</span>, which could happen for example when\n            converting a nonexistent date string such as <span class=\"hue-doc-codeph\">'2015-02-29'</span> to a\n            <span class=\"hue-doc-codeph\">TIMESTAMP</span>, the result is also <span class=\"hue-doc-codeph\">NULL</span>.\n          </p><p>\n            If the first argument represents an earlier time than the second argument, the\n            result is negative.\n          </p></dd><dt id=\"last_day\">\n          LAST_DAY(TIMESTAMP / DATE ts)\n        </dt><dd><b>Purpose:</b> Returns the beginning of the last calendar day in the same month of\n          <span class=\"hue-doc-varname\">ts</span>.\n          <p><b>Return type:</b><ul><li>\n                Returns <span class=\"hue-doc-codeph\">TIMESTAMP</span> if <span class=\"hue-doc-varname\">ts</span> is of the\n                <span class=\"hue-doc-codeph\">TIMESTAMP</span> type.\n              </li><li>\n                Returns <span class=\"hue-doc-codeph\">DATE</span> if <span class=\"hue-doc-varname\">ts</span> is of the\n                <span class=\"hue-doc-codeph\">DATE</span> type.\n              </li></ul></p><p id=\"added_in_290\"><b>Added in:</b>Impala 2.9.0</p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            If the input argument does not represent a valid Impala <span class=\"hue-doc-codeph\">TIMESTAMP</span>\n            including both date and time portions, the function returns <span class=\"hue-doc-codeph\">NULL</span>.\n            For example, if the input argument is a string that cannot be implicitly cast to\n            <span class=\"hue-doc-codeph\">TIMESTAMP</span>, does not include a date portion, or is out of the\n            allowed range for Impala <span class=\"hue-doc-codeph\">TIMESTAMP</span> values, the function returns\n            <span class=\"hue-doc-codeph\">NULL</span>.\n          </p></dd><dt id=\"microseconds_add\">\n          MICROSECONDS_ADD(TIMESTAMP date, INT microseconds), MICROSECONDS_ADD(TIMESTAMP date,\n          BIGINT microseconds)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time plus some number of microseconds.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p></dd><dt id=\"microseconds_sub\">\n          MICROSECONDS_SUB(TIMESTAMP date, INT microseconds), MICROSECONDS_SUB(TIMESTAMP date,\n          BIGINT microseconds)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time minus some number of microseconds.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p></dd><dt id=\"millisecond\">\n          MILLISECOND(TIMESTAMP ts)\n        </dt><dd><b>Purpose:</b> Returns the millisecond portion of a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p><p id=\"added_in_250\"><b>Added in:</b>Impala 2.5.0</p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            The millisecond value is truncated, not rounded, if the <span class=\"hue-doc-codeph\">TIMESTAMP</span>\n            value contains more than 3 significant digits to the right of the decimal point.\n          </p></dd><dt id=\"milliseconds_add\">\n          MILLISECONDS_ADD(TIMESTAMP date, INT milliseconds), MILLISECONDS_ADD(TIMESTAMP date,\n          BIGINT milliseconds)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time plus some number of milliseconds.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p></dd><dt id=\"milliseconds_sub\">\n          MILLISECONDS_SUB(TIMESTAMP date, INT milliseconds), MILLISECONDS_SUB(TIMESTAMP date,\n          BIGINT milliseconds)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time minus some number of milliseconds.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p></dd><dt id=\"minute\">\n          MINUTE(TIMESTAMP date)\n        </dt><dd><b>Purpose:</b> Returns the minute field from a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p></dd><dt id=\"minutes_add\">\n          MINUTES_ADD(TIMESTAMP date, INT minutes), MINUTES_ADD(TIMESTAMP date, BIGINT minutes)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time plus some number of minutes.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p></dd><dt id=\"minutes_sub\">\n          MINUTES_SUB(TIMESTAMP date, INT minutes), MINUTES_SUB(TIMESTAMP date, BIGINT minutes)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time minus some number of minutes.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p></dd><dt id=\"month\">\n          MONTH(TIMESTAMP / DATE date)\n        </dt><dd><b>Purpose:</b> Returns the month field, represented as an integer, from the\n          <span class=\"hue-doc-varname\">date</span> argument.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p></dd><dt id=\"monthname\">\n          MONTHNAME(TIMESTAMP / DATE date)\n        </dt><dd><b>Purpose:</b> Returns the month name of the <span class=\"hue-doc-varname\">date</span> argument.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p></dd><dt id=\"months_add\">\n          MONTHS_ADD(TIMESTAMP / DATE date, INT / BIGINT months)\n        </dt><dd><b>Purpose:</b> Returns the value with the number of <span class=\"hue-doc-varname\">months</span> added\n          to <span class=\"hue-doc-varname\">date</span>.\n          <p><b>Return type:</b><ul><li>\n                If <span class=\"hue-doc-varname\">date</span> is <span class=\"hue-doc-codeph\">TIMESTAMP</span>, returns\n                <span class=\"hue-doc-codeph\">TIMESTAMP</span>.\n              </li><li>\n                If <span class=\"hue-doc-varname\">date</span> is <span class=\"hue-doc-codeph\">DATE</span>, returns\n                <span class=\"hue-doc-codeph\">DATE</span>.\n              </li></ul></p><p><b>Usage notes:</b></p><p>\n            If <span class=\"hue-doc-varname\">date</span> is the last day of a month, the return date will fall on\n            the last day of the target month, e.g. <span class=\"hue-doc-codeph\">MONTHS_ADD(DATE'2019-01-31',\n            1)</span> returns <span class=\"hue-doc-codeph\">DATE'2019-02-28'</span>.\n          </p></dd><dt id=\"months_between\">\n          MONTHS_BETWEEN(TIMESTAMP / DATE enddate, TIMESTAMP / DATE startdate)\n        </dt><dd><b>Purpose:</b> Returns the number of months from <span class=\"hue-doc-varname\">startdate</span> to\n          <span class=\"hue-doc-varname\">enddate</span>.\n        </dd><dd>\n          This result can include a fractional part representing extra days in addition to the\n          full months between the dates. The fractional component is computed by dividing the\n          difference in days by 31 (regardless of the month).\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">DOUBLE</span></p><p id=\"added_in_230\"><b>Added in:</b>Impala 2.3.0</p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            Typically used in business contexts, for example to determine whether a specified\n            number of months have passed or whether some end-of-month deadline was reached.\n          </p><p>\n            If the only consideration is the number of full months and any fractional value is\n            not significant, use <span class=\"hue-doc-codeph\">INT_MONTHS_BETWEEN()</span> instead.\n          </p><p>\n            The method of determining the number of elapsed months includes some special\n            handling of months with different numbers of days that creates edge cases for dates\n            between the 28th and 31st days of certain months.\n          </p><p>\n            If either value is <span class=\"hue-doc-codeph\">NULL</span>, which could happen for example when\n            converting a nonexistent date string such as <span class=\"hue-doc-codeph\">'2015-02-29'</span> to a\n            <span class=\"hue-doc-codeph\">TIMESTAMP</span>, the result is also <span class=\"hue-doc-codeph\">NULL</span>.\n          </p><p>\n            If the first argument represents an earlier time than the second argument, the\n            result is negative.\n          </p><p>\n            The time portion of the input arguements are ignored.\n          </p></dd><dt id=\"months_sub\">\n          MONTHS_SUB(TIMESTAMP / DATE date, INT / BIGINT months)\n        </dt><dd><b>Purpose:</b> Returns the value with the number of <span class=\"hue-doc-varname\">months</span>\n          subtracted from <span class=\"hue-doc-varname\">date</span>.\n          <p><b>Return type:</b><ul><li>\n                If <span class=\"hue-doc-varname\">date</span> is <span class=\"hue-doc-codeph\">TIMESTAMP</span>, returns\n                <span class=\"hue-doc-codeph\">TIMESTAMP</span>.\n              </li><li>\n                If <span class=\"hue-doc-varname\">date</span> is <span class=\"hue-doc-codeph\">DATE</span>, returns\n                <span class=\"hue-doc-codeph\">DATE</span>.\n              </li></ul></p><p><b>Usage notes:</b></p><p>\n            If <span class=\"hue-doc-varname\">date</span> is the last day of a month, the return date will fall on\n            the last day of the target month, e.g. <span class=\"hue-doc-codeph\">MONTHS_SUB(DATE'2019-02-28',\n            1)</span> returns <span class=\"hue-doc-codeph\">DATE'2019-01-31'</span>.\n          </p></dd><dt id=\"nanoseconds_add\">\n          NANOSECONDS_ADD(TIMESTAMP date, INT nanoseconds), NANOSECONDS_ADD(TIMESTAMP date,\n          BIGINT nanoseconds)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time plus some number of nanoseconds.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"kudu_blurb\"><b>Kudu considerations:</b></p><p id=\"kudu_timestamp_nanoseconds_caveat\">\n        The nanosecond portion of an Impala <span class=\"hue-doc-codeph\">TIMESTAMP</span> value is rounded to the\n        nearest microsecond when that value is stored in a Kudu table.\n      </p></dd><dt id=\"nanoseconds_sub\">\n          NANOSECONDS_SUB(TIMESTAMP date, INT nanoseconds), NANOSECONDS_SUB(TIMESTAMP date,\n          BIGINT nanoseconds)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time minus some number of nanoseconds.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"kudu_blurb\"><b>Kudu considerations:</b></p><p id=\"kudu_timestamp_nanoseconds_caveat\">\n        The nanosecond portion of an Impala <span class=\"hue-doc-codeph\">TIMESTAMP</span> value is rounded to the\n        nearest microsecond when that value is stored in a Kudu table.\n      </p></dd><dt id=\"next_day\">\n          NEXT_DAY(TIMESTAMP / DATE date, STRING weekday)\n        </dt><dd><b>Purpose:</b> Returns the date of the <span class=\"hue-doc-varname\">weekday</span> that follows the\n          specified <span class=\"hue-doc-varname\">date</span>.\n          <p><b>Argument:</b> The <span class=\"hue-doc-varname\">weekday</span> is not case-sensitive.\n          </p><p>\n            The following values are accepted for <span class=\"hue-doc-varname\">weekday</span>:\n            <span class=\"hue-doc-codeph\">\"Sunday\"</span>/<span class=\"hue-doc-codeph\">\"Sun\"</span>,\n            <span class=\"hue-doc-codeph\">\"Monday\"</span>/<span class=\"hue-doc-codeph\">\"Mon\"</span>,\n            <span class=\"hue-doc-codeph\">\"Tuesday\"</span>/<span class=\"hue-doc-codeph\">\"Tue\"</span>,\n            <span class=\"hue-doc-codeph\">\"Wednesday\"</span>/<span class=\"hue-doc-codeph\">\"Wed\"</span>,\n            <span class=\"hue-doc-codeph\">\"Thursday\"</span>/<span class=\"hue-doc-codeph\">\"Thu\"</span>,\n            <span class=\"hue-doc-codeph\">\"Friday\"</span>/<span class=\"hue-doc-codeph\">\"Fri\"</span>,\n            <span class=\"hue-doc-codeph\">\"Saturday\"</span>/<span class=\"hue-doc-codeph\">\"Sat\"</span></p><p><b>Return type:</b><ul><li>\n                Returns <span class=\"hue-doc-codeph\">TIMESTAMP</span> if <span class=\"hue-doc-varname\">date</span> is of the\n                <span class=\"hue-doc-codeph\">TIMESTAMP</span> type.\n              </li><li>\n                Returns <span class=\"hue-doc-codeph\">DATE</span> if <span class=\"hue-doc-varname\">date</span> is of the\n                <span class=\"hue-doc-codeph\">DATE</span> type.\n              </li></ul></p><p id=\"example_blurb\"><b>Examples:</b></p><p><span class=\"hue-doc-codeph\">NEXT_DAY('2013-12-25','Saturday')</span> returns <span class=\"hue-doc-codeph\">'2013-12-28\n            00:00:00'</span> which is the first Saturday after December 25, 2013.\n          </p></dd><dt id=\"now\">\n          NOW()\n        </dt><dd><b>Purpose:</b> Returns the current date and time (in the local time zone) as a\n          <span class=\"hue-doc-codeph\">TIMESTAMP</span> value.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            To find a date/time value in the future or the past relative to the current date and\n            time, add or subtract an <span class=\"hue-doc-codeph\">INTERVAL</span> expression to the return value of\n            <span class=\"hue-doc-codeph\">NOW()</span>. See\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a> for examples.\n          </p><p>\n            To produce a <span class=\"hue-doc-codeph\">TIMESTAMP</span> representing the current date and time that\n            can be shared or stored without interoperability problems due to time zone\n            differences, use the <span class=\"hue-doc-codeph\">TO_UTC_TIMESTAMP()</span> function and specify the\n            time zone of the server. When <span class=\"hue-doc-codeph\">TIMESTAMP</span> data is stored in UTC form,\n            any application that queries those values can convert them to the appropriate local\n            time zone by calling the inverse function, <span class=\"hue-doc-codeph\">FROM_UTC_TIMESTAMP()</span>.\n          </p><p id=\"current_timezone_tip\">\n        To determine the time zone of the server you are connected to, in\n        Impala 2.3 and higher you can call the\n        <span class=\"hue-doc-codeph\">timeofday()</span> function, which includes the time zone specifier in its\n        return value. Remember that with cloud computing, the server you interact with might be\n        in a different time zone than you are, or different sessions might connect to servers in\n        different time zones, or a cluster might include servers in more than one time zone.\n      </p><p>\n            Any references to the <span class=\"hue-doc-codeph\">NOW()</span> function are evaluated at the start of\n            a query. All calls to <span class=\"hue-doc-codeph\">NOW()</span> within the same query return the same\n            value, and the value does not depend on how long the query takes.\n          </p></dd><dt id=\"quarter\">\n          QUARTER(TIMESTAMP / DATE date)\n        </dt><dd><b>Purpose:</b> Returns the quarter in the input <span class=\"hue-doc-varname\">date</span> argument as\n          an integer value, 1, 2, 3, or 4, where 1 represents January 1 through March 31.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p></dd><dt id=\"second\">\n          SECOND(TIMESTAMP date)\n        </dt><dd><b>Purpose:</b> Returns the second field from a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p></dd><dt id=\"seconds_add\">\n          SECONDS_ADD(TIMESTAMP date, INT seconds), SECONDS_ADD(TIMESTAMP date, BIGINT seconds)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time plus some number of seconds.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p></dd><dt id=\"seconds_sub\">\n          SECONDS_SUB(TIMESTAMP date, INT seconds), SECONDS_SUB(TIMESTAMP date, BIGINT seconds)\n        </dt><dd><b>Purpose:</b> Returns the specified date and time minus some number of seconds.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p></dd><dt id=\"subdate\">\n          SUBDATE(TIMESTAMP / DATE date, INT / BIGINT days)\n        </dt><dd><b>Purpose:</b> Subtracts <span class=\"hue-doc-varname\">days</span> from <span class=\"hue-doc-varname\">date</span> and\n          returns the new date value.\n          <p>\n            The <span class=\"hue-doc-varname\">days</span> value can be negative, which gives the same result as\n            the <span class=\"hue-doc-codeph\">ADDDATE()</span> function.\n          </p><p><b>Return type:</b><ul><li>\n                If <span class=\"hue-doc-varname\">date</span> is <span class=\"hue-doc-codeph\">TIMESTAMP</span>, returns\n                <span class=\"hue-doc-codeph\">TIMESTAMP</span>.\n              </li><li>\n                If <span class=\"hue-doc-varname\">date</span> is <span class=\"hue-doc-codeph\">DATE</span>, returns\n                <span class=\"hue-doc-codeph\">DATE</span>.\n              </li></ul></p></dd><dt id=\"timeofday\">\n          TIMEOFDAY()\n        </dt><dd><b>Purpose:</b> Returns a string representation of the current date and time,\n          according to the time of the local system, including any time zone designation.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p><p id=\"added_in_230\"><b>Added in:</b>Impala 2.3.0</p><p><b>Usage notes:</b> The result value represents similar information as the\n            <span class=\"hue-doc-codeph\">now()</span> function, only as a <span class=\"hue-doc-codeph\">STRING</span> type and with\n            somewhat different formatting. For example, the day of the week and the time zone\n            identifier are included. This function is intended primarily for compatibility with\n            SQL code from other systems that also have a <span class=\"hue-doc-codeph\">timeofday()</span> function.\n            Prefer to use <span class=\"hue-doc-codeph\">now()</span> if practical for any new Impala code.\n          </p></dd><dt id=\"timestamp_cmp\">\n          TIMESTAMP_CMP(TIMESTAMP t1, TIMESTAMP t2)\n        </dt><dd><b>Purpose:</b> Tests if one <span class=\"hue-doc-codeph\">TIMESTAMP</span> value is newer than, older\n          than, or identical to another <span class=\"hue-doc-codeph\">TIMESTAMP</span><ul><li><p>\n                If the first argument represents a later point in time than the second argument,\n                the result is 1.\n              </p></li><li><p>\n                If the first argument represents an earlier point in time than the second\n                argument, the result is -1.\n              </p></li><li><p>\n                If the first and second arguments represent identical points in time, the result\n                is 0.\n              </p></li><li><p>\n                If either argument is <span class=\"hue-doc-codeph\">NULL</span>, the result is\n                <span class=\"hue-doc-codeph\">NULL</span>.\n              </p></li></ul><p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span> (either -1, 0, 1, or <span class=\"hue-doc-codeph\">NULL</span>)\n          </p><p id=\"added_in_230\"><b>Added in:</b>Impala 2.3.0</p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p><b>Usage notes:</b> A comparison function for <span class=\"hue-doc-codeph\">TIMESTAMP</span> values that\n            only tests whether the date and time increases, decreases, or stays the same.\n            Similar to the <span class=\"hue-doc-codeph\">SIGN()</span> function for numeric values.\n          </p></dd><dt id=\"to_date\">\n          TO_DATE(TIMESTAMP ts)\n        </dt><dd><b>Purpose:</b> Returns a string representation of the date field from the\n          <span class=\"hue-doc-varname\">ts</span> argument.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">STRING</span></p></dd><dt id=\"to_timestamp\">\n          TO_TIMESTAMP(BIGINT unixtime), TO_TIMESTAMP(STRING date, STRING pattern)\n        </dt><dd><b>Purpose:</b> Converts an integer or string representing a date/time value into the\n          corresponding <span class=\"hue-doc-codeph\">TIMESTAMP</span> value.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"added_in_230\"><b>Added in:</b>Impala 2.3.0</p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            An integer argument represents the number of seconds past the epoch (midnight on\n            January 1, 1970). It is the converse of the <span class=\"hue-doc-codeph\">UNIX_TIMESTAMP()</span>\n            function, which produces a <span class=\"hue-doc-codeph\">BIGINT</span> representing the number of\n            seconds past the epoch.\n          </p><p>\n            A string argument, plus another string argument representing the pattern, turns an\n            arbitrary string representation of a date and time into a true\n            <span class=\"hue-doc-codeph\">TIMESTAMP</span> value. The ability to parse many kinds of date and time\n            formats allows you to deal with temporal data from diverse sources, and if desired\n            to convert to efficient <span class=\"hue-doc-codeph\">TIMESTAMP</span> values during your ETL process.\n            Using <span class=\"hue-doc-codeph\">TIMESTAMP</span> directly in queries and expressions lets you\n            perform date and time calculations without the overhead of extra function calls and\n            conversions each time you reference the applicable columns.\n          </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following examples demonstrate how to convert an arbitrary string representation\n            to <span class=\"hue-doc-codeph\">TIMESTAMP</span> based on a pattern string:\n          </p><div class=\"hue-doc-codeblock\">select to_timestamp('Sep 25, 1984', 'MMM dd, yyyy');\n+----------------------------------------------+\n| to_timestamp('sep 25, 1984', 'mmm dd, yyyy') |\n+----------------------------------------------+\n| 1984-09-25 00:00:00                          |\n+----------------------------------------------+\n\nselect to_timestamp('1984/09/25', 'yyyy/MM/dd');\n+------------------------------------------+\n| to_timestamp('1984/09/25', 'yyyy/mm/dd') |\n+------------------------------------------+\n| 1984-09-25 00:00:00                      |\n+------------------------------------------+\n</div><p>\n            The following examples show how to convert a <span class=\"hue-doc-codeph\">BIGINT</span> representing\n            seconds past epoch into a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value:\n          </p><div class=\"hue-doc-codeblock\">-- One day past the epoch.\nselect to_timestamp(24 * 60 * 60);\n+----------------------------+\n| to_timestamp(24 * 60 * 60) |\n+----------------------------+\n| 1970-01-02 00:00:00        |\n+----------------------------+\n\n-- 60 seconds in the past.\nselect now() as 'current date/time',\n  unix_timestamp(now()) 'now in seconds',\n  to_timestamp(unix_timestamp(now()) - 60) as '60 seconds ago';\n+-------------------------------+----------------+---------------------+\n| current date/time             | now in seconds | 60 seconds ago      |\n+-------------------------------+----------------+---------------------+\n| 2017-10-01 22:03:46.885624000 | 1506895426     | 2017-10-01 22:02:46 |\n+-------------------------------+----------------+---------------------+\n</div></dd><dt id=\"to_utc_timestamp\">\n          TO_UTC_TIMESTAMP(TIMESTAMP ts, STRING timezone)\n        </dt><dd><b>Purpose:</b> Converts a specified timestamp value in a specified time zone into the\n          corresponding value for the UTC time zone.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            Often used in combination with the <span class=\"hue-doc-codeph\">now()</span> function, to translate\n            local date and time values to the UTC time zone for consistent representation on\n            disk. The opposite of the <span class=\"hue-doc-codeph\">FROM_UTC_TIMESTAMP()</span> function.\n          </p><p>\n            See discussion of time zones in\n            <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a> for information about\n            using this function for conversions between the local time zone and UTC.\n          </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The simplest use of this function is to turn a local date/time value to one with the\n            standardized UTC time zone. Because the time zone specifier is not saved as part of\n            the Impala <span class=\"hue-doc-codeph\">TIMESTAMP</span> value, all applications that refer to such\n            data must agree in advance which time zone the values represent. If different parts\n            of the ETL cycle, or different instances of the application, occur in different time\n            zones, the ideal reference point is to convert all <span class=\"hue-doc-codeph\">TIMESTAMP</span> values\n            to UTC for storage.\n          </p><div class=\"hue-doc-codeblock\">select now() as 'Current time in California USA',\n  to_utc_timestamp(now(), 'PDT') as 'Current time in Greenwich UK';\n+--------------------------------+-------------------------------+\n| current time in california usa | current time in greenwich uk  |\n+--------------------------------+-------------------------------+\n| 2016-06-01 15:52:08.980072000  | 2016-06-01 22:52:08.980072000 |\n+--------------------------------+-------------------------------+\n</div><p>\n            Once a value is converted to the UTC time zone by\n            <span class=\"hue-doc-codeph\">TO_UTC_TIMESTAMP()</span>, it can be converted back to the local time zone\n            with <span class=\"hue-doc-codeph\">FROM_UTC_TIMESTAMP()</span>. You can combine these functions using\n            different time zone identifiers to convert a <span class=\"hue-doc-codeph\">TIMESTAMP</span> between any\n            two time zones. This example starts with a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value\n            representing Pacific Daylight Time, converts it to UTC, and converts it to the\n            equivalent value in Eastern Daylight Time.\n          </p><div class=\"hue-doc-codeblock\">select now() as 'Current time in California USA',\n  from_utc_timestamp\n  (\n    to_utc_timestamp(now(), 'PDT'),\n    'EDT'\n  ) as 'Current time in New York, USA';\n+--------------------------------+-------------------------------+\n| current time in california usa | current time in new york, usa |\n+--------------------------------+-------------------------------+\n| 2016-06-01 18:14:12.743658000  | 2016-06-01 21:14:12.743658000 |\n+--------------------------------+-------------------------------+\n</div></dd><dt id=\"trunc\">\n          TRUNC(TIMESTAMP / DATE ts, STRING unit)\n        </dt><dd><b>Purpose:</b> Returns the <span class=\"hue-doc-varname\">ts</span> truncated to the\n          <span class=\"hue-doc-varname\">unit</span> specified.\n          <p><b>Argument:</b> The <span class=\"hue-doc-varname\">unit</span> argument is not case-sensitive. This\n            argument string can be one of:\n          </p><p><table id=\"table_evg_bhp_p3b\"><thead><tr><td>\n                      Unit\n                    </td><td>\n                      Supported for TIMESTAMP ts\n                    </td><td>\n                      Supported for DATE ts\n                    </td><td>\n                      Description\n                    </td></tr></thead><tbody><tr><td><p><span class=\"hue-doc-codeph\">'SYYYY'</span></p><p><span class=\"hue-doc-codeph\">'YYYY'</span></p><p><span class=\"hue-doc-codeph\">'YEAR'</span></p><p><span class=\"hue-doc-codeph\">'SYEAR'</span></p><p><span class=\"hue-doc-codeph\">'YYY'</span></p><p><span class=\"hue-doc-codeph\">'YY'</span></p><p><span class=\"hue-doc-codeph\">'Y'</span></p></td><td>\n                      Yes\n                    </td><td>\n                      Yes\n                    </td><td>\n                      Year\n                    </td></tr><tr><td><p><span class=\"hue-doc-codeph\">'Q'</span></p></td><td>\n                      Yes\n                    </td><td>\n                      Yes\n                    </td><td>\n                      Quarter\n                    </td></tr><tr><td><p><span class=\"hue-doc-codeph\">'MONTH'</span></p><p><span class=\"hue-doc-codeph\">'MON'</span></p><p><span class=\"hue-doc-codeph\">'MM'</span></p><p><span class=\"hue-doc-codeph\">'RM'</span></p></td><td>\n                      Yes\n                    </td><td>\n                      Yes\n                    </td><td>\n                      Month\n                    </td></tr><tr><td><p><span class=\"hue-doc-codeph\">'WW'</span></p></td><td>\n                      Yes\n                    </td><td>\n                      Yes\n                    </td><td>\n                      The most recent date that is the same day of the week as the first day of\n                      the year\n                    </td></tr><tr><td><p><span class=\"hue-doc-codeph\">'W'</span></p></td><td>\n                      Yes\n                    </td><td>\n                      Yes\n                    </td><td>\n                      The most recent date that is the same day of the week as the first day of\n                      the month\n                    </td></tr><tr><td><p><span class=\"hue-doc-codeph\">'DDD'</span></p><p><span class=\"hue-doc-codeph\">'DD'</span></p><p><span class=\"hue-doc-codeph\">'J'</span></p></td><td>\n                      Yes\n                    </td><td>\n                      Yes\n                    </td><td>\n                      Day\n                    </td></tr><tr><td><p><span class=\"hue-doc-codeph\">'DAY'</span></p><p><span class=\"hue-doc-codeph\">'DY'</span></p><p><span class=\"hue-doc-codeph\">'D'</span></p></td><td>\n                      Yes\n                    </td><td>\n                      Yes\n                    </td><td>\n                      Starting day of the week (Monday)\n                    </td></tr><tr><td><p><span class=\"hue-doc-codeph\">'HH'</span></p><p><span class=\"hue-doc-codeph\">'HH12'</span></p><p><span class=\"hue-doc-codeph\">'HH24'</span></p></td><td>\n                      Yes\n                    </td><td>\n                      No\n                    </td><td>\n                      Hour. A <span class=\"hue-doc-codeph\">TIMESTAMP</span> value truncated to the hour is always\n                      represented in 24-hour notation, even for the <span class=\"hue-doc-codeph\">HH12</span>\n                      argument string.\n                    </td></tr><tr><td><span class=\"hue-doc-codeph\">'MI'</span></td><td>\n                      Yes\n                    </td><td>\n                      No\n                    </td><td>\n                      Minute\n                    </td></tr></tbody></table></p><p><b>Added in:</b> The ability to truncate numeric values is new starting in\n            Impala 2.10.\n          </p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            The <span class=\"hue-doc-codeph\">TIMESTAMP</span> form is typically used in <span class=\"hue-doc-codeph\">GROUP BY</span>\n            queries to aggregate results from the same hour, day, week, month, quarter, and so\n            on. You can also use this function in an <span class=\"hue-doc-codeph\">INSERT ... SELECT</span> into a\n            partitioned table to divide <span class=\"hue-doc-codeph\">TIMESTAMP</span> values into the correct\n            partition.\n          </p><p><b>Return type:</b><ul><li><span class=\"hue-doc-codeph\">TIMESTAMP</span> if the first argument, <span class=\"hue-doc-varname\">ts</span>, is\n                <span class=\"hue-doc-codeph\">TIMESTAMP</span>.\n              </li><li><span class=\"hue-doc-codeph\">DATE</span> if the first argument, <span class=\"hue-doc-varname\">ts</span>, is\n                <span class=\"hue-doc-codeph\">DATE</span>.\n              </li></ul></p><p><b>Example:</b></p><p><span class=\"hue-doc-codeph\">TRUNC(DATE'2019-05-08','YEAR')</span> returns <span class=\"hue-doc-codeph\">2019-01-01</span>.\n          </p><p><span class=\"hue-doc-codeph\">TRUNC(DATE'2019-05-08', 'QUARTER')</span> returns\n            <span class=\"hue-doc-codeph\">2019-04-01</span>.\n          </p></dd><dt id=\"unix_timestamp\">\n          UNIX_TIMESTAMP(), UNIX_TIMESTAMP(STRING datetime), UNIX_TIMESTAMP(STRING datetime,\n          STRING pattern), UNIX_TIMESTAMP(TIMESTAMP datetime)\n        </dt><dd><b>Purpose:</b> Returns a Unix time, which is a number of seconds elapsed since\n          '1970-01-01 00:00:00' UTC. If called with no argument, the current date and time is\n          converted to its Unix time. If called with arguments, the first argument represented\n          as the <span class=\"hue-doc-codeph\">TIMESTAMP</span> or <span class=\"hue-doc-codeph\">STRING</span> is converted to its Unix\n          time.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">BIGINT</span></p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            See <span class=\"hue-doc-codeph\">FROM_UNIXTIME()</span> for details about the patterns you can use in\n            the <span class=\"hue-doc-varname\">pattern</span> string to represent the position of year, month, day,\n            and so on in the <span class=\"hue-doc-codeph\">date</span> string. In Impala 1.3 and higher, you have\n            more flexibility to switch the positions of elements and use different separator\n            characters.\n          </p><p>\n            In Impala 2.2.3 and higher, you can include a trailing uppercase\n            <span class=\"hue-doc-codeph\">Z</span> qualifier to indicate <q>Zulu</q> time, a synonym for UTC.\n          </p><p>\n            In Impala 2.3 and higher, you can include a timezone offset\n            specified as minutes and hours, provided you also specify the details in the\n            <span class=\"hue-doc-varname\">pattern</span> string argument. The offset is specified in the\n            <span class=\"hue-doc-varname\">pattern</span> string as a plus or minus sign followed by\n            <span class=\"hue-doc-codeph\">hh:mm</span>, <span class=\"hue-doc-codeph\">hhmm</span>, or <span class=\"hue-doc-codeph\">hh</span>. The\n            <span class=\"hue-doc-codeph\">hh</span> must be lowercase, to distinguish it from the\n            <span class=\"hue-doc-codeph\">HH</span> represent hours in the actual time value. Currently, only\n            numeric timezone offsets are allowed, not symbolic names.\n          </p><p id=\"y2k38\">\n        In Impala 2.2.0 and higher, built-in functions that accept or return integers\n        representing <span class=\"hue-doc-codeph\">TIMESTAMP</span> values use the <span class=\"hue-doc-codeph\">BIGINT</span> type for\n        parameters and return values, rather than <span class=\"hue-doc-codeph\">INT</span>. This change lets the\n        date and time functions avoid an overflow error that would otherwise occur on January\n        19th, 2038 (known as the\n        <a class=\"hue-doc-external-link\" href=\"http://en.wikipedia.org/wiki/Year_2038_problem\" target=\"_blank\"><q>Year\n        2038 problem</q> or <q>Y2K38 problem</q></a>). This change affects the\n        <span class=\"hue-doc-codeph\">FROM_UNIXTIME()</span> and <span class=\"hue-doc-codeph\">UNIX_TIMESTAMP()</span> functions. You\n        might need to change application code that interacts with these functions, change the\n        types of columns that store the return values, or add <span class=\"hue-doc-codeph\">CAST()</span> calls to\n        SQL statements that call these functions.\n      </p><p id=\"datetime_function_chaining\"><span class=\"hue-doc-codeph\">UNIX_TIMESTAMP()</span> and <span class=\"hue-doc-codeph\">FROM_UNIXTIME()</span> are often used in\n        combination to convert a <span class=\"hue-doc-codeph\">TIMESTAMP</span> value into a particular string\n        format. For example:\n<div class=\"hue-doc-codeblock\">SELECT FROM_UNIXTIME(UNIX_TIMESTAMP(NOW() + interval 3 days),\n  'yyyy/MM/dd HH:mm') AS yyyy_mm_dd_hh_mm;\n+------------------+\n| yyyy_mm_dd_hh_mm |\n+------------------+\n| 2016/06/03 11:38 |\n+------------------+\n</div></p><p id=\"timezone_conversion_caveat\">\n        The way this function deals with time zones when converting to or from\n        <span class=\"hue-doc-codeph\">TIMESTAMP</span> values is affected by the\n        <span class=\"hue-doc-codeph\">‑‑use_local_tz_for_unix_timestamp_conversions</span> startup flag\n        for the <span class=\"hue-doc-cmdname\">impalad</span> daemon. See\n        <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_timestamp.xml\" data-doc-anchor-id=\"timestamp\">TIMESTAMP Data Type</a> for details about how\n        Impala handles time zone considerations for the <span class=\"hue-doc-codeph\">TIMESTAMP</span> data type.\n      </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following examples show different ways of turning the same date and time into an\n            integer value. A <span class=\"hue-doc-varname\">pattern</span> string that Impala recognizes by default\n            is interpreted as a UTC date and time. The trailing <span class=\"hue-doc-codeph\">Z</span> is a\n            confirmation that the timezone is UTC. If the date and time string is formatted\n            differently, a second argument specifies the position and units for each of the date\n            and time values.\n          </p><p>\n            The final two examples show how to specify a timezone offset of Pacific Daylight\n            Saving Time, which is 7 hours earlier than UTC. You can use the numeric offset\n            <span class=\"hue-doc-codeph\">-07:00</span> and the equivalent suffix of <span class=\"hue-doc-codeph\">-hh:mm</span> in the\n            pattern string, or specify the mnemonic name for the time zone in a call to\n            <span class=\"hue-doc-codeph\">TO_UTC_TIMESTAMP()</span>. This particular date and time expressed in PDT\n            translates to a different number than the same date and time expressed in UTC.\n          </p><div class=\"hue-doc-codeblock\">-- 3 ways of expressing the same date/time in UTC and converting to an integer.\n\nselect unix_timestamp('2015-05-15 12:00:00');\n+---------------------------------------+\n| unix_timestamp('2015-05-15 12:00:00') |\n+---------------------------------------+\n| 1431691200                            |\n+---------------------------------------+\n\nselect unix_timestamp('2015-05-15 12:00:00Z');\n+----------------------------------------+\n| unix_timestamp('2015-05-15 12:00:00z') |\n+----------------------------------------+\n| 1431691200                             |\n+----------------------------------------+\n\nselect unix_timestamp\n(\n  'May 15, 2015 12:00:00',\n  'MMM dd, yyyy HH:mm:ss'\n) as may_15_month_day_year;\n+-----------------------+\n| may_15_month_day_year |\n+-----------------------+\n| 1431691200            |\n+-----------------------+\n\n-- 2 ways of expressing the same date and time but in a different timezone.\n-- The resulting integer is different from the previous examples.\n\nselect unix_timestamp\n(\n  '2015-05-15 12:00:00-07:00',\n  'yyyy-MM-dd HH:mm:ss-hh:mm'\n) as may_15_year_month_day;\n+-----------------------+\n| may_15_year_month_day |\n+-----------------------+\n| 1431716400            |\n+-----------------------+\n\nselect unix_timestamp\n  (to_utc_timestamp(\n    '2015-05-15 12:00:00',\n    'PDT')\n  ) as may_15_pdt;\n+------------+\n| may_15_pdt |\n+------------+\n| 1431716400 |\n+------------+\n</div></dd><dt id=\"utc_timestamp\">\n          UTC_TIMESTAMP()\n        </dt><dd><b>Purpose:</b> Returns a <span class=\"hue-doc-codeph\">TIMESTAMP</span> corresponding to the current date\n          and time in the UTC time zone.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">TIMESTAMP</span></p><p id=\"added_in_210\"><b>Added in:</b>Impala 2.10</p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p>\n            Similar to the <span class=\"hue-doc-codeph\">NOW()</span> or <span class=\"hue-doc-codeph\">CURRENT_TIMESTAMP()</span>\n            functions, but does not use the local time zone as those functions do. Use\n            <span class=\"hue-doc-codeph\">UTC_TIMESTAMP()</span> to record <span class=\"hue-doc-codeph\">TIMESTAMP</span> values that\n            are interoperable with servers around the world, in arbitrary time zones, without\n            the need for additional conversion functions to standardize the time zone of each\n            value representing a date/time.\n          </p><p>\n            For working with date/time values represented as integer values, you can convert\n            back and forth between <span class=\"hue-doc-codeph\">TIMESTAMP</span> and <span class=\"hue-doc-codeph\">BIGINT</span> with\n            the <span class=\"hue-doc-codeph\">UNIX_MICROS_TO_UTC_TIMESTAMP()</span> and\n            <span class=\"hue-doc-codeph\">UTC_TO_UNIX_MICROS()</span> functions. The integer values represent the\n            number of microseconds since the Unix epoch (midnight on January 1, 1970).\n          </p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n            The following example shows how <span class=\"hue-doc-codeph\">NOW()</span> and\n            <span class=\"hue-doc-codeph\">CURRENT_TIMESTAMP()</span> represent the current date/time in the local\n            time zone (in this case, UTC-7), while <span class=\"hue-doc-codeph\">utc_timestamp()</span> represents\n            the same date/time in the standardized UTC time zone:\n          </p><div class=\"hue-doc-codeblock\">select now(), utc_timestamp();\n+-------------------------------+-------------------------------+\n| now()                         | utc_timestamp()               |\n+-------------------------------+-------------------------------+\n| 2017-10-01 23:33:58.919688000 | 2017-10-02 06:33:58.919688000 |\n+-------------------------------+-------------------------------+\n\nselect current_timestamp(), utc_timestamp();\n+-------------------------------+-------------------------------+\n| current_timestamp()           | utc_timestamp()               |\n+-------------------------------+-------------------------------+\n| 2017-10-01 23:34:07.400642000 | 2017-10-02 06:34:07.400642000 |\n+-------------------------------+-------------------------------+\n</div></dd><dt id=\"weekofyear\">\n          WEEK(TIMESTAMP / DATE date), WEEKOFYEAR(TIMESTAMP / DATE date)\n        </dt><dd><b>Purpose:</b> Returns the corresponding week (1-53) from the <span class=\"hue-doc-varname\">date</span>\n          argument.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p></dd><dt id=\"weeks_add\">\n          WEEKS_ADD(TIMESTAMP / DATE date, INT / BIGINT weeks)\n        </dt><dd><b>Purpose:</b> Returns the value with the number of <span class=\"hue-doc-varname\">weeks</span> added to\n          <span class=\"hue-doc-varname\">date</span>.\n          <p><b>Return type:</b><ul><li>\n                If <span class=\"hue-doc-varname\">date</span> is <span class=\"hue-doc-codeph\">TIMESTAMP</span>, returns\n                <span class=\"hue-doc-codeph\">TIMESTAMP</span>.\n              </li><li>\n                If <span class=\"hue-doc-varname\">date</span> is <span class=\"hue-doc-codeph\">DATE</span>, returns\n                <span class=\"hue-doc-codeph\">DATE</span>.\n              </li></ul></p></dd><dt id=\"weeks_sub\">\n          WEEKS_SUB(TIMESTAMP / DATE date, INT / BIGINT weeks)\n        </dt><dd><b>Purpose:</b> Returns the value with the number of <span class=\"hue-doc-varname\">weeks</span>\n          subtracted from <span class=\"hue-doc-varname\">date</span>.\n          <p><b>Return type:</b><ul><li>\n                If <span class=\"hue-doc-varname\">date</span> is <span class=\"hue-doc-codeph\">TIMESTAMP</span>, returns\n                <span class=\"hue-doc-codeph\">TIMESTAMP</span>.\n              </li><li>\n                If <span class=\"hue-doc-varname\">date</span> is <span class=\"hue-doc-codeph\">DATE</span>, returns\n                <span class=\"hue-doc-codeph\">DATE</span>.\n              </li></ul></p></dd><dt id=\"year\">\n          YEAR(TIMESTAMP / DATE date)\n        </dt><dd><b>Purpose:</b> Returns the year field from the <span class=\"hue-doc-varname\">date</span> argument.\n          <p><b>Return type:</b><span class=\"hue-doc-codeph\">INT</span></p></dd><dt id=\"years_add\">\n          YEARS_ADD(TIMESTAMP / DATE date, INT / BIGINT years)\n        </dt><dd><b>Purpose:</b> Returns the value with the number of <span class=\"hue-doc-varname\">years</span> added to\n          <span class=\"hue-doc-varname\">date</span>.\n          <p><b>Return type:</b><ul><li>\n                If <span class=\"hue-doc-varname\">date</span> is <span class=\"hue-doc-codeph\">TIMESTAMP</span>, returns\n                <span class=\"hue-doc-codeph\">TIMESTAMP</span>.\n              </li><li>\n                If <span class=\"hue-doc-varname\">date</span> is <span class=\"hue-doc-codeph\">DATE</span>, returns\n                <span class=\"hue-doc-codeph\">DATE</span>.\n              </li></ul></p><p><b>Usage notes:</b></p><p>\n            If the equivalent date does not exist in the year of the result due to a leap year,\n            the date is changed to the last day of the appropriate month.\n          </p></dd><dt id=\"years_sub\">\n          YEARS_SUB(TIMESTAMP / DATE date, INT / BIGINT years)\n        </dt><dd><b>Purpose:</b> Returns the value with the number of <span class=\"hue-doc-varname\">years</span>\n          subtracted from <span class=\"hue-doc-varname\">date</span>.\n          <p><b>Return type:</b><ul><li>\n                If <span class=\"hue-doc-varname\">date</span> is <span class=\"hue-doc-codeph\">TIMESTAMP</span>, returns\n                <span class=\"hue-doc-codeph\">TIMESTAMP</span>.\n              </li><li>\n                If <span class=\"hue-doc-varname\">date</span> is <span class=\"hue-doc-codeph\">DATE</span>, returns\n                <span class=\"hue-doc-codeph\">DATE</span>.\n              </li></ul></p><p><b>Usage notes:</b></p><p>\n            If the equivalent date does not exist in the year of the result due to a leap year,\n            the date is changed to the last day of the appropriate month.\n          </p><p/></dd></dl></div></div></div>","title":"Impala Date and Time Functions"}