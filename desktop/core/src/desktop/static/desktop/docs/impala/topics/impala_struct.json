{"body":"<div><div id=\"struct\"><div class=\"hue-doc-title\">STRUCT Complex Type (Impala 2.3 or higher only)</div><div><p>\n      A complex data type, representing multiple fields of a single item. Frequently used as the element type of an <span class=\"hue-doc-codeph\">ARRAY</span>\n      or the <span class=\"hue-doc-codeph\">VALUE</span> part of a <span class=\"hue-doc-codeph\">MAP</span>.\n    </p><p id=\"syntax_blurb\"><b>Syntax:</b></p><div class=\"hue-doc-codeblock\"><span class=\"hue-doc-varname\">column_name</span> STRUCT &lt; <span class=\"hue-doc-varname\">name</span> : <span class=\"hue-doc-varname\">type</span> [COMMENT '<span class=\"hue-doc-varname\">comment_string</span>'], ... &gt;\n\ntype ::= <span class=\"hue-doc-varname\">primitive_type</span> | <span class=\"hue-doc-varname\">complex_type</span></div><p>\n      The names and number of fields within the <span class=\"hue-doc-codeph\">STRUCT</span> are fixed. Each field can be a different type. A field within a\n      <span class=\"hue-doc-codeph\">STRUCT</span> can also be another <span class=\"hue-doc-codeph\">STRUCT</span>, or an <span class=\"hue-doc-codeph\">ARRAY</span> or a <span class=\"hue-doc-codeph\">MAP</span>, allowing\n      you to create nested data structures with a maximum nesting depth of 100.\n    </p><p>\n      A <span class=\"hue-doc-codeph\">STRUCT</span> can be the top-level type for a column, or can itself be an item within an <span class=\"hue-doc-codeph\">ARRAY</span> or the\n      value part of the key-value pair in a <span class=\"hue-doc-codeph\">MAP</span>.\n    </p><p>\n      When a <span class=\"hue-doc-codeph\">STRUCT</span> is used as an <span class=\"hue-doc-codeph\">ARRAY</span> element or a <span class=\"hue-doc-codeph\">MAP</span> value, you use a join clause to\n      bring the <span class=\"hue-doc-codeph\">ARRAY</span> or <span class=\"hue-doc-codeph\">MAP</span> elements into the result set, and then refer to\n      <span class=\"hue-doc-codeph\"><span class=\"hue-doc-varname\">array_name</span>.ITEM.<span class=\"hue-doc-varname\">field</span></span> or\n      <span class=\"hue-doc-codeph\"><span class=\"hue-doc-varname\">map_name</span>.VALUE.<span class=\"hue-doc-varname\">field</span></span>. In the case of a <span class=\"hue-doc-codeph\">STRUCT</span> directly inside\n      an <span class=\"hue-doc-codeph\">ARRAY</span> or <span class=\"hue-doc-codeph\">MAP</span>, you can omit the <span class=\"hue-doc-codeph\">.ITEM</span> and <span class=\"hue-doc-codeph\">.VALUE</span> pseudocolumns\n      and refer directly to <span class=\"hue-doc-codeph\"><span class=\"hue-doc-varname\">array_name</span>.<span class=\"hue-doc-varname\">field</span></span> or\n      <span class=\"hue-doc-codeph\"><span class=\"hue-doc-varname\">map_name</span>.<span class=\"hue-doc-varname\">field</span></span>.\n    </p><p id=\"usage_notes_blurb\"><b>Usage notes:</b></p><p id=\"complex_types_combo\">\n        Because complex types are often used in combination, for example an\n        <span class=\"hue-doc-codeph\">ARRAY</span> of <span class=\"hue-doc-codeph\">STRUCT</span> elements, if you are unfamiliar with\n        the Impala complex types, start with\n        <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_complex_types.xml\" data-doc-anchor-id=\"complex_types\">Complex Types (Impala 2.3 or higher only)</a> for background\n        information and usage examples.\n      </p><p>\n      A <span class=\"hue-doc-codeph\">STRUCT</span> is similar conceptually to a table row: it contains a fixed number of named fields, each with a predefined\n      type. To combine two related tables, while using complex types to minimize repetition, the typical way to represent that data is as an\n      <span class=\"hue-doc-codeph\">ARRAY</span> of <span class=\"hue-doc-codeph\">STRUCT</span> elements.\n    </p><p>\n      Because a <span class=\"hue-doc-codeph\">STRUCT</span> has a fixed number of named fields, it typically does not make sense to have a\n      <span class=\"hue-doc-codeph\">STRUCT</span> as the type of a table column. In such a case, you could just make each field of the <span class=\"hue-doc-codeph\">STRUCT</span>\n      into a separate column of the table. The <span class=\"hue-doc-codeph\">STRUCT</span> type is most useful as an item of an <span class=\"hue-doc-codeph\">ARRAY</span> or the\n      value part of the key-value pair in a <span class=\"hue-doc-codeph\">MAP</span>. A nested type column with a <span class=\"hue-doc-codeph\">STRUCT</span> at the lowest level\n      lets you associate a variable number of row-like objects with each row of the table.\n    </p><p>\n      The <span class=\"hue-doc-codeph\">STRUCT</span> type is straightforward to reference within a query. You do not need to include the\n      <span class=\"hue-doc-codeph\">STRUCT</span> column in a join clause or give it a table alias, as is required for the <span class=\"hue-doc-codeph\">ARRAY</span> and\n      <span class=\"hue-doc-codeph\">MAP</span> types. You refer to the individual fields using dot notation, such as\n      <span class=\"hue-doc-codeph\"><span class=\"hue-doc-varname\">struct_column_name</span>.<span class=\"hue-doc-varname\">field_name</span></span>, without any pseudocolumn such as\n      <span class=\"hue-doc-codeph\">ITEM</span> or <span class=\"hue-doc-codeph\">VALUE</span>.\n    </p><p id=\"complex_types_describe\">\n        You can pass a multi-part qualified name to <span class=\"hue-doc-codeph\">DESCRIBE</span> to specify an\n        <span class=\"hue-doc-codeph\">ARRAY</span>, <span class=\"hue-doc-codeph\">STRUCT</span>, or <span class=\"hue-doc-codeph\">MAP</span> column and\n        visualize its structure as if it were a table. For example, if table <span class=\"hue-doc-codeph\">T1</span>\n        contains an <span class=\"hue-doc-codeph\">ARRAY</span> column <span class=\"hue-doc-codeph\">A1</span>, you could issue the\n        statement <span class=\"hue-doc-codeph\">DESCRIBE t1.a1</span>. If table <span class=\"hue-doc-codeph\">T1</span> contained a\n        <span class=\"hue-doc-codeph\">STRUCT</span> column <span class=\"hue-doc-codeph\">S1</span>, and a field <span class=\"hue-doc-codeph\">F1</span>\n        within the <span class=\"hue-doc-codeph\">STRUCT</span> was a <span class=\"hue-doc-codeph\">MAP</span>, you could issue the\n        statement <span class=\"hue-doc-codeph\">DESCRIBE t1.s1.f1</span>. An <span class=\"hue-doc-codeph\">ARRAY</span> is shown as a\n        two-column table, with <span class=\"hue-doc-codeph\">ITEM</span> and <span class=\"hue-doc-codeph\">POS</span> columns. A\n        <span class=\"hue-doc-codeph\">STRUCT</span> is shown as a table with each field representing a column in the\n        table. A <span class=\"hue-doc-codeph\">MAP</span> is shown as a two-column table, with <span class=\"hue-doc-codeph\">KEY</span>\n        and <span class=\"hue-doc-codeph\">VALUE</span> columns.\n      </p><p id=\"internals_blurb\"><b>Internal details:</b></p><p>\n      Within the Parquet data file, the values for each <span class=\"hue-doc-codeph\">STRUCT</span> field are stored adjacent to each other, so that they can be\n      encoded and compressed using all the Parquet techniques for storing sets of similar or repeated values. The adjacency applies even\n      when the <span class=\"hue-doc-codeph\">STRUCT</span> values are part of an <span class=\"hue-doc-codeph\">ARRAY</span> or <span class=\"hue-doc-codeph\">MAP</span>. During a query, Impala avoids\n      unnecessary I/O by reading only the portions of the Parquet data file containing the requested <span class=\"hue-doc-codeph\">STRUCT</span> fields.\n    </p><p id=\"added_in_230\"><b>Added in:</b>Impala 2.3.0</p><p id=\"restrictions_blurb\"><b>Restrictions:</b></p><ul id=\"complex_types_restrictions\"><li><p>\n            Columns with this data type can only be used in tables or partitions with the\n            Parquet or ORC file format.\n          </p></li><li><p>\n            Columns with this data type cannot be used as partition key columns in a partitioned\n            table.\n          </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">COMPUTE STATS</span> statement does not produce any statistics for\n            columns of this data type.\n          </p></li><li><p id=\"complex_types_max_length\">\n            The maximum length of the column definition for any complex type, including\n            declarations for any nested types, is 4000 characters.\n          </p></li><li><p>\n            See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_complex_types.xml\" data-doc-anchor-id=\"complex_types_limits\">Limitations and Restrictions for Complex Types</a> for a\n            full list of limitations and associated guidelines about complex type columns.\n          </p></li></ul><p id=\"kudu_blurb\"><b>Kudu considerations:</b></p><p id=\"kudu_unsupported_data_type\"> Currently, the data types\n        <span class=\"hue-doc-codeph\">CHAR</span>, <span class=\"hue-doc-codeph\">ARRAY</span>, <span class=\"hue-doc-codeph\">MAP</span>, and\n          <span class=\"hue-doc-codeph\">STRUCT</span> cannot be used with Kudu tables.\n      </p><p id=\"example_blurb\"><b>Examples:</b></p><div class=\"hue-doc-note\" id=\"complex_type_schema_pointer\">        Many of the complex type examples refer to tables such as <span class=\"hue-doc-codeph\">CUSTOMER</span> and\n        <span class=\"hue-doc-codeph\">REGION</span> adapted from the tables used in the TPC-H benchmark. See\n        <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_complex_types.xml\" data-doc-anchor-id=\"complex_sample_schema\">Sample Schema and Data for Experimenting with Impala Complex Types</a> for the table\n        definitions.\n      </div><p>\n      The following example shows a table with various kinds of <span class=\"hue-doc-codeph\">STRUCT</span> columns, both at the top level and nested within\n      other complex types. Practice the <span class=\"hue-doc-codeph\">CREATE TABLE</span> and query notation for complex type columns using empty tables, until\n      you can visualize a complex data structure and construct corresponding SQL statements reliably.\n    </p><div class=\"hue-doc-codeblock\">CREATE TABLE struct_demo\n(\n  id BIGINT,\n  name STRING,\n\n-- A STRUCT as a top-level column. Demonstrates how the table ID column\n-- and the ID field within the STRUCT can coexist without a name conflict.\n  employee_info STRUCT &lt; employer: STRING, id: BIGINT, address: STRING &gt;,\n\n-- A STRUCT as the element type of an ARRAY.\n  places_lived ARRAY &lt; STRUCT &lt;street: STRING, city: STRING, country: STRING &gt;&gt;,\n\n-- A STRUCT as the value portion of the key-value pairs in a MAP.\n  memorable_moments MAP &lt; STRING, STRUCT &lt; year: INT, place: STRING, details: STRING &gt;&gt;,\n\n-- A STRUCT where one of the fields is another STRUCT.\n  current_address STRUCT &lt; street_address: STRUCT &lt;street_number: INT, street_name: STRING, street_type: STRING&gt;, country: STRING, postal_code: STRING &gt;\n)\nSTORED AS PARQUET;\n</div><p>\n      The following example shows how to examine the structure of a table containing one or more <span class=\"hue-doc-codeph\">STRUCT</span> columns by using\n      the <span class=\"hue-doc-codeph\">DESCRIBE</span> statement. You can visualize each <span class=\"hue-doc-codeph\">STRUCT</span> as its own table, with columns named the same\n      as each field of the <span class=\"hue-doc-codeph\">STRUCT</span>. If the <span class=\"hue-doc-codeph\">STRUCT</span> is nested inside another complex type, such as\n      <span class=\"hue-doc-codeph\">ARRAY</span>, you can extend the qualified name passed to <span class=\"hue-doc-codeph\">DESCRIBE</span> until the output shows just the\n      <span class=\"hue-doc-codeph\">STRUCT</span> fields.\n    </p><div class=\"hue-doc-codeblock\">DESCRIBE struct_demo;\n+-------------------+--------------------------+\n| name              | type                     |\n+-------------------+--------------------------+\n| id                | bigint                   |\n| name              | string                   |\n| employee_info     | struct&lt;                  |\n|                   |   employer:string,       |\n|                   |   id:bigint,             |\n|                   |   address:string         |\n|                   | &gt;                        |\n| places_lived      | array&lt;struct&lt;            |\n|                   |   street:string,         |\n|                   |   city:string,           |\n|                   |   country:string         |\n|                   | &gt;&gt;                       |\n| memorable_moments | map&lt;string,struct&lt;       |\n|                   |   year:int,              |\n|                   |   place:string,          |\n|                   |   details:string         |\n|                   | &gt;&gt;                       |\n| current_address   | struct&lt;                  |\n|                   |   street_address:struct&lt; |\n|                   |     street_number:int,   |\n|                   |     street_name:string,  |\n|                   |     street_type:string   |\n|                   |   &gt;,                     |\n|                   |   country:string,        |\n|                   |   postal_code:string     |\n|                   | &gt;                        |\n+-------------------+--------------------------+\n</div><p>\n      The top-level column <span class=\"hue-doc-codeph\">EMPLOYEE_INFO</span> is a <span class=\"hue-doc-codeph\">STRUCT</span>. Describing\n      <span class=\"hue-doc-codeph\"><span class=\"hue-doc-varname\">table_name</span>.<span class=\"hue-doc-varname\">struct_name</span></span> displays the fields of the <span class=\"hue-doc-codeph\">STRUCT</span> as if\n      they were columns of a table:\n    </p><div class=\"hue-doc-codeblock\">DESCRIBE struct_demo.employee_info;\n+----------+--------+\n| name     | type   |\n+----------+--------+\n| employer | string |\n| id       | bigint |\n| address  | string |\n+----------+--------+\n</div><p>\n      Because <span class=\"hue-doc-codeph\">PLACES_LIVED</span> is a <span class=\"hue-doc-codeph\">STRUCT</span> inside an <span class=\"hue-doc-codeph\">ARRAY</span>, the initial\n      <span class=\"hue-doc-codeph\">DESCRIBE</span> shows the structure of the <span class=\"hue-doc-codeph\">ARRAY</span>:\n    </p><div class=\"hue-doc-codeblock\">DESCRIBE struct_demo.places_lived;\n+------+------------------+\n| name | type             |\n+------+------------------+\n| item | struct&lt;          |\n|      |   street:string, |\n|      |   city:string,   |\n|      |   country:string |\n|      | &gt;                |\n| pos  | bigint           |\n+------+------------------+\n</div><p>\n      Ask for the details of the <span class=\"hue-doc-codeph\">ITEM</span> field of the <span class=\"hue-doc-codeph\">ARRAY</span> to see just the layout of the\n      <span class=\"hue-doc-codeph\">STRUCT</span>:\n    </p><div class=\"hue-doc-codeblock\">DESCRIBE struct_demo.places_lived.item;\n+---------+--------+\n| name    | type   |\n+---------+--------+\n| street  | string |\n| city    | string |\n| country | string |\n+---------+--------+\n</div><p>\n      Likewise, <span class=\"hue-doc-codeph\">MEMORABLE_MOMENTS</span> has a <span class=\"hue-doc-codeph\">STRUCT</span> inside a <span class=\"hue-doc-codeph\">MAP</span>, which requires an extra\n      level of qualified name to see just the <span class=\"hue-doc-codeph\">STRUCT</span> part:\n    </p><div class=\"hue-doc-codeblock\">DESCRIBE struct_demo.memorable_moments;\n+-------+------------------+\n| name  | type             |\n+-------+------------------+\n| key   | string           |\n| value | struct&lt;          |\n|       |   year:int,      |\n|       |   place:string,  |\n|       |   details:string |\n|       | &gt;                |\n+-------+------------------+\n</div><p>\n      For a <span class=\"hue-doc-codeph\">MAP</span>, ask to see the <span class=\"hue-doc-codeph\">VALUE</span> field to see the corresponding <span class=\"hue-doc-codeph\">STRUCT</span> fields in a\n      table-like structure:\n    </p><div class=\"hue-doc-codeblock\">DESCRIBE struct_demo.memorable_moments.value;\n+---------+--------+\n| name    | type   |\n+---------+--------+\n| year    | int    |\n| place   | string |\n| details | string |\n+---------+--------+\n</div><p>\n      For a <span class=\"hue-doc-codeph\">STRUCT</span> inside a <span class=\"hue-doc-codeph\">STRUCT</span>, we can see the fields of the outer <span class=\"hue-doc-codeph\">STRUCT</span>:\n    </p><div class=\"hue-doc-codeblock\">DESCRIBE struct_demo.current_address;\n+----------------+-----------------------+\n| name           | type                  |\n+----------------+-----------------------+\n| street_address | struct&lt;               |\n|                |   street_number:int,  |\n|                |   street_name:string, |\n|                |   street_type:string  |\n|                | &gt;                     |\n| country        | string                |\n| postal_code    | string                |\n+----------------+-----------------------+\n</div><p>\n      Then we can use a further qualified name to see just the fields of the inner <span class=\"hue-doc-codeph\">STRUCT</span>:\n    </p><div class=\"hue-doc-codeblock\">DESCRIBE struct_demo.current_address.street_address;\n+---------------+--------+\n| name          | type   |\n+---------------+--------+\n| street_number | int    |\n| street_name   | string |\n| street_type   | string |\n+---------------+--------+\n</div><p>\n      The following example shows how to examine the structure of a table containing one or more <span class=\"hue-doc-codeph\">STRUCT</span> columns by using\n      the <span class=\"hue-doc-codeph\">DESCRIBE</span> statement. You can visualize each <span class=\"hue-doc-codeph\">STRUCT</span> as its own table, with columns named the same\n      as each field of the <span class=\"hue-doc-codeph\">STRUCT</span>. If the <span class=\"hue-doc-codeph\">STRUCT</span> is nested inside another complex type, such as\n      <span class=\"hue-doc-codeph\">ARRAY</span>, you can extend the qualified name passed to <span class=\"hue-doc-codeph\">DESCRIBE</span> until the output shows just the\n      <span class=\"hue-doc-codeph\">STRUCT</span> fields.\n    </p><div class=\"hue-doc-codeblock\">DESCRIBE struct_demo;\n+-------------------+--------------------------+---------+\n| name              | type                     | comment |\n+-------------------+--------------------------+---------+\n| id                | bigint                   |         |\n| name              | string                   |         |\n| employee_info     | struct&lt;                  |         |\n|                   |   employer:string,       |         |\n|                   |   id:bigint,             |         |\n|                   |   address:string         |         |\n|                   | &gt;                        |         |\n| places_lived      | array&lt;struct&lt;            |         |\n|                   |   street:string,         |         |\n|                   |   city:string,           |         |\n|                   |   country:string         |         |\n|                   | &gt;&gt;                       |         |\n| memorable_moments | map&lt;string,struct&lt;       |         |\n|                   |   year:int,              |         |\n|                   |   place:string,          |         |\n|                   |   details:string         |         |\n|                   | &gt;&gt;                       |         |\n| current_address   | struct&lt;                  |         |\n|                   |   street_address:struct&lt; |         |\n|                   |     street_number:int,   |         |\n|                   |     street_name:string,  |         |\n|                   |     street_type:string   |         |\n|                   |   &gt;,                     |         |\n|                   |   country:string,        |         |\n|                   |   postal_code:string     |         |\n|                   | &gt;                        |         |\n+-------------------+--------------------------+---------+\n\nSELECT id, employee_info.id FROM struct_demo;\n\nSELECT id, employee_info.id AS employee_id FROM struct_demo;\n\nSELECT id, employee_info.id AS employee_id, employee_info.employer\n  FROM struct_demo;\n\nSELECT id, name, street, city, country\n  FROM struct_demo, struct_demo.places_lived;\n\nSELECT id, name, places_lived.pos, places_lived.street, places_lived.city, places_lived.country\n  FROM struct_demo, struct_demo.places_lived;\n\nSELECT id, name, pl.pos, pl.street, pl.city, pl.country\n  FROM struct_demo, struct_demo.places_lived AS pl;\n\nSELECT id, name, places_lived.pos, places_lived.street, places_lived.city, places_lived.country\n  FROM struct_demo, struct_demo.places_lived;\n\nSELECT id, name, pos, street, city, country\n  FROM struct_demo, struct_demo.places_lived;\n\nSELECT id, name, memorable_moments.key,\n  memorable_moments.value.year,\n  memorable_moments.value.place,\n  memorable_moments.value.details\nFROM struct_demo, struct_demo.memorable_moments\nWHERE memorable_moments.key IN ('Birthday','Anniversary','Graduation');\n\nSELECT id, name, mm.key, mm.value.year, mm.value.place, mm.value.details\n  FROM struct_demo, struct_demo.memorable_moments AS mm\nWHERE mm.key IN ('Birthday','Anniversary','Graduation');\n\nSELECT id, name, memorable_moments.key, memorable_moments.value.year,\n  memorable_moments.value.place, memorable_moments.value.details\nFROM struct_demo, struct_demo.memorable_moments\nWHERE key IN ('Birthday','Anniversary','Graduation');\n\nSELECT id, name, key, value.year, value.place, value.details\n  FROM struct_demo, struct_demo.memorable_moments\nWHERE key IN ('Birthday','Anniversary','Graduation');\n\nSELECT id, name, key, year, place, details\n  FROM struct_demo, struct_demo.memorable_moments\nWHERE key IN ('Birthday','Anniversary','Graduation');\n\nSELECT id, name,\n  current_address.street_address.street_number,\n  current_address.street_address.street_name,\n  current_address.street_address.street_type,\n  current_address.country,\n  current_address.postal_code\nFROM struct_demo;\n</div><p>\n      For example, this table uses a struct that encodes several data values for each phone number associated with a person. Each person can\n      have a variable-length array of associated phone numbers, and queries can refer to the category field to locate specific home, work,\n      mobile, and so on kinds of phone numbers.\n    </p><div class=\"hue-doc-codeblock\">CREATE TABLE contact_info_many_structs\n(\n  id BIGINT, name STRING,\n  phone_numbers ARRAY &lt; STRUCT &lt;category:STRING, country_code:STRING, area_code:SMALLINT, full_number:STRING, mobile:BOOLEAN, carrier:STRING &gt; &gt;\n) STORED AS PARQUET;\n</div><p>\n      Because structs are naturally suited to composite values where the fields have different data types, you might use them to decompose\n      things such as addresses:\n    </p><div class=\"hue-doc-codeblock\">CREATE TABLE contact_info_detailed_address\n(\n  id BIGINT, name STRING,\n  address STRUCT &lt; house_number:INT, street:STRING, street_type:STRING, apartment:STRING, city:STRING, region:STRING, country:STRING &gt;\n);\n</div><p>\n      In a big data context, splitting out data fields such as the number part of the address and the street name could let you do analysis\n      on each field independently. For example, which streets have the largest number range of addresses, what are the statistical\n      properties of the street names, which areas have a higher proportion of <q>Roads</q>, <q>Courts</q> or <q>Boulevards</q>, and so on.\n    </p><p id=\"related_info\"><b>Related information:</b></p><p><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_complex_types.xml\" data-doc-anchor-id=\"complex_types\">Complex Types (Impala 2.3 or higher only)</a>, <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_array.xml\" data-doc-anchor-id=\"array\">ARRAY Complex Type (Impala 2.3 or higher only)</a>,\n<a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_map.xml\" data-doc-anchor-id=\"map\">MAP Complex Type (Impala 2.3 or higher only)</a></p></div></div></div>","title":"STRUCT Complex Type (Impala 2.3 or higher only)"}