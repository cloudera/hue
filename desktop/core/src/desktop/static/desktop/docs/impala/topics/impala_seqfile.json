{"body":"<div><div id=\"seqfile\"><div class=\"hue-doc-title\" id=\"sequencefile\">Using the SequenceFile File Format with Impala Tables</div><div><p> Impala supports using SequenceFile data files. </p><table><div class=\"hue-doc-title\">SequenceFile Format Support in Impala</div><thead><tr><td>\n              File Type\n            </td><td>\n              Format\n            </td><td>\n              Compression Codecs\n            </td><td>\n              Impala Can CREATE?\n            </td><td>\n              Impala Can INSERT?\n            </td></tr></thead><tbody><tr id=\"sequencefile_support\"><td><a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_seqfile.xml\" data-doc-anchor-id=\"seqfile\">SequenceFile</a></td><td>\n              Structured\n            </td><td>\n              Snappy, gzip, deflate, bzip2\n            </td><td>\n              Yes.\n            </td><td>\n              No. Import data by using <span class=\"hue-doc-codeph\">LOAD DATA</span> on data files already in the\n              right format, or use <span class=\"hue-doc-codeph\">INSERT</span> in Hive followed by <span class=\"hue-doc-codeph\">REFRESH\n              <span class=\"hue-doc-varname\">table_name</span></span> in Impala.\n            </td></tr></tbody></table><p/></div><div id=\"seqfile_create\"><div class=\"hue-doc-title\">Creating SequenceFile Tables and Loading Data</div><div><p>\n        If you do not have an existing data file to use, begin by creating one in the appropriate format.\n      </p><p><b>To create a SequenceFile table:</b></p><p>\n        In the <span class=\"hue-doc-codeph\">impala-shell</span> interpreter, issue a command similar to:\n      </p><div class=\"hue-doc-codeblock\">create table sequencefile_table (<span class=\"hue-doc-varname\">column_specs</span>) stored as sequencefile;</div><p>\n        Because Impala can query some kinds of tables that it cannot currently write to, after creating tables of\n        certain file formats, you might use the Hive shell to load the data. See\n        <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_file_formats.xml\" data-doc-anchor-id=\"file_formats\">How Impala Works with Hadoop File Formats</a> for details. After loading data into a table through\n        Hive or other mechanism outside of Impala, issue a <span class=\"hue-doc-codeph\">REFRESH <span class=\"hue-doc-varname\">table_name</span></span>\n        statement the next time you connect to the Impala node, before querying the table, to make Impala recognize\n        the new data.\n      </p><p>\n        For example, here is how you might create some SequenceFile tables in Impala (by specifying the columns\n        explicitly, or cloning the structure of another table), load data through Hive, and query them through\n        Impala:\n      </p><div class=\"hue-doc-codeblock\">$ impala-shell -i localhost\n[localhost:21000] &gt; create table seqfile_table (x int) stored as sequencefile;\n[localhost:21000] &gt; create table seqfile_clone like some_other_table stored as sequencefile;\n[localhost:21000] &gt; quit;\n\n$ hive\nhive&gt; insert into table seqfile_table select x from some_other_table;\n3 Rows loaded to seqfile_table\nTime taken: 19.047 seconds\nhive&gt; quit;\n\n$ impala-shell -i localhost\n[localhost:21000] &gt; select * from seqfile_table;\nReturned 0 row(s) in 0.23s\n[localhost:21000] &gt; -- Make Impala recognize the data loaded through Hive;\n[localhost:21000] &gt; refresh seqfile_table;\n[localhost:21000] &gt; select * from seqfile_table;\n+---+\n| x |\n+---+\n| 1 |\n| 2 |\n| 3 |\n+---+\nReturned 3 row(s) in 0.23s</div><p id=\"complex_types_unsupported_filetype\"><b>Complex type considerations:</b> Although you can create tables in this file format\n        using the complex types (<span class=\"hue-doc-codeph\">ARRAY</span>, <span class=\"hue-doc-codeph\">STRUCT</span>, and\n        <span class=\"hue-doc-codeph\">MAP</span>) available in Impala 2.3 and higher,\n        currently, Impala can query these types only in Parquet tables. <span class=\"hue-doc-ph\">\n        The one exception to the preceding rule is <span class=\"hue-doc-codeph\">COUNT(*)</span> queries on RCFile\n        tables that include complex types. Such queries are allowed in\n        Impala 2.6 and higher. </span></p></div></div><div id=\"seqfile_compression\"><div class=\"hue-doc-title\">Enabling Compression for SequenceFile Tables</div><div><p> You may want to enable compression on existing tables. Enabling\n        compression provides performance gains in most cases and is supported\n        for SequenceFile tables. For example, to enable Snappy compression, you\n        would specify the following additional settings when loading data\n        through the Hive shell: </p><div class=\"hue-doc-codeblock\">hive&gt; SET hive.exec.compress.output=true;\nhive&gt; SET mapred.max.split.size=256000000;\nhive&gt; SET mapred.output.compression.type=BLOCK;\nhive&gt; SET mapred.output.compression.codec=org.apache.hadoop.io.compress.SnappyCodec;\nhive&gt; insert overwrite table <span class=\"hue-doc-varname\">new_table</span> select * from <span class=\"hue-doc-varname\">old_table</span>;</div><p>\n        If you are converting partitioned tables, you must complete additional steps. In such a case, specify\n        additional settings similar to the following:\n      </p><div class=\"hue-doc-codeblock\">hive&gt; create table <span class=\"hue-doc-varname\">new_table</span> (<span class=\"hue-doc-varname\">your_cols</span>) partitioned by (<span class=\"hue-doc-varname\">partition_cols</span>) stored as <span class=\"hue-doc-varname\">new_format</span>;\nhive&gt; SET hive.exec.dynamic.partition.mode=nonstrict;\nhive&gt; SET hive.exec.dynamic.partition=true;\nhive&gt; insert overwrite table <span class=\"hue-doc-varname\">new_table</span> partition(<span class=\"hue-doc-varname\">comma_separated_partition_cols</span>) select * from <span class=\"hue-doc-varname\">old_table</span>;</div><p>\n        Remember that Hive does not require that you specify a source format for it. Consider the case of\n        converting a table with two partition columns called <span class=\"hue-doc-codeph\">year</span> and <span class=\"hue-doc-codeph\">month</span> to a\n        Snappy compressed SequenceFile. Combining the components outlined previously to complete this table\n        conversion, you would specify settings similar to the following:\n      </p><div class=\"hue-doc-codeblock\">hive&gt; create table TBL_SEQ (int_col int, string_col string) STORED AS SEQUENCEFILE;\nhive&gt; SET hive.exec.compress.output=true;\nhive&gt; SET mapred.max.split.size=256000000;\nhive&gt; SET mapred.output.compression.type=BLOCK;\nhive&gt; SET mapred.output.compression.codec=org.apache.hadoop.io.compress.SnappyCodec;\nhive&gt; SET hive.exec.dynamic.partition.mode=nonstrict;\nhive&gt; SET hive.exec.dynamic.partition=true;\nhive&gt; INSERT OVERWRITE TABLE tbl_seq SELECT * FROM tbl;</div><p>\n        To complete a similar process for a table that includes partitions, you would specify settings similar to\n        the following:\n      </p><div class=\"hue-doc-codeblock\">hive&gt; CREATE TABLE tbl_seq (int_col INT, string_col STRING) PARTITIONED BY (year INT) STORED AS SEQUENCEFILE;\nhive&gt; SET hive.exec.compress.output=true;\nhive&gt; SET mapred.max.split.size=256000000;\nhive&gt; SET mapred.output.compression.type=BLOCK;\nhive&gt; SET mapred.output.compression.codec=org.apache.hadoop.io.compress.SnappyCodec;\nhive&gt; SET hive.exec.dynamic.partition.mode=nonstrict;\nhive&gt; SET hive.exec.dynamic.partition=true;\nhive&gt; INSERT OVERWRITE TABLE tbl_seq PARTITION(year) SELECT * FROM tbl;</div><div class=\"hue-doc-note\"><p>\n          The compression type is specified in the following command:\n        </p><div class=\"hue-doc-codeblock\">SET mapred.output.compression.codec=org.apache.hadoop.io.compress.SnappyCodec;</div><p>\n          You could elect to specify alternative codecs such as <span class=\"hue-doc-codeph\">GzipCodec</span> here.\n        </p></div></div></div><div id=\"seqfile_performance\"><div class=\"hue-doc-title\">Query Performance for Impala SequenceFile Tables</div><div><p>\n        In general, expect query performance with SequenceFile tables to be\n        faster than with tables using text data, but slower than with\n        Parquet tables. See <a class=\"hue-doc-internal-link\" href=\"javascript:void(0);\" data-doc-ref=\"topics/impala_parquet.xml\" data-doc-anchor-id=\"parquet\">Using the Parquet File Format with Impala Tables</a>\n        for information about using the Parquet file format for\n        high-performance analytic queries.\n      </p><p id=\"s3_block_splitting\">\n        In Impala 2.6 and higher, Impala queries are optimized for files\n        stored in Amazon S3. For Impala tables that use the file formats Parquet, ORC, RCFile,\n        SequenceFile, Avro, and uncompressed text, the setting\n        <span class=\"hue-doc-codeph\">fs.s3a.block.size</span> in the <span class=\"hue-doc-filepath\">core-site.xml</span>\n        configuration file determines how Impala divides the I/O work of reading the data files.\n        This configuration setting is specified in bytes. By default, this value is 33554432 (32\n        MB), meaning that Impala parallelizes S3 read operations on the files as if they were\n        made up of 32 MB blocks. For example, if your S3 queries primarily access Parquet files\n        written by MapReduce or Hive, increase <span class=\"hue-doc-codeph\">fs.s3a.block.size</span> to 134217728\n        (128 MB) to match the row group size of those files. If most S3 queries involve Parquet\n        files written by Impala, increase <span class=\"hue-doc-codeph\">fs.s3a.block.size</span> to 268435456 (256\n        MB) to match the row group size produced by Impala.\n      </p></div></div></div></div>","title":"Using the SequenceFile File Format with Impala Tables"}