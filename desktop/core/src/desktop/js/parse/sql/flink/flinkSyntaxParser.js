// Licensed to Cloudera, Inc. under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  Cloudera, Inc. licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import SqlParseSupport from 'parse/sql/flink/sqlParseSupport';

var flinkSyntaxParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[4,8,12,16,37,165,177,244,274,324,340,343,347],$V1=[2,626],$V2=[343,347],$V3=[2,627],$V4=[1,36],$V5=[1,28],$V6=[1,29],$V7=[1,18],$V8=[1,21],$V9=[1,37],$Va=[1,34],$Vb=[1,35],$Vc=[1,30],$Vd=[1,33],$Ve=[1,31],$Vf=[1,46],$Vg=[1,48],$Vh=[1,44],$Vi=[1,47],$Vj=[1,43],$Vk=[84,343,347],$Vl=[2,453],$Vm=[1,61],$Vn=[1,69],$Vo=[1,70],$Vp=[1,83],$Vq=[2,415],$Vr=[1,88],$Vs=[1,89],$Vt=[33,270],$Vu=[16,33,46,53,57,58,66,80,82,84,88,98,110,111,112,115,116,123,128,132,143,145,157,185,193,204,217,218,219,220,221,222,223,224,225,229,231,235,242,243,256,265,267,270,343,347,351,352,355,359,360,361,362,363,364,366,369,370,371,372,374,377,378,379,380,382,383,385,387,388,389,390,391,394,395,408,442],$Vv=[84,265,343,347],$Vw=[66,116,231,343,347,351,352],$Vx=[2,783],$Vy=[1,105],$Vz=[66,116,231,351,352,361],$VA=[66,116,231,309,343,347,351,352,361],$VB=[2,780],$VC=[1,110],$VD=[16,66,116,231,351,352,361],$VE=[82,88,244],$VF=[1,176],$VG=[1,177],$VH=[1,132],$VI=[1,127],$VJ=[1,138],$VK=[1,140],$VL=[1,142],$VM=[1,125],$VN=[1,174],$VO=[1,178],$VP=[1,179],$VQ=[1,143],$VR=[1,165],$VS=[1,166],$VT=[1,167],$VU=[1,168],$VV=[1,169],$VW=[1,170],$VX=[1,171],$VY=[1,172],$VZ=[1,158],$V_=[1,159],$V$=[1,152],$V01=[1,141],$V11=[1,153],$V21=[1,128],$V31=[1,130],$V41=[1,129],$V51=[1,133],$V61=[1,131],$V71=[1,173],$V81=[1,175],$V91=[57,58,66,82,84,98,99,110,115,116,231,244,256,270,272,273,274,297,298,299,300,301,302,303,304,305,306,307,309,310,351,352,354,355,358,361,365,373,392,393],$Va1=[84,88,185,265,343,347],$Vb1=[2,1102],$Vc1=[1,231],$Vd1=[1,246],$Ve1=[1,247],$Vf1=[1,235],$Vg1=[1,232],$Vh1=[1,233],$Vi1=[1,234],$Vj1=[1,241],$Vk1=[1,240],$Vl1=[1,239],$Vm1=[1,242],$Vn1=[1,237],$Vo1=[1,236],$Vp1=[1,230],$Vq1=[1,238],$Vr1=[1,249],$Vs1=[1,248],$Vt1=[33,46,57,58,66,80,84,88,98,111,112,116,132,145,185,193,204,217,218,219,220,221,222,223,224,229,231,235,242,243,256,265,267,343,347,351,352,355,359,360,361,362,371,372,377,379,380,382,383,385,389,395,442],$Vu1=[1,255],$Vv1=[1,261],$Vw1=[1,263],$Vx1=[33,46,57,58,66,80,82,84,88,98,111,112,116,132,145,185,193,204,217,218,219,220,221,222,223,224,229,231,235,242,243,256,265,267,343,347,351,352,355,359,360,361,362,371,372,377,379,380,382,383,385,389,395,442],$Vy1=[1,268],$Vz1=[33,46,53,57,58,66,80,82,84,88,98,111,112,116,132,145,185,193,204,217,218,219,220,221,222,223,224,229,231,235,242,243,256,265,267,270,343,347,351,352,355,359,360,361,362,371,372,377,379,380,382,383,385,389,395,442],$VA1=[33,46,57,58,66,80,84,88,98,111,112,116,132,145,185,193,204,217,218,219,220,221,222,223,224,229,231,235,242,243,256,265,267,321,343,347,351,352,355,359,360,361,362,371,372,377,379,380,382,383,385,389,395,442],$VB1=[46,57,58,66,84,88,116,128,143,157,193,204,217,218,219,220,221,222,223,224,225,229,231,235,265,267,343,347,351,352,361],$VC1=[46,53,84,88,98,99,112,185,193,204,217,218,219,220,221,222,223,224,225,229,235,265,267,343,347],$VD1=[84,88],$VE1=[2,48],$VF1=[1,296],$VG1=[46,343,347],$VH1=[46,128,343,347],$VI1=[46,53,80,82,128,343,347],$VJ1=[46,53],$VK1=[267,343,347],$VL1=[88,185,267,343,347],$VM1=[33,53,84,88],$VN1=[177,244],$VO1=[2,1080],$VP1=[84,193,204,229,235,265,343,347],$VQ1=[2,466],$VR1=[1,324],$VS1=[99,250,272,273],$VT1=[84,88,185,193,204,217,218,219,220,221,222,223,224,225,229,235,265,267,343,347],$VU1=[46,57,58,66,84,88,98,116,132,185,193,204,217,218,219,220,221,222,223,224,229,231,235,242,243,265,267,343,347,351,352,359,361,362,371,372,380,385,389,395,442],$VV1=[33,46,57,58,66,84,88,98,111,112,116,132,145,185,193,204,217,218,219,220,221,222,223,224,229,231,235,242,243,256,265,267,343,347,351,352,355,359,360,361,362,371,372,380,385,389,395,442],$VW1=[371,372,395],$VX1=[57,58,66,82,98,99,110,115,116,231,270,272,273,274,297,298,299,300,301,302,303,304,305,306,307,309,310,351,352,354,355,358,361,365,373,392,393],$VY1=[33,46,53,57,58,66,80,84,88,98,99,111,112,116,132,145,185,193,204,217,218,219,220,221,222,223,224,225,229,231,235,242,243,256,265,267,343,347,351,352,355,359,360,361,362,371,372,377,379,380,382,383,385,389,395,442],$VZ1=[84,204,229,235,265,343,347],$V_1=[84,88,193,204,229,235,265,267,343,347],$V$1=[1,425],$V02=[1,428],$V12=[1,426],$V22=[1,430],$V32=[1,427],$V42=[1,429],$V52=[1,432],$V62=[1,431],$V72=[84,88,193,204,217,218,219,220,221,222,223,224,225,229,235,265,267,343,347],$V82=[46,57,58,66,84,88,116,193,204,217,218,219,220,221,222,223,224,225,229,231,235,265,267,343,347,351,352,361],$V92=[33,46,57,58,66,84,88,98,111,112,116,132,145,185,193,204,217,218,219,220,221,222,223,224,229,231,235,242,243,265,267,343,347,351,352,359,361,362,371,372,380,385,389,395,442],$Va2=[46,57,58,66,84,88,116,132,185,193,204,217,218,219,220,221,222,223,224,229,231,235,242,243,265,267,343,347,351,352,359,361,371,372,380,385,389,395,442],$Vb2=[1,450],$Vc2=[84,235],$Vd2=[1,464],$Ve2=[1,490],$Vf2=[1,491],$Vg2=[1,492],$Vh2=[1,478],$Vi2=[1,479],$Vj2=[1,480],$Vk2=[1,481],$Vl2=[1,482],$Vm2=[1,483],$Vn2=[1,484],$Vo2=[1,485],$Vp2=[1,486],$Vq2=[1,487],$Vr2=[1,488],$Vs2=[1,489],$Vt2=[84,229,235,265,343,347],$Vu2=[66,82,116,231,351,352,361],$Vv2=[1,524],$Vw2=[84,88,235],$Vx2=[33,46,57,58,66,80,84,88,98,111,112,116,132,145,185,193,204,217,218,219,220,221,222,223,224,225,229,231,235,242,243,256,265,267,343,347,351,352,355,359,360,361,362,371,372,377,379,380,382,383,385,389,395,442],$Vy2=[1,532],$Vz2=[88,343,347],$VA2=[1,548],$VB2=[1,549],$VC2=[53,84,88,98,99,112],$VD2=[2,892],$VE2=[1,552],$VF2=[84,229,265,343,347],$VG2=[84,88,193,204,217,218,219,220,221,222,223,224,229,235,265,267,343,347],$VH2=[2,374],$VI2=[1,568],$VJ2=[53,84,88,98,99],$VK2=[84,88,204,229,235,265,343,347],$VL2=[362,497],$VM2=[1,624],$VN2=[88,112],$VO2=[84,359,367,392,497],$VP2=[2,1138],$VQ2=[84,88,132,229,265,343,347,385],$VR2=[84,359],$VS2=[2,1148],$VT2=[1,657],$VU2=[1,658],$VV2=[1,659],$VW2=[1,667],$VX2=[1,668],$VY2=[2,1153],$VZ2=[1,675],$V_2=[375,381],$V$2=[2,198],$V03=[2,199];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"DataDefinition_EDIT":3,"ALTER":4,"CURSOR":5,"AlterTable_EDIT":6,"AlterView_EDIT":7,"CREATE":8,"DatabaseDefinition_EDIT":9,"TableDefinition_EDIT":10,"ViewDefinition_EDIT":11,"DROP":12,"DropDatabaseStatement_EDIT":13,"DropTableStatement_EDIT":14,"DropViewStatement_EDIT":15,"SET":16,"TruncateTableStatement_EDIT":17,"UseStatement_EDIT":18,"ShowStatement_EDIT":19,"DataDefinition":20,"AlterTable":21,"AlterView":22,"DatabaseDefinition":23,"RoleDefinition":24,"TableDefinition":25,"ViewDefinition":26,"DropDatabaseStatement":27,"DropRoleStatement":28,"DropTableStatement":29,"DropViewStatement":30,"ALL":31,"SetOption":32,"=":33,"SetValue":34,"TruncateTableStatement":35,"UseStatement":36,"SHOW":37,"ShowStatement":38,"AlterTableLeftSide":39,"PartitionSpec":40,"AlterTableLeftSide_EDIT":41,"TABLE":42,"SchemaQualifiedTableIdentifier":43,"SchemaQualifiedTableIdentifier_EDIT":44,"AlterViewLeftSide":45,"AS":46,"QuerySpecification":47,"AlterViewLeftSide_EDIT":48,"QuerySpecification_EDIT":49,"VIEW":50,"OptionalComment":51,"Comment":52,"COMMENT":53,"QuotedValue":54,"OptionalComment_INVALID":55,"Comment_INVALID":56,"SINGLE_QUOTE":57,"DOUBLE_QUOTE":58,"VALUE":59,"DatabaseOrSchema":60,"OptionalIfNotExists":61,"RegularIdentifier":62,"DatabaseDefinitionOptionals":63,"OptionalIfNotExists_EDIT":64,"DatabaseDefinitionOptionals_EDIT":65,"ROLE":66,"TableDefinitionRightPart":67,"TableDefinitionRightPart_EDIT":68,"TableIdentifierAndOptionalColumnSpecification":69,"OptionalPartitionedBy":70,"OptionalAsSelectStatement":71,"TableIdentifierAndOptionalColumnSpecification_EDIT":72,"PartitionedBy_EDIT":73,"OptionalAsSelectStatement_EDIT":74,"SchemaQualifiedIdentifier":75,"OptionalColumnSpecificationsOrLike":76,"OptionalColumnSpecificationsOrLike_EDIT":77,"SchemaQualifiedIdentifier_EDIT":78,"ParenthesizedColumnSpecificationList":79,"LIKE":80,"ParenthesizedColumnSpecificationList_EDIT":81,"(":82,"ColumnSpecificationList":83,")":84,"ColumnSpecificationList_EDIT":85,"RightParenthesisOrError":86,"ColumnSpecification":87,",":88,"ColumnSpecification_EDIT":89,"ColumnIdentifier":90,"ColumnDataType":91,"OptionalColumnOptions":92,"ColumnDataType_EDIT":93,"ColumnOptions_EDIT":94,"ColumnOptions":95,"ColumnOption":96,"ColumnOption_EDIT":97,"NOT":98,"NULL":99,"PrimitiveType":100,"ArrayType":101,"MapType":102,"StructType":103,"ArrayType_INVALID":104,"MapType_INVALID":105,"StructType_INVALID":106,"ArrayType_EDIT":107,"MapType_EDIT":108,"StructType_EDIT":109,"ARRAY":110,"<":111,">":112,"AnyCursor":113,"GreaterThanOrError":114,"MAP":115,"STRUCT":116,"StructDefinitionList":117,"StructDefinitionList_EDIT":118,"StructDefinition":119,"StructDefinition_EDIT":120,"Commas":121,"RegularOrBacktickedIdentifier":122,":":123,"ColumnDataTypeList":124,"ColumnDataTypeList_EDIT":125,"ColumnDataTypeListInner_EDIT":126,"PartitionedBy":127,"PARTITION":128,"BY":129,"RangeClause":130,"RangeClause_EDIT":131,"RANGE":132,"ParenthesizedColumnList":133,"ParenthesizedPartitionValuesList":134,"ParenthesizedColumnList_EDIT":135,"ParenthesizedPartitionValuesList_EDIT":136,"PartitionValueList":137,"PartitionValueList_EDIT":138,"PartitionValue":139,"PartitionValue_EDIT":140,"ValueExpression":141,"LessThanOrEqualTo":142,"VALUES":143,"ValueExpression_EDIT":144,"COMPARISON_OPERATOR":145,"CommitLocations":146,"OptionalParenthesizedViewColumnList":147,"ParenthesizedViewColumnList_EDIT":148,"ParenthesizedViewColumnList":149,"ViewColumnList":150,"ViewColumnList_EDIT":151,"ColumnReference":152,"OptionalIfExists":153,"OptionalCascade":154,"OptionalIfExists_EDIT":155,"OptionalPurge":156,"PURGE":157,"DataManipulation":158,"InsertStatement":159,"UpdateStatement":160,"InsertValuesStatement":161,"DataManipulation_EDIT":162,"InsertValuesStatement_EDIT":163,"UpdateStatement_EDIT":164,"INSERT":165,"INTO":166,"OptionalTable":167,"InsertValuesList":168,"ParenthesizedRowValuesList":169,"InValueList":170,"CommonTableExpression":171,"SelectStatement":172,"OptionalUnions":173,"SelectStatement_EDIT":174,"OptionalUnions_EDIT":175,"CommonTableExpression_EDIT":176,"WITH":177,"WithQueries":178,"WithQueries_EDIT":179,"WithQuery":180,"WithQuery_EDIT":181,"TableSubQueryInner":182,"TableSubQueryInner_EDIT":183,"FromClause":184,"FROM":185,"TableReferenceList":186,"FromClause_EDIT":187,"TableReferenceList_EDIT":188,"TableReference":189,"TableReference_EDIT":190,"OptionalGroupByClause":191,"GroupByClause":192,"GROUP":193,"GroupByColumnList":194,"GroupByClause_EDIT":195,"GroupByColumnList_EDIT":196,"ColumnGroupingSets":197,"ColumnGroupingSets_EDIT":198,"ColumnGroupingSet_EDIT":199,"ColumnReference_EDIT":200,"GroupByColumnListPartTwo_EDIT":201,"OptionalHavingClause":202,"HavingClause":203,"HAVING":204,"HavingClause_EDIT":205,"OptionalJoins":206,"Joins":207,"Joins_INVALID":208,"JoinType":209,"TablePrimary":210,"OptionalJoinCondition":211,"Join_EDIT":212,"JoinType_EDIT":213,"TablePrimary_EDIT":214,"JoinCondition_EDIT":215,"Joins_EDIT":216,"CROSS":217,"JOIN":218,"FULL":219,"OUTER":220,"INNER":221,"LEFT":222,"SEMI":223,"RIGHT":224,"ON":225,"UsingColList":226,"OptionalLimitClause":227,"LimitClause":228,"LIMIT":229,"UnsignedNumericLiteral":230,"VARIABLE_REFERENCE":231,"LimitClause_EDIT":232,"OptionalOrderByClause":233,"OrderByClause":234,"ORDER":235,"OrderByColumnList":236,"OrderByClause_EDIT":237,"OrderByColumnList_EDIT":238,"OrderByIdentifier":239,"OrderByIdentifier_EDIT":240,"OptionalAscOrDesc":241,"ASC":242,"DESC":243,"SELECT":244,"OptionalAllOrDistinct":245,"SelectList":246,"TableExpression":247,"SelectList_EDIT":248,"TableExpression_EDIT":249,"DISTINCT":250,"OptionalSelectConditions":251,"OptionalSelectConditions_EDIT":252,"SelectSpecification":253,"SelectSpecification_EDIT":254,"OptionalCorrelationName":255,"*":256,"OptionalCorrelationName_EDIT":257,"OptionalWhereClause":258,"WhereClause_EDIT":259,"WhereClause":260,"Unions":261,"Unions_EDIT":262,"UnionClause":263,"UnionClause_EDIT":264,"UNION":265,"NewStatement":266,"WHERE":267,"SearchCondition":268,"SearchCondition_EDIT":269,".":270,"SignedInteger":271,"TRUE":272,"FALSE":273,"TRUNCATE":274,"OptionalPartitionSpec":275,"UserDefinedFunction":276,"AggregateFunction":277,"OptionalOverClause":278,"AnalyticFunction":279,"OverClause":280,"CastFunction":281,"UserDefinedFunction_EDIT":282,"AggregateFunction_EDIT":283,"OptionalOverClause_EDIT":284,"AnalyticFunction_EDIT":285,"OverClause_EDIT":286,"CastFunction_EDIT":287,"OtherAggregateFunction":288,"CountFunction":289,"SumFunction":290,"OtherAggregateFunction_EDIT":291,"CountFunction_EDIT":292,"SumFunction_EDIT":293,"OtherAggregateFunction_Type":294,"UdfArgumentList":295,"UdfArgumentList_EDIT":296,"AVG":297,"MAX":298,"MIN":299,"STDDEV_POP":300,"STDDEV_SAMP":301,"VAR_POP":302,"VAR_SAMP":303,"VARIANCE":304,"COUNT":305,"SUM":306,"ANALYTIC":307,"ArbitraryFunctionName":308,"IF":309,"CAST":310,"NonParenthesizedValueExpressionPrimary":311,"ColumnOrArbitraryFunctionRef":312,"ArbitraryFunctionRightPart":313,"UnsignedValueSpecification":314,"NonParenthesizedValueExpressionPrimary_EDIT":315,"ArbitraryFunctionRightPart_EDIT":316,"UnsignedValueSpecification_EDIT":317,"ColumnOrArbitraryFunctionRef_EDIT":318,"ArbitraryFunction":319,"ArbitraryFunction_EDIT":320,"OVER":321,"WindowExpression":322,"WindowExpression_EDIT":323,"UPDATE":324,"TargetTable":325,"SetClauseList":326,"OptionalFromJoinedTable":327,"TargetTable_EDIT":328,"SetClauseList_EDIT":329,"FromJoinedTable_EDIT":330,"TableName":331,"TableName_EDIT":332,"LocalOrSchemaQualifiedName":333,"LocalOrSchemaQualifiedName_EDIT":334,"SetClause":335,"SetClause_EDIT":336,"SetTarget":337,"UpdateSource":338,"UpdateSource_EDIT":339,"USE":340,"SqlSyntax":341,"SqlStatements":342,"EOF":343,"SqlAutocomplete":344,"SqlStatements_EDIT":345,"SqlStatement":346,";":347,"SqlStatement_EDIT":348,"SetSpecification_EDIT":349,"NonReservedKeyword":350,"OPTION":351,"REGULAR_IDENTIFIER":352,"NonStartingToken":353,"!":354,"-":355,"[":356,"]":357,"~":358,"AND":359,"ARITHMETIC_OPERATOR":360,"BACKTICK":361,"BETWEEN":362,"BIGINT":363,"BOOLEAN":364,"CASE":365,"CHAR":366,"CURRENT":367,"DATABASE":368,"DECIMAL":369,"DOUBLE":370,"ELSE":371,"END":372,"EXISTS":373,"FLOAT":374,"FOLLOWING":375,"HDFS_START_QUOTE":376,"IN":377,"INT":378,"IS":379,"OR":380,"PRECEDING":381,"REGEXP":382,"RLIKE":383,"ROW":384,"ROWS":385,"SCHEMA":386,"SMALLINT":387,"STRING":388,"THEN":389,"TIMESTAMP":390,"TINYINT":391,"UNSIGNED_INTEGER":392,"UNSIGNED_INTEGER_E":393,"VARCHAR":394,"WHEN":395,"PARTIAL_CURSOR":396,"FromOrIn":397,"SingleQuotedValue":398,"SingleQuotedValue_EDIT":399,"PARTIAL_VALUE":400,"DoubleQuotedValue":401,"DoubleQuotedValue_EDIT":402,"QuotedValue_EDIT":403,"OptionalFromDatabase":404,"DatabaseIdentifier":405,"OptionalFromDatabase_EDIT":406,"DatabaseIdentifier_EDIT":407,"CASCADE":408,"OptionalInDatabase":409,"OptionalPartitionSpec_EDIT":410,"PartitionSpec_EDIT":411,"PartitionSpecList":412,"PartitionSpecList_EDIT":413,"RangePartitionSpec":414,"RangePartitionComparisonOperator":415,"RangePartitionSpec_EDIT":416,"ConfigurationName":417,"PartialBacktickedOrAnyCursor":418,"PartialBacktickedIdentifier":419,"PartialBacktickedOrCursor":420,"PartialBacktickedOrPartialCursor":421,"OptionalParenthesizedColumnList":422,"OptionalParenthesizedColumnList_EDIT":423,"ColumnList":424,"ColumnList_EDIT":425,"ParenthesizedSimpleValueList":426,"SimpleValueList":427,"PartitionExpression":428,"PartitionExpression_EDIT":429,"RegularOrBackTickedSchemaQualifiedName":430,"RegularOrBackTickedSchemaQualifiedName_EDIT":431,"BasicIdentifierChain":432,"BasicIdentifierChain_EDIT":433,"DerivedColumnChain":434,"DerivedColumnChain_EDIT":435,"PartialBacktickedIdentifierOrPartialCursor":436,"OptionalTypeLength":437,"OptionalTypePrecision":438,"OptionalNot":439,"TableSubQuery":440,"ValueExpressionList":441,"BETWEEN_AND":442,"LikeRightPart":443,"CaseRightPart":444,"TableSubQuery_EDIT":445,"ValueExpressionInSecondPart_EDIT":446,"LikeRightPart_EDIT":447,"CaseRightPart_EDIT":448,"EndOrError":449,"ValueExpressionList_EDIT":450,"+":451,"UnsignedLiteral":452,"UnsignedLiteral_EDIT":453,"GeneralLiteral":454,"GeneralLiteral_EDIT":455,"ExactNumericLiteral":456,"ApproximateNumericLiteral":457,"TruthValue":458,"TablePrimaryOrJoinedTable":459,"TablePrimaryOrJoinedTable_EDIT":460,"JoinedTable":461,"JoinedTable_EDIT":462,"TableOrQueryName":463,"DerivedTable":464,"TableOrQueryName_EDIT":465,"DerivedTable_EDIT":466,"OptionalOnColumn":467,"OptionalOnColumn_EDIT":468,"PushQueryState":469,"PopQueryState":470,"SubQuery":471,"SubQuery_EDIT":472,"QueryExpression":473,"QueryExpression_EDIT":474,"QueryExpressionBody":475,"QueryExpressionBody_EDIT":476,"NonJoinQueryExpression":477,"NonJoinQueryExpression_EDIT":478,"NonJoinQueryTerm":479,"NonJoinQueryTerm_EDIT":480,"NonJoinQueryPrimary":481,"NonJoinQueryPrimary_EDIT":482,"SimpleTable":483,"SimpleTable_EDIT":484,"OptionalPartitionBy":485,"OptionalOrderByAndWindow":486,"PartitionBy_EDIT":487,"OptionalOrderByAndWindow_EDIT":488,"PartitionBy":489,"OptionalWindowSpec":490,"WindowSpec_EDIT":491,"WindowSpec":492,"RowsOrRange":493,"PopLexerState":494,"OptionalCurrentOrPreceding":495,"OptionalAndFollowing":496,"UNBOUNDED":497,"OptionalCurrentOrPreceding_EDIT":498,"OptionalAndFollowing_EDIT":499,"PushHdfsLexerState":500,"HdfsPath":501,"HDFS_PATH":502,"HDFS_END_QUOTE":503,"HdfsPath_EDIT":504,"IntegerOrUnbounded":505,"TABLES":506,"CATALOGS":507,"CATALOG":508,"DATABASES":509,"VIEWS":510,"FUNCTIONS":511,"CaseWhenThenList":512,"CaseWhenThenList_EDIT":513,"CaseWhenThenListPartTwo":514,"CaseWhenThenListPartTwo_EDIT":515,"$accept":0,"$end":1},
terminals_: {2:"error",4:"ALTER",5:"CURSOR",8:"CREATE",12:"DROP",16:"SET",31:"ALL",33:"=",37:"SHOW",42:"TABLE",46:"AS",50:"VIEW",53:"COMMENT",57:"SINGLE_QUOTE",58:"DOUBLE_QUOTE",59:"VALUE",66:"ROLE",80:"LIKE",82:"(",84:")",88:",",98:"NOT",99:"NULL",110:"ARRAY",111:"<",112:">",115:"MAP",116:"STRUCT",123:":",128:"PARTITION",129:"BY",132:"RANGE",143:"VALUES",145:"COMPARISON_OPERATOR",157:"PURGE",165:"INSERT",166:"INTO",177:"WITH",185:"FROM",193:"GROUP",204:"HAVING",217:"CROSS",218:"JOIN",219:"FULL",220:"OUTER",221:"INNER",222:"LEFT",223:"SEMI",224:"RIGHT",225:"ON",229:"LIMIT",231:"VARIABLE_REFERENCE",235:"ORDER",242:"ASC",243:"DESC",244:"SELECT",250:"DISTINCT",256:"*",265:"UNION",267:"WHERE",270:".",272:"TRUE",273:"FALSE",274:"TRUNCATE",297:"AVG",298:"MAX",299:"MIN",300:"STDDEV_POP",301:"STDDEV_SAMP",302:"VAR_POP",303:"VAR_SAMP",304:"VARIANCE",305:"COUNT",306:"SUM",307:"ANALYTIC",309:"IF",310:"CAST",321:"OVER",324:"UPDATE",340:"USE",343:"EOF",347:";",349:"SetSpecification_EDIT",351:"OPTION",352:"REGULAR_IDENTIFIER",354:"!",355:"-",356:"[",357:"]",358:"~",359:"AND",360:"ARITHMETIC_OPERATOR",361:"BACKTICK",362:"BETWEEN",363:"BIGINT",364:"BOOLEAN",365:"CASE",366:"CHAR",367:"CURRENT",368:"DATABASE",369:"DECIMAL",370:"DOUBLE",371:"ELSE",372:"END",373:"EXISTS",374:"FLOAT",375:"FOLLOWING",376:"HDFS_START_QUOTE",377:"IN",378:"INT",379:"IS",380:"OR",381:"PRECEDING",382:"REGEXP",383:"RLIKE",384:"ROW",385:"ROWS",386:"SCHEMA",387:"SMALLINT",388:"STRING",389:"THEN",390:"TIMESTAMP",391:"TINYINT",392:"UNSIGNED_INTEGER",393:"UNSIGNED_INTEGER_E",394:"VARCHAR",395:"WHEN",396:"PARTIAL_CURSOR",400:"PARTIAL_VALUE",408:"CASCADE",442:"BETWEEN_AND",451:"+",497:"UNBOUNDED",502:"HDFS_PATH",503:"HDFS_END_QUOTE",506:"TABLES",507:"CATALOGS",508:"CATALOG",509:"DATABASES",510:"VIEWS",511:"FUNCTIONS"},
productions_: [0,[3,2],[3,1],[3,1],[3,2],[3,1],[3,1],[3,1],[3,2],[3,1],[3,1],[3,1],[3,2],[3,1],[3,1],[3,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,2],[20,4],[20,1],[20,1],[20,2],[21,2],[6,1],[6,2],[6,2],[6,3],[39,3],[41,3],[41,3],[22,3],[7,1],[7,2],[7,3],[7,3],[7,3],[45,3],[48,3],[48,3],[51,0],[51,1],[52,2],[55,1],[56,2],[56,2],[56,3],[56,3],[23,3],[23,5],[9,4],[9,3],[9,5],[9,4],[9,6],[63,1],[65,1],[24,3],[25,4],[10,4],[10,4],[10,3],[67,3],[68,3],[68,3],[68,3],[68,3],[69,2],[72,2],[72,2],[76,0],[76,1],[76,2],[77,1],[77,2],[77,2],[79,3],[81,3],[83,1],[83,3],[85,1],[85,3],[85,3],[85,5],[85,2],[85,4],[85,4],[85,6],[87,3],[89,3],[89,3],[89,3],[92,0],[92,1],[95,1],[95,2],[94,1],[94,2],[94,2],[94,3],[96,2],[96,1],[96,1],[97,2],[91,1],[91,1],[91,1],[91,1],[91,1],[91,1],[91,1],[93,1],[93,1],[93,1],[101,4],[104,3],[107,4],[107,4],[102,6],[105,3],[108,6],[108,4],[108,6],[108,5],[103,4],[106,3],[109,4],[117,1],[117,3],[118,1],[118,2],[118,3],[118,3],[118,5],[119,4],[120,5],[120,4],[120,4],[120,4],[120,3],[120,3],[124,1],[124,3],[125,1],[125,2],[125,3],[125,3],[125,5],[126,2],[126,2],[126,1],[126,1],[114,1],[114,1],[70,0],[70,1],[127,3],[73,2],[73,3],[73,3],[130,3],[131,2],[131,2],[131,3],[131,3],[131,3],[134,3],[136,3],[136,3],[137,1],[137,3],[138,1],[138,3],[138,5],[138,3],[138,5],[139,6],[139,4],[139,4],[140,2],[140,2],[140,3],[140,4],[140,4],[140,5],[140,6],[140,6],[140,3],[140,4],[140,4],[142,1],[142,1],[71,0],[71,3],[74,3],[74,3],[146,0],[26,8],[11,4],[11,9],[11,3],[11,6],[11,7],[11,8],[11,8],[11,8],[147,0],[147,1],[149,3],[148,3],[150,2],[150,4],[151,3],[151,5],[151,5],[151,7],[27,5],[13,3],[13,3],[13,4],[13,5],[13,5],[13,6],[28,3],[29,5],[14,3],[14,4],[14,5],[14,5],[14,6],[156,0],[156,1],[30,4],[15,4],[15,5],[15,3],[15,4],[15,4],[158,1],[158,1],[159,1],[162,1],[162,1],[161,6],[163,2],[163,4],[163,4],[163,5],[163,6],[168,1],[168,3],[169,3],[167,0],[167,1],[47,3],[47,5],[47,2],[49,4],[49,3],[49,3],[49,1],[49,4],[49,3],[49,2],[49,2],[171,2],[176,2],[178,1],[178,3],[179,1],[179,3],[179,3],[179,5],[180,5],[181,2],[181,5],[181,5],[184,2],[187,2],[187,2],[186,1],[186,3],[188,1],[188,3],[188,3],[188,5],[188,3],[191,0],[191,1],[192,3],[195,3],[195,3],[195,2],[197,0],[197,1],[197,3],[197,3],[198,1],[198,3],[198,3],[198,5],[198,3],[199,1],[199,1],[194,1],[194,3],[196,1],[196,2],[196,3],[196,3],[196,3],[196,4],[196,5],[201,1],[201,2],[201,1],[202,0],[202,1],[203,2],[205,2],[205,2],[206,0],[206,1],[206,1],[207,3],[207,4],[208,1],[208,2],[212,3],[212,1],[212,3],[212,3],[212,3],[216,1],[216,2],[216,2],[216,3],[209,2],[209,2],[209,3],[209,2],[209,1],[209,3],[209,2],[209,3],[209,3],[209,2],[209,3],[209,2],[209,3],[209,3],[209,2],[213,2],[213,3],[213,3],[213,2],[213,3],[213,3],[213,3],[213,3],[213,2],[213,3],[213,3],[213,3],[213,3],[213,2],[211,0],[211,2],[226,1],[226,3],[215,2],[215,2],[227,0],[227,1],[228,2],[228,4],[228,2],[228,4],[232,2],[233,0],[233,1],[234,3],[237,3],[237,2],[236,1],[236,3],[238,1],[238,2],[238,3],[238,4],[238,5],[239,2],[240,2],[240,2],[241,0],[241,1],[241,1],[172,3],[172,4],[174,3],[174,3],[174,4],[174,4],[174,4],[174,5],[174,6],[174,4],[245,0],[245,1],[245,1],[247,2],[249,2],[249,4],[249,3],[246,1],[246,3],[248,1],[248,2],[248,3],[248,3],[248,3],[248,4],[248,3],[248,3],[248,4],[248,4],[248,4],[248,5],[248,5],[253,2],[253,1],[254,2],[254,3],[254,2],[251,5],[252,5],[252,5],[252,5],[252,5],[252,5],[252,6],[252,6],[252,6],[252,6],[252,6],[173,0],[173,1],[175,1],[261,1],[261,2],[262,1],[262,2],[262,2],[262,3],[263,4],[264,3],[264,4],[264,4],[258,0],[258,1],[260,2],[259,2],[259,2],[268,1],[269,1],[32,1],[32,3],[34,1],[34,1],[34,2],[34,1],[34,1],[34,1],[34,1],[35,4],[17,2],[17,4],[17,3],[17,4],[17,5],[17,5],[17,5],[276,2],[276,2],[276,1],[282,1],[282,2],[282,1],[282,2],[282,2],[282,2],[282,1],[277,1],[277,1],[277,1],[283,1],[283,1],[283,1],[288,4],[288,5],[291,5],[291,6],[291,5],[294,1],[294,1],[294,1],[294,1],[294,1],[294,1],[294,1],[294,1],[289,4],[289,3],[289,5],[292,5],[292,6],[292,5],[290,5],[290,3],[293,5],[293,6],[293,5],[279,3],[279,4],[285,4],[285,5],[285,4],[308,1],[308,1],[308,1],[308,1],[281,6],[281,3],[287,6],[287,5],[287,4],[287,6],[287,5],[287,4],[287,6],[287,5],[287,6],[287,5],[311,2],[311,2],[311,1],[311,1],[311,1],[311,1],[315,2],[315,2],[315,1],[315,1],[315,1],[319,2],[319,2],[320,2],[320,2],[313,2],[313,3],[316,3],[316,4],[316,3],[295,1],[295,3],[296,1],[296,3],[296,3],[296,5],[296,3],[296,5],[296,4],[296,3],[296,2],[296,2],[296,4],[278,0],[278,1],[284,1],[280,2],[280,2],[286,2],[160,6],[164,6],[164,6],[164,6],[164,6],[164,7],[164,3],[164,2],[164,2],[164,2],[325,1],[328,1],[331,1],[332,1],[326,1],[326,3],[329,1],[329,3],[329,3],[329,5],[335,3],[336,3],[336,2],[336,1],[337,1],[338,1],[339,1],[327,0],[327,2],[330,2],[330,2],[36,2],[18,2],[341,3],[344,3],[344,3],[266,0],[342,0],[342,1],[342,4],[345,1],[345,4],[345,4],[345,7],[346,1],[346,1],[346,1],[348,1],[348,2],[348,1],[348,1],[348,1],[348,1],[350,1],[350,1],[350,1],[62,1],[62,1],[62,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[353,1],[121,1],[121,2],[113,1],[113,1],[397,1],[397,1],[60,1],[60,1],[398,3],[398,2],[399,2],[401,3],[401,2],[402,2],[54,1],[54,1],[403,1],[403,1],[404,0],[404,2],[406,2],[154,0],[154,1],[153,0],[153,2],[155,2],[61,0],[61,3],[64,2],[64,3],[409,0],[409,2],[409,2],[275,0],[275,1],[410,1],[40,4],[411,4],[414,5],[416,2],[416,3],[416,4],[416,5],[416,5],[416,5],[415,1],[415,1],[415,1],[415,1],[417,1],[417,1],[418,1],[418,1],[420,1],[420,1],[421,1],[421,1],[419,2],[86,1],[86,1],[422,0],[422,1],[423,1],[133,3],[135,3],[135,3],[424,1],[424,3],[425,3],[425,5],[426,3],[427,1],[427,3],[43,1],[43,3],[44,1],[44,3],[44,3],[75,1],[75,3],[78,1],[78,3],[78,3],[405,1],[407,1],[412,1],[412,3],[413,1],[413,3],[413,3],[413,5],[428,3],[429,3],[429,3],[429,3],[429,1],[122,1],[122,3],[122,2],[430,1],[430,3],[431,1],[431,3],[333,1],[333,2],[334,1],[334,2],[152,1],[152,3],[200,1],[432,1],[432,3],[433,3],[433,5],[434,1],[434,3],[435,1],[435,3],[435,5],[435,3],[90,1],[436,1],[436,1],[100,1],[100,1],[100,2],[100,2],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,2],[437,0],[437,3],[438,0],[438,3],[438,5],[141,1],[141,2],[141,2],[141,2],[141,2],[141,4],[141,4],[141,4],[141,6],[141,2],[141,3],[141,3],[141,3],[141,3],[141,3],[141,6],[141,6],[141,5],[141,5],[141,6],[141,5],[141,3],[141,3],[141,3],[141,3],[141,3],[141,2],[141,3],[141,2],[141,3],[144,1],[144,3],[144,2],[144,2],[144,2],[144,2],[144,2],[144,2],[144,2],[144,2],[144,3],[144,4],[144,5],[144,4],[144,4],[144,4],[144,6],[144,6],[144,2],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,4],[144,3],[144,6],[144,6],[144,5],[144,5],[144,6],[144,6],[144,6],[144,6],[144,5],[144,4],[144,5],[144,5],[144,5],[144,5],[144,4],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,2],[144,3],[144,2],[144,3],[144,2],[144,3],[144,2],[144,3],[144,3],[144,4],[144,3],[144,3],[144,3],[441,1],[441,3],[450,1],[450,3],[450,3],[450,5],[450,3],[450,5],[450,4],[450,3],[450,2],[450,2],[450,4],[170,1],[170,3],[312,1],[312,3],[318,1],[271,1],[271,2],[271,2],[314,1],[317,1],[452,1],[452,1],[453,1],[230,1],[230,1],[456,1],[456,2],[456,3],[456,2],[457,2],[457,3],[457,4],[454,1],[454,1],[454,1],[455,1],[455,1],[458,1],[458,1],[439,0],[439,1],[189,1],[190,1],[459,1],[459,1],[460,1],[460,1],[461,2],[462,2],[462,2],[210,2],[210,2],[214,2],[214,2],[214,2],[463,1],[465,1],[464,1],[466,1],[467,0],[467,2],[468,2],[468,2],[469,0],[470,0],[440,3],[440,4],[445,3],[445,3],[182,2],[183,3],[471,1],[472,1],[473,1],[474,1],[475,1],[476,1],[477,1],[478,1],[479,1],[480,1],[481,1],[482,1],[483,1],[484,1],[255,0],[255,1],[255,1],[255,2],[255,2],[257,1],[257,1],[257,2],[257,2],[257,2],[322,4],[323,4],[323,4],[323,5],[323,7],[485,0],[485,1],[489,3],[487,2],[487,3],[487,3],[486,0],[486,2],[488,1],[488,3],[488,2],[490,0],[490,1],[492,5],[492,5],[491,2],[491,6],[491,5],[491,5],[491,5],[491,4],[494,0],[500,0],[501,3],[504,5],[504,4],[504,3],[504,3],[504,2],[493,1],[493,1],[495,0],[495,2],[495,2],[498,2],[498,2],[496,0],[496,3],[496,3],[499,2],[499,3],[499,3],[505,1],[505,1],[38,1],[38,1],[38,2],[38,1],[38,2],[38,1],[38,1],[38,1],[19,2],[446,3],[446,3],[446,3],[443,2],[443,2],[443,2],[447,2],[447,2],[447,2],[447,2],[447,2],[447,2],[444,2],[444,4],[448,2],[448,4],[448,4],[448,3],[448,4],[448,3],[448,4],[448,4],[448,3],[448,4],[448,3],[449,1],[449,1],[512,1],[512,2],[513,1],[513,2],[513,3],[513,3],[513,2],[514,4],[515,2],[515,3],[515,4],[515,4],[515,3],[515,3],[515,4],[515,2],[515,3],[515,2],[515,3],[515,3],[515,4],[515,3],[515,4],[515,4],[515,5],[515,4],[515,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

     parser.suggestKeywords(['TABLE', 'VIEW']);
   
break;
case 4: case 8:

     parser.suggestKeywords(['DATABASE', 'ROLE', 'SCHEMA', 'TABLE', 'VIEW']);
   
break;
case 12:

     parser.suggestSetOptions();
   
break;
case 36: case 45: case 240: case 244: case 482: case 602:

     parser.addTablePrimary($$[$0]);
   
break;
case 37: case 235:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyTables = true;
     }
   
break;
case 38:

     parser.suggestTables({ onlyTables: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 41: case 282:

     parser.suggestKeywords(['AS']);
   
break;
case 43: case 202: case 211: case 283: case 638: case 1085:

     parser.suggestKeywords(['SELECT']);
   
break;
case 46: case 245:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyViews = true;
     }
   
break;
case 47:

     parser.suggestTables({ onlyViews: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 57:

     parser.addNewDatabaseLocation(_$[$0-1], [{ name: $$[$0-1] }]);
   
break;
case 58: case 68:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 60:

     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
     parser.addNewDatabaseLocation(_$[$0], [{ name: $$[$0] }]);
   
break;
case 61:

     parser.addNewDatabaseLocation(_$[$0], [{ name: $$[$0] }]);
   
break;
case 62:

     parser.addNewDatabaseLocation(_$[$0-2], [{ name: $$[$0-2] }]);
   
break;
case 63:

     if (!$$[$0]) {
       parser.suggestKeywords(['COMMENT']);
     }
   
break;
case 74:

     var keywords = [];
     if (!$$[$0-2] && !$$[$0-1]) {
       keywords.push({ value: 'LIKE', weight: 1 });
     } else {
       if (!$$[$0-1]) {
         keywords.push({ value: 'PARTITIONED BY', weight: 12 });
       }
       keywords.push({ value: 'AS', weight: 1 });
     }

     if (keywords.length > 0) {
       parser.suggestKeywords(keywords);
     }
   
break;
case 75:

     parser.addNewTableLocation(_$[$0-1], $$[$0-1], $$[$0]);
     this.$ = $$[$0];
   
break;
case 80:
this.$ = [];
break;
case 82: case 599: case 619: case 832:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 84: case 220: case 222: case 264: case 434: case 567: case 570: case 765: case 768: case 854: case 907: case 1082:
this.$ = $$[$0-1];
break;
case 86: case 275:
this.$ = [$$[$0]];
break;
case 87:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 92: case 94:

     parser.checkForKeywords($$[$0-1]);
   
break;
case 93: case 95:

     parser.checkForKeywords($$[$0-3]);
   
break;
case 96:

     this.$ = $$[$0-2];
     this.$.type = $$[$0-1];
     var keywords = [];
     if (!$$[$0]['comment']) {
       keywords.push('COMMENT');
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 97: case 124: case 130: case 131: case 144: case 147: case 156: case 158:

     parser.suggestKeywords(parser.getColumnDataTypeKeywords());
   
break;
case 100:
this.$ = {};
break;
case 102:

     this.$ = {};
     this.$[$$[$0]] = true;
   
break;
case 103:

     $$[$0-1][$$[$0]] = true;
   
break;
case 108: case 109:
this.$ = 'null';
break;
case 110:
this.$ = 'comment';
break;
case 111:

     parser.suggestKeywords(['NULL']);
   
break;
case 129:

     parser.suggestKeywords(parser.getTypeKeywords());
   
break;
case 143: case 146:

     parser.suggestKeywords(['COMMENT']);
   
break;
case 165: case 1120:

     parser.suggestKeywords(['BY']);
   
break;
case 166:

     parser.suggestKeywords(['RANGE']);
   
break;
case 175: case 180: case 181:

     parser.suggestKeywords(['PARTITION']);
   
break;
case 187:

     parser.suggestKeywords(['VALUE', 'VALUES']);
   
break;
case 188:

     if ($$[$0].endsWithLessThanOrEqual) {
      parser.suggestKeywords(['VALUES']);
     }
   
break;
case 189: case 192: case 195:

     parser.suggestKeywords(['<', '<=']);
   
break;
case 190: case 797: case 800:

     parser.suggestKeywords(['VALUES']);
   
break;
case 193: case 196:

     parser.suggestFunctions();
   
break;
case 204:

     parser.commitLocations();
   
break;
case 206:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
     parser.suggestDatabases({ appendDot: true });
   
break;
case 207:

     if (!$$[$0-6]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 210:

     var keywords = [{value: 'AS', weight: 1 }];
     if (!$$[$0-1]) {
       keywords.push({ value: 'COMMENT', weight: 3 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 217:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['COMMENT']);
     }
   
break;
case 221: case 223:
this.$ = $$[$0-3];
break;
case 227:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestDatabases();
   
break;
case 228:

     parser.suggestKeywords(['CASCADE']);
   
break;
case 230:

     if (!$$[$0-3]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 232: case 487:

     parser.addTablePrimary($$[$0-1]);
   
break;
case 234:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestTables({ onlyTables: true });
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 237:

     parser.addTablePrimary($$[$0-2]);
     if (!$$[$0-1]) {
       parser.suggestKeywords(['PURGE']);
     }
   
break;
case 241:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestTables({ onlyViews: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 242:

     parser.addTablePrimary($$[$0]);
     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 251:

     $$[$0-2].owner = 'insert';
     parser.addTablePrimary($$[$0-2]);
   
break;
case 252:

     parser.suggestKeywords(['INTO']);
   
break;
case 253:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['TABLE']);
     }
     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 255:

     $$[$0-1].owner = 'insert';
     parser.addTablePrimary($$[$0-1]);
     parser.suggestKeywords(['VALUES']);
   
break;
case 263: case 436:
this.$ = $$[$0-2];
break;
case 265:

     parser.addCommonTableExpressions($$[$0-3]);
   
break;
case 266: case 267: case 278:

     parser.addCommonTableExpressions($$[$0-2]);
   
break;
case 273: case 289: case 313: case 389: case 393: case 431: case 441: case 468: case 618: case 1007: case 1009: case 1064: case 1119: case 1203:
this.$ = $$[$0];
break;
case 276:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 280:

     parser.addCommonTableExpressions($$[$0-4]);
   
break;
case 281:

     parser.addCteAliasLocation(_$[$0-4], $$[$0-4]);
     $$[$0-1].alias = $$[$0-4];
     this.$ = $$[$0-1];
   
break;
case 285:

     this.$ = { tableReferenceList : $$[$0] }
   
break;
case 286: case 294:

       parser.suggestTables();
       parser.suggestDatabases({ appendDot: true });
   
break;
case 297:

     this.$ = { valueExpression: $$[$0] };
   
break;
case 298: case 400:

     parser.suggestSelectListAliases();
   
break;
case 299:

     parser.valueExpressionSuggest();
     parser.suggestSelectListAliases();
     parser.suggestGroupBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 300:

     parser.suggestKeywords(['BY']);
     parser.suggestGroupBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 310: case 613: case 822: case 825: case 826: case 851: case 852: case 873: case 876:

     parser.suggestColumns();
   
break;
case 315: case 316: case 322: case 323: case 850: case 1078: case 1121:

     parser.valueExpressionSuggest();
   
break;
case 327:

     parser.valueExpressionSuggest();
     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 328:

     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 332:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-2];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
        parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 333:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-3];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
       parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 334:
this.$ = { joinType: $$[$0] };
break;
case 335:
this.$ = { joinType: $$[$0-1] };
break;
case 336:

     if ($$[$0-2].suggestKeywords) {
       parser.suggestKeywords($$[$0-2].suggestKeywords);
     }
   
break;
case 337:

     if ($$[$0].suggestKeywords) {
       parser.suggestKeywords($$[$0].suggestKeywords);
     }
   
break;
case 340:

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         parser.suggestJoins({
           prependJoin: false,
           joinType: $$[$0-2],
           tables: tables
         })
       }
     }
     parser.suggestTables();
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 345:
this.$ = 'CROSS JOIN';
break;
case 346:
this.$ = 'FULL JOIN';
break;
case 347:
this.$ = 'FULL OUTER JOIN';
break;
case 348:
this.$ = 'INNER JOIN';
break;
case 349:
this.$ = 'JOIN';
break;
case 350:
this.$ = 'LEFT INNER JOIN';
break;
case 351:
this.$ = 'LEFT JOIN';
break;
case 352:
this.$ = 'LEFT OUTER JOIN';
break;
case 353:
this.$ = 'LEFT SEMI JOIN';
break;
case 354:
this.$ = 'OUTER JOIN';
break;
case 355: case 357:
this.$ = 'RIGHT OUTER JOIN';
break;
case 356:
this.$ = 'RIGHT JOIN';
break;
case 358:
this.$ = 'RIGHT SEMI JOIN';
break;
case 359:
this.$ = 'SEMI JOIN';
break;
case 360: case 362: case 363: case 365: case 366: case 367: case 368: case 370: case 371: case 372: case 373:
this.$ = { suggestKeywords: ['JOIN'] };
break;
case 361: case 364: case 369:
this.$ = { suggestKeywords: ['OUTER'] };
break;
case 374:
this.$ = { noJoinCondition: true, suggestKeywords: ['ON'] };
break;
case 375:
this.$ = { valueExpression: $$[$0] };
break;
case 379:

     parser.valueExpressionSuggest();
     parser.suggestJoinConditions({ prependOn: false });
   
break;
case 386:

     parser.suggestKeywords([{ value: '10', weight: 10000 }, { value: '100', weight: 10000 }, { value: '1000', weight: 10000 }, { value: '5000', weight: 10000 }, { value: '10000', weight: 10000 }])
   
break;
case 390:

     if ($$[$0].emptyOrderBy) {
       parser.suggestOrderBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 391:

     parser.suggestKeywords(['BY']);
     parser.suggestOrderBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 395:

     this.$ = { emptyOrderBy: false }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 396: case 397: case 398:
this.$ = { emptyOrderBy: false };
break;
case 399:
this.$ = parser.mergeSuggestKeywords($$[$0]);
break;
case 401:

     this.$ = { emptyOrderBy: true }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 402:
this.$ = { suggestKeywords: ['ASC', 'DESC'] };;
break;
case 405:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     this.$ = { selectList: $$[$0] };
   
break;
case 406:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     this.$ = { selectList: $$[$0-1], tableExpression: $$[$0] }
   
break;
case 407:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     if ($$[$0].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-1]) {
         keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
       }
       parser.suggestKeywords(keywords);
     } else {
       parser.checkForSelectListKeywords($$[$0]);
     }
     if ($$[$0].suggestFunctions) {
       parser.suggestFunctions();
     }
     if ($$[$0].suggestColumns) {
       parser.suggestColumns({ identifierChain: [], source: 'select' });
     }
     if ($$[$0].suggestTables) {
       parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     }
     if ($$[$0].suggestDatabases) {
       parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
     }
     if ($$[$0].suggestAggregateFunctions && (!$$[$0-1] || $$[$0-1] === 'ALL')) {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
   
break;
case 408:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-1] || $$[$0-1] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-1]) {
       keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 409:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
   
break;
case 410:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.selectListNoTableSuggest($$[$0-1], $$[$0-2]);
     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'select';
     }
   
break;
case 411:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2] || $$[$0-2] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-2]) {
       keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 412:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]), _$[$0-2]);
     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 413:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]), _$[$0-3]);
     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 414:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.checkForSelectListKeywords($$[$0-1]);
     var keywords = ['FROM'];
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.suggestTables({ prependFrom: true });
     parser.suggestDatabases({ prependFrom: true, appendDot: true });
   
break;
case 418: case 419:

     parser.addClauseLocation('whereClause', _$[$0-1], $$[$0].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0].limitClausePreceding || _$[$0-1], $$[$0].limitClauseLocation);
   
break;
case 420:

     var keywords = [];

     parser.addClauseLocation('whereClause', _$[$0-3], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-2].limitClausePreceding || _$[$0-3], $$[$0-2].limitClauseLocation);

     if ($$[$0-3]) {
       if (typeof $$[$0-3].tableReferenceList.hasJoinCondition !== 'undefined' && !$$[$0-3].tableReferenceList.hasJoinCondition) {
         keywords.push({ value: 'ON', weight: 3 });
       }
       if ($$[$0-3].suggestKeywords) {
         keywords = parser.createWeightedKeywords($$[$0-3].suggestKeywords, 3);
       }
       if ($$[$0-3].tableReferenceList.suggestJoinConditions) {
         parser.suggestJoinConditions($$[$0-3].tableReferenceList.suggestJoinConditions);
       }
       if ($$[$0-3].tableReferenceList.suggestJoins) {
         parser.suggestJoins($$[$0-3].tableReferenceList.suggestJoins);
       }
       if ($$[$0-3].tableReferenceList.suggestKeywords) {
         keywords = keywords.concat(parser.createWeightedKeywords($$[$0-3].tableReferenceList.suggestKeywords, 3));
       }

       // Lower the weights for 'TABLESAMPLE'
       keywords.forEach(function (keyword) {
         if (keyword.value === 'TABLESAMPLE') {
           keyword.weight = 1.1;
         }
       });

       if ($$[$0-3].tableReferenceList.types) {
         var veKeywords = parser.getValueExpressionKeywords($$[$0-3].tableReferenceList);
         keywords = keywords.concat(veKeywords.suggestKeywords);
         if (veKeywords.suggestColRefKeywords) {
           parser.suggestColRefKeywords(veKeywords.suggestColRefKeywords);
           parser.addColRefIfExists($$[$0-3].tableReferenceList);
         }
       }
     }

     if ($$[$0-1].empty && $$[$0] && $$[$0].joinType.toUpperCase() === 'JOIN') {
       keywords = keywords.concat(['FULL', 'FULL OUTER', 'INNER', 'LEFT', 'LEFT OUTER', 'RIGHT', 'RIGHT OUTER']);
       parser.suggestKeywords(keywords);
       return;
     }

     if ($$[$0-1].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].suggestFilters) {
       parser.suggestFilters($$[$0-1].suggestFilters);
     }
     if ($$[$0-1].suggestGroupBys) {
       parser.suggestGroupBys($$[$0-1].suggestGroupBys);
     }
     if ($$[$0-1].suggestOrderBys) {
       parser.suggestOrderBys($$[$0-1].suggestOrderBys);
     }

     if ($$[$0-1].empty) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }

     keywords = keywords.concat([
       { value: 'FULL JOIN', weight: 1 },
       { value: 'FULL OUTER JOIN', weight: 1 },
       { value: 'INNER JOIN', weight: 1 },
       { value: 'JOIN', weight: 1 },
       { value: 'LEFT JOIN', weight: 1 },
       { value: 'LEFT OUTER JOIN', weight: 1 },
       { value: 'RIGHT JOIN', weight: 1 },
       { value: 'RIGHT OUTER JOIN', weight: 1 }
     ]);
     parser.suggestKeywords(keywords);
  
break;
case 421:

     // A couple of things are going on here:
     // - If there are no SelectConditions (WHERE, GROUP BY, etc.) we should suggest complete join options
     // - If there's an OptionalJoin at the end, i.e. 'SELECT * FROM foo | JOIN ...' we should suggest
     //   different join types
     // - The FromClause could end with a valueExpression, in which case we should suggest keywords like '='
     //   or 'AND' based on type

     if (!$$[$0-1]) {
       parser.addClauseLocation('whereClause', _$[$0-2]);
       parser.addClauseLocation('limitClause', _$[$0-2]);
       return;
     }
     parser.addClauseLocation('whereClause', _$[$0-2], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-1].limitClausePreceding || _$[$0-2], $$[$0-1].limitClauseLocation);
     var keywords = [];

     if ($$[$0-1].suggestColRefKeywords) {
       parser.suggestColRefKeywords($$[$0-1].suggestColRefKeywords);
       parser.addColRefIfExists($$[$0-1]);
     }

     if ($$[$0-1].suggestKeywords && $$[$0-1].suggestKeywords.length) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].cursorAtEnd) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 422:
this.$ = [ $$[$0] ];
break;
case 423:

     $$[$0-2].push($$[$0]);
   
break;
case 425: case 426:

     this.$ = { cursorAtStart : true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 428:

     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 429:

     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 430:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestTables: true, suggestDatabases: true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 432: case 433: case 435:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true,  };
   
break;
case 437:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
       this.$ = { valueExpression: $$[$0-1], alias: $$[$0].alias };
       if (!parser.yy.selectListAliases) {
         parser.yy.selectListAliases = [];
       }
       parser.yy.selectListAliases.push($$[$0-1].function && $$[$0-1].types && $$[$0-1].types.length && $$[$0-1].types[0] === 'UDFREF' ? { name: $$[$0].alias, udfRef: $$[$0-1].function, types: $$[$0-1].types } : { name: $$[$0].alias, types: $$[$0-1].types || ['T'] });
     } else {
       this.$ = { valueExpression: $$[$0-1] }
     }
   
break;
case 438:

     parser.addAsteriskLocation(_$[$0], [{ asterisk: true }]);
     this.$ = { asterisk: true }
   
break;
case 439:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
     }
   
break;
case 440:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.addColumnAliasLocation(_$[$0], $$[$0], _$[$0-2]);
     this.$ = { suggestAggregateFunctions: true };
   
break;
case 442:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'WHERE', weight: 7 }, { value: 'GROUP BY', weight: 6 }, { value: 'HAVING', weight: 5 }, { value: 'ORDER BY', weight: 4 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true, true]);

     if (keywords.length > 0) {
       this.$ = { suggestKeywords: keywords, empty: !$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0] };
     } else {
       this.$ = {};
     }

     this.$.whereClauseLocation = $$[$0-4] ? _$[$0-4] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;

     if (!$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestFilters = { prefix: 'WHERE', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestGroupBys = { prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-1] && !$$[$0]) {
       this.$.suggestOrderBys = { prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
   
break;
case 443:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'where';
     }
   
break;
case 444:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'group by';
     }
   
break;
case 446:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'order by';
     }
   
break;
case 448:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'GROUP BY', weight: 8 }, { value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true]);
     if ($$[$0-5].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-5].suggestKeywords, 1));
     }
     this.$ = parser.getValueExpressionKeywords($$[$0-5], keywords);
     this.$.cursorAtEnd = !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if ($$[$0-5].columnReference) {
       this.$.columnReference = $$[$0-5].columnReference;
     }
     if (!$$[$0-3]) {
       parser.suggestGroupBys({ prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 449:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true]);
     if ($$[$0-4].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-4].suggestKeywords, 8));
     }
     if ($$[$0-4].valueExpression) {
       this.$ = parser.getValueExpressionKeywords($$[$0-4].valueExpression, keywords);
       if ($$[$0-4].valueExpression.columnReference) {
         this.$.columnReference = $$[$0-4].valueExpression.columnReference;
       }
     } else {
       this.$ = { suggestKeywords: keywords };
     }
     this.$.cursorAtEnd = !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 450:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-1], $$[$0]],
       [{ value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true]);
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0-1] && !$$[$0] };
     if (!$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-3], _$[$0-3]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 451:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0]],
       [{ value: 'LIMIT', weight: 3 }],
       [true]);
     if ($$[$0-2].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-2].suggestKeywords, 4));
     }
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0] };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 452:

     this.$ = { suggestKeywords: [], cursorAtEnd: true };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = _$[$0-1];
   
break;
case 463:

     parser.suggestKeywords(['ALL', 'DISTINCT', 'SELECT']);
   
break;
case 464:

     parser.suggestKeywords(['ALL', 'DISTINCT']);
   
break;
case 469:

     if ($$[$0].suggestFilters) {
       parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 470:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS', 'NOT EXISTS']);
     parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 483:

     parser.suggestKeywords(['TABLE']);
   
break;
case 484:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 488:

     parser.addTablePrimary($$[$0-1]);
     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 490:

     if (!$$[$0]) {
       $$[$0-1].suggestKeywords = ['OVER'];
     }
   
break;
case 497:

     parser.suggestKeywords(['OVER']);
   
break;
case 506:

     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 507: case 525:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 508:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       if ($$[$0-4].toLowerCase() === 'group_concat') {
         keywords.push('ALL');
       } else {
         keywords.push('DISTINCT');
       }
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 509: case 523:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 510:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords(true);
       if (!$$[$0-2]) {
         if ($$[$0-4].toLowerCase() === 'group_concat') {
           keywords.push('ALL');
         } else {
           keywords.push('DISTINCT');
         }
       }
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
       parser.suggestKeywords(keywords);
     }
     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], $$[$0-1].activePosition);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 519:

     parser.addFunctionArgumentLocations($$[$0-3], [{
       expression: { text: $$[$0-1] },
       location: _$[$0-1]
     }]);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] }
   
break;
case 520: case 526:

     this.$ = { function: $$[$0-2], types: ['UDFREF'] }
   
break;
case 521:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] }
   
break;
case 522:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 524:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-2]) {
         keywords.push('DISTINCT');
       }
       parser.suggestKeywords(keywords);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 527:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 528:

     parser.suggestValueExpressionKeywords($$[$0-2]);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 529:

     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 530:

    this.$ = { function: $$[$0-2], types: ['UDFREF'] }
  
break;
case 531:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     this.$ = {
       function: $$[$0-3],
       expression: $$[$0-1].expressions[$$[$0-1].expressions.length - 1].expression,
       types: ['UDFREF']
     }
   
break;
case 532:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-3], 1);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 533:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-2].expressions);
     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 534:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     parser.applyArgumentTypesToSuggestions($$[$0-3], $$[$0-1].activePosition);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 539:

     var expression = $$[$0-3];
     parser.extractExpressionText(expression, $$[$0-3], $$[$0-2], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-5], [{
       expression: expression,
       location: {
         first_line: _$[$0-3].first_line,
         last_line: _$[$0-1].last_line,
         first_column: _$[$0-3].first_column,
         last_column: _$[$0-1].last_column
       }
     }]);
     this.$ = { types: [ $$[$0-1].toUpperCase() ] }
   
break;
case 540: case 545: case 546: case 1013:
this.$ = { types: [ 'T' ] };
break;
case 541:

     parser.valueExpressionSuggest();
     this.$ = { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 542: case 543:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ] };
   
break;
case 544:
this.$ = { types: [ $$[$0-1].toUpperCase() ] };
break;
case 547:

     parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'AS', weight: 2 }]);
     this.$ =  { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 548:

     parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'AS', weight: 2 }]);
     this.$ = { types: [ 'T' ] };
   
break;
case 549: case 550:

     parser.suggestKeywords(parser.getTypeKeywords());
     this.$ = { types: [ 'T' ] };
   
break;
case 551:

     // We need to handle arbitrary UDFs here instead of inside UserDefinedFunction or there will be a conflict
     // with columnReference for functions like: db.udf(foo)
     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     if ($$[$0-1].lastLoc && $$[$0-1].lastLoc.location) {
       $$[$0-1].lastLoc.type = 'function';
       $$[$0-1].lastLoc.function = fn;
       $$[$0-1].lastLoc.location = {
         first_line: $$[$0-1].lastLoc.location.first_line,
         last_line: $$[$0-1].lastLoc.location.last_line,
         first_column: $$[$0-1].lastLoc.location.first_column,
         last_column: $$[$0-1].lastLoc.location.last_column - 1
       }
       if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
          $$[$0-1].firstLoc.type = 'database';
       } else {
         delete $$[$0-1].lastLoc.identifierChain;
       }
     }
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: fn, expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: fn, types: ['UDFREF'] }
     }
   
break;
case 552:

    parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
    if ($$[$0].expressions && $$[$0].expressions.length) {
      this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
    } else {
      this.$ = { function: $$[$0-1], types: ['UDFREF'] }
    }
  
break;
case 555:
this.$ = { types: ['COLREF'], columnReference: $$[$0].chain };
break;
case 556:
this.$ = { types: [ 'NULL' ], text: $$[$0] };
break;
case 557:

     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     $$[$0-1].lastLoc.type = 'function';
     $$[$0-1].lastLoc.function = fn;
     $$[$0-1].lastLoc.location = {
       first_line: $$[$0-1].lastLoc.location.first_line,
       last_line: $$[$0-1].lastLoc.location.last_line,
       first_column: $$[$0-1].lastLoc.location.first_column,
       last_column: $$[$0-1].lastLoc.location.last_column - 1
     }
     if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
        $$[$0-1].firstLoc.type = 'database';
     } else {
       delete $$[$0-1].lastLoc.identifierChain;
     }
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions(fn, $$[$0].activePosition);
     }
     this.$ = { function: fn, types: ['UDFREF'] };
   
break;
case 558: case 564: case 565:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions($$[$0-1], $$[$0].activePosition);
     }
     this.$ = { function: $$[$0-1], types: ['UDFREF'] };
   
break;
case 561:

     if ($$[$0].suggestKeywords) {
       this.$ = { types: ['COLREF'], columnReference: $$[$0], suggestKeywords: $$[$0].suggestKeywords };
     } else {
       this.$ = { types: ['COLREF'], columnReference: $$[$0] };
     }
   
break;
case 562: case 563:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: $$[$0-1], types: ['UDFREF'] }
     }
   
break;
case 568:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }]
     }
   
break;
case 569:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = $$[$0-3];
   
break;
case 571: case 573:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0], location: _$[$0] }]
     }
   
break;
case 572: case 574:

     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: $$[$0], location: _$[$0] }])
     }
   
break;
case 575:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0-2], location: _$[$0-2] }].concat($$[$0].expressions)
     }
   
break;
case 576:

     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: $$[$0-2], location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 577:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: { text: '' }, location: _$[$0] }])
     }
   
break;
case 578:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: { text: '' }, location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 579:

     parser.suggestValueExpressionKeywords($$[$0-3].expressions[$$[$0-3].expressions.length - 1].expression);
     this.$ = {
       activePosition: $$[$0-3].activePosition,
       expressions: $$[$0-3].expressions.concat($$[$0].expressions)
     }
   
break;
case 580:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 581:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 582:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 583:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-3] }, { expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 595:

     parser.suggestKeywords([ 'WHERE' ]);
   
break;
case 596:

     parser.suggestKeywords([ 'SET' ]);
   
break;
case 612:

     parser.suggestKeywords([ '=' ]);
   
break;
case 621:

     if (! parser.yy.cursorFound) {
       parser.yy.result.useDatabase = $$[$0];
     }
   
break;
case 622: case 841:

     parser.suggestDatabases();
   
break;
case 624: case 625:

     return parser.yy.result;
   
break;
case 626:

     parser.prepareNewStatement();
   
break;
case 628: case 630: case 632:

     parser.addStatementLocation(_$[$0]);
   
break;
case 631: case 633:

     parser.addStatementLocation(_$[$0-3]);
   
break;
case 637:

     parser.suggestDdlAndDmlKeywords();
   
break;
case 766: case 769: case 855:
this.$ = '';
break;
case 781: case 784:

     parser.yy.correlatedSubQuery = false;
   
break;
case 782: case 786:

     parser.suggestKeywords(['EXISTS']);
   
break;
case 785:

     parser.suggestKeywords(['NOT EXISTS']);
   
break;
case 796: case 798: case 799: case 801:

     parser.suggestKeywords(['<', '<=', '<>', '=', '>', '>=']);
   
break;
case 830: case 856:

     parser.addTableLocation(_$[$0], [ { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0] } ] };
   
break;
case 831: case 857:

     parser.addDatabaseLocation(_$[$0-2], [ { name: $$[$0-2] } ]);
     parser.addTableLocation(_$[$0], [ { name: $$[$0-2] }, { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0-2] }, { name: $$[$0] } ] };
   
break;
case 833: case 838:

     parser.suggestDatabases();
     this.$ = { identifierChain: [{ name: $$[$0-2] }] };
   
break;
case 834: case 859:

     parser.suggestTablesOrColumns($$[$0-2]);
   
break;
case 835:
this.$ = [{ name: $$[$0] }];
break;
case 836:
this.$ = [{ name: $$[$0-2] }, { name: $$[$0-1] }];
break;
case 837:

     parser.suggestDatabases({ appendDot: true });
   
break;
case 858:

     parser.suggestTables();
     parser.suggestDatabases({ prependDot: true });
   
break;
case 861:
this.$ = { identifierChain: $$[$0-1].identifierChain, alias: $$[$0] };
break;
case 864:

     parser.yy.locations[parser.yy.locations.length - 1].type = 'column';
   
break;
case 865: case 1030:

     parser.addAsteriskLocation(_$[$0], $$[$0-2].concat({ asterisk: true }));
   
break;
case 867:

     this.$ = [ $$[$0].identifier ];
     parser.yy.firstChainLocation = parser.addUnknownLocation($$[$0].location, [ $$[$0].identifier ]);
   
break;
case 868:

     if (parser.yy.firstChainLocation) {
       parser.yy.firstChainLocation.firstInChain = true;
       delete parser.yy.firstChainLocation;
     }
     $$[$0-2].push($$[$0].identifier);
     parser.addUnknownLocation($$[$0].location, $$[$0-2].concat());
   
break;
case 869:

     parser.suggestColumns({
       identifierChain: $$[$0-2]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 870:

     parser.suggestColumns({
       identifierChain: $$[$0-4]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 871:
this.$ = [ $$[$0].identifier ];
break;
case 872:

     $$[$0-2].push($$[$0].identifier);
   
break;
case 874:

     parser.suggestColumns({ identifierChain: $$[$0-2] });
   
break;
case 875:

     parser.suggestColumns({ identifierChain: $$[$0-4] });
   
break;
case 877:
this.$ = { identifier: { name: $$[$0] }, location: _$[$0] };
break;
case 898: case 899:

     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 900: case 925:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 901:

     // verifyType($$[$0], 'NUMBER');
     this.$ = $$[$0];
     $$[$0].types = ['NUMBER'];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 902: case 903: case 904:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 905:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 906:

     this.$ = { types: [ 'BOOLEAN' ] };
     // clear correlated flag after completed sub-query (set by lexer)
     parser.yy.correlatedSubQuery = false;
   
break;
case 908: case 909: case 910: case 911:

     parser.addColRefToVariableIfExists($$[$0-2], $$[$0]);
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 912: case 913: case 914: case 915: case 945: case 1003: case 1004:
this.$ = { types: [ 'BOOLEAN' ] };
break;
case 916:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 917:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 918: case 919:

     // verifyType($$[$0-2], 'BOOLEAN');
     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 920: case 921: case 922:

     // verifyType($$[$0-2], 'NUMBER');
     // verifyType($$[$0], 'NUMBER');
     this.$ = { types: [ 'NUMBER' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 923:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 924:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 926:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 928:

     parser.suggestKeywords(['BETWEEN', 'EXISTS', 'IN', 'LIKE', 'REGEXP', 'RLIKE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 929: case 931:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
break;
case 930:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 932:

     parser.suggestFunctions({ types: [ 'BOOLEAN' ] });
     parser.suggestColumns({ types: [ 'BOOLEAN' ] });
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 933:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0].suggestFilters };
break;
case 934:

     parser.suggestFunctions();
     parser.suggestColumns();
     this.$ = { types: [ 'T' ] };
   
break;
case 935:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 936:

     parser.suggestFunctions({ types: [ 'NUMBER' ] });
     parser.suggestColumns({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ] };
   
break;
case 937:

     parser.suggestKeywords(['FALSE', 'NOT NULL', 'NOT TRUE', 'NOT FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 938:

     parser.suggestKeywords(['FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 939:

     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 940: case 941: case 942:

     parser.suggestKeywords(['NOT']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 943:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-3] ? 'IS NOT DISTINCT FROM' : 'IS DISTINCT FROM');
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 944:

     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 946:

     this.$ = $$[$0-1];
   
break;
case 947:

     parser.valueExpressionSuggest();
     this.$ = { types: ['T'], typeSet: true };
   
break;
case 948:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 949: case 950: case 951:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 952: case 953: case 954: case 955:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0]);
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 956: case 958:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 957:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ] , typeSet: true, endsWithLessThanOrEqual: true };
   
break;
case 959:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, endsWithLessThanOrEqual: $$[$0-1] === '<='  };
   
break;
case 960: case 961: case 962: case 963:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 964:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-3]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 965:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 966: case 967:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
break;
case 968: case 969:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
break;
case 970:

     if ($$[$0-2].types[0] === $$[$0].types[0] && !$$[$0-5].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
   
break;
case 971:

     if ($$[$0-5].types[0] === $$[$0].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 972:

     if ($$[$0-5].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 973:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 974: case 980:

     parser.suggestValueExpressionKeywords($$[$0-1], ['AND']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 975:

     parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 976:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-4].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
   
break;
case 977:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 978:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 979:

     parser.valueExpressionSuggest($$[$0-4], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-4]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 981:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 982: case 984: case 986: case 988:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, suggestFilters: true };
   
break;
case 983: case 987:

     parser.addColRefIfExists($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 985: case 989:

     parser.addColRefIfExists($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 990: case 991:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 992: case 993: case 994:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 995: case 996: case 997:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 998: case 999: case 1000:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 1001:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1002:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
break;
case 1005:

     parser.valueExpressionSuggest(undefined, $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1006:

     parser.valueExpressionSuggest(undefined, $$[$0-1] + ' ' + $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1008:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1010:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1011:

      this.$ = $$[$0];
      this.$.suggestFilters = $$[$0-1].suggestFilters;
    
break;
case 1012:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1014: case 1016:

     $$[$0].position = 1;
   
break;
case 1015:

     $$[$0].position = $$[$0-2].position + 1;
     this.$ = $$[$0];
   
break;
case 1017:

     $$[$0-2].position += 1;
   
break;
case 1018:

     $$[$0-2].position = 1;
   
break;
case 1019:

     $$[$0-4].position += 1;
   
break;
case 1020:

     parser.valueExpressionSuggest();
     $$[$0-2].position += 1;
   
break;
case 1021:

     parser.valueExpressionSuggest();
     $$[$0-4].position += 1;
   
break;
case 1022:

     parser.suggestValueExpressionKeywords($$[$0-3]);
   
break;
case 1023: case 1024:

     parser.valueExpressionSuggest();
     this.$ = { cursorAtStart : true, position: 1 };
   
break;
case 1025: case 1026:

     parser.valueExpressionSuggest();
     this.$ = { position: 2 };
   
break;
case 1029:

     var lastLoc = parser.yy.locations[parser.yy.locations.length - 1];
     if (lastLoc.type !== 'variable') {
       lastLoc.type = 'column';
     }
     // used for function references with db prefix
     var firstLoc = parser.yy.locations[parser.yy.locations.length - $$[$0].length];
     this.$ = { chain: $$[$0], firstLoc: firstLoc, lastLoc: lastLoc }
   
break;
case 1036:

     parser.suggestValues($$[$0]);
   
break;
case 1037:
this.$ = { types: [ 'NUMBER' ], text: $$[$0] };
break;
case 1043: case 1045: case 1046:
this.$ = $$[$0-1] + $$[$0];
break;
case 1044: case 1047:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 1048:
this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 1049:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: "'" + $$[$0] + "'" }
     } else {
       this.$ = { types: [ 'STRING' ] }
     }
   
break;
case 1050:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: '"' + $$[$0] + '"' }
     } else {
       this.$ = { types: [ 'STRING' ], text: '"' + $$[$0] + '"' }
     }
   
break;
case 1051:
this.$ = { types: [ 'BOOLEAN' ], text: $$[$0] };
break;
case 1052:

    this.$ = { partialQuote: '\'', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 1053:

    this.$ = { partialQuote: '"', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 1060:

     this.$ = $$[$0];

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         this.$.suggestJoins = {
           prependJoin: true,
           tables: tables
         };
       }
      }
   
break;
case 1067:

     this.$ = {
       primary: $$[$0-1]
     }
     if ($$[$0-1].identifierChain) {
       if ($$[$0]) {
         $$[$0-1].alias = $$[$0].alias
         parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
       }
       parser.addTablePrimary($$[$0-1]);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     } else if ($$[$0].suggestKeywords) {
       keywords = $$[$0].suggestKeywords;
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 1068:

     this.$ = {
       primary: $$[$0-1]
     };

     if ($$[$0]) {
       this.$.primary.alias = $$[$0].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 1069:

     if ($$[$0]) {
       parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }
   
break;
case 1070:

     if ($$[$0]) {
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias);
     }
   
break;
case 1080:

     parser.pushQueryState();
   
break;
case 1081:

     parser.popQueryState();
   
break;
case 1083:

     if ($$[$0-1]) {
       $$[$0-2].alias = $$[$0-1].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0-1].alias });
       parser.addSubqueryAliasLocation($$[$0-1].location, $$[$0-1].alias, $$[$0-2].identifierChain);
     }
     this.$ = $$[$0-2];
   
break;
case 1086:

     var subQuery = parser.getSubQuery($$[$0]);
     subQuery.columns.forEach(function (column) {
       parser.expandIdentifierChain({ wrapper: column });
       delete column.linked;
     });
     parser.popQueryState(subQuery);
     this.$ = subQuery;
   
break;
case 1103: case 1104: case 1105: case 1106:
this.$ = { alias: $$[$0], location: _$[$0] };
break;
case 1113: case 1114:

     if (parser.yy.result.suggestFunctions) {
       parser.suggestAggregateFunctions();
     }
   
break;
case 1115:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords([{ value: 'PARTITION BY', weight: 2 }, { value: 'ORDER BY', weight: 1 }]);
     } else if (!$$[$0-2]) {
       parser.suggestKeywords(['PARTITION BY']);
     }
   
break;
case 1116:

      if (!$$[$0-1]) {
        parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ORDER BY', weight: 2 }]);
      } else {
        parser.suggestValueExpressionKeywords($$[$0-3]);
      }
    
break;
case 1125:

      // Only allowed in last order by
      delete parser.yy.result.suggestAnalyticFunctions;
    
break;
case 1126:

      var keywords = [];
      if ($$[$0-2].suggestKeywords) {
        keywords = parser.createWeightedKeywords($$[$0-2].suggestKeywords, 2);
      }
      if (!$$[$0]) {
        keywords = keywords.concat([{ value: 'RANGE BETWEEN', weight: 1 }, { value: 'ROWS BETWEEN', weight: 1 }]);
      }
      parser.suggestKeywords(keywords);
    
break;
case 1132:

     parser.suggestKeywords(['BETWEEN']);
   
break;
case 1133:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED PRECEDING']);
     } else if (!$$[$0-1]) {
       parser.suggestKeywords(['AND']);
     }
   
break;
case 1138:

    lexer.popState();
  
break;
case 1139:

    lexer.begin('hdfs');
  
break;
case 1141:

      parser.suggestHdfs({ path: $$[$0-3] });
    
break;
case 1142:

     parser.suggestHdfs({ path: $$[$0-2] });
   
break;
case 1143:

      parser.suggestHdfs({ path: $$[$0-1] });
    
break;
case 1144:

     parser.suggestHdfs({ path: '' });
   
break;
case 1145:

      parser.suggestHdfs({ path: '' });
    
break;
case 1151:

     parser.suggestKeywords(['PRECEDING']);
   
break;
case 1152: case 1157:

     parser.suggestKeywords(['ROW']);
   
break;
case 1156:

     parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED FOLLOWING']);
   
break;
case 1158:

     parser.suggestKeywords(['FOLLOWING']);
   
break;
case 1169:

     parser.suggestKeywords(['TABLES', 'CATALOGS', 'CURRENT CATALOG', 'DATABASES', 'CURRENT DATABASE', 'VIEWS', 'FUNCTIONS']);
   
break;
case 1171:
this.$ = { inValueEdit: true };
break;
case 1172:
this.$ = { inValueEdit: true, cursorAtStart: true };
break;
case 1173: case 1174: case 1175:

     this.$ = { suggestKeywords: ['NOT'] }
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1179: case 1180: case 1181:

     parser.suggestFunctions({ types: [ 'STRING' ] });
     parser.suggestColumns({ types: [ 'STRING' ] });
     this.$ = { types: ['BOOLEAN'] }
   
break;
case 1182:

     this.$ = parser.findCaseType($$[$0-1])
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1183:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1184:
this.$ = parser.findCaseType($$[$0-1]);
break;
case 1185:

     parser.suggestValueExpressionKeywords($$[$0-1], ['END']);
     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1186:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1187:
this.$ = parser.findCaseType($$[$0-2]);
break;
case 1188:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1189:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-2]);
   
break;
case 1190:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     this.$.suggestFilters = $$[$0-1].suggestFilters
   
break;
case 1191:

     parser.valueExpressionSuggest();
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1192:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1193:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = $$[$0-1];
   
break;
case 1194:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ] };
   
break;
case 1197:

     this.$ = { caseTypes: [ $$[$0] ], lastType: $$[$0] }
     parser.extractExpressionText(this.$, $$[$0]);
   
break;
case 1198:

     $$[$0-1].caseTypes.push($$[$0]);
     this.$ = { caseTypes: $$[$0-1].caseTypes, lastType: $$[$0] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1202:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
   
break;
case 1204:

     this.$ = $$[$0]
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1205:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0].suggestFilters };
break;
case 1206:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1207:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0-2].suggestFilters };
break;
case 1208: case 1209:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0].suggestFilters };
break;
case 1210:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1211:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [$$[$0]] };
   
break;
case 1212:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1213:

      parser.valueExpressionSuggest();
      parser.suggestKeywords(['WHEN']);
      this.$ = { caseTypes: [{ types: ['T'] }] };
    
break;
case 1214: case 1216:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1215:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1217:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [$$[$0]], suggestFilters: true };
   
break;
case 1218:

     parser.suggestValueExpressionKeywords($$[$0-1], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1219:

     parser.suggestValueExpressionKeywords($$[$0-2], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1220: case 1221: case 1222: case 1223:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
}
},
table: [o($V0,$V1,{341:1,266:2}),{1:[3]},o($V2,$V3,{342:3,346:4,20:5,158:6,47:7,21:8,22:9,23:10,24:11,25:12,26:13,27:14,28:15,29:16,30:17,35:19,36:20,159:22,160:23,171:24,172:25,39:26,45:27,161:32,4:$V4,8:$V5,12:$V6,16:$V7,37:$V8,165:$V9,177:$Va,244:$Vb,274:$Vc,324:$Vd,340:$Ve}),{343:[1,38],347:[1,39]},o($V2,[2,628]),o($V2,[2,634]),o($V2,[2,635]),o($V2,[2,636]),o($V2,[2,16]),o($V2,[2,17]),o($V2,[2,18]),o($V2,[2,19]),o($V2,[2,20]),o($V2,[2,21]),o($V2,[2,22]),o($V2,[2,23]),o($V2,[2,24]),o($V2,[2,25]),{31:[1,40],32:41,62:42,66:$Vf,116:$Vg,231:$Vh,350:45,351:$Vi,352:$Vj},o($V2,[2,28]),o($V2,[2,29]),{38:49,367:[1,52],506:[1,50],507:[1,51],509:[1,53],510:[1,54],511:[1,55]},o($V2,[2,246]),o($V2,[2,247]),{82:[1,57],172:56,244:$Vb},o($Vk,$Vl,{173:58,261:59,263:60,265:$Vm}),{40:62,128:[1,63]},{46:[1,64]},{42:[1,67],50:[1,68],60:65,66:[1,66],368:$Vn,386:$Vo},{42:[1,73],50:[1,74],60:71,66:[1,72],368:$Vn,386:$Vo},{42:[1,75]},{62:76,66:$Vf,116:$Vg,231:$Vh,350:45,351:$Vi,352:$Vj},o($V2,[2,248]),{62:82,66:$Vf,116:$Vg,122:81,231:$Vh,325:77,331:78,333:79,350:45,351:$Vi,352:$Vj,361:$Vp,430:80},{62:82,66:$Vf,116:$Vg,122:86,178:84,180:85,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp},o([57,58,66,82,98,99,110,115,116,231,256,270,272,273,274,297,298,299,300,301,302,303,304,305,306,307,309,310,351,352,354,355,358,361,365,373,392,393],$Vq,{245:87,31:$Vr,250:$Vs}),{42:[1,90],50:[1,91]},{166:[1,92]},{1:[2,623]},o($V0,$V1,{266:93}),o($V2,[2,26]),{33:[1,94],270:[1,95]},o($Vt,[2,473]),o($Vu,[2,646]),o($Vu,[2,647]),o($Vu,[2,648]),o($Vu,[2,643]),o($Vu,[2,644]),o($Vu,[2,645]),o($V2,[2,30]),o($V2,[2,1161]),o($V2,[2,1162]),{368:[1,97],508:[1,96]},o($V2,[2,1164]),o($V2,[2,1167]),o($V2,[2,1168]),o($Vk,$Vl,{261:59,263:60,173:98,265:$Vm}),{47:99,171:24,172:25,177:$Va,244:$Vb},o($Vk,[2,264]),o($Vk,[2,454],{263:100,265:$Vm}),o($Vv,[2,456]),o([31,244,250],$V1,{266:101}),o($V2,[2,31]),{82:[1,102]},{47:103,171:24,172:25,177:$Va,244:$Vb},o($Vw,$Vx,{61:104,309:$Vy}),{62:106,66:$Vf,116:$Vg,231:$Vh,350:45,351:$Vi,352:$Vj},o($Vz,$Vx,{61:107,309:$Vy}),o($Vz,$Vx,{61:108,309:$Vy}),o($VA,[2,763]),o($VA,[2,764]),o($Vz,$VB,{153:109,309:$VC}),{62:111,66:$Vf,116:$Vg,231:$Vh,350:45,351:$Vi,352:$Vj},o($Vz,$VB,{153:112,309:$VC}),o($Vz,$VB,{153:113,309:$VC}),o($Vz,$VB,{153:114,309:$VC}),o($V2,[2,621]),{16:[1,115]},{16:[2,600]},{16:[2,602]},{16:[2,860],62:82,66:$Vf,116:$Vg,122:116,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp},o($VD,[2,856],{270:[1,117]}),o($Vu,[2,853]),{59:[1,118],361:[1,119]},o([82,244],[2,273],{88:[1,120]}),o($VE,[2,275]),{46:[1,121]},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:124,230:154,231:$Vh,246:122,253:123,256:$VM,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},o($V91,[2,416]),o($V91,[2,417]),{43:180,62:82,66:$Vf,116:$Vg,122:181,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp},{43:182,62:82,66:$Vf,116:$Vg,122:181,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp},o($Vz,[2,260],{167:183,42:[1,184]}),o($V2,$V3,{346:4,20:5,158:6,47:7,21:8,22:9,23:10,24:11,25:12,26:13,27:14,28:15,29:16,30:17,35:19,36:20,159:22,160:23,171:24,172:25,39:26,45:27,161:32,342:185,4:$V4,8:$V5,12:$V6,16:$V7,37:$V8,165:$V9,177:$Va,244:$Vb,274:$Vc,324:$Vd,340:$Ve}),{34:186,54:189,57:$VF,58:$VG,62:187,66:$Vf,99:[1,192],116:$Vg,230:193,231:$Vh,270:$VN,271:188,272:[1,190],273:[1,191],350:45,351:$Vi,352:$Vj,355:[1,194],392:$V71,393:$V81,398:196,401:197,451:[1,195],456:160,457:161},{62:198,66:$Vf,116:$Vg,231:$Vh,350:45,351:$Vi,352:$Vj},o($V2,[2,1163]),o($V2,[2,1165]),o($Vk,[2,262]),{84:[1,199]},o($Vv,[2,457]),{31:$Vr,244:$Vq,245:200,250:$Vs},{62:82,66:$Vf,90:203,116:$Vg,122:156,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp,412:201,428:202},o($V2,[2,39]),o($V2,[2,56],{350:45,62:204,66:$Vf,116:$Vg,231:$Vh,351:$Vi,352:$Vj}),{98:[1,205]},o($V2,[2,65]),{62:82,66:$Vf,67:206,69:207,75:208,116:$Vg,122:209,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp},{62:82,66:$Vf,75:210,116:$Vg,122:209,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp},{62:82,66:$Vf,116:$Vg,122:211,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp},{373:[1,212]},o($V2,[2,231]),{43:213,62:82,66:$Vf,116:$Vg,122:181,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp},{43:214,62:82,66:$Vf,116:$Vg,122:181,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp},{43:215,62:82,66:$Vf,116:$Vg,122:181,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp},{62:82,66:$Vf,90:148,116:$Vg,122:156,152:219,231:$Vh,326:216,335:217,337:218,350:45,351:$Vi,352:$Vj,361:$Vp,432:220},{16:[2,861]},{62:82,66:$Vf,116:$Vg,122:221,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp},{361:[1,222]},o($Vu,[2,855]),{62:82,66:$Vf,116:$Vg,122:86,180:223,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp},{82:[1,224]},o($Vv,[2,405],{247:225,184:227,88:[1,226],185:[1,228]}),o($Va1,[2,422]),o($Va1,$Vb1,{350:45,62:82,398:196,401:197,255:229,443:243,122:244,54:245,33:$Vc1,46:$Vd1,57:$VF,58:$VG,66:$Vf,80:$Ve1,98:$Vf1,111:$Vg1,112:$Vh1,116:$Vg,145:$Vi1,231:$Vh,256:$Vj1,351:$Vi,352:$Vj,355:$Vk1,359:$Vl1,360:$Vm1,361:$Vp,362:$Vn1,377:$Vo1,379:$Vp1,380:$Vq1,382:$Vr1,383:$Vs1}),o($Va1,[2,438]),o($Vt1,[2,897]),{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:250,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:251,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:252,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:253,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{82:$Vu1,440:254},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:256,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:258,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,395:$Vv1,398:162,401:163,432:139,444:257,452:147,454:155,456:160,457:161,458:164,512:259,514:260},o($Vt1,[2,555],{313:262,82:$Vw1}),{82:$Vw1,313:264},o($Vt1,[2,553]),o($Vt1,[2,554]),o($Vt1,[2,556]),o($Vx1,[2,1029],{270:[1,265]}),{82:[2,535]},{82:[2,536]},{82:[2,537]},{82:[2,538]},o($Vt1,[2,584],{278:266,280:267,321:$Vy1}),{280:269,321:$Vy1},o($Vt1,[2,492]),o($Vt1,[2,1035]),o($Vz1,[2,867]),o($VA1,[2,500]),o($VA1,[2,501]),o($VA1,[2,502]),{82:[1,270]},{82:[1,271]},o($Vt1,[2,1037]),o($Vt1,[2,1038]),o([33,46,53,57,58,66,80,82,84,88,98,110,111,112,115,116,132,145,185,193,204,217,218,219,220,221,222,223,224,229,231,235,242,243,256,265,267,270,343,347,351,352,355,359,360,361,362,363,364,366,369,370,371,372,374,377,378,379,380,382,383,385,387,388,389,390,391,394,395,442],[2,877]),{82:[1,272]},{82:[1,273]},{82:[1,274]},o($Vt1,[2,1040]),o($Vt1,[2,1041]),o($Vt1,[2,1049]),o($Vt1,[2,1050]),o($Vt1,[2,1051]),{82:[2,511]},{82:[2,512]},{82:[2,513]},{82:[2,514]},{82:[2,515]},{82:[2,516]},{82:[2,517]},{82:[2,518]},o($Vt1,[2,1042],{270:[1,275]}),{392:[1,276],393:[1,277]},{392:[1,278]},{57:[1,280],59:[1,279]},{58:[1,282],59:[1,281]},o($Vt1,[2,1054]),o($Vt1,[2,1055]),{128:[2,36]},o($VB1,[2,830],{270:[1,283]}),{46:[2,45]},{43:284,62:82,66:$Vf,116:$Vg,122:181,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp},o($Vz,[2,261]),o($V2,[2,629]),o($V2,[2,27]),o($V2,[2,475]),o($V2,[2,476],{350:45,62:285,66:$Vf,116:$Vg,231:$Vh,351:$Vi,352:$Vj}),o($V2,[2,478]),o($V2,[2,479]),o($V2,[2,480]),o($V2,[2,481]),o($Vw,[2,1032]),{230:286,270:$VN,392:$V71,393:$V81,456:160,457:161},{230:287,270:$VN,392:$V71,393:$V81,456:160,457:161},o($VC1,[2,771]),o($VC1,[2,772]),o($Vt,[2,474]),o($Vk,$Vl,{261:59,263:60,173:288,265:$Vm}),{172:289,244:$Vb},{84:[1,290],88:[1,291]},o($VD1,[2,842]),{33:[1,292]},o($V2,$VE1,{63:293,51:294,52:295,53:$VF1}),{373:[1,297]},o($V2,[2,66]),o($VG1,[2,162],{70:298,127:299,128:[1,300]}),o($VH1,[2,78],{76:301,79:302,80:[1,303],82:[1,304]}),o($VI1,[2,835],{270:[1,305]}),o($VJ1,[2,214],{147:306,149:307,82:[1,308]}),o($V2,[2,778],{154:309,408:[1,310]}),o($Vz,[2,781]),o($V2,[2,238],{156:311,157:[1,312]}),o($V2,[2,240]),o($V2,[2,482]),o($VK1,[2,617],{327:313,88:[1,314],185:[1,315]}),o($VL1,[2,604]),{33:[1,316]},{33:[2,614]},o($VM1,[2,864],{270:[1,317]}),o($VD,[2,857]),o($Vu,[2,854]),o($VE,[2,276]),o($VN1,$VO1,{182:318,469:319}),o($Vv,[2,406]),{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:124,230:154,231:$Vh,253:320,256:$VM,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},o($VP1,$VQ1,{251:321,258:322,260:323,267:$VR1}),{43:332,62:82,66:$Vf,82:$Vu1,116:$Vg,122:181,186:325,189:326,210:328,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp,440:333,459:327,461:329,463:330,464:331},o($Va1,[2,437]),o($VS1,[2,1056],{439:334,98:[1,335]}),{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:336,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:337,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:338,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:339,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{80:$Ve1,362:[1,341],377:[1,340],382:$Vr1,383:$Vs1,443:342},{82:[1,343]},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:344,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:345,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:346,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:347,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:348,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:349,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},o($Vt1,[2,923]),o($VT1,[2,1103]),o($VT1,[2,1104]),{54:351,57:$VF,58:$VG,62:82,66:$Vf,116:$Vg,122:350,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp,398:196,401:197},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:352,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:353,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:354,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},o($VU1,[2,898],{443:243,33:$Vc1,80:$Ve1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,360:$Vm1,377:$Vo1,379:$Vp1,382:$Vr1,383:$Vs1}),o($VU1,[2,899],{443:243,33:$Vc1,80:$Ve1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,360:$Vm1,377:$Vo1,379:$Vp1,382:$Vr1,383:$Vs1}),o($VU1,[2,900],{443:243,33:$Vc1,80:$Ve1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,360:$Vm1,377:$Vo1,379:$Vp1,382:$Vr1,383:$Vs1}),o($VV1,[2,901],{443:243}),o($Vt1,[2,906]),o($VN1,$VO1,{469:319,440:333,182:355,464:356,82:$Vu1}),{33:$Vc1,80:$Ve1,84:[1,357],98:$Vf1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,359:$Vl1,360:$Vm1,362:$Vn1,377:$Vo1,379:$Vp1,380:$Vq1,382:$Vr1,383:$Vs1,443:243},o($Vt1,[2,925]),{33:$Vc1,80:$Ve1,98:$Vf1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,359:$Vl1,360:$Vm1,362:$Vn1,377:$Vo1,379:$Vp1,380:$Vq1,382:$Vr1,383:$Vs1,395:$Vv1,443:243,444:358,512:259,514:260},{371:[1,360],372:[1,359],395:$Vv1,514:361},o($VW1,[2,1197]),{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:362,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},o($Vt1,[2,551]),{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,84:[1,363],90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:365,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,295:364,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},o($Vt1,[2,552]),{62:82,66:$Vf,90:367,116:$Vg,122:156,231:$Vh,256:[1,366],350:45,351:$Vi,352:$Vj,361:$Vp},o($Vt1,[2,490]),o($Vt1,[2,585]),{62:82,66:$Vf,82:[1,370],116:$Vg,122:368,231:$Vh,322:369,350:45,351:$Vi,352:$Vj,361:$Vp},o($Vt1,[2,491]),{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,84:[1,371],90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:365,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,295:372,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,84:[1,374],90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:373,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},o([57,58,66,82,84,98,99,110,115,116,231,270,272,273,274,297,298,299,300,301,302,303,304,305,306,307,309,310,351,352,354,355,358,361,365,373,392,393],$Vq,{245:375,31:$Vr,250:$Vs}),o($VX1,$Vq,{245:378,31:$Vr,84:[1,377],250:$Vs,256:[1,376]}),o($VX1,$Vq,{245:379,31:$Vr,84:[1,380],250:$Vs}),o($Vt1,[2,1043],{392:[1,381],393:[1,382]}),o($Vt1,[2,1045]),{392:[1,383]},o($Vt1,[2,1046]),{57:[1,384]},o($VY1,[2,766]),{58:[1,385]},o($VY1,[2,769]),{62:82,66:$Vf,116:$Vg,122:386,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp},{143:[1,387]},o($V2,[2,477]),o($Vw,[2,1033]),o($Vw,[2,1034]),o($Vk,[2,263]),o($Vv,[2,462]),o($V2,[2,793]),{62:82,66:$Vf,90:203,116:$Vg,122:156,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp,428:388},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:389,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},o($V2,[2,57]),o($V2,[2,63]),o([46,84,88,112,343,347],[2,49]),{54:390,57:$VF,58:$VG,398:196,401:197},o([66,116,231,343,347,351,352,361],[2,784]),o($V2,[2,200],{71:391,46:[1,392]}),o($VG1,[2,163]),{129:[1,393]},o($VH1,[2,75]),o($VH1,[2,79]),{43:394,62:82,66:$Vf,116:$Vg,122:181,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp},{62:82,66:$Vf,83:395,87:396,90:397,116:$Vg,122:156,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp},{62:82,66:$Vf,116:$Vg,122:398,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp},{46:$VE1,51:399,52:295,53:$VF1},o($VJ1,[2,215]),{62:82,66:$Vf,90:148,116:$Vg,122:156,150:400,152:401,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp,432:220},o($V2,[2,224]),o($V2,[2,779]),o($V2,[2,232]),o($V2,[2,239]),o($V2,$VQ1,{260:323,258:402,267:$VR1}),{62:82,66:$Vf,90:148,116:$Vg,122:156,152:219,231:$Vh,335:403,337:218,350:45,351:$Vi,352:$Vj,361:$Vp,432:220},{43:332,62:82,66:$Vf,82:$Vu1,116:$Vg,122:181,189:404,210:328,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp,440:333,459:327,461:329,463:330,464:331},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:406,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,338:405,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{62:82,66:$Vf,90:367,116:$Vg,122:156,231:$Vh,256:[1,407],350:45,351:$Vi,352:$Vj,361:$Vp},{84:[1,408]},{47:416,171:24,172:25,177:$Va,244:$Vb,471:409,473:410,475:411,477:412,479:413,481:414,483:415},o($Va1,[2,423]),o($Vv,[2,418]),o($VZ1,[2,295],{191:417,192:418,193:[1,419]}),o($VP1,[2,467]),{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:421,230:154,231:$Vh,268:420,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},o([84,193,204,229,235,265,267,343,347],[2,285],{88:[1,422]}),o($V_1,[2,288]),o($V_1,[2,1058]),o($V_1,[2,1060],{207:423,209:424,217:$V$1,218:$V02,219:$V12,220:$V22,221:$V32,222:$V42,223:$V52,224:$V62}),o($V_1,[2,1061]),o($V72,$Vb1,{350:45,62:82,398:196,401:197,122:244,54:245,255:433,46:$Vd1,57:$VF,58:$VG,66:$Vf,116:$Vg,231:$Vh,351:$Vi,352:$Vj,361:$Vp}),o($V72,$Vb1,{350:45,62:82,398:196,401:197,122:244,54:245,255:434,46:$Vd1,57:$VF,58:$VG,66:$Vf,116:$Vg,231:$Vh,351:$Vi,352:$Vj,361:$Vp}),o($V82,[2,1072]),o($V82,[2,1074]),{99:[1,435],250:[1,438],272:[1,436],273:[1,437]},o($VS1,[2,1057]),o($V92,[2,908],{443:243,80:$Ve1,256:$Vj1,355:$Vk1,360:$Vm1,377:$Vo1,379:$Vp1,382:$Vr1,383:$Vs1}),o($V92,[2,909],{443:243,80:$Ve1,256:$Vj1,355:$Vk1,360:$Vm1,377:$Vo1,379:$Vp1,382:$Vr1,383:$Vs1}),o($V92,[2,910],{443:243,80:$Ve1,256:$Vj1,355:$Vk1,360:$Vm1,377:$Vo1,379:$Vp1,382:$Vr1,383:$Vs1}),o($V92,[2,911],{443:243,80:$Ve1,256:$Vj1,355:$Vk1,360:$Vm1,377:$Vo1,379:$Vp1,382:$Vr1,383:$Vs1}),{82:[1,439]},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:440,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},o($Vt1,[2,924]),o($VN1,$VO1,{350:45,62:82,311:126,312:134,308:135,276:136,314:137,432:139,277:144,279:145,281:146,452:147,90:148,288:149,289:150,290:151,230:154,454:155,122:156,294:157,456:160,457:161,398:162,401:163,458:164,469:319,182:441,441:442,141:443,57:$VF,58:$VG,66:$Vf,82:$VH,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,309:$V01,310:$V11,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81}),{33:$Vc1,80:$Ve1,98:$Vf1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,359:$Vl1,360:$Vm1,362:$Vn1,377:$Vo1,379:$Vp1,380:$Vq1,382:$Vr1,383:$Vs1,442:[1,444],443:243},o($Va2,[2,918],{443:243,33:$Vc1,80:$Ve1,98:$Vf1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,360:$Vm1,362:$Vn1,377:$Vo1,379:$Vp1,382:$Vr1,383:$Vs1}),o($Va2,[2,919],{443:243,33:$Vc1,80:$Ve1,98:$Vf1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,360:$Vm1,362:$Vn1,377:$Vo1,379:$Vp1,382:$Vr1,383:$Vs1}),o($VV1,[2,920],{443:243,80:$Ve1,377:$Vo1,379:$Vp1,382:$Vr1,383:$Vs1}),o($VV1,[2,921],{443:243,80:$Ve1,377:$Vo1,379:$Vp1,382:$Vr1,383:$Vs1}),o($VV1,[2,922],{443:243,80:$Ve1,377:$Vo1,379:$Vp1,382:$Vr1,383:$Vs1}),o($VT1,[2,1105]),o($VT1,[2,1106]),o($VV1,[2,1173],{443:243}),o($VV1,[2,1174],{443:243}),o($VV1,[2,1175],{443:243}),{84:[1,445]},{46:$Vd1,54:245,57:$VF,58:$VG,62:82,66:$Vf,84:$Vb1,116:$Vg,122:244,231:$Vh,255:446,350:45,351:$Vi,352:$Vj,361:$Vp,398:196,401:197},o($Vt1,[2,907]),o($Vt1,[2,926]),o($Vt1,[2,1182]),{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:447,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},o($VW1,[2,1198]),{33:$Vc1,80:$Ve1,98:$Vf1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,359:$Vl1,360:$Vm1,362:$Vn1,377:$Vo1,379:$Vp1,380:$Vq1,382:$Vr1,383:$Vs1,389:[1,448],443:243},o($Vt1,[2,566]),{84:[1,449],88:$Vb2},o($VD1,[2,571],{443:243,33:$Vc1,80:$Ve1,98:$Vf1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,359:$Vl1,360:$Vm1,362:$Vn1,377:$Vo1,379:$Vp1,380:$Vq1,382:$Vr1,383:$Vs1}),o($Vx1,[2,1030]),o($Vz1,[2,868]),o($Vt1,[2,587]),o($Vt1,[2,588]),o($Vc2,[2,1117],{485:451,489:452,128:[1,453]}),{321:[2,530]},{84:[1,454],88:$Vb2},{33:$Vc1,46:[1,455],80:$Ve1,98:$Vf1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,359:$Vl1,360:$Vm1,362:$Vn1,377:$Vo1,379:$Vp1,380:$Vq1,382:$Vr1,383:$Vs1,443:243},o($Vt1,[2,540]),{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,84:[1,456],90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:365,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,295:457,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{84:[1,458]},o($VA1,[2,520]),{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:365,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,295:459,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:460,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},o($VA1,[2,526]),o($Vt1,[2,1044]),{392:[1,461]},o($Vt1,[2,1047]),o($VY1,[2,765]),o($VY1,[2,768]),o($VB1,[2,831]),{82:$Vd2,168:462,169:463},o($VD1,[2,843]),o($VD1,[2,848],{443:243,33:$Vc1,80:$Ve1,98:$Vf1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,359:$Vl1,360:$Vm1,362:$Vn1,377:$Vo1,379:$Vp1,380:$Vq1,382:$Vr1,383:$Vs1}),o([46,53,84,88,98,99,112,343,347],[2,50]),o($V2,[2,70]),o($VN1,[2,204],{146:465}),{130:466,132:[1,467]},o($VH1,[2,80]),{84:[1,468],88:[1,469]},o($VD1,[2,86]),{91:470,100:471,101:472,102:473,103:474,104:475,105:476,106:477,110:$Ve2,115:$Vf2,116:$Vg2,363:$Vh2,364:$Vi2,366:$Vj2,369:$Vk2,370:$Vl2,374:$Vm2,378:$Vn2,387:$Vo2,388:$Vp2,390:$Vq2,391:$Vr2,394:$Vs2},o($VI1,[2,836]),{46:[1,493]},{84:[1,494],88:[1,495]},o($VD1,$VE1,{52:295,51:496,53:$VF1}),o($V2,[2,590]),o($VL1,[2,605]),o($VK1,[2,618]),o($VL1,[2,610]),o($VL1,[2,615],{443:243,33:$Vc1,80:$Ve1,98:$Vf1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,359:$Vl1,360:$Vm1,362:$Vn1,377:$Vo1,379:$Vp1,380:$Vq1,382:$Vr1,383:$Vs1}),o($VM1,[2,865]),o($VE,[2,281]),{84:[2,1086]},{84:[2,1088]},{84:[2,1090]},{84:[2,1092]},{84:[2,1094]},{84:[2,1096]},{84:[2,1098]},{84:[2,1100]},o($Vt2,[2,324],{202:497,203:498,204:[1,499]}),o($VZ1,[2,296]),{129:[1,500]},o($VP1,[2,468]),o($VP1,[2,471],{443:243,33:$Vc1,80:$Ve1,98:$Vf1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,359:$Vl1,360:$Vm1,362:$Vn1,377:$Vo1,379:$Vp1,380:$Vq1,382:$Vr1,383:$Vs1}),{43:332,62:82,66:$Vf,82:$Vu1,116:$Vg,122:181,189:501,210:328,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp,440:333,459:327,461:329,463:330,464:331},o($V_1,[2,1064],{209:502,217:$V$1,218:$V02,219:$V12,220:$V22,221:$V32,222:$V42,223:$V52,224:$V62}),{43:332,62:82,66:$Vf,82:$Vu1,116:$Vg,122:181,210:503,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp,440:333,463:330,464:331},{218:[1,504]},{218:[1,505],220:[1,506]},{218:[1,507]},o($Vu2,[2,349]),{218:[1,509],220:[1,510],221:[1,508],223:[1,511]},{218:[1,512]},{218:[1,514],220:[1,515],221:[1,513],223:[1,516]},{218:[1,517]},o($V72,[2,1067]),o($V72,[2,1068]),o($Vt1,[2,902]),o($Vt1,[2,903]),o($Vt1,[2,904]),{185:[1,518]},o($VN1,$VO1,{350:45,62:82,311:126,312:134,308:135,276:136,314:137,432:139,277:144,279:145,281:146,452:147,90:148,288:149,289:150,290:151,230:154,454:155,122:156,294:157,456:160,457:161,398:162,401:163,458:164,469:319,141:443,182:519,441:520,57:$VF,58:$VG,66:$Vf,82:$VH,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,309:$V01,310:$V11,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81}),{33:$Vc1,80:$Ve1,98:$Vf1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,359:$Vl1,360:$Vm1,362:$Vn1,377:$Vo1,379:$Vp1,380:$Vq1,382:$Vr1,383:$Vs1,442:[1,521],443:243},{84:[1,522]},{84:[1,523],88:$Vv2},o($Vw2,[2,1014],{443:243,33:$Vc1,80:$Ve1,98:$Vf1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,359:$Vl1,360:$Vm1,362:$Vn1,377:$Vo1,379:$Vp1,380:$Vq1,382:$Vr1,383:$Vs1}),{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:525,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},o($Vx2,[2,1082]),{84:[1,526]},{33:$Vc1,80:$Ve1,98:$Vf1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,359:$Vl1,360:$Vm1,362:$Vn1,372:[1,527],377:$Vo1,379:$Vp1,380:$Vq1,382:$Vr1,383:$Vs1,443:243},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:528,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},o($Vt1,[2,567]),{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:529,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{84:[2,1123],234:531,235:$Vy2,486:530},o($Vc2,[2,1118]),{129:[1,533]},{321:[2,531]},{100:534,363:$Vh2,364:$Vi2,366:$Vj2,369:$Vk2,370:$Vl2,374:$Vm2,378:$Vn2,387:$Vo2,388:$Vp2,390:$Vq2,391:$Vr2,394:$Vs2},o($VA1,[2,506]),{84:[1,535],88:$Vb2},o($VA1,[2,519]),{84:[1,536],88:$Vb2},{33:$Vc1,80:$Ve1,84:[1,537],98:$Vf1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,359:$Vl1,360:$Vm1,362:$Vn1,377:$Vo1,379:$Vp1,380:$Vq1,382:$Vr1,383:$Vs1,443:243},o($Vt1,[2,1048]),o($V2,[2,251],{88:[1,538]}),o($Vz2,[2,257]),{57:$VF,58:$VG,62:82,66:$Vf,90:148,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,170:539,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:540,312:134,314:137,350:45,351:$Vi,352:$Vj,361:$Vp,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{47:541,171:24,172:25,177:$Va,244:$Vb},o($VG1,[2,164]),{82:[1,543],133:542},o($VH1,[2,84]),{62:82,66:$Vf,87:544,90:397,116:$Vg,122:156,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp},o($VD1,[2,100],{92:545,95:546,96:547,52:550,53:$VF1,98:$VA2,99:$VB2}),o($VC2,[2,112]),o($VC2,[2,113]),o($VC2,[2,114]),o($VC2,[2,115]),o($VC2,[2,116]),o($VC2,[2,117]),o($VC2,[2,118]),o($VC2,[2,880]),o($VC2,[2,881]),o($VC2,$VD2,{437:551,82:$VE2}),o($VC2,[2,894],{438:553,82:[1,554]}),o($VC2,[2,884]),o($VC2,[2,885]),o($VC2,[2,886]),o($VC2,[2,887]),o($VC2,[2,888]),o($VC2,[2,889]),o($VC2,[2,890]),o($VC2,$VD2,{437:555,82:$VE2}),{111:[1,556]},{111:[1,557]},{111:[1,558]},{47:559,171:24,172:25,177:$Va,244:$Vb},o($VJ1,[2,216]),{62:82,66:$Vf,90:148,116:$Vg,122:156,152:560,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp,432:220},o($VD1,[2,218]),o($VF2,[2,387],{233:561,234:562,235:$Vy2}),o($Vt2,[2,325]),{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:563,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:565,194:564,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},o($V_1,[2,289]),{43:332,62:82,66:$Vf,82:$Vu1,116:$Vg,122:181,210:566,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp,440:333,463:330,464:331},o($VG2,$VH2,{211:567,225:$VI2}),o($Vu2,[2,345]),o($Vu2,[2,346]),{218:[1,569]},o($Vu2,[2,348]),{218:[1,570]},o($Vu2,[2,351]),{218:[1,571]},{218:[1,572]},o($Vu2,[2,354]),{218:[1,573]},o($Vu2,[2,356]),{218:[1,574]},{218:[1,575]},o($Vu2,[2,359]),{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:576,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{84:[1,577]},{84:[1,578],88:$Vv2},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:579,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},o($Vt1,[2,914]),o($Vt1,[2,915]),{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:580,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},o([46,57,58,66,84,88,116,132,185,193,204,217,218,219,220,221,222,223,224,229,231,235,242,243,265,267,343,347,351,352,359,361,362,371,372,380,385,389,395,442],[2,917],{443:243,33:$Vc1,80:$Ve1,98:$Vf1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,360:$Vm1,377:$Vo1,379:$Vp1,382:$Vr1,383:$Vs1}),o($Vx2,[2,1083]),o($Vt1,[2,1183]),o($VW1,[2,1204],{443:243,33:$Vc1,80:$Ve1,98:$Vf1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,359:$Vl1,360:$Vm1,362:$Vn1,377:$Vo1,379:$Vp1,380:$Vq1,382:$Vr1,383:$Vs1}),o($VD1,[2,572],{443:243,33:$Vc1,80:$Ve1,98:$Vf1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,359:$Vl1,360:$Vm1,362:$Vn1,377:$Vo1,379:$Vp1,380:$Vq1,382:$Vr1,383:$Vs1}),{84:[1,581]},{84:[2,1128],132:[1,586],385:[1,585],490:582,492:583,493:584},{129:[1,587]},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:443,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,441:588,452:147,454:155,456:160,457:161,458:164},{84:[1,589]},o($VA1,[2,507]),o($VA1,[2,521]),o($VA1,[2,525]),{82:$Vd2,169:590},{84:[1,591],88:[1,592]},o($VD1,[2,1027]),o($V2,[2,201]),{82:[1,594],134:593},{62:82,66:$Vf,90:596,116:$Vg,122:156,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp,424:595},o($VD1,[2,87]),o($VD1,[2,96]),o($VD1,[2,101],{52:550,96:597,53:$VF1,98:$VA2,99:$VB2}),o($VJ2,[2,102]),{99:[1,598]},o($VJ2,[2,109]),o($VJ2,[2,110]),o($VC2,[2,882]),{392:[1,599]},o($VC2,[2,883]),{392:[1,600]},o($VC2,[2,891]),{91:601,100:471,101:472,102:473,103:474,104:475,105:476,106:477,110:$Ve2,112:[1,602],115:$Vf2,116:$Vg2,363:$Vh2,364:$Vi2,366:$Vj2,369:$Vk2,370:$Vl2,374:$Vm2,378:$Vn2,387:$Vo2,388:$Vp2,390:$Vq2,391:$Vr2,394:$Vs2},{100:603,112:[1,604],363:$Vh2,364:$Vi2,366:$Vj2,369:$Vk2,370:$Vl2,374:$Vm2,378:$Vn2,387:$Vo2,388:$Vp2,390:$Vq2,391:$Vr2,394:$Vs2},{62:82,66:$Vf,112:[1,606],116:$Vg,117:605,119:607,122:608,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp},o($V2,[2,205]),o($VD1,$VE1,{52:295,51:609,53:$VF1}),o($Vv,[2,380],{227:610,228:611,229:[1,612]}),o($VF2,[2,388]),o($Vt2,[2,326],{443:243,33:$Vc1,80:$Ve1,98:$Vf1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,359:$Vl1,360:$Vm1,362:$Vn1,377:$Vo1,379:$Vp1,380:$Vq1,382:$Vr1,383:$Vs1}),o($VZ1,[2,297],{88:[1,613]}),o($VK2,[2,312],{443:243,33:$Vc1,80:$Ve1,98:$Vf1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,359:$Vl1,360:$Vm1,362:$Vn1,377:$Vo1,379:$Vp1,380:$Vq1,382:$Vr1,383:$Vs1}),o($VG2,$VH2,{211:614,225:$VI2}),o($VG2,[2,332]),{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:615,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},o($Vu2,[2,347]),o($Vu2,[2,350]),o($Vu2,[2,352]),o($Vu2,[2,353]),o($Vu2,[2,355]),o($Vu2,[2,357]),o($Vu2,[2,358]),o($VV1,[2,905],{443:243}),o($Vt1,[2,912]),o($Vt1,[2,913]),o($VU1,[2,916],{443:243,33:$Vc1,80:$Ve1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,360:$Vm1,377:$Vo1,379:$Vp1,382:$Vr1,383:$Vs1}),o($Vw2,[2,1015],{443:243,33:$Vc1,80:$Ve1,98:$Vf1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,359:$Vl1,360:$Vm1,362:$Vn1,377:$Vo1,379:$Vp1,380:$Vq1,382:$Vr1,383:$Vs1}),o($Vt1,[2,1112]),{84:[2,1124]},{84:[2,1129]},{362:[1,616],497:[1,617]},o($VL2,[2,1146]),o($VL2,[2,1147]),{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:620,230:154,231:$Vh,236:618,239:619,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},o($Vc2,[2,1119],{88:$Vv2}),o($Vt1,[2,539]),o($Vz2,[2,258]),o($Vz2,[2,259]),{57:$VF,58:$VG,62:82,66:$Vf,90:148,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:621,312:134,314:137,350:45,351:$Vi,352:$Vj,361:$Vp,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},o($VG1,[2,168]),{128:$VM2,137:622,139:623},{84:[1,625],88:[1,626]},o($VD1,[2,823]),o($VJ2,[2,103]),o($VJ2,[2,108]),{84:[1,627]},{84:[1,628],88:[1,629]},{112:[1,630]},o($VC2,[2,123]),{88:[1,631]},o($VC2,[2,127]),{88:[1,633],112:[1,632]},o($VC2,[2,133]),o($VN2,[2,135]),{123:[1,634]},o($VD1,[2,219]),o($Vv,[2,442]),o($Vv,[2,381]),{230:635,231:[1,636],270:$VN,392:$V71,393:$V81,456:160,457:161},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:637,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},o($VG2,[2,333]),o($VG2,[2,375],{443:243,33:$Vc1,80:$Ve1,98:$Vf1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,359:$Vl1,360:$Vm1,362:$Vn1,377:$Vo1,379:$Vp1,380:$Vq1,382:$Vr1,383:$Vs1}),o($VO2,$VP2,{494:638}),o($VO2,$VP2,{494:639}),o([84,132,229,265,343,347,385],[2,389],{88:[1,640]}),o($VQ2,[2,392]),o($VQ2,[2,402],{443:243,241:641,33:$Vc1,80:$Ve1,98:$Vf1,111:$Vg1,112:$Vh1,145:$Vi1,242:[1,642],243:[1,643],256:$Vj1,355:$Vk1,359:$Vl1,360:$Vm1,362:$Vn1,377:$Vo1,379:$Vp1,380:$Vq1,382:$Vr1,383:$Vs1}),o($VD1,[2,1028]),{84:[1,644],88:[1,645]},o($VD1,[2,177]),{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:646,143:[1,647],230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{82:[2,820]},{62:82,66:$Vf,90:648,116:$Vg,122:156,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp},o($VC2,[2,893]),o($VC2,[2,895]),{392:[1,649]},o($VC2,[2,122]),{91:650,100:471,101:472,102:473,103:474,104:475,105:476,106:477,110:$Ve2,115:$Vf2,116:$Vg2,363:$Vh2,364:$Vi2,366:$Vj2,369:$Vk2,370:$Vl2,374:$Vm2,378:$Vn2,387:$Vo2,388:$Vp2,390:$Vq2,391:$Vr2,394:$Vs2},o($VC2,[2,132]),{62:82,66:$Vf,116:$Vg,119:651,122:608,231:$Vh,350:45,351:$Vi,352:$Vj,361:$Vp},{91:652,100:471,101:472,102:473,103:474,104:475,105:476,106:477,110:$Ve2,115:$Vf2,116:$Vg2,363:$Vh2,364:$Vi2,366:$Vj2,369:$Vk2,370:$Vl2,374:$Vm2,378:$Vn2,387:$Vo2,388:$Vp2,390:$Vq2,391:$Vr2,394:$Vs2},o($Vv,[2,382],{88:[1,653]}),o($Vv,[2,384],{88:[1,654]}),o($VK2,[2,313],{443:243,33:$Vc1,80:$Ve1,98:$Vf1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,359:$Vl1,360:$Vm1,362:$Vn1,377:$Vo1,379:$Vp1,380:$Vq1,382:$Vr1,383:$Vs1}),o($VR2,$VS2,{495:655,505:656,367:$VT2,392:$VU2,497:$VV2}),o($VR2,$VS2,{505:656,495:660,367:$VT2,392:$VU2,497:$VV2}),{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:620,230:154,231:$Vh,239:661,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},o($VQ2,[2,399]),o($VQ2,[2,403]),o($VQ2,[2,404]),o($VG1,[2,174]),{128:$VM2,139:662},{33:$Vc1,80:$Ve1,98:$Vf1,111:[1,664],112:$Vh1,142:663,145:[1,665],256:$Vj1,355:$Vk1,359:$Vl1,360:$Vm1,362:$Vn1,377:$Vo1,379:$Vp1,380:$Vq1,382:$Vr1,383:$Vs1,443:243},{111:$VW2,142:666,145:$VX2},o($VD1,[2,824]),{84:[1,669]},{112:[1,670]},o($VN2,[2,136]),o($VN2,$VE1,{52:295,51:671,53:$VF1}),{230:672,270:$VN,392:$V71,393:$V81,456:160,457:161},{231:[1,673]},{84:$VY2,359:$VZ2,496:674},{381:[1,676]},{384:[1,677]},o($V_2,[2,1159]),o($V_2,[2,1160]),{84:$VY2,359:$VZ2,496:678},o($VQ2,[2,393]),o($VD1,[2,178]),{143:[1,679]},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:337,143:$V$2,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:339,143:$V03,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:680,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},o($VX1,$V$2),o($VX1,$V03),o($VC2,[2,896]),o($VC2,[2,126]),o($VN2,[2,142]),o($Vv,[2,383]),o($Vv,[2,385]),{84:[2,1130]},{367:[1,681],392:$VU2,497:$VV2,505:682},o($VR2,[2,1149]),o($VR2,[2,1150]),{84:[2,1131]},o($VD1,[2,186],{142:683,111:$VW2,145:$VX2}),o($VD1,[2,185],{443:243,33:$Vc1,80:$Ve1,98:$Vf1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,359:$Vl1,360:$Vm1,362:$Vn1,377:$Vo1,379:$Vp1,380:$Vq1,382:$Vr1,383:$Vs1}),{384:[1,684]},{375:[1,685]},{57:$VF,58:$VG,62:82,66:$Vf,82:$VH,90:148,98:$VI,99:$VJ,110:$VK,115:$VL,116:$Vg,122:156,141:686,230:154,231:$Vh,270:$VN,272:$VO,273:$VP,274:$VQ,276:136,277:144,279:145,281:146,288:149,289:150,290:151,294:157,297:$VR,298:$VS,299:$VT,300:$VU,301:$VV,302:$VW,303:$VX,304:$VY,305:$VZ,306:$V_,307:$V$,308:135,309:$V01,310:$V11,311:126,312:134,314:137,350:45,351:$Vi,352:$Vj,354:$V21,355:$V31,358:$V41,361:$Vp,365:$V51,373:$V61,392:$V71,393:$V81,398:162,401:163,432:139,452:147,454:155,456:160,457:161,458:164},{84:[2,1154]},{84:[2,1155]},o($VD1,[2,184],{443:243,33:$Vc1,80:$Ve1,98:$Vf1,111:$Vg1,112:$Vh1,145:$Vi1,256:$Vj1,355:$Vk1,359:$Vl1,360:$Vm1,362:$Vn1,377:$Vo1,379:$Vp1,380:$Vq1,382:$Vr1,383:$Vs1})],
defaultActions: {38:[2,623],78:[2,600],79:[2,602],116:[2,861],140:[2,535],141:[2,536],142:[2,537],143:[2,538],165:[2,511],166:[2,512],167:[2,513],168:[2,514],169:[2,515],170:[2,516],171:[2,517],172:[2,518],180:[2,36],182:[2,45],219:[2,614],371:[2,530],409:[2,1086],410:[2,1088],411:[2,1090],412:[2,1092],413:[2,1094],414:[2,1096],415:[2,1098],416:[2,1100],454:[2,531],582:[2,1124],583:[2,1129],625:[2,820],674:[2,1130],678:[2,1131],684:[2,1154],685:[2,1155]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: lexer.yylloc,
                    ruleId: stack.slice(stack.length - 2, stack.length).join('_'),
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


SqlParseSupport.initSyntaxParser(parser);/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true,"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* skip whitespace */ 
break;
case 1: /* skip comments */ 
break;
case 2: /* skip comments */ 
break;
case 3: parser.yy.partialCursor = false; parser.yy.cursorFound = yy_.yylloc; return 5; 
break;
case 4: parser.yy.partialCursor = true; parser.yy.cursorFound = yy_.yylloc; return 396; 
break;
case 5: this.popState(); return 442; 
break;
case 6: return 31; 
break;
case 7: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('ALTER', yy_.yylloc, yy.lexer.upcomingInput()); return 4; 
break;
case 8: return 359; 
break;
case 9: return 46; 
break;
case 10: return 242; 
break;
case 11: this.begin('between'); return 362; 
break;
case 12: return 363; 
break;
case 13: return 364; 
break;
case 14: return 129; 
break;
case 15: return 408; 
break;
case 16: return 365; 
break;
case 17: return 366; 
break;
case 18: return 53; 
break;
case 19: parser.determineCase(yy_.yytext); return 8; 
break;
case 20: return 217; 
break;
case 21: return 367; 
break;
case 22: return 368; 
break;
case 23: return 369; 
break;
case 24: return 243; 
break;
case 25: return 250; 
break;
case 26: return 360; 
break;
case 27: return 370; 
break;
case 28: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('DROP', yy_.yylloc, yy.lexer.upcomingInput()); return 12; 
break;
case 29: return 371; 
break;
case 30: return 372; 
break;
case 31: parser.yy.correlatedSubQuery = true; return 373; 
break;
case 32: return 273; 
break;
case 33: return 374; 
break;
case 34: return 375; 
break;
case 35: parser.determineCase(yy_.yytext); return 185; 
break;
case 36: return 219; 
break;
case 37: return 193; 
break;
case 38: return 204; 
break;
case 39: return 309; 
break;
case 40: return 377; 
break;
case 41: return 221; 
break;
case 42: return 165; 
break;
case 43: return 378; 
break;
case 44: return 166; 
break;
case 45: return 379; 
break;
case 46: return 218; 
break;
case 47: return 222; 
break;
case 48: return 80; 
break;
case 49: return 229; 
break;
case 50: return 98; 
break;
case 51: return 99; 
break;
case 52: return 225; 
break;
case 53: return 351; 
break;
case 54: return 380; 
break;
case 55: return 235; 
break;
case 56: return 220; 
break;
case 57: return 128; 
break;
case 58: return 381; 
break;
case 59: return 157; 
break;
case 60: return 132; 
break;
case 61: return 382; 
break;
case 62: return 224; 
break;
case 63: return 383; 
break;
case 64: return 384; 
break;
case 65: return 66; 
break;
case 66: return 385; 
break;
case 67: return 386; 
break;
case 68: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SELECT', yy_.yylloc); return 244; 
break;
case 69: return 223; 
break;
case 70: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SET', yy_.yylloc); return 16; 
break;
case 71: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SHOW', yy_.yylloc); return 37; 
break;
case 72: return 387; 
break;
case 73: return 388; 
break;
case 74: return 42; 
break;
case 75: return 389; 
break;
case 76: return 390; 
break;
case 77: return 391; 
break;
case 78: return 'TO'; 
break;
case 79: return 272; 
break;
case 80: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('TRUNCATE', yy_.yylloc, yy.lexer.upcomingInput()); return 274; 
break;
case 81: return 497; 
break;
case 82: return 265; 
break;
case 83: parser.determineCase(yy_.yytext); return 324; 
break;
case 84: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('USE', yy_.yylloc); return 340; 
break;
case 85: return 143; 
break;
case 86: return 394; 
break;
case 87: return 50; 
break;
case 88: return 395; 
break;
case 89: return 267; 
break;
case 90: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('WITH', yy_.yylloc); return 177; 
break;
case 91: return 321; 
break;
case 92: return 66; 
break;
case 93: yy.lexer.unput('('); yy_.yytext = 'avg'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 297; 
break;
case 94: yy.lexer.unput('('); yy_.yytext = 'cast'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 310; 
break;
case 95: yy.lexer.unput('('); yy_.yytext = 'count'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 305; 
break;
case 96: yy.lexer.unput('('); yy_.yytext = 'max'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 298; 
break;
case 97: yy.lexer.unput('('); yy_.yytext = 'min'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 299; 
break;
case 98: yy.lexer.unput('('); yy_.yytext = 'stddev_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 300; 
break;
case 99: yy.lexer.unput('('); yy_.yytext = 'stddev_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 301; 
break;
case 100: yy.lexer.unput('('); yy_.yytext = 'sum'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 306; 
break;
case 101: yy.lexer.unput('('); yy_.yytext = 'var_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 302; 
break;
case 102: yy.lexer.unput('('); yy_.yytext = 'var_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 303; 
break;
case 103: yy.lexer.unput('('); yy_.yytext = 'variance'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 304; 
break;
case 104: yy.lexer.unput('('); yy_.yytext = 'cume_dist'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 307; 
break;
case 105: yy.lexer.unput('('); yy_.yytext = 'dense_rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 307; 
break;
case 106: yy.lexer.unput('('); yy_.yytext = 'first_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 307; 
break;
case 107: yy.lexer.unput('('); yy_.yytext = 'lag'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 307; 
break;
case 108: yy.lexer.unput('('); yy_.yytext = 'last_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 307; 
break;
case 109: yy.lexer.unput('('); yy_.yytext = 'lead'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 307; 
break;
case 110: yy.lexer.unput('('); yy_.yytext = 'rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 307; 
break;
case 111: yy.lexer.unput('('); yy_.yytext = 'row_number'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 307; 
break;
case 112: return 392; 
break;
case 113: return 392; 
break;
case 114: return 393; 
break;
case 115: return 352; 
break;
case 116: parser.yy.cursorFound = true; return 5; 
break;
case 117: parser.yy.cursorFound = true; return 396; 
break;
case 118: return 376; 
break;
case 119: parser.addFileLocation(yy_.yylloc, yy_.yytext); return 502; 
break;
case 120: this.popState(); return 503; 
break;
case 121: return 343; 
break;
case 122: return 359; 
break;
case 123: return 380; 
break;
case 124: return 33; 
break;
case 125: return 111; 
break;
case 126: return 112; 
break;
case 127: return 145; 
break;
case 128: return 145; 
break;
case 129: return 145; 
break;
case 130: return 145; 
break;
case 131: return 145; 
break;
case 132: return 355; 
break;
case 133: return 256; 
break;
case 134: return 360; 
break;
case 135: return 360; 
break;
case 136: return 360; 
break;
case 137: return 360; 
break;
case 138: return 360; 
break;
case 139: return 360; 
break;
case 140: return 88; 
break;
case 141: return 270; 
break;
case 142: return 123; 
break;
case 143: return 347; 
break;
case 144: return 358; 
break;
case 145: return 354; 
break;
case 146: return 82; 
break;
case 147: return 84; 
break;
case 148: return 356; 
break;
case 149: return 357; 
break;
case 150: return 231; 
break;
case 151: this.begin('backtickedValue'); return 361; 
break;
case 152:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '`')) {
                                               return 400;
                                             }
                                             return 59;
                                           
break;
case 153: this.popState(); return 361; 
break;
case 154: this.begin('singleQuotedValue'); return 57; 
break;
case 155:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '\'')) {
                                               return 400;
                                             }
                                             return 59;
                                           
break;
case 156: this.popState(); return 57; 
break;
case 157: this.begin('doubleQuotedValue'); return 58; 
break;
case 158:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '"')) {
                                               return 400;
                                             }
                                             return 59;
                                           
break;
case 159: this.popState(); return 58; 
break;
case 160: return 343; 
break;
case 161: /* To prevent console logging of unknown chars */ 
break;
case 162: 
break;
case 163: 
break;
case 164: 
break;
case 165: 
break;
case 166: 
break;
case 167:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s)/i,/^(?:--.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:AND)/i,/^(?:ALL)/i,/^(?:ALTER)/i,/^(?:AND)/i,/^(?:AS)/i,/^(?:ASC)/i,/^(?:BETWEEN)/i,/^(?:BIGINT)/i,/^(?:BOOLEAN)/i,/^(?:BY)/i,/^(?:CASCADE)/i,/^(?:CASE)/i,/^(?:CHAR)/i,/^(?:COMMENT)/i,/^(?:CREATE)/i,/^(?:CROSS)/i,/^(?:CURRENT)/i,/^(?:DATABASE)/i,/^(?:DECIMAL)/i,/^(?:DESC)/i,/^(?:DISTINCT)/i,/^(?:DIV)/i,/^(?:DOUBLE)/i,/^(?:DROP)/i,/^(?:ELSE)/i,/^(?:END)/i,/^(?:EXISTS)/i,/^(?:FALSE)/i,/^(?:FLOAT)/i,/^(?:FOLLOWING)/i,/^(?:FROM)/i,/^(?:FULL)/i,/^(?:GROUP)/i,/^(?:HAVING)/i,/^(?:IF)/i,/^(?:IN)/i,/^(?:INNER)/i,/^(?:INSERT)/i,/^(?:INT)/i,/^(?:INTO)/i,/^(?:IS)/i,/^(?:JOIN)/i,/^(?:LEFT)/i,/^(?:LIKE)/i,/^(?:LIMIT)/i,/^(?:NOT)/i,/^(?:NULL)/i,/^(?:ON)/i,/^(?:OPTION)/i,/^(?:OR)/i,/^(?:ORDER)/i,/^(?:OUTER)/i,/^(?:PARTITION)/i,/^(?:PRECEDING)/i,/^(?:PURGE)/i,/^(?:RANGE)/i,/^(?:REGEXP)/i,/^(?:RIGHT)/i,/^(?:RLIKE)/i,/^(?:ROW)/i,/^(?:ROLE)/i,/^(?:ROWS)/i,/^(?:SCHEMA)/i,/^(?:SELECT)/i,/^(?:SEMI)/i,/^(?:SET)/i,/^(?:SHOW)/i,/^(?:SMALLINT)/i,/^(?:STRING)/i,/^(?:TABLE)/i,/^(?:THEN)/i,/^(?:TIMESTAMP)/i,/^(?:TINYINT)/i,/^(?:TO)/i,/^(?:TRUE)/i,/^(?:TRUNCATE)/i,/^(?:UNBOUNDED)/i,/^(?:UNION)/i,/^(?:UPDATE)/i,/^(?:USE)/i,/^(?:VALUES)/i,/^(?:VARCHAR)/i,/^(?:VIEW)/i,/^(?:WHEN)/i,/^(?:WHERE)/i,/^(?:WITH)/i,/^(?:OVER)/i,/^(?:ROLE)/i,/^(?:AVG\s*\()/i,/^(?:CAST\s*\()/i,/^(?:COUNT\s*\()/i,/^(?:MAX\s*\()/i,/^(?:MIN\s*\()/i,/^(?:STDDEV_POP\s*\()/i,/^(?:STDDEV_SAMP\s*\()/i,/^(?:SUM\s*\()/i,/^(?:VAR_POP\s*\()/i,/^(?:VAR_SAMP\s*\()/i,/^(?:VARIANCE\s*\()/i,/^(?:CUME_DIST\s*\()/i,/^(?:DENSE_RANK\s*\()/i,/^(?:FIRST_VALUE\s*\()/i,/^(?:LAG\s*\()/i,/^(?:LAST_VALUE\s*\()/i,/^(?:LEAD\s*\()/i,/^(?:RANK\s*\()/i,/^(?:ROW_NUMBER\s*\()/i,/^(?:[0-9]+)/i,/^(?:[0-9]+(?:[YSL]|BD)?)/i,/^(?:[0-9]+E)/i,/^(?:[A-Za-z0-9_]+)/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:\s+['"])/i,/^(?:[^'"\u2020\u2021]+)/i,/^(?:['"])/i,/^(?:$)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<>)/i,/^(?:<=>)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\+)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\|)/i,/^(?:\^)/i,/^(?:&)/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:;)/i,/^(?:~)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\$\{[^}]*\})/i,/^(?:`)/i,/^(?:[^`]+)/i,/^(?:`)/i,/^(?:')/i,/^(?:(?:\\\\|\\[']|[^'])+)/i,/^(?:')/i,/^(?:")/i,/^(?:(?:\\\\|\\["]|[^"])+)/i,/^(?:")/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"hdfs":{"rules":[116,117,118,119,120,121,163],"inclusive":false},"doubleQuotedValue":{"rules":[158,159,166],"inclusive":false},"singleQuotedValue":{"rules":[155,156,165],"inclusive":false},"backtickedValue":{"rules":[152,153,164],"inclusive":false},"between":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,154,157,160,161,162,167],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,154,157,160,161,167],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
export default flinkSyntaxParser;
