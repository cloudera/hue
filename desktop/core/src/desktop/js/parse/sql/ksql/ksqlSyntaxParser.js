// Licensed to Cloudera, Inc. under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  Cloudera, Inc. licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import SqlParseSupport from 'parse/sql/ksql/sqlParseSupport';

var ksqlSyntaxParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[7,10,17,20,137,150,157,169,173,409,422],$V1=[2,256],$V2=[169,173],$V3=[2,257],$V4=[1,11],$V5=[1,13],$V6=[1,26],$V7=[1,30],$V8=[1,31],$V9=[1,25],$Va=[1,32],$Vb=[1,28],$Vc=[1,29],$Vd=[64,169,173],$Ve=[2,993],$Vf=[1,48],$Vg=[1,58],$Vh=[1,60],$Vi=[1,59],$Vj=[1,55],$Vk=[1,56],$Vl=[2,823],$Vm=[1,62],$Vn=[1,63],$Vo=[1,68],$Vp=[1,73],$Vq=[1,74],$Vr=[64,169,173,254],$Vs=[43,96,178,179,180,196],$Vt=[2,410],$Vu=[1,86],$Vv=[185,186],$Vw=[26,30,31,43,58,62,64,68,78,90,91,92,95,96,103,108,112,123,125,126,149,169,173,178,179,180,183,184,185,186,192,193,194,196,197,198,199,202,204,207,208,210,211,212,215,217,218,219,220,223,224,225,226,227,228,229,232,233,234,235,238,239,240,242,244,245,248,250,251,252,254,259,261,262,275,316],$Vx=[1,135],$Vy=[1,136],$Vz=[1,99],$VA=[1,94],$VB=[1,103],$VC=[1,108],$VD=[1,110],$VE=[1,111],$VF=[1,95],$VG=[1,92],$VH=[1,97],$VI=[1,133],$VJ=[1,96],$VK=[1,121],$VL=[1,139],$VM=[1,100],$VN=[1,122],$VO=[1,130],$VP=[1,98],$VQ=[1,138],$VR=[1,109],$VS=[1,140],$VT=[1,141],$VU=[1,142],$VV=[1,143],$VW=[1,131],$VX=[1,137],$VY=[1,132],$VZ=[1,134],$V_=[1,144],$V$=[1,145],$V01=[1,146],$V11=[30,31,43,62,64,78,79,90,95,96,150,178,179,180,182,183,184,185,189,191,195,196,200,201,203,213,214,222,230,231,246,247,249,253,255,256,257,258,260,409],$V21=[62,68,409],$V31=[43,96,169,173,178,179,180],$V41=[2,413],$V51=[1,152],$V61=[43,96,169,173,178,179,180,196,222],$V71=[64,68,169,173,217,254],$V81=[2,743],$V91=[1,203],$Va1=[1,191],$Vb1=[1,188],$Vc1=[1,189],$Vd1=[1,190],$Ve1=[1,202],$Vf1=[1,197],$Vg1=[1,196],$Vh1=[1,187],$Vi1=[1,195],$Vj1=[1,198],$Vk1=[1,193],$Vl1=[1,192],$Vm1=[1,186],$Vn1=[1,194],$Vo1=[1,205],$Vp1=[1,204],$Vq1=[30,31,43,58,64,68,78,91,92,96,112,125,126,169,173,178,179,180,183,184,186,192,193,194,196,197,204,208,211,212,217,218,219,220,223,224,226,227,228,229,233,234,235,238,239,240,242,244,250,254,261,262,316],$Vr1=[1,211],$Vs1=[1,217],$Vt1=[1,219],$Vu1=[30,31,43,58,62,64,68,78,91,92,96,112,125,126,169,173,178,179,180,183,184,186,192,193,194,196,197,204,208,211,212,217,218,219,220,223,224,226,227,228,229,233,234,235,238,239,240,242,244,250,254,261,262,316],$Vv1=[1,224],$Vw1=[26,30,31,43,58,62,64,68,78,91,92,96,112,125,126,169,173,178,179,180,183,184,185,186,192,193,194,196,197,204,208,211,212,217,218,219,220,223,224,226,227,228,229,233,234,235,238,239,240,242,244,250,254,261,262,316],$Vx1=[30,31,43,58,64,68,78,91,92,96,112,125,126,169,173,178,179,180,183,184,186,192,193,194,196,197,204,208,211,212,217,218,219,220,223,224,226,227,228,229,233,234,235,236,238,239,240,242,244,250,254,261,262,316],$Vy1=[30,31,43,64,68,96,108,123,126,149,169,173,178,179,180,196,204,218,219,220,224,227,228,229,232,234,235,239,244,254,262],$Vz1=[26,64,68,78,79,92,126,169,173,204,217,218,219,220,224,227,228,229,232,234,235,239,244,254,262],$VA1=[64,169,173,219,220,229,234,254],$VB1=[79,209,214,253],$VC1=[64,68,169,173,204,217,218,219,220,224,227,228,229,232,234,235,239,244,254,262],$VD1=[30,31,43,64,68,78,96,112,126,169,173,178,179,180,192,194,196,197,204,208,211,212,217,218,219,220,224,227,228,229,233,234,235,239,242,244,250,254,261,262,316],$VE1=[30,31,43,64,68,78,91,92,96,112,125,126,169,173,178,179,180,183,184,186,192,193,194,196,197,204,208,211,212,217,218,219,220,224,227,228,229,233,234,235,239,242,244,250,254,261,262,316],$VF1=[409,422],$VG1=[2,721],$VH1=[211,212,261],$VI1=[30,31,43,62,78,79,90,95,96,150,178,179,180,182,184,185,189,191,195,196,200,201,203,213,214,222,230,231,246,247,249,253,255,256,257,258,260],$VJ1=[26,30,31,43,58,64,68,78,79,91,92,96,112,125,126,169,173,178,179,180,183,184,186,192,193,194,196,197,204,208,211,212,217,218,219,220,223,224,226,227,228,229,232,233,234,235,238,239,240,242,244,250,254,261,262,316],$VK1=[2,17],$VL1=[1,330],$VM1=[126,169,173],$VN1=[108,126,169,173],$VO1=[26,58,62,108,126,169,173],$VP1=[26,126],$VQ1=[64,169,173,220,229,234,254],$VR1=[64,68,169,173,219,220,229,234,254,262],$VS1=[1,357],$VT1=[1,358],$VU1=[1,359],$VV1=[1,360],$VW1=[1,361],$VX1=[1,362],$VY1=[1,363],$VZ1=[1,364],$V_1=[64,68,169,173,204,218,219,220,224,227,228,229,232,234,235,239,244,254,262],$V$1=[30,31,43,64,68,96,126,169,173,178,179,180,196,204,218,219,220,224,227,228,229,232,234,235,239,244,254,262],$V02=[30,31,43,64,68,78,91,92,96,112,125,126,169,173,178,179,180,186,192,194,196,197,204,208,211,212,217,218,219,220,224,227,228,229,233,234,235,239,242,244,250,254,261,262,316],$V12=[30,31,43,64,68,96,112,126,169,173,178,179,180,192,194,196,204,208,211,212,217,218,219,220,224,227,228,229,233,234,235,239,242,244,250,254,261,262,316],$V22=[1,390],$V32=[64,68],$V42=[64,234],$V52=[1,418],$V62=[64,169,173,229,234,254],$V72=[43,62,96,178,179,180,196],$V82=[1,446],$V92=[64,68,234],$Va2=[30,31,43,58,64,68,78,91,92,96,112,125,126,169,173,178,179,180,183,184,186,192,193,194,196,197,204,208,211,212,217,218,219,220,223,224,226,227,228,229,232,233,234,235,238,239,240,242,244,250,254,261,262,316],$Vb2=[1,454],$Vc2=[1,457],$Vd2=[1,458],$Ve2=[1,459],$Vf2=[1,460],$Vg2=[1,461],$Vh2=[1,462],$Vi2=[1,463],$Vj2=[1,464],$Vk2=[1,465],$Vl2=[1,466],$Vm2=[1,467],$Vn2=[1,468],$Vo2=[1,485],$Vp2=[1,486],$Vq2=[1,487],$Vr2=[26,64,68],$Vs2=[68,169,173],$Vt2=[64,169,173,229,254],$Vu2=[64,68,169,173,204,218,219,220,224,227,228,229,234,235,239,244,254,262],$Vv2=[2,951],$Vw2=[1,503],$Vx2=[26,64,68,78,79,92],$Vy2=[2,522],$Vz2=[1,526],$VA2=[1,537],$VB2=[1,538],$VC2=[64,68,169,173,220,229,234,254],$VD2=[197,395],$VE2=[26,64,68,78,79],$VF2=[64,192,205,255,395],$VG2=[2,779],$VH2=[64,68,112,169,173,229,242,254],$VI2=[1,592],$VJ2=[68,92],$VK2=[64,192],$VL2=[2,789],$VM2=[1,604],$VN2=[1,605],$VO2=[1,606],$VP2=[2,794],$VQ2=[1,621],$VR2=[216,237],$VS2=[1,631],$VT2=[1,632],$VU2=[2,171],$VV2=[2,172];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"DataDefinition":3,"CreateStatement":4,"DropStatement":5,"TruncateTableStatement":6,"LIST":7,"ListStatement":8,"SetSpecification":9,"SHOW":10,"ShowStatement":11,"DataDefinition_EDIT":12,"CreateStatement_EDIT":13,"DropStatement_EDIT":14,"TruncateTableStatement_EDIT":15,"ListStatement_EDIT":16,"SET":17,"CURSOR":18,"ShowStatement_EDIT":19,"CREATE":20,"DatabaseDefinition_EDIT":21,"TableDefinition_EDIT":22,"ViewDefinition_EDIT":23,"OptionalComment":24,"Comment":25,"COMMENT":26,"QuotedValue":27,"OptionalComment_INVALID":28,"Comment_INVALID":29,"SINGLE_QUOTE":30,"DOUBLE_QUOTE":31,"VALUE":32,"DatabaseDefinition":33,"RoleDefinition":34,"TableDefinition":35,"ViewDefinition":36,"DatabaseOrSchema":37,"OptionalIfNotExists":38,"RegularIdentifier":39,"DatabaseDefinitionOptionals":40,"OptionalIfNotExists_EDIT":41,"DatabaseDefinitionOptionals_EDIT":42,"ROLE":43,"TABLE":44,"TableDefinitionRightPart":45,"TableDefinitionRightPart_EDIT":46,"TableIdentifierAndOptionalColumnSpecification":47,"OptionalPartitionedBy":48,"OptionalAsSelectStatement":49,"TableIdentifierAndOptionalColumnSpecification_EDIT":50,"PartitionedBy_EDIT":51,"OptionalAsSelectStatement_EDIT":52,"SchemaQualifiedIdentifier":53,"OptionalColumnSpecificationsOrLike":54,"OptionalColumnSpecificationsOrLike_EDIT":55,"SchemaQualifiedIdentifier_EDIT":56,"ParenthesizedColumnSpecificationList":57,"LIKE":58,"SchemaQualifiedTableIdentifier":59,"ParenthesizedColumnSpecificationList_EDIT":60,"SchemaQualifiedTableIdentifier_EDIT":61,"(":62,"ColumnSpecificationList":63,")":64,"ColumnSpecificationList_EDIT":65,"RightParenthesisOrError":66,"ColumnSpecification":67,",":68,"ColumnSpecification_EDIT":69,"ColumnIdentifier":70,"ColumnDataType":71,"OptionalColumnOptions":72,"ColumnDataType_EDIT":73,"ColumnOptions_EDIT":74,"ColumnOptions":75,"ColumnOption":76,"ColumnOption_EDIT":77,"NOT":78,"NULL":79,"PrimitiveType":80,"ArrayType":81,"MapType":82,"StructType":83,"ArrayType_INVALID":84,"MapType_INVALID":85,"StructType_INVALID":86,"ArrayType_EDIT":87,"MapType_EDIT":88,"StructType_EDIT":89,"ARRAY":90,"<":91,">":92,"AnyCursor":93,"GreaterThanOrError":94,"MAP":95,"STRUCT":96,"StructDefinitionList":97,"StructDefinitionList_EDIT":98,"StructDefinition":99,"StructDefinition_EDIT":100,"Commas":101,"RegularOrBacktickedIdentifier":102,":":103,"ColumnDataTypeList":104,"ColumnDataTypeList_EDIT":105,"ColumnDataTypeListInner_EDIT":106,"PartitionedBy":107,"PARTITION":108,"BY":109,"RangeClause":110,"RangeClause_EDIT":111,"RANGE":112,"ParenthesizedColumnList":113,"ParenthesizedPartitionValuesList":114,"ParenthesizedColumnList_EDIT":115,"ParenthesizedPartitionValuesList_EDIT":116,"PartitionValueList":117,"PartitionValueList_EDIT":118,"PartitionValue":119,"PartitionValue_EDIT":120,"ValueExpression":121,"LessThanOrEqualTo":122,"VALUES":123,"ValueExpression_EDIT":124,"COMPARISON_OPERATOR":125,"AS":126,"CommitLocations":127,"QuerySpecification":128,"QuerySpecification_EDIT":129,"VIEW":130,"OptionalParenthesizedViewColumnList":131,"ParenthesizedViewColumnList_EDIT":132,"ParenthesizedViewColumnList":133,"ViewColumnList":134,"ViewColumnList_EDIT":135,"ColumnReference":136,"DROP":137,"DropDatabaseStatement_EDIT":138,"DropTableStatement_EDIT":139,"DropViewStatement_EDIT":140,"DropDatabaseStatement":141,"DropRoleStatement":142,"DropTableStatement":143,"DropViewStatement":144,"OptionalIfExists":145,"OptionalCascade":146,"OptionalIfExists_EDIT":147,"OptionalPurge":148,"PURGE":149,"TRUNCATE":150,"OptionalPartitionSpec":151,"DataManipulation":152,"InsertStatement":153,"InsertValuesStatement":154,"DataManipulation_EDIT":155,"InsertValuesStatement_EDIT":156,"INSERT":157,"INTO":158,"OptionalTable":159,"InsertValuesList":160,"ParenthesizedRowValuesList":161,"InValueList":162,"TABLES":163,"STREAMS":164,"TOPICS":165,"SqlSyntax":166,"NewStatement":167,"SqlStatements":168,"EOF":169,"SqlAutocomplete":170,"SqlStatements_EDIT":171,"SqlStatement":172,";":173,"SqlStatement_EDIT":174,"CommonTableExpression":175,"SetSpecification_EDIT":176,"NonReservedKeyword":177,"OPTION":178,"REGULAR_IDENTIFIER":179,"VARIABLE_REFERENCE":180,"NonStartingToken":181,"!":182,"*":183,"-":184,".":185,"=":186,"[":187,"]":188,"~":189,"ALL":190,"ANALYTIC":191,"AND":192,"ARITHMETIC_OPERATOR":193,"ASC":194,"AVG":195,"BACKTICK":196,"BETWEEN":197,"BIGINT":198,"BOOLEAN":199,"CASE":200,"CAST":201,"CHAR":202,"COUNT":203,"CROSS":204,"CURRENT":205,"DATABASE":206,"DECIMAL":207,"DESC":208,"DISTINCT":209,"DOUBLE":210,"ELSE":211,"END":212,"EXISTS":213,"FALSE":214,"FLOAT":215,"FOLLOWING":216,"FROM":217,"FULL":218,"GROUP":219,"HAVING":220,"HDFS_START_QUOTE":221,"IF":222,"IN":223,"INNER":224,"INT":225,"IS":226,"JOIN":227,"LEFT":228,"LIMIT":229,"MAX":230,"MIN":231,"ON":232,"OR":233,"ORDER":234,"OUTER":235,"OVER":236,"PRECEDING":237,"REGEXP":238,"RIGHT":239,"RLIKE":240,"ROW":241,"ROWS":242,"SCHEMA":243,"SEMI":244,"SMALLINT":245,"STDDEV_POP":246,"STDDEV_SAMP":247,"STRING":248,"SUM":249,"THEN":250,"TIMESTAMP":251,"TINYINT":252,"TRUE":253,"UNION":254,"UNSIGNED_INTEGER":255,"UNSIGNED_INTEGER_E":256,"VAR_POP":257,"VAR_SAMP":258,"VARCHAR":259,"VARIANCE":260,"WHEN":261,"WHERE":262,"PARTIAL_CURSOR":263,"FromOrIn":264,"SingleQuotedValue":265,"SingleQuotedValue_EDIT":266,"PARTIAL_VALUE":267,"DoubleQuotedValue":268,"DoubleQuotedValue_EDIT":269,"QuotedValue_EDIT":270,"OptionalFromDatabase":271,"DatabaseIdentifier":272,"OptionalFromDatabase_EDIT":273,"DatabaseIdentifier_EDIT":274,"CASCADE":275,"OptionalInDatabase":276,"PartitionSpec":277,"OptionalPartitionSpec_EDIT":278,"PartitionSpec_EDIT":279,"PartitionSpecList":280,"PartitionSpecList_EDIT":281,"RangePartitionSpec":282,"UnsignedValueSpecification":283,"RangePartitionComparisonOperator":284,"RangePartitionSpec_EDIT":285,"ConfigurationName":286,"PartialBacktickedOrAnyCursor":287,"PartialBacktickedIdentifier":288,"PartialBacktickedOrCursor":289,"PartialBacktickedOrPartialCursor":290,"OptionalParenthesizedColumnList":291,"OptionalParenthesizedColumnList_EDIT":292,"ColumnList":293,"ColumnList_EDIT":294,"ParenthesizedSimpleValueList":295,"SimpleValueList":296,"PartitionExpression":297,"PartitionExpression_EDIT":298,"RegularOrBackTickedSchemaQualifiedName":299,"RegularOrBackTickedSchemaQualifiedName_EDIT":300,"LocalOrSchemaQualifiedName":301,"LocalOrSchemaQualifiedName_EDIT":302,"BasicIdentifierChain":303,"ColumnReference_EDIT":304,"BasicIdentifierChain_EDIT":305,"DerivedColumnChain":306,"DerivedColumnChain_EDIT":307,"PartialBacktickedIdentifierOrPartialCursor":308,"OptionalTypeLength":309,"OptionalTypePrecision":310,"NonParenthesizedValueExpressionPrimary":311,"OptionalNot":312,"TableSubQuery":313,"TableSubQueryInner":314,"ValueExpressionList":315,"BETWEEN_AND":316,"LikeRightPart":317,"CaseRightPart":318,"NonParenthesizedValueExpressionPrimary_EDIT":319,"TableSubQuery_EDIT":320,"ValueExpressionInSecondPart_EDIT":321,"LikeRightPart_EDIT":322,"CaseRightPart_EDIT":323,"EndOrError":324,"ValueExpressionList_EDIT":325,"ColumnOrArbitraryFunctionRef":326,"ArbitraryFunctionRightPart":327,"ArbitraryFunctionName":328,"UserDefinedFunction":329,"UnsignedValueSpecification_EDIT":330,"ColumnOrArbitraryFunctionRef_EDIT":331,"ArbitraryFunctionRightPart_EDIT":332,"UserDefinedFunction_EDIT":333,"SignedInteger":334,"UnsignedNumericLiteral":335,"+":336,"UnsignedLiteral":337,"UnsignedLiteral_EDIT":338,"GeneralLiteral":339,"GeneralLiteral_EDIT":340,"ExactNumericLiteral":341,"ApproximateNumericLiteral":342,"TruthValue":343,"TableReference":344,"TablePrimaryOrJoinedTable":345,"TableReference_EDIT":346,"TablePrimaryOrJoinedTable_EDIT":347,"TablePrimary":348,"JoinedTable":349,"TablePrimary_EDIT":350,"JoinedTable_EDIT":351,"Joins":352,"Joins_EDIT":353,"TableOrQueryName":354,"OptionalCorrelationName":355,"DerivedTable":356,"TableOrQueryName_EDIT":357,"DerivedTable_EDIT":358,"OptionalCorrelationName_EDIT":359,"OptionalOnColumn":360,"OptionalOnColumn_EDIT":361,"PushQueryState":362,"PopQueryState":363,"TableSubQueryInner_EDIT":364,"SubQuery":365,"SubQuery_EDIT":366,"QueryExpression":367,"QueryExpression_EDIT":368,"QueryExpressionBody":369,"QueryExpressionBody_EDIT":370,"NonJoinQueryExpression":371,"NonJoinQueryExpression_EDIT":372,"NonJoinQueryTerm":373,"NonJoinQueryTerm_EDIT":374,"NonJoinQueryPrimary":375,"NonJoinQueryPrimary_EDIT":376,"SimpleTable":377,"SimpleTable_EDIT":378,"WindowExpression":379,"OptionalPartitionBy":380,"OptionalOrderByAndWindow":381,"WindowExpression_EDIT":382,"PartitionBy_EDIT":383,"OptionalOrderByAndWindow_EDIT":384,"PartitionBy":385,"OrderByClause":386,"OptionalWindowSpec":387,"OrderByClause_EDIT":388,"WindowSpec_EDIT":389,"WindowSpec":390,"RowsOrRange":391,"PopLexerState":392,"OptionalCurrentOrPreceding":393,"OptionalAndFollowing":394,"UNBOUNDED":395,"OptionalCurrentOrPreceding_EDIT":396,"OptionalAndFollowing_EDIT":397,"PushHdfsLexerState":398,"HdfsPath":399,"HDFS_PATH":400,"HDFS_END_QUOTE":401,"HdfsPath_EDIT":402,"IntegerOrUnbounded":403,"SelectStatement":404,"OptionalUnions":405,"SelectStatement_EDIT":406,"OptionalUnions_EDIT":407,"CommonTableExpression_EDIT":408,"SELECT":409,"OptionalAllOrDistinct":410,"SelectList":411,"TableExpression":412,"SelectList_EDIT":413,"TableExpression_EDIT":414,"FromClause":415,"OptionalSelectConditions":416,"FromClause_EDIT":417,"OptionalJoins":418,"OptionalSelectConditions_EDIT":419,"SelectSpecification":420,"SelectSpecification_EDIT":421,"WITH":422,"WithQueries":423,"WithQueries_EDIT":424,"WithQuery":425,"WithQuery_EDIT":426,"TableReferenceList":427,"TableReferenceList_EDIT":428,"OptionalGroupByClause":429,"GroupByClause":430,"GroupByColumnList":431,"GroupByClause_EDIT":432,"GroupByColumnList_EDIT":433,"ColumnGroupingSets":434,"ColumnGroupingSets_EDIT":435,"ColumnGroupingSet_EDIT":436,"GroupByColumnListPartTwo_EDIT":437,"OptionalHavingClause":438,"HavingClause":439,"HavingClause_EDIT":440,"Joins_INVALID":441,"JoinType":442,"OptionalJoinCondition":443,"Join_EDIT":444,"JoinType_EDIT":445,"JoinCondition_EDIT":446,"UsingColList":447,"OptionalLimitClause":448,"LimitClause":449,"LimitClause_EDIT":450,"OptionalOrderByClause":451,"OrderByColumnList":452,"OrderByColumnList_EDIT":453,"OrderByIdentifier":454,"OrderByIdentifier_EDIT":455,"OptionalAscOrDesc":456,"OptionalWhereClause":457,"WhereClause_EDIT":458,"WhereClause":459,"Unions":460,"Unions_EDIT":461,"UnionClause":462,"UnionClause_EDIT":463,"SearchCondition":464,"SearchCondition_EDIT":465,"SetOption":466,"SetValue":467,"AggregateFunction":468,"OptionalOverClause":469,"AnalyticFunction":470,"OverClause":471,"CastFunction":472,"AggregateFunction_EDIT":473,"OptionalOverClause_EDIT":474,"AnalyticFunction_EDIT":475,"OverClause_EDIT":476,"CastFunction_EDIT":477,"OtherAggregateFunction":478,"CountFunction":479,"SumFunction":480,"OtherAggregateFunction_EDIT":481,"CountFunction_EDIT":482,"SumFunction_EDIT":483,"OtherAggregateFunction_Type":484,"UdfArgumentList":485,"UdfArgumentList_EDIT":486,"ArbitraryFunction":487,"ArbitraryFunction_EDIT":488,"QUERIES":489,"PROPERTIES":490,"CaseWhenThenList":491,"CaseWhenThenList_EDIT":492,"CaseWhenThenListPartTwo":493,"CaseWhenThenListPartTwo_EDIT":494,"$accept":0,"$end":1},
terminals_: {2:"error",7:"LIST",10:"SHOW",17:"SET",18:"CURSOR",20:"CREATE",26:"COMMENT",30:"SINGLE_QUOTE",31:"DOUBLE_QUOTE",32:"VALUE",43:"ROLE",44:"TABLE",58:"LIKE",62:"(",64:")",68:",",78:"NOT",79:"NULL",90:"ARRAY",91:"<",92:">",95:"MAP",96:"STRUCT",103:":",108:"PARTITION",109:"BY",112:"RANGE",123:"VALUES",125:"COMPARISON_OPERATOR",126:"AS",130:"VIEW",137:"DROP",149:"PURGE",150:"TRUNCATE",157:"INSERT",158:"INTO",163:"TABLES",164:"STREAMS",165:"TOPICS",169:"EOF",173:";",176:"SetSpecification_EDIT",178:"OPTION",179:"REGULAR_IDENTIFIER",180:"VARIABLE_REFERENCE",182:"!",183:"*",184:"-",185:".",186:"=",187:"[",188:"]",189:"~",190:"ALL",191:"ANALYTIC",192:"AND",193:"ARITHMETIC_OPERATOR",194:"ASC",195:"AVG",196:"BACKTICK",197:"BETWEEN",198:"BIGINT",199:"BOOLEAN",200:"CASE",201:"CAST",202:"CHAR",203:"COUNT",204:"CROSS",205:"CURRENT",206:"DATABASE",207:"DECIMAL",208:"DESC",209:"DISTINCT",210:"DOUBLE",211:"ELSE",212:"END",213:"EXISTS",214:"FALSE",215:"FLOAT",216:"FOLLOWING",217:"FROM",218:"FULL",219:"GROUP",220:"HAVING",221:"HDFS_START_QUOTE",222:"IF",223:"IN",224:"INNER",225:"INT",226:"IS",227:"JOIN",228:"LEFT",229:"LIMIT",230:"MAX",231:"MIN",232:"ON",233:"OR",234:"ORDER",235:"OUTER",236:"OVER",237:"PRECEDING",238:"REGEXP",239:"RIGHT",240:"RLIKE",241:"ROW",242:"ROWS",243:"SCHEMA",244:"SEMI",245:"SMALLINT",246:"STDDEV_POP",247:"STDDEV_SAMP",248:"STRING",249:"SUM",250:"THEN",251:"TIMESTAMP",252:"TINYINT",253:"TRUE",254:"UNION",255:"UNSIGNED_INTEGER",256:"UNSIGNED_INTEGER_E",257:"VAR_POP",258:"VAR_SAMP",259:"VARCHAR",260:"VARIANCE",261:"WHEN",262:"WHERE",263:"PARTIAL_CURSOR",267:"PARTIAL_VALUE",275:"CASCADE",316:"BETWEEN_AND",336:"+",395:"UNBOUNDED",400:"HDFS_PATH",401:"HDFS_END_QUOTE",409:"SELECT",422:"WITH",489:"QUERIES",490:"PROPERTIES"},
productions_: [0,[3,1],[3,1],[3,1],[3,2],[3,1],[3,2],[12,1],[12,1],[12,1],[12,1],[12,2],[12,1],[13,2],[13,1],[13,1],[13,1],[24,0],[24,1],[25,2],[28,1],[29,2],[29,2],[29,3],[29,3],[4,1],[4,1],[4,1],[4,1],[33,3],[33,5],[21,4],[21,3],[21,5],[21,4],[21,6],[40,1],[42,1],[34,3],[35,4],[22,4],[22,4],[22,3],[45,3],[46,3],[46,3],[46,3],[46,3],[47,2],[50,2],[50,2],[54,0],[54,1],[54,2],[55,1],[55,2],[55,2],[57,3],[60,3],[63,1],[63,3],[65,1],[65,3],[65,3],[65,5],[65,2],[65,4],[65,4],[65,6],[67,3],[69,3],[69,3],[69,3],[72,0],[72,1],[75,1],[75,2],[74,1],[74,2],[74,2],[74,3],[76,2],[76,1],[76,1],[77,2],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[73,1],[73,1],[73,1],[81,4],[84,3],[87,4],[87,4],[82,6],[85,3],[88,6],[88,4],[88,6],[88,5],[83,4],[86,3],[89,4],[97,1],[97,3],[98,1],[98,2],[98,3],[98,3],[98,5],[99,4],[100,5],[100,4],[100,4],[100,4],[100,3],[100,3],[104,1],[104,3],[105,1],[105,2],[105,3],[105,3],[105,5],[106,2],[106,2],[106,1],[106,1],[94,1],[94,1],[48,0],[48,1],[107,3],[51,2],[51,3],[51,3],[110,3],[111,2],[111,2],[111,3],[111,3],[111,3],[114,3],[116,3],[116,3],[117,1],[117,3],[118,1],[118,3],[118,5],[118,3],[118,5],[119,6],[119,4],[119,4],[120,2],[120,2],[120,3],[120,4],[120,4],[120,5],[120,6],[120,6],[120,3],[120,4],[120,4],[122,1],[122,1],[49,0],[49,3],[52,3],[52,3],[127,0],[36,8],[23,4],[23,9],[23,3],[23,6],[23,7],[23,8],[23,8],[23,8],[131,0],[131,1],[133,3],[132,3],[134,2],[134,4],[135,3],[135,5],[135,5],[135,7],[14,2],[14,1],[14,1],[14,1],[5,1],[5,1],[5,1],[5,1],[141,5],[138,3],[138,3],[138,4],[138,5],[138,5],[138,6],[142,3],[143,5],[139,3],[139,4],[139,5],[139,5],[139,6],[148,0],[148,1],[144,4],[140,4],[140,5],[140,3],[140,4],[140,4],[6,4],[15,2],[15,4],[15,3],[15,4],[15,5],[15,5],[15,5],[152,1],[153,1],[155,1],[154,6],[156,2],[156,4],[156,4],[156,5],[156,6],[160,1],[160,3],[161,3],[159,0],[159,1],[8,1],[8,1],[8,1],[16,2],[166,3],[170,3],[170,3],[167,0],[168,0],[168,1],[168,4],[171,1],[171,4],[171,4],[171,7],[172,1],[172,1],[172,1],[174,1],[174,2],[174,1],[174,1],[174,1],[174,1],[177,1],[177,1],[177,1],[39,1],[39,1],[39,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[181,1],[101,1],[101,2],[93,1],[93,1],[264,1],[264,1],[37,1],[37,1],[265,3],[265,2],[266,2],[268,3],[268,2],[269,2],[27,1],[27,1],[270,1],[270,1],[271,0],[271,2],[273,2],[146,0],[146,1],[145,0],[145,2],[147,2],[38,0],[38,3],[41,2],[41,3],[276,0],[276,2],[276,2],[151,0],[151,1],[278,1],[277,4],[279,4],[282,5],[285,2],[285,3],[285,4],[285,5],[285,5],[285,5],[284,1],[284,1],[284,1],[284,1],[286,1],[286,1],[287,1],[287,1],[289,1],[289,1],[290,1],[290,1],[288,2],[66,1],[66,1],[291,0],[291,1],[292,1],[113,3],[115,3],[115,3],[293,1],[293,3],[294,3],[294,5],[295,3],[296,1],[296,3],[59,1],[59,3],[61,1],[61,3],[61,3],[53,1],[53,3],[56,1],[56,3],[56,3],[272,1],[274,1],[280,1],[280,3],[281,1],[281,3],[281,3],[281,5],[297,3],[298,3],[298,3],[298,3],[298,1],[102,1],[102,3],[102,2],[299,1],[299,3],[300,1],[300,3],[301,1],[301,2],[302,1],[302,2],[136,1],[136,3],[304,1],[303,1],[303,3],[305,3],[305,5],[306,1],[306,3],[307,1],[307,3],[307,5],[307,3],[70,1],[308,1],[308,1],[80,1],[80,1],[80,2],[80,2],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,2],[309,0],[309,3],[310,0],[310,3],[310,5],[121,1],[121,2],[121,2],[121,2],[121,2],[121,4],[121,4],[121,4],[121,6],[121,2],[121,3],[121,3],[121,3],[121,3],[121,3],[121,6],[121,6],[121,5],[121,5],[121,6],[121,5],[121,3],[121,3],[121,3],[121,3],[121,3],[121,2],[121,3],[121,2],[121,3],[124,1],[124,3],[124,2],[124,2],[124,2],[124,2],[124,2],[124,2],[124,2],[124,2],[124,3],[124,4],[124,5],[124,4],[124,4],[124,4],[124,6],[124,6],[124,2],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,4],[124,3],[124,6],[124,6],[124,5],[124,5],[124,6],[124,6],[124,6],[124,6],[124,5],[124,4],[124,5],[124,5],[124,5],[124,5],[124,4],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,2],[124,3],[124,2],[124,3],[124,2],[124,3],[124,2],[124,3],[124,3],[124,4],[124,3],[124,3],[124,3],[315,1],[315,3],[325,1],[325,3],[325,3],[325,5],[325,3],[325,5],[325,4],[325,3],[325,2],[325,2],[325,4],[162,1],[162,3],[311,1],[311,1],[311,1],[311,2],[311,2],[311,1],[319,1],[319,1],[319,2],[319,2],[319,1],[326,1],[326,3],[331,1],[334,1],[334,2],[334,2],[283,1],[330,1],[337,1],[337,1],[338,1],[335,1],[335,1],[341,1],[341,2],[341,3],[341,2],[342,2],[342,3],[342,4],[339,1],[339,1],[339,1],[340,1],[340,1],[343,1],[343,1],[312,0],[312,1],[344,1],[346,1],[345,1],[345,1],[347,1],[347,1],[349,2],[351,2],[351,2],[348,2],[348,2],[350,2],[350,2],[350,2],[354,1],[357,1],[356,1],[358,1],[360,0],[360,2],[361,2],[361,2],[362,0],[363,0],[313,3],[313,4],[320,3],[320,3],[314,2],[364,3],[365,1],[366,1],[367,1],[368,1],[369,1],[370,1],[371,1],[372,1],[373,1],[374,1],[375,1],[376,1],[377,1],[378,1],[355,0],[355,1],[355,1],[355,2],[355,2],[359,1],[359,1],[359,2],[359,2],[359,2],[379,4],[382,4],[382,4],[382,5],[382,7],[380,0],[380,1],[385,3],[383,2],[383,3],[383,3],[381,0],[381,2],[384,1],[384,3],[384,2],[387,0],[387,1],[390,5],[390,5],[389,2],[389,6],[389,5],[389,5],[389,5],[389,4],[392,0],[398,0],[399,3],[402,5],[402,4],[402,3],[402,3],[402,2],[391,1],[391,1],[393,0],[393,2],[393,2],[396,2],[396,2],[394,0],[394,3],[394,3],[397,2],[397,3],[397,3],[403,1],[403,1],[128,2],[128,3],[128,5],[129,2],[129,2],[129,4],[129,3],[129,3],[129,1],[129,4],[129,3],[404,3],[404,4],[406,3],[406,3],[406,4],[406,4],[406,4],[406,5],[406,6],[406,4],[410,0],[410,1],[410,1],[412,2],[414,2],[414,4],[414,3],[411,1],[411,3],[413,1],[413,2],[413,3],[413,3],[413,3],[413,4],[413,3],[413,3],[413,4],[413,4],[413,4],[413,5],[413,5],[420,2],[420,1],[421,2],[421,3],[421,2],[175,2],[408,2],[423,1],[423,3],[424,1],[424,3],[424,3],[424,5],[425,5],[426,2],[426,5],[426,5],[415,2],[417,2],[417,2],[427,1],[427,3],[428,1],[428,3],[428,3],[428,5],[428,3],[429,0],[429,1],[430,3],[432,3],[432,3],[432,2],[434,0],[434,1],[434,3],[434,3],[435,1],[435,3],[435,3],[435,5],[435,3],[436,1],[436,1],[431,1],[431,3],[433,1],[433,2],[433,3],[433,3],[433,3],[433,4],[433,5],[437,1],[437,2],[437,1],[438,0],[438,1],[439,2],[440,2],[440,2],[418,0],[418,1],[418,1],[352,3],[352,4],[441,1],[441,2],[444,3],[444,1],[444,3],[444,3],[444,3],[353,1],[353,2],[353,2],[353,3],[442,2],[442,2],[442,3],[442,2],[442,1],[442,3],[442,2],[442,3],[442,3],[442,2],[442,3],[442,2],[442,3],[442,3],[442,2],[445,2],[445,3],[445,3],[445,2],[445,3],[445,3],[445,3],[445,3],[445,2],[445,3],[445,3],[445,3],[445,3],[445,2],[443,0],[443,2],[447,1],[447,3],[446,2],[446,2],[448,0],[448,1],[449,2],[449,4],[449,2],[449,4],[450,2],[451,0],[451,1],[386,3],[388,3],[388,2],[452,1],[452,3],[453,1],[453,2],[453,3],[453,4],[453,5],[454,2],[455,2],[455,2],[456,0],[456,1],[456,1],[416,5],[419,5],[419,5],[419,5],[419,5],[419,5],[419,6],[419,6],[419,6],[419,6],[419,6],[405,0],[405,1],[407,1],[460,1],[460,2],[461,1],[461,2],[461,2],[461,3],[462,4],[463,3],[463,4],[463,4],[457,0],[457,1],[459,2],[458,2],[458,2],[464,1],[465,1],[9,2],[9,4],[466,1],[466,3],[467,1],[467,1],[467,2],[467,1],[467,1],[467,1],[467,1],[329,2],[329,2],[329,1],[333,1],[333,2],[333,1],[333,2],[333,2],[333,2],[333,1],[468,1],[468,1],[468,1],[473,1],[473,1],[473,1],[478,4],[478,5],[481,5],[481,6],[481,5],[484,1],[484,1],[484,1],[484,1],[484,1],[484,1],[484,1],[484,1],[479,4],[479,3],[479,5],[482,5],[482,6],[482,5],[480,5],[480,3],[483,5],[483,6],[483,5],[470,3],[470,4],[475,4],[475,5],[475,4],[328,1],[328,1],[328,1],[328,1],[472,6],[472,3],[477,6],[477,5],[477,4],[477,6],[477,5],[477,4],[477,6],[477,5],[477,6],[477,5],[487,2],[487,2],[488,2],[488,2],[327,2],[327,3],[332,3],[332,4],[332,3],[485,1],[485,3],[486,1],[486,3],[486,3],[486,5],[486,3],[486,5],[486,4],[486,3],[486,2],[486,2],[486,4],[469,0],[469,1],[474,1],[471,2],[471,2],[476,2],[11,1],[11,1],[11,1],[11,1],[11,1],[19,2],[321,3],[321,3],[321,3],[317,2],[317,2],[317,2],[322,2],[322,2],[322,2],[322,2],[322,2],[322,2],[318,2],[318,4],[323,2],[323,4],[323,4],[323,3],[323,4],[323,3],[323,4],[323,4],[323,3],[323,4],[323,3],[324,1],[324,1],[491,1],[491,2],[492,1],[492,2],[492,3],[492,3],[492,2],[493,4],[494,2],[494,3],[494,4],[494,4],[494,3],[494,3],[494,4],[494,2],[494,3],[494,2],[494,3],[494,3],[494,4],[494,3],[494,4],[494,4],[494,5],[494,4],[494,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 11:

     parser.suggestSetOptions();
   
break;
case 13: case 197:

     parser.suggestKeywords(['DATABASE', 'ROLE', 'SCHEMA', 'TABLE', 'VIEW']);
   
break;
case 30:

     parser.addNewDatabaseLocation(_$[$0-1], [{ name: $$[$0-1] }]);
   
break;
case 31: case 41:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 33:

     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
     parser.addNewDatabaseLocation(_$[$0], [{ name: $$[$0] }]);
   
break;
case 34:

     parser.addNewDatabaseLocation(_$[$0], [{ name: $$[$0] }]);
   
break;
case 35:

     parser.addNewDatabaseLocation(_$[$0-2], [{ name: $$[$0-2] }]);
   
break;
case 36:

     if (!$$[$0]) {
       parser.suggestKeywords(['COMMENT']);
     }
   
break;
case 47:

     var keywords = [];
     if (!$$[$0-2] && !$$[$0-1]) {
       keywords.push({ value: 'LIKE', weight: 1 });
     } else {
       if (!$$[$0-1]) {
         keywords.push({ value: 'PARTITIONED BY', weight: 12 });
       }
       keywords.push({ value: 'AS', weight: 1 });
     }

     if (keywords.length > 0) {
       parser.suggestKeywords(keywords);
     }
   
break;
case 48:

     parser.addNewTableLocation(_$[$0-1], $$[$0-1], $$[$0]);
     this.$ = $$[$0];
   
break;
case 53:
this.$ = [];
break;
case 55: case 462:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 57: case 193: case 195: case 395: case 398: case 484: case 537: case 723: case 802: case 842: case 1090: case 1093:
this.$ = $$[$0-1];
break;
case 59: case 852:
this.$ = [$$[$0]];
break;
case 60:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 65: case 67:

     parser.checkForKeywords($$[$0-1]);
   
break;
case 66: case 68:

     parser.checkForKeywords($$[$0-3]);
   
break;
case 69:

     this.$ = $$[$0-2];
     this.$.type = $$[$0-1];
     var keywords = [];
     if (!$$[$0]['comment']) {
       keywords.push('COMMENT');
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 70: case 97: case 103: case 104: case 117: case 120: case 129: case 131:

     parser.suggestKeywords(parser.getColumnDataTypeKeywords());
   
break;
case 73:
this.$ = {};
break;
case 75:

     this.$ = {};
     this.$[$$[$0]] = true;
   
break;
case 76:

     $$[$0-1][$$[$0]] = true;
   
break;
case 81: case 82:
this.$ = 'null';
break;
case 83:
this.$ = 'comment';
break;
case 84:

     parser.suggestKeywords(['NULL']);
   
break;
case 102:

     parser.suggestKeywords(parser.getTypeKeywords());
   
break;
case 116: case 119:

     parser.suggestKeywords(['COMMENT']);
   
break;
case 138: case 761:

     parser.suggestKeywords(['BY']);
   
break;
case 139:

     parser.suggestKeywords(['RANGE']);
   
break;
case 148: case 153: case 154:

     parser.suggestKeywords(['PARTITION']);
   
break;
case 160:

     parser.suggestKeywords(['VALUE', 'VALUES']);
   
break;
case 161:

     if ($$[$0].endsWithLessThanOrEqual) {
      parser.suggestKeywords(['VALUES']);
     }
   
break;
case 162: case 165: case 168:

     parser.suggestKeywords(['<', '<=']);
   
break;
case 163: case 427: case 430:

     parser.suggestKeywords(['VALUES']);
   
break;
case 166: case 169:

     parser.suggestFunctions();
   
break;
case 175: case 184: case 268: case 726: case 860:

     parser.suggestKeywords(['SELECT']);
   
break;
case 177:

     parser.commitLocations();
   
break;
case 179:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
     parser.suggestDatabases({ appendDot: true });
   
break;
case 180:

     if (!$$[$0-6]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 183:

     var keywords = [{value: 'AS', weight: 1 }];
     if (!$$[$0-1]) {
       keywords.push({ value: 'COMMENT', weight: 3 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 190:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['COMMENT']);
     }
   
break;
case 194: case 196:
this.$ = $$[$0-3];
break;
case 208:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestDatabases();
   
break;
case 209:

     parser.suggestKeywords(['CASCADE']);
   
break;
case 211:

     if (!$$[$0-3]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 213: case 232:

     parser.addTablePrimary($$[$0-1]);
   
break;
case 215:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestTables({ onlyTables: true });
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 216:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyTables = true;
     }
   
break;
case 218:

     parser.addTablePrimary($$[$0-2]);
     if (!$$[$0-1]) {
       parser.suggestKeywords(['PURGE']);
     }
   
break;
case 221: case 225: case 227:

     parser.addTablePrimary($$[$0]);
   
break;
case 222:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestTables({ onlyViews: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 223:

     parser.addTablePrimary($$[$0]);
     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 226:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyViews = true;
     }
   
break;
case 228:

     parser.suggestKeywords(['TABLE']);
   
break;
case 229:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 233:

     parser.addTablePrimary($$[$0-1]);
     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 238:

     $$[$0-2].owner = 'insert';
     parser.addTablePrimary($$[$0-2]);
   
break;
case 239:

     parser.suggestKeywords(['INTO']);
   
break;
case 240:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['TABLE']);
     }
     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 242:

     $$[$0-1].owner = 'insert';
     parser.addTablePrimary($$[$0-1]);
     parser.suggestKeywords(['VALUES']);
   
break;
case 252:

     parser.suggestKeywords(['TABLES', 'STREAMS', 'TOPICS']);
   
break;
case 254: case 255:

     return parser.yy.result;
   
break;
case 256:

     parser.prepareNewStatement();
   
break;
case 258: case 260: case 262:

     parser.addStatementLocation(_$[$0]);
   
break;
case 261: case 263:

     parser.addStatementLocation(_$[$0-3]);
   
break;
case 267:

     parser.suggestDdlAndDmlKeywords();
   
break;
case 396: case 399: case 485:
this.$ = '';
break;
case 411: case 414:

     parser.yy.correlatedSubQuery = false;
   
break;
case 412: case 416:

     parser.suggestKeywords(['EXISTS']);
   
break;
case 415:

     parser.suggestKeywords(['NOT EXISTS']);
   
break;
case 426: case 428: case 429: case 431:

     parser.suggestKeywords(['<', '<=', '<>', '=', '>', '>=']);
   
break;
case 452: case 455: case 456: case 481: case 482: case 503: case 506: case 887:

     parser.suggestColumns();
   
break;
case 460: case 486:

     parser.addTableLocation(_$[$0], [ { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0] } ] };
   
break;
case 461: case 487:

     parser.addDatabaseLocation(_$[$0-2], [ { name: $$[$0-2] } ]);
     parser.addTableLocation(_$[$0], [ { name: $$[$0-2] }, { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0-2] }, { name: $$[$0] } ] };
   
break;
case 463: case 468:

     parser.suggestDatabases();
     this.$ = { identifierChain: [{ name: $$[$0-2] }] };
   
break;
case 464: case 489:

     parser.suggestTablesOrColumns($$[$0-2]);
   
break;
case 465:
this.$ = [{ name: $$[$0] }];
break;
case 466:
this.$ = [{ name: $$[$0-2] }, { name: $$[$0-1] }];
break;
case 467:

     parser.suggestDatabases({ appendDot: true });
   
break;
case 471:

     parser.suggestDatabases();
   
break;
case 480: case 719: case 762: case 892: case 893: case 899: case 900:

     parser.valueExpressionSuggest();
   
break;
case 488:

     parser.suggestTables();
     parser.suggestDatabases({ prependDot: true });
   
break;
case 491:
this.$ = { identifierChain: $$[$0-1].identifierChain, alias: $$[$0] };
break;
case 494:

     parser.yy.locations[parser.yy.locations.length - 1].type = 'column';
   
break;
case 495: case 671:

     parser.addAsteriskLocation(_$[$0], $$[$0-2].concat({ asterisk: true }));
   
break;
case 497:

     this.$ = [ $$[$0].identifier ];
     parser.yy.firstChainLocation = parser.addUnknownLocation($$[$0].location, [ $$[$0].identifier ]);
   
break;
case 498:

     if (parser.yy.firstChainLocation) {
       parser.yy.firstChainLocation.firstInChain = true;
       delete parser.yy.firstChainLocation;
     }
     $$[$0-2].push($$[$0].identifier);
     parser.addUnknownLocation($$[$0].location, $$[$0-2].concat());
   
break;
case 499:

     parser.suggestColumns({
       identifierChain: $$[$0-2]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 500:

     parser.suggestColumns({
       identifierChain: $$[$0-4]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 501:
this.$ = [ $$[$0].identifier ];
break;
case 502:

     $$[$0-2].push($$[$0].identifier);
   
break;
case 504:

     parser.suggestColumns({ identifierChain: $$[$0-2] });
   
break;
case 505:

     parser.suggestColumns({ identifierChain: $$[$0-4] });
   
break;
case 507:
this.$ = { identifier: { name: $$[$0] }, location: _$[$0] };
break;
case 528: case 529:

     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 530: case 555:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 531:

     // verifyType($$[$0], 'NUMBER');
     this.$ = $$[$0];
     $$[$0].types = ['NUMBER'];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 532: case 533: case 534:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 535:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 536:

     this.$ = { types: [ 'BOOLEAN' ] };
     // clear correlated flag after completed sub-query (set by lexer)
     parser.yy.correlatedSubQuery = false;
   
break;
case 538: case 539: case 540: case 541:

     parser.addColRefToVariableIfExists($$[$0-2], $$[$0]);
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 542: case 543: case 544: case 545: case 575: case 633: case 634:
this.$ = { types: [ 'BOOLEAN' ] };
break;
case 546:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 547:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 548: case 549:

     // verifyType($$[$0-2], 'BOOLEAN');
     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 550: case 551: case 552:

     // verifyType($$[$0-2], 'NUMBER');
     // verifyType($$[$0], 'NUMBER');
     this.$ = { types: [ 'NUMBER' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 553:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 554:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 556:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 558:

     parser.suggestKeywords(['BETWEEN', 'EXISTS', 'IN', 'LIKE', 'REGEXP', 'RLIKE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 559: case 561:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
break;
case 560:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 562:

     parser.suggestFunctions({ types: [ 'BOOLEAN' ] });
     parser.suggestColumns({ types: [ 'BOOLEAN' ] });
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 563:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0].suggestFilters };
break;
case 564:

     parser.suggestFunctions();
     parser.suggestColumns();
     this.$ = { types: [ 'T' ] };
   
break;
case 565:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 566:

     parser.suggestFunctions({ types: [ 'NUMBER' ] });
     parser.suggestColumns({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ] };
   
break;
case 567:

     parser.suggestKeywords(['FALSE', 'NOT NULL', 'NOT TRUE', 'NOT FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 568:

     parser.suggestKeywords(['FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 569:

     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 570: case 571: case 572:

     parser.suggestKeywords(['NOT']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 573:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-3] ? 'IS NOT DISTINCT FROM' : 'IS DISTINCT FROM');
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 574:

     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 576:

     this.$ = $$[$0-1];
   
break;
case 577:

     parser.valueExpressionSuggest();
     this.$ = { types: ['T'], typeSet: true };
   
break;
case 578:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 579: case 580: case 581:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 582: case 583: case 584: case 585:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0]);
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 586: case 588:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 587:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ] , typeSet: true, endsWithLessThanOrEqual: true };
   
break;
case 589:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, endsWithLessThanOrEqual: $$[$0-1] === '<='  };
   
break;
case 590: case 591: case 592: case 593:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 594:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-3]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 595:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 596: case 597:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
break;
case 598: case 599:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
break;
case 600:

     if ($$[$0-2].types[0] === $$[$0].types[0] && !$$[$0-5].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
   
break;
case 601:

     if ($$[$0-5].types[0] === $$[$0].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 602:

     if ($$[$0-5].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 603:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 604: case 610:

     parser.suggestValueExpressionKeywords($$[$0-1], ['AND']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 605:

     parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 606:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-4].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
   
break;
case 607:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 608:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 609:

     parser.valueExpressionSuggest($$[$0-4], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-4]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 611:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 612: case 614: case 616: case 618:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, suggestFilters: true };
   
break;
case 613: case 617:

     parser.addColRefIfExists($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 615: case 619:

     parser.addColRefIfExists($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 620: case 621:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 622: case 623: case 624:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 625: case 626: case 627:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 628: case 629: case 630:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 631:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 632:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
break;
case 635:

     parser.valueExpressionSuggest(undefined, $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 636:

     parser.valueExpressionSuggest(undefined, $$[$0-1] + ' ' + $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 637: case 639: case 705: case 760: case 839: case 849: case 850: case 866: case 890: case 966: case 970: case 1008: case 1152:
this.$ = $$[$0];
break;
case 638:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 640:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 641:

      this.$ = $$[$0];
      this.$.suggestFilters = $$[$0-1].suggestFilters;
    
break;
case 642:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 643: case 1074: case 1079: case 1080:
this.$ = { types: [ 'T' ] };
break;
case 644: case 646:

     $$[$0].position = 1;
   
break;
case 645:

     $$[$0].position = $$[$0-2].position + 1;
     this.$ = $$[$0];
   
break;
case 647:

     $$[$0-2].position += 1;
   
break;
case 648:

     $$[$0-2].position = 1;
   
break;
case 649:

     $$[$0-4].position += 1;
   
break;
case 650:

     parser.valueExpressionSuggest();
     $$[$0-2].position += 1;
   
break;
case 651:

     parser.valueExpressionSuggest();
     $$[$0-4].position += 1;
   
break;
case 652:

     parser.suggestValueExpressionKeywords($$[$0-3]);
   
break;
case 653: case 654:

     parser.valueExpressionSuggest();
     this.$ = { cursorAtStart : true, position: 1 };
   
break;
case 655: case 656:

     parser.valueExpressionSuggest();
     this.$ = { position: 2 };
   
break;
case 660:
this.$ = { types: ['COLREF'], columnReference: $$[$0].chain };
break;
case 661:
this.$ = { types: [ 'NULL' ], text: $$[$0] };
break;
case 662:

     // We need to handle arbitrary UDFs here instead of inside UserDefinedFunction or there will be a conflict
     // with columnReference for functions like: db.udf(foo)
     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     if ($$[$0-1].lastLoc && $$[$0-1].lastLoc.location) {
       $$[$0-1].lastLoc.type = 'function';
       $$[$0-1].lastLoc.function = fn;
       $$[$0-1].lastLoc.location = {
         first_line: $$[$0-1].lastLoc.location.first_line,
         last_line: $$[$0-1].lastLoc.location.last_line,
         first_column: $$[$0-1].lastLoc.location.first_column,
         last_column: $$[$0-1].lastLoc.location.last_column - 1
       }
       if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
          $$[$0-1].firstLoc.type = 'database';
       } else {
         delete $$[$0-1].lastLoc.identifierChain;
       }
     }
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: fn, expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: fn, types: ['UDFREF'] }
     }
   
break;
case 663:

    parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
    if ($$[$0].expressions && $$[$0].expressions.length) {
      this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
    } else {
      this.$ = { function: $$[$0-1], types: ['UDFREF'] }
    }
  
break;
case 666:

     if ($$[$0].suggestKeywords) {
       this.$ = { types: ['COLREF'], columnReference: $$[$0], suggestKeywords: $$[$0].suggestKeywords };
     } else {
       this.$ = { types: ['COLREF'], columnReference: $$[$0] };
     }
   
break;
case 667:

     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     $$[$0-1].lastLoc.type = 'function';
     $$[$0-1].lastLoc.function = fn;
     $$[$0-1].lastLoc.location = {
       first_line: $$[$0-1].lastLoc.location.first_line,
       last_line: $$[$0-1].lastLoc.location.last_line,
       first_column: $$[$0-1].lastLoc.location.first_column,
       last_column: $$[$0-1].lastLoc.location.last_column - 1
     }
     if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
        $$[$0-1].firstLoc.type = 'database';
     } else {
       delete $$[$0-1].lastLoc.identifierChain;
     }
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions(fn, $$[$0].activePosition);
     }
     this.$ = { function: fn, types: ['UDFREF'] };
   
break;
case 668: case 1087: case 1088:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions($$[$0-1], $$[$0].activePosition);
     }
     this.$ = { function: $$[$0-1], types: ['UDFREF'] };
   
break;
case 670:

     var lastLoc = parser.yy.locations[parser.yy.locations.length - 1];
     if (lastLoc.type !== 'variable') {
       lastLoc.type = 'column';
     }
     // used for function references with db prefix
     var firstLoc = parser.yy.locations[parser.yy.locations.length - $$[$0].length];
     this.$ = { chain: $$[$0], firstLoc: firstLoc, lastLoc: lastLoc }
   
break;
case 677:

     parser.suggestValues($$[$0]);
   
break;
case 678:
this.$ = { types: [ 'NUMBER' ], text: $$[$0] };
break;
case 684: case 686: case 687:
this.$ = $$[$0-1] + $$[$0];
break;
case 685: case 688:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 689:
this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 690:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: "'" + $$[$0] + "'" }
     } else {
       this.$ = { types: [ 'STRING' ] }
     }
   
break;
case 691:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: '"' + $$[$0] + '"' }
     } else {
       this.$ = { types: [ 'STRING' ], text: '"' + $$[$0] + '"' }
     }
   
break;
case 692:
this.$ = { types: [ 'BOOLEAN' ], text: $$[$0] };
break;
case 693:

    this.$ = { partialQuote: '\'', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 694:

    this.$ = { partialQuote: '"', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 701:

     this.$ = $$[$0];

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         this.$.suggestJoins = {
           prependJoin: true,
           tables: tables
         };
       }
      }
   
break;
case 708:

     this.$ = {
       primary: $$[$0-1]
     }
     if ($$[$0-1].identifierChain) {
       if ($$[$0]) {
         $$[$0-1].alias = $$[$0].alias
         parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
       }
       parser.addTablePrimary($$[$0-1]);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     } else if ($$[$0].suggestKeywords) {
       keywords = $$[$0].suggestKeywords;
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 709:

     this.$ = {
       primary: $$[$0-1]
     };

     if ($$[$0]) {
       this.$.primary.alias = $$[$0].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 710:

     if ($$[$0]) {
       parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }
   
break;
case 711:

     if ($$[$0]) {
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias);
     }
   
break;
case 721:

     parser.pushQueryState();
   
break;
case 722:

     parser.popQueryState();
   
break;
case 724:

     if ($$[$0-1]) {
       $$[$0-2].alias = $$[$0-1].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0-1].alias });
       parser.addSubqueryAliasLocation($$[$0-1].location, $$[$0-1].alias, $$[$0-2].identifierChain);
     }
     this.$ = $$[$0-2];
   
break;
case 727:

     var subQuery = parser.getSubQuery($$[$0]);
     subQuery.columns.forEach(function (column) {
       parser.expandIdentifierChain({ wrapper: column });
       delete column.linked;
     });
     parser.popQueryState(subQuery);
     this.$ = subQuery;
   
break;
case 744: case 745: case 746: case 747:
this.$ = { alias: $$[$0], location: _$[$0] };
break;
case 754: case 755:

     if (parser.yy.result.suggestFunctions) {
       parser.suggestAggregateFunctions();
     }
   
break;
case 756:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords([{ value: 'PARTITION BY', weight: 2 }, { value: 'ORDER BY', weight: 1 }]);
     } else if (!$$[$0-2]) {
       parser.suggestKeywords(['PARTITION BY']);
     }
   
break;
case 757:

      if (!$$[$0-1]) {
        parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ORDER BY', weight: 2 }]);
      } else {
        parser.suggestValueExpressionKeywords($$[$0-3]);
      }
    
break;
case 766:

      // Only allowed in last order by
      delete parser.yy.result.suggestAnalyticFunctions;
    
break;
case 767:

      var keywords = [];
      if ($$[$0-2].suggestKeywords) {
        keywords = parser.createWeightedKeywords($$[$0-2].suggestKeywords, 2);
      }
      if (!$$[$0]) {
        keywords = keywords.concat([{ value: 'RANGE BETWEEN', weight: 1 }, { value: 'ROWS BETWEEN', weight: 1 }]);
      }
      parser.suggestKeywords(keywords);
    
break;
case 773:

     parser.suggestKeywords(['BETWEEN']);
   
break;
case 774:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED PRECEDING']);
     } else if (!$$[$0-1]) {
       parser.suggestKeywords(['AND']);
     }
   
break;
case 779:

    lexer.popState();
  
break;
case 780:

    lexer.begin('hdfs');
  
break;
case 782:

      parser.suggestHdfs({ path: $$[$0-3] });
    
break;
case 783:

     parser.suggestHdfs({ path: $$[$0-2] });
   
break;
case 784:

      parser.suggestHdfs({ path: $$[$0-1] });
    
break;
case 785:

     parser.suggestHdfs({ path: '' });
   
break;
case 786:

      parser.suggestHdfs({ path: '' });
    
break;
case 792:

     parser.suggestKeywords(['PRECEDING']);
   
break;
case 793: case 798:

     parser.suggestKeywords(['ROW']);
   
break;
case 797:

     parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED FOLLOWING']);
   
break;
case 799:

     parser.suggestKeywords(['FOLLOWING']);
   
break;
case 804: case 844:
this.$ = $$[$0-2];
break;
case 807:

     parser.addCommonTableExpressions($$[$0-3]);
   
break;
case 808: case 809: case 855:

     parser.addCommonTableExpressions($$[$0-2]);
   
break;
case 813:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     this.$ = { selectList: $$[$0] };
   
break;
case 814:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     this.$ = { selectList: $$[$0-1], tableExpression: $$[$0] }
   
break;
case 815:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     if ($$[$0].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-1]) {
         keywords.push({ value: 'ALL', weight: 2 });
         keywords.push({ value: 'DISTINCT', weight: 2 });
       }
       parser.suggestKeywords(keywords);
     } else {
       parser.checkForSelectListKeywords($$[$0]);
     }
     if ($$[$0].suggestFunctions) {
       parser.suggestFunctions();
     }
     if ($$[$0].suggestColumns) {
       parser.suggestColumns({ identifierChain: [], source: 'select' });
     }
     if ($$[$0].suggestTables) {
       parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     }
     if ($$[$0].suggestDatabases) {
       parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
     }
     if ($$[$0].suggestAggregateFunctions && (!$$[$0-1] || $$[$0-1] === 'ALL')) {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
   
break;
case 816:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-1] || $$[$0-1] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-1]) {
       keywords.push({ value: 'ALL', weight: 2 });
       keywords.push({ value: 'DISTINCT', weight: 2 });
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 817:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
   
break;
case 818:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.selectListNoTableSuggest($$[$0-1], $$[$0-2]);
     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'select';
     }
   
break;
case 819:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2] || $$[$0-2] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-2]) {
       keywords.push({ value: 'ALL', weight: 2 });
       keywords.push({ value: 'DISTINCT', weight: 2 });
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 820:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]), _$[$0-2]);
     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 821:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]), _$[$0-3]);
     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 822:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.checkForSelectListKeywords($$[$0-1]);
     var keywords = ['FROM'];
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.suggestTables({ prependFrom: true });
     parser.suggestDatabases({ prependFrom: true, appendDot: true });
   
break;
case 826: case 827:

     parser.addClauseLocation('whereClause', _$[$0-1], $$[$0].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0].limitClausePreceding || _$[$0-1], $$[$0].limitClauseLocation);
   
break;
case 828:

     var keywords = [];

     parser.addClauseLocation('whereClause', _$[$0-3], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-2].limitClausePreceding || _$[$0-3], $$[$0-2].limitClauseLocation);

     if ($$[$0-3]) {
       if (typeof $$[$0-3].tableReferenceList.hasJoinCondition !== 'undefined' && !$$[$0-3].tableReferenceList.hasJoinCondition) {
         keywords.push({ value: 'ON', weight: 3 });
       }
       if ($$[$0-3].suggestKeywords) {
         keywords = parser.createWeightedKeywords($$[$0-3].suggestKeywords, 3);
       }
       if ($$[$0-3].tableReferenceList.suggestJoinConditions) {
         parser.suggestJoinConditions($$[$0-3].tableReferenceList.suggestJoinConditions);
       }
       if ($$[$0-3].tableReferenceList.suggestJoins) {
         parser.suggestJoins($$[$0-3].tableReferenceList.suggestJoins);
       }
       if ($$[$0-3].tableReferenceList.suggestKeywords) {
         keywords = keywords.concat(parser.createWeightedKeywords($$[$0-3].tableReferenceList.suggestKeywords, 3));
       }

       // Lower the weights for 'TABLESAMPLE'
       keywords.forEach(function (keyword) {
         if (keyword.value === 'TABLESAMPLE') {
           keyword.weight = 1.1;
         }
       });

       if ($$[$0-3].tableReferenceList.types) {
         var veKeywords = parser.getValueExpressionKeywords($$[$0-3].tableReferenceList);
         keywords = keywords.concat(veKeywords.suggestKeywords);
         if (veKeywords.suggestColRefKeywords) {
           parser.suggestColRefKeywords(veKeywords.suggestColRefKeywords);
           parser.addColRefIfExists($$[$0-3].tableReferenceList);
         }
       }
     }

     if ($$[$0-1].empty && $$[$0] && $$[$0].joinType.toUpperCase() === 'JOIN') {
       keywords = keywords.concat(['FULL', 'FULL OUTER', 'INNER', 'LEFT', 'LEFT OUTER', 'RIGHT', 'RIGHT OUTER']);
       parser.suggestKeywords(keywords);
       return;
     }

     if ($$[$0-1].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].suggestFilters) {
       parser.suggestFilters($$[$0-1].suggestFilters);
     }
     if ($$[$0-1].suggestGroupBys) {
       parser.suggestGroupBys($$[$0-1].suggestGroupBys);
     }
     if ($$[$0-1].suggestOrderBys) {
       parser.suggestOrderBys($$[$0-1].suggestOrderBys);
     }

     if ($$[$0-1].empty) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }

     keywords = keywords.concat([
       { value: 'FULL JOIN', weight: 1 },
       { value: 'FULL OUTER JOIN', weight: 1 },
       { value: 'INNER JOIN', weight: 1 },
       { value: 'JOIN', weight: 1 },
       { value: 'LEFT JOIN', weight: 1 },
       { value: 'LEFT OUTER JOIN', weight: 1 },
       { value: 'RIGHT JOIN', weight: 1 },
       { value: 'RIGHT OUTER JOIN', weight: 1 }
     ]);
     parser.suggestKeywords(keywords);
  
break;
case 829:

     // A couple of things are going on here:
     // - If there are no SelectConditions (WHERE, GROUP BY, etc.) we should suggest complete join options
     // - If there's an OptionalJoin at the end, i.e. 'SELECT * FROM foo | JOIN ...' we should suggest
     //   different join types
     // - The FromClause could end with a valueExpression, in which case we should suggest keywords like '='
     //   or 'AND' based on type

     if (!$$[$0-1]) {
       parser.addClauseLocation('whereClause', _$[$0-2]);
       parser.addClauseLocation('limitClause', _$[$0-2]);
       return;
     }
     parser.addClauseLocation('whereClause', _$[$0-2], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-1].limitClausePreceding || _$[$0-2], $$[$0-1].limitClauseLocation);
     var keywords = [];

     if ($$[$0-1].suggestColRefKeywords) {
       parser.suggestColRefKeywords($$[$0-1].suggestColRefKeywords);
       parser.addColRefIfExists($$[$0-1]);
     }

     if ($$[$0-1].suggestKeywords && $$[$0-1].suggestKeywords.length) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].cursorAtEnd) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 830:
this.$ = [ $$[$0] ];
break;
case 831:

     $$[$0-2].push($$[$0]);
   
break;
case 833: case 834:

     this.$ = { cursorAtStart : true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 836:

     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 837:

     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 838:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestTables: true, suggestDatabases: true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 840: case 841: case 843:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true,  };
   
break;
case 845:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
       this.$ = { valueExpression: $$[$0-1], alias: $$[$0].alias };
       if (!parser.yy.selectListAliases) {
         parser.yy.selectListAliases = [];
       }
       parser.yy.selectListAliases.push($$[$0-1].function && $$[$0-1].types && $$[$0-1].types.length && $$[$0-1].types[0] === 'UDFREF' ? { name: $$[$0].alias, udfRef: $$[$0-1].function, types: $$[$0-1].types } : { name: $$[$0].alias, types: $$[$0-1].types || ['T'] });
     } else {
       this.$ = { valueExpression: $$[$0-1] }
     }
   
break;
case 846:

     parser.addAsteriskLocation(_$[$0], [{ asterisk: true }]);
     this.$ = { asterisk: true }
   
break;
case 847:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
     }
   
break;
case 848:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.addColumnAliasLocation(_$[$0], $$[$0], _$[$0-2]);
     this.$ = { suggestAggregateFunctions: true };
   
break;
case 853:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 857:

     parser.addCommonTableExpressions($$[$0-4]);
   
break;
case 858:

     parser.addCteAliasLocation(_$[$0-4], $$[$0-4]);
     $$[$0-1].alias = $$[$0-4];
     this.$ = $$[$0-1];
   
break;
case 859:

     parser.suggestKeywords(['AS']);
   
break;
case 862:

     this.$ = { tableReferenceList : $$[$0] }
   
break;
case 863: case 871:

       parser.suggestTables();
       parser.suggestDatabases({ appendDot: true });
   
break;
case 874:

     this.$ = { valueExpression: $$[$0] };
   
break;
case 875: case 977:

     parser.suggestSelectListAliases();
   
break;
case 876:

     parser.valueExpressionSuggest();
     parser.suggestSelectListAliases();
     parser.suggestGroupBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 877:

     parser.suggestKeywords(['BY']);
     parser.suggestGroupBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 904:

     parser.valueExpressionSuggest();
     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 905:

     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 909:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-2];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
        parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 910:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-3];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
       parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 911:
this.$ = { joinType: $$[$0] };
break;
case 912:
this.$ = { joinType: $$[$0-1] };
break;
case 913:

     if ($$[$0-2].suggestKeywords) {
       parser.suggestKeywords($$[$0-2].suggestKeywords);
     }
   
break;
case 914:

     if ($$[$0].suggestKeywords) {
       parser.suggestKeywords($$[$0].suggestKeywords);
     }
   
break;
case 917:

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         parser.suggestJoins({
           prependJoin: false,
           joinType: $$[$0-2],
           tables: tables
         })
       }
     }
     parser.suggestTables();
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 922:
this.$ = 'CROSS JOIN';
break;
case 923:
this.$ = 'FULL JOIN';
break;
case 924:
this.$ = 'FULL OUTER JOIN';
break;
case 925:
this.$ = 'INNER JOIN';
break;
case 926:
this.$ = 'JOIN';
break;
case 927:
this.$ = 'LEFT INNER JOIN';
break;
case 928:
this.$ = 'LEFT JOIN';
break;
case 929:
this.$ = 'LEFT OUTER JOIN';
break;
case 930:
this.$ = 'LEFT SEMI JOIN';
break;
case 931:
this.$ = 'OUTER JOIN';
break;
case 932: case 934:
this.$ = 'RIGHT OUTER JOIN';
break;
case 933:
this.$ = 'RIGHT JOIN';
break;
case 935:
this.$ = 'RIGHT SEMI JOIN';
break;
case 936:
this.$ = 'SEMI JOIN';
break;
case 937: case 939: case 940: case 942: case 943: case 944: case 945: case 947: case 948: case 949: case 950:
this.$ = { suggestKeywords: ['JOIN'] };
break;
case 938: case 941: case 946:
this.$ = { suggestKeywords: ['OUTER'] };
break;
case 951:
this.$ = { noJoinCondition: true, suggestKeywords: ['ON'] };
break;
case 952:
this.$ = { valueExpression: $$[$0] };
break;
case 956:

     parser.valueExpressionSuggest();
     parser.suggestJoinConditions({ prependOn: false });
   
break;
case 963:

     parser.suggestKeywords([{ value: '10', weight: 10000 }, { value: '100', weight: 10000 }, { value: '1000', weight: 10000 }, { value: '5000', weight: 10000 }, { value: '10000', weight: 10000 }])
   
break;
case 967:

     if ($$[$0].emptyOrderBy) {
       parser.suggestOrderBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 968:

     parser.suggestKeywords(['BY']);
     parser.suggestOrderBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 972:

     this.$ = { emptyOrderBy: false }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 973: case 974: case 975:
this.$ = { emptyOrderBy: false };
break;
case 976:
this.$ = parser.mergeSuggestKeywords($$[$0]);
break;
case 978:

     this.$ = { emptyOrderBy: true }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 979:
this.$ = { suggestKeywords: ['ASC', 'DESC'] };;
break;
case 982:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'WHERE', weight: 7 }, { value: 'GROUP BY', weight: 6 }, { value: 'HAVING', weight: 5 }, { value: 'ORDER BY', weight: 4 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true, true]);

     if (keywords.length > 0) {
       this.$ = { suggestKeywords: keywords, empty: !$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0] };
     } else {
       this.$ = {};
     }

     this.$.whereClauseLocation = $$[$0-4] ? _$[$0-4] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;

     if (!$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestFilters = { prefix: 'WHERE', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestGroupBys = { prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-1] && !$$[$0]) {
       this.$.suggestOrderBys = { prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
   
break;
case 983:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'where';
     }
   
break;
case 984:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'group by';
     }
   
break;
case 986:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'order by';
     }
   
break;
case 988:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'GROUP BY', weight: 8 }, { value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true]);
     if ($$[$0-5].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-5].suggestKeywords, 1));
     }
     this.$ = parser.getValueExpressionKeywords($$[$0-5], keywords);
     this.$.cursorAtEnd = !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if ($$[$0-5].columnReference) {
       this.$.columnReference = $$[$0-5].columnReference;
     }
     if (!$$[$0-3]) {
       parser.suggestGroupBys({ prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 989:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true]);
     if ($$[$0-4].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-4].suggestKeywords, 8));
     }
     if ($$[$0-4].valueExpression) {
       this.$ = parser.getValueExpressionKeywords($$[$0-4].valueExpression, keywords);
       if ($$[$0-4].valueExpression.columnReference) {
         this.$.columnReference = $$[$0-4].valueExpression.columnReference;
       }
     } else {
       this.$ = { suggestKeywords: keywords };
     }
     this.$.cursorAtEnd = !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 990:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-1], $$[$0]],
       [{ value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true]);
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0-1] && !$$[$0] };
     if (!$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-3], _$[$0-3]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 991:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0]],
       [{ value: 'LIMIT', weight: 3 }],
       [true]);
     if ($$[$0-2].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-2].suggestKeywords, 4));
     }
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0] };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 992:

     this.$ = { suggestKeywords: [], cursorAtEnd: true };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = _$[$0-1];
   
break;
case 1003:

     parser.suggestKeywords(['ALL', 'DISTINCT', 'SELECT']);
   
break;
case 1004:

     parser.suggestKeywords(['ALL', 'DISTINCT']);
   
break;
case 1009:

     if ($$[$0].suggestFilters) {
       parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 1010:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS', 'NOT EXISTS']);
     parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 1024:

     if (!$$[$0]) {
       $$[$0-1].suggestKeywords = ['OVER'];
     }
   
break;
case 1031:

     parser.suggestKeywords(['OVER']);
   
break;
case 1040:

     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 1041: case 1059:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 1042:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       if ($$[$0-4].toLowerCase() === 'group_concat') {
         keywords.push('ALL');
       } else {
         keywords.push('DISTINCT');
       }
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 1043: case 1057:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 1044:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords(true);
       if (!$$[$0-2]) {
         if ($$[$0-4].toLowerCase() === 'group_concat') {
           keywords.push('ALL');
         } else {
           keywords.push('DISTINCT');
         }
       }
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
       parser.suggestKeywords(keywords);
     }
     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], $$[$0-1].activePosition);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 1053:

     parser.addFunctionArgumentLocations($$[$0-3], [{
       expression: { text: $$[$0-1] },
       location: _$[$0-1]
     }]);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] }
   
break;
case 1054: case 1060:

     this.$ = { function: $$[$0-2], types: ['UDFREF'] }
   
break;
case 1055:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] }
   
break;
case 1056:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 1058:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-2]) {
         keywords.push('DISTINCT');
       }
       parser.suggestKeywords(keywords);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 1061:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 1062:

     parser.suggestValueExpressionKeywords($$[$0-2]);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 1063:

     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 1064:

    this.$ = { function: $$[$0-2], types: ['UDFREF'] }
  
break;
case 1065:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     this.$ = {
       function: $$[$0-3],
       expression: $$[$0-1].expressions[$$[$0-1].expressions.length - 1].expression,
       types: ['UDFREF']
     }
   
break;
case 1066:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-3], 1);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 1067:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-2].expressions);
     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 1068:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     parser.applyArgumentTypesToSuggestions($$[$0-3], $$[$0-1].activePosition);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 1073:

     var expression = $$[$0-3];
     parser.extractExpressionText(expression, $$[$0-3], $$[$0-2], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-5], [{
       expression: expression,
       location: {
         first_line: _$[$0-3].first_line,
         last_line: _$[$0-1].last_line,
         first_column: _$[$0-3].first_column,
         last_column: _$[$0-1].last_column
       }
     }]);
     this.$ = { types: [ $$[$0-1].toUpperCase() ] }
   
break;
case 1075:

     parser.valueExpressionSuggest();
     this.$ = { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 1076: case 1077:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ] };
   
break;
case 1078:
this.$ = { types: [ $$[$0-1].toUpperCase() ] };
break;
case 1081:

     parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'AS', weight: 2 }]);
     this.$ =  { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 1082:

     parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'AS', weight: 2 }]);
     this.$ = { types: [ 'T' ] };
   
break;
case 1083: case 1084:

     parser.suggestKeywords(parser.getTypeKeywords());
     this.$ = { types: [ 'T' ] };
   
break;
case 1085: case 1086:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: $$[$0-1], types: ['UDFREF'] }
     }
   
break;
case 1091:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }]
     }
   
break;
case 1092:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = $$[$0-3];
   
break;
case 1094: case 1096:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0], location: _$[$0] }]
     }
   
break;
case 1095: case 1097:

     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: $$[$0], location: _$[$0] }])
     }
   
break;
case 1098:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0-2], location: _$[$0-2] }].concat($$[$0].expressions)
     }
   
break;
case 1099:

     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: $$[$0-2], location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 1100:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: { text: '' }, location: _$[$0] }])
     }
   
break;
case 1101:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: { text: '' }, location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 1102:

     parser.suggestValueExpressionKeywords($$[$0-3].expressions[$$[$0-3].expressions.length - 1].expression);
     this.$ = {
       activePosition: $$[$0-3].activePosition,
       expressions: $$[$0-3].expressions.concat($$[$0].expressions)
     }
   
break;
case 1103:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 1104:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 1105:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 1106:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-3] }, { expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 1118:

     parser.suggestKeywords(['TABLES', 'STREAMS', 'TOPICS', 'QUERIES', 'PROPERTIES']);
   
break;
case 1120:
this.$ = { inValueEdit: true };
break;
case 1121:
this.$ = { inValueEdit: true, cursorAtStart: true };
break;
case 1122: case 1123: case 1124:

     this.$ = { suggestKeywords: ['NOT'] }
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1128: case 1129: case 1130:

     parser.suggestFunctions({ types: [ 'STRING' ] });
     parser.suggestColumns({ types: [ 'STRING' ] });
     this.$ = { types: ['BOOLEAN'] }
   
break;
case 1131:

     this.$ = parser.findCaseType($$[$0-1])
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1132:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1133:
this.$ = parser.findCaseType($$[$0-1]);
break;
case 1134:

     parser.suggestValueExpressionKeywords($$[$0-1], ['END']);
     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1135:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1136:
this.$ = parser.findCaseType($$[$0-2]);
break;
case 1137:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1138:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-2]);
   
break;
case 1139:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     this.$.suggestFilters = $$[$0-1].suggestFilters
   
break;
case 1140:

     parser.valueExpressionSuggest();
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1141:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1142:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = $$[$0-1];
   
break;
case 1143:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ] };
   
break;
case 1146:

     this.$ = { caseTypes: [ $$[$0] ], lastType: $$[$0] }
     parser.extractExpressionText(this.$, $$[$0]);
   
break;
case 1147:

     $$[$0-1].caseTypes.push($$[$0]);
     this.$ = { caseTypes: $$[$0-1].caseTypes, lastType: $$[$0] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1151:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
   
break;
case 1153:

     this.$ = $$[$0]
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1154:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0].suggestFilters };
break;
case 1155:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1156:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0-2].suggestFilters };
break;
case 1157: case 1158:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0].suggestFilters };
break;
case 1159:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1160:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [$$[$0]] };
   
break;
case 1161:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1162:

      parser.valueExpressionSuggest();
      parser.suggestKeywords(['WHEN']);
      this.$ = { caseTypes: [{ types: ['T'] }] };
    
break;
case 1163: case 1165:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1164:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1166:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [$$[$0]], suggestFilters: true };
   
break;
case 1167:

     parser.suggestValueExpressionKeywords($$[$0-1], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1168:

     parser.suggestValueExpressionKeywords($$[$0-2], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1169: case 1170: case 1171: case 1172:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
}
},
table: [o($V0,$V1,{166:1,167:2}),{1:[3]},o($V2,$V3,{168:3,172:4,3:5,152:6,128:7,4:8,5:9,6:10,9:12,153:14,404:15,175:16,33:17,34:18,35:19,36:20,141:21,142:22,143:23,144:24,154:27,7:$V4,10:$V5,17:$V6,20:$V7,137:$V8,150:$V9,157:$Va,409:$Vb,422:$Vc}),{169:[1,33],173:[1,34]},o($V2,[2,258]),o($V2,[2,264]),o($V2,[2,265]),o($V2,[2,266]),o($V2,[2,1]),o($V2,[2,2]),o($V2,[2,3]),{8:35,163:[1,36],164:[1,37],165:[1,38]},o($V2,[2,5]),{11:39,163:[1,40],164:[1,41],165:[1,42],489:[1,43],490:[1,44]},o($V2,[2,235]),o($Vd,$Ve,{405:45,460:46,462:47,254:$Vf}),{62:[1,50],404:49,409:$Vb},o($V2,[2,25]),o($V2,[2,26]),o($V2,[2,27]),o($V2,[2,28]),o($V2,[2,201]),o($V2,[2,202]),o($V2,[2,203]),o($V2,[2,204]),{44:[1,51]},{39:54,43:$Vg,96:$Vh,177:57,178:$Vi,179:$Vj,180:$Vk,190:[1,52],466:53},o($V2,[2,236]),o([30,31,43,62,78,79,90,95,96,150,178,179,180,182,183,184,185,189,191,195,196,200,201,203,213,214,222,230,231,246,247,249,253,255,256,257,258,260],$Vl,{410:61,190:$Vm,209:$Vn}),{39:67,43:$Vg,96:$Vh,102:66,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo,423:64,425:65},{37:69,43:[1,70],44:[1,71],130:[1,72],206:$Vp,243:$Vq},{37:75,43:[1,76],44:[1,77],130:[1,78],206:$Vp,243:$Vq},{158:[1,79]},{1:[2,253]},o($V0,$V1,{167:80}),o($V2,[2,4]),o($V2,[2,249]),o($V2,[2,250]),o($V2,[2,251]),o($V2,[2,6]),o($V2,[2,1113]),o($V2,[2,1114]),o($V2,[2,1115]),o($V2,[2,1116]),o($V2,[2,1117]),o($Vd,[2,802]),o($Vd,[2,994],{462:81,254:$Vf}),o($Vr,[2,996]),o([190,209,409],$V1,{167:82}),o($Vd,$Ve,{460:46,462:47,405:83,254:$Vf}),{128:84,175:16,404:15,409:$Vb,422:$Vc},o($Vs,$Vt,{145:85,222:$Vu}),o($V2,[2,1013]),{185:[1,88],186:[1,87]},o($Vv,[2,1015]),o($Vw,[2,276]),o($Vw,[2,277]),o($Vw,[2,278]),o($Vw,[2,273]),o($Vw,[2,274]),o($Vw,[2,275]),{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:91,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,183:$VG,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,411:89,420:90,468:112,470:113,472:114,478:118,479:119,480:120,484:129},o($V11,[2,824]),o($V11,[2,825]),o([62,409],[2,850],{68:[1,147]}),o($V21,[2,852]),{126:[1,148]},o($Vw,[2,483]),{32:[1,149],196:[1,150]},o($V31,$V41,{38:151,222:$V51}),{39:153,43:$Vg,96:$Vh,177:57,178:$Vi,179:$Vj,180:$Vk},o($Vs,$V41,{38:154,222:$V51}),o($Vs,$V41,{38:155,222:$V51}),o($V61,[2,393]),o($V61,[2,394]),o($Vs,$Vt,{145:156,222:$Vu}),{39:157,43:$Vg,96:$Vh,177:57,178:$Vi,179:$Vj,180:$Vk},o($Vs,$Vt,{145:158,222:$Vu}),o($Vs,$Vt,{145:159,222:$Vu}),o($Vs,[2,247],{159:160,44:[1,161]}),o($V2,$V3,{172:4,3:5,152:6,128:7,4:8,5:9,6:10,9:12,153:14,404:15,175:16,33:17,34:18,35:19,36:20,141:21,142:22,143:23,144:24,154:27,168:162,7:$V4,10:$V5,17:$V6,20:$V7,137:$V8,150:$V9,157:$Va,409:$Vb,422:$Vc}),o($Vr,[2,997]),{190:$Vm,209:$Vn,409:$Vl,410:163},o($Vd,[2,803]),{64:[1,164]},{39:67,43:$Vg,59:165,96:$Vh,102:166,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo},{213:[1,167]},{27:171,30:$Vx,31:$Vy,39:169,43:$Vg,79:[1,174],96:$Vh,177:57,178:$Vi,179:$Vj,180:$Vk,184:[1,176],185:$VI,214:[1,173],253:[1,172],255:$VY,256:$VZ,265:178,268:179,334:170,335:175,336:[1,177],341:123,342:124,467:168},{39:180,43:$Vg,96:$Vh,177:57,178:$Vi,179:$Vj,180:$Vk},o($Vr,[2,813],{412:181,415:183,68:[1,182],217:[1,184]}),o($V71,[2,830]),o($V71,$V81,{177:57,39:67,265:178,268:179,355:185,317:199,102:200,27:201,30:$Vx,31:$Vy,43:$Vg,58:$V91,78:$Va1,91:$Vb1,92:$Vc1,96:$Vh,125:$Vd1,126:$Ve1,178:$Vi,179:$Vj,180:$Vk,183:$Vf1,184:$Vg1,186:$Vh1,192:$Vi1,193:$Vj1,196:$Vo,197:$Vk1,223:$Vl1,226:$Vm1,233:$Vn1,238:$Vo1,240:$Vp1}),o($V71,[2,846]),o($Vq1,[2,527]),{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:206,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:207,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:208,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:209,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},{62:$Vr1,313:210},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:212,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:214,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,261:$Vs1,265:125,268:126,283:101,303:107,311:93,318:213,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129,491:215,493:216},o($Vq1,[2,659]),o($Vq1,[2,660],{327:218,62:$Vt1}),o($Vq1,[2,661]),{62:$Vt1,327:220},o($Vq1,[2,664]),o($Vq1,[2,676]),o($Vu1,[2,670],{185:[1,221]}),{62:[2,1069]},{62:[2,1070]},{62:[2,1071]},{62:[2,1072]},o($Vq1,[2,1107],{469:222,471:223,236:$Vv1}),{236:$Vv1,471:225},o($Vq1,[2,1026]),o($Vq1,[2,678]),o($Vq1,[2,679]),o($Vw1,[2,497]),o($Vx1,[2,1034]),o($Vx1,[2,1035]),o($Vx1,[2,1036]),{62:[1,226]},{62:[1,227]},o($Vq1,[2,681]),o($Vq1,[2,682]),o($Vq1,[2,690]),o($Vq1,[2,691]),o($Vq1,[2,692]),o([26,30,31,43,58,62,64,68,78,90,91,92,95,96,112,125,126,169,173,178,179,180,183,184,185,186,192,193,194,196,197,198,199,202,204,207,208,210,211,212,215,217,218,219,220,223,224,225,226,227,228,229,233,234,235,238,239,240,242,244,245,248,250,251,252,254,259,261,262,316],[2,507]),{62:[1,228]},{62:[1,229]},{62:[1,230]},o($Vq1,[2,683],{185:[1,231]}),{255:[1,232],256:[1,233]},{255:[1,234]},{30:[1,236],32:[1,235]},{31:[1,238],32:[1,237]},o($Vq1,[2,695]),o($Vq1,[2,696]),{62:[2,1045]},{62:[2,1046]},{62:[2,1047]},{62:[2,1048]},{62:[2,1049]},{62:[2,1050]},{62:[2,1051]},{62:[2,1052]},{39:67,43:$Vg,96:$Vh,102:66,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo,425:239},{62:[1,240]},{196:[1,241]},o($Vw,[2,485]),o($V2,[2,29],{177:57,39:242,43:$Vg,96:$Vh,178:$Vi,179:$Vj,180:$Vk}),{78:[1,243]},o($V2,[2,38]),{39:67,43:$Vg,45:244,47:245,53:246,96:$Vh,102:247,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo},{39:67,43:$Vg,53:248,96:$Vh,102:247,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo},{39:67,43:$Vg,96:$Vh,102:249,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo},o($V2,[2,212]),{39:67,43:$Vg,59:250,96:$Vh,102:166,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo},{39:67,43:$Vg,59:251,96:$Vh,102:166,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo},{39:67,43:$Vg,59:252,96:$Vh,102:166,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo},o($Vs,[2,248]),o($V2,[2,259]),{404:253,409:$Vb},o($Vd,$Ve,{460:46,462:47,405:254,254:$Vf}),o($V2,[2,227]),o($Vy1,[2,460],{185:[1,255]}),o($Vs,[2,411]),o($V2,[2,1014]),o($V2,[2,1017]),o($V2,[2,1018],{177:57,39:256,43:$Vg,96:$Vh,178:$Vi,179:$Vj,180:$Vk}),o($V2,[2,1020]),o($V2,[2,1021]),o($V2,[2,1022]),o($V2,[2,1023]),o($V31,[2,673]),{185:$VI,255:$VY,256:$VZ,335:257,341:123,342:124},{185:$VI,255:$VY,256:$VZ,335:258,341:123,342:124},o($Vz1,[2,401]),o($Vz1,[2,402]),o($Vv,[2,1016]),o($Vr,[2,814]),{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:91,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,183:$VG,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,420:259,468:112,470:113,472:114,478:118,479:119,480:120,484:129},o($VA1,[2,1006],{416:260,457:261,459:262,262:[1,263]}),{39:67,43:$Vg,59:271,62:$Vr1,96:$Vh,102:166,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo,313:272,344:265,345:266,348:267,349:268,354:269,356:270,427:264},o($V71,[2,845]),o($VB1,[2,697],{312:273,78:[1,274]}),{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:275,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:276,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:277,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:278,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},{58:$V91,197:[1,280],223:[1,279],238:$Vo1,240:$Vp1,317:281},{62:[1,282]},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:283,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:284,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:285,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:286,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:287,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:288,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},o($Vq1,[2,553]),o($VC1,[2,744]),o($VC1,[2,745]),{27:290,30:$Vx,31:$Vy,39:67,43:$Vg,96:$Vh,102:289,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo,265:178,268:179},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:291,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:292,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:293,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},o($VD1,[2,528],{317:199,58:$V91,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,193:$Vj1,223:$Vl1,226:$Vm1,238:$Vo1,240:$Vp1}),o($VD1,[2,529],{317:199,58:$V91,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,193:$Vj1,223:$Vl1,226:$Vm1,238:$Vo1,240:$Vp1}),o($VD1,[2,530],{317:199,58:$V91,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,193:$Vj1,223:$Vl1,226:$Vm1,238:$Vo1,240:$Vp1}),o($VE1,[2,531],{317:199}),o($Vq1,[2,536]),o($VF1,$VG1,{313:272,314:294,356:295,362:296,62:$Vr1}),{58:$V91,64:[1,297],78:$Va1,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,192:$Vi1,193:$Vj1,197:$Vk1,223:$Vl1,226:$Vm1,233:$Vn1,238:$Vo1,240:$Vp1,317:199},o($Vq1,[2,555]),{58:$V91,78:$Va1,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,192:$Vi1,193:$Vj1,197:$Vk1,223:$Vl1,226:$Vm1,233:$Vn1,238:$Vo1,240:$Vp1,261:$Vs1,317:199,318:298,491:215,493:216},{211:[1,300],212:[1,299],261:$Vs1,493:301},o($VH1,[2,1146]),{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:302,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},o($Vq1,[2,662]),{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,64:[1,303],70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:305,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129,485:304},o($Vq1,[2,663]),{39:67,43:$Vg,70:307,96:$Vh,102:128,177:57,178:$Vi,179:$Vj,180:$Vk,183:[1,306],196:$Vo},o($Vq1,[2,1024]),o($Vq1,[2,1108]),{39:67,43:$Vg,62:[1,310],96:$Vh,102:308,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo,379:309},o($Vq1,[2,1025]),{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,64:[1,311],70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:305,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129,485:312},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,64:[1,314],70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:313,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},o([30,31,43,62,64,78,79,90,95,96,150,178,179,180,182,184,185,189,191,195,196,200,201,203,213,214,222,230,231,246,247,249,253,255,256,257,258,260],$Vl,{410:315,190:$Vm,209:$Vn}),o($VI1,$Vl,{410:318,64:[1,317],183:[1,316],190:$Vm,209:$Vn}),o($VI1,$Vl,{410:319,64:[1,320],190:$Vm,209:$Vn}),o($Vq1,[2,684],{255:[1,321],256:[1,322]}),o($Vq1,[2,686]),{255:[1,323]},o($Vq1,[2,687]),{30:[1,324]},o($VJ1,[2,396]),{31:[1,325]},o($VJ1,[2,399]),o($V21,[2,853]),o($VF1,$VG1,{362:296,314:326}),o($Vw,[2,484]),o($V2,$VK1,{40:327,24:328,25:329,26:$VL1}),{213:[1,331]},o($V2,[2,39]),o($VM1,[2,135],{48:332,107:333,108:[1,334]}),o($VN1,[2,51],{54:335,57:336,58:[1,337],62:[1,338]}),o($VO1,[2,465],{185:[1,339]}),o($VP1,[2,187],{131:340,133:341,62:[1,342]}),o($V2,[2,408],{146:343,275:[1,344]}),o($V2,[2,219],{148:345,149:[1,346]}),o($V2,[2,221]),{123:[1,347]},o($Vr,[2,1002]),o($Vd,[2,804]),{39:67,43:$Vg,96:$Vh,102:348,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo},o($V2,[2,1019]),o($V31,[2,674]),o($V31,[2,675]),o($V71,[2,831]),o($Vr,[2,826]),o($VQ1,[2,872],{429:349,430:350,219:[1,351]}),o($VA1,[2,1007]),{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:353,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,464:352,468:112,470:113,472:114,478:118,479:119,480:120,484:129},o([64,169,173,219,220,229,234,254,262],[2,862],{68:[1,354]}),o($VR1,[2,865]),o($VR1,[2,699]),o($VR1,[2,701],{352:355,442:356,204:$VS1,218:$VT1,224:$VU1,227:$VV1,228:$VW1,235:$VX1,239:$VY1,244:$VZ1}),o($VR1,[2,702]),o($V_1,$V81,{177:57,39:67,265:178,268:179,102:200,27:201,355:365,30:$Vx,31:$Vy,43:$Vg,96:$Vh,126:$Ve1,178:$Vi,179:$Vj,180:$Vk,196:$Vo}),o($V_1,$V81,{177:57,39:67,265:178,268:179,102:200,27:201,355:366,30:$Vx,31:$Vy,43:$Vg,96:$Vh,126:$Ve1,178:$Vi,179:$Vj,180:$Vk,196:$Vo}),o($V$1,[2,713]),o($V$1,[2,715]),{79:[1,367],209:[1,370],214:[1,369],253:[1,368]},o($VB1,[2,698]),o($V02,[2,538],{317:199,58:$V91,183:$Vf1,184:$Vg1,193:$Vj1,223:$Vl1,226:$Vm1,238:$Vo1,240:$Vp1}),o($V02,[2,539],{317:199,58:$V91,183:$Vf1,184:$Vg1,193:$Vj1,223:$Vl1,226:$Vm1,238:$Vo1,240:$Vp1}),o($V02,[2,540],{317:199,58:$V91,183:$Vf1,184:$Vg1,193:$Vj1,223:$Vl1,226:$Vm1,238:$Vo1,240:$Vp1}),o($V02,[2,541],{317:199,58:$V91,183:$Vf1,184:$Vg1,193:$Vj1,223:$Vl1,226:$Vm1,238:$Vo1,240:$Vp1}),{62:[1,371]},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:372,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},o($Vq1,[2,554]),o($VF1,$VG1,{177:57,39:67,311:93,283:101,326:102,328:104,329:105,337:106,303:107,468:112,470:113,472:114,335:115,339:116,70:117,478:118,479:119,480:120,341:123,342:124,265:125,268:126,343:127,102:128,484:129,362:296,314:373,315:374,121:375,30:$Vx,31:$Vy,43:$Vg,62:$Vz,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,150:$VE,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01}),{58:$V91,78:$Va1,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,192:$Vi1,193:$Vj1,197:$Vk1,223:$Vl1,226:$Vm1,233:$Vn1,238:$Vo1,240:$Vp1,316:[1,376],317:199},o($V12,[2,548],{317:199,58:$V91,78:$Va1,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,193:$Vj1,197:$Vk1,223:$Vl1,226:$Vm1,238:$Vo1,240:$Vp1}),o($V12,[2,549],{317:199,58:$V91,78:$Va1,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,193:$Vj1,197:$Vk1,223:$Vl1,226:$Vm1,238:$Vo1,240:$Vp1}),o($VE1,[2,550],{317:199,58:$V91,223:$Vl1,226:$Vm1,238:$Vo1,240:$Vp1}),o($VE1,[2,551],{317:199,58:$V91,223:$Vl1,226:$Vm1,238:$Vo1,240:$Vp1}),o($VE1,[2,552],{317:199,58:$V91,223:$Vl1,226:$Vm1,238:$Vo1,240:$Vp1}),o($VC1,[2,746]),o($VC1,[2,747]),o($VE1,[2,1122],{317:199}),o($VE1,[2,1123],{317:199}),o($VE1,[2,1124],{317:199}),{64:[1,377]},{27:201,30:$Vx,31:$Vy,39:67,43:$Vg,64:$V81,96:$Vh,102:200,126:$Ve1,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo,265:178,268:179,355:378},{128:386,175:16,365:379,367:380,369:381,371:382,373:383,375:384,377:385,404:15,409:$Vb,422:$Vc},o($Vq1,[2,537]),o($Vq1,[2,556]),o($Vq1,[2,1131]),{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:387,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},o($VH1,[2,1147]),{58:$V91,78:$Va1,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,192:$Vi1,193:$Vj1,197:$Vk1,223:$Vl1,226:$Vm1,233:$Vn1,238:$Vo1,240:$Vp1,250:[1,388],317:199},o($Vq1,[2,1089]),{64:[1,389],68:$V22},o($V32,[2,1094],{317:199,58:$V91,78:$Va1,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,192:$Vi1,193:$Vj1,197:$Vk1,223:$Vl1,226:$Vm1,233:$Vn1,238:$Vo1,240:$Vp1}),o($Vu1,[2,671]),o($Vw1,[2,498]),o($Vq1,[2,1110]),o($Vq1,[2,1111]),o($V42,[2,758],{380:391,385:392,108:[1,393]}),{236:[2,1064]},{64:[1,394],68:$V22},{58:$V91,78:$Va1,91:$Vb1,92:$Vc1,125:$Vd1,126:[1,395],183:$Vf1,184:$Vg1,186:$Vh1,192:$Vi1,193:$Vj1,197:$Vk1,223:$Vl1,226:$Vm1,233:$Vn1,238:$Vo1,240:$Vp1,317:199},o($Vq1,[2,1074]),{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,64:[1,396],70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:305,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129,485:397},{64:[1,398]},o($Vx1,[2,1054]),{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:305,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129,485:399},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:400,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},o($Vx1,[2,1060]),o($Vq1,[2,685]),{255:[1,401]},o($Vq1,[2,688]),o($VJ1,[2,395]),o($VJ1,[2,398]),{64:[1,402]},o($V2,[2,30]),o($V2,[2,36]),o([64,68,92,126,169,173],[2,18]),{27:403,30:$Vx,31:$Vy,265:178,268:179},o([43,96,169,173,178,179,180,196],[2,414]),o($V2,[2,173],{49:404,126:[1,405]}),o($VM1,[2,136]),{109:[1,406]},o($VN1,[2,48]),o($VN1,[2,52]),{39:67,43:$Vg,59:407,96:$Vh,102:166,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo},{39:67,43:$Vg,63:408,67:409,70:410,96:$Vh,102:128,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo},{39:67,43:$Vg,96:$Vh,102:411,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo},{24:412,25:329,26:$VL1,126:$VK1},o($VP1,[2,188]),{39:67,43:$Vg,70:117,96:$Vh,102:128,134:413,136:414,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo,303:415},o($V2,[2,205]),o($V2,[2,409]),o($V2,[2,213]),o($V2,[2,220]),{62:$V52,160:416,161:417},o($Vy1,[2,461]),o($V62,[2,901],{438:419,439:420,220:[1,421]}),o($VQ1,[2,873]),{109:[1,422]},o($VA1,[2,1008]),o($VA1,[2,1011],{317:199,58:$V91,78:$Va1,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,192:$Vi1,193:$Vj1,197:$Vk1,223:$Vl1,226:$Vm1,233:$Vn1,238:$Vo1,240:$Vp1}),{39:67,43:$Vg,59:271,62:$Vr1,96:$Vh,102:166,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo,313:272,344:423,345:266,348:267,349:268,354:269,356:270},o($VR1,[2,705],{442:424,204:$VS1,218:$VT1,224:$VU1,227:$VV1,228:$VW1,235:$VX1,239:$VY1,244:$VZ1}),{39:67,43:$Vg,59:271,62:$Vr1,96:$Vh,102:166,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo,313:272,348:425,354:269,356:270},{227:[1,426]},{227:[1,427],235:[1,428]},{227:[1,429]},o($V72,[2,926]),{224:[1,430],227:[1,431],235:[1,432],244:[1,433]},{227:[1,434]},{224:[1,435],227:[1,436],235:[1,437],244:[1,438]},{227:[1,439]},o($V_1,[2,708]),o($V_1,[2,709]),o($Vq1,[2,532]),o($Vq1,[2,533]),o($Vq1,[2,534]),{217:[1,440]},o($VF1,$VG1,{177:57,39:67,311:93,283:101,326:102,328:104,329:105,337:106,303:107,468:112,470:113,472:114,335:115,339:116,70:117,478:118,479:119,480:120,341:123,342:124,265:125,268:126,343:127,102:128,484:129,362:296,121:375,314:441,315:442,30:$Vx,31:$Vy,43:$Vg,62:$Vz,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,150:$VE,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01}),{58:$V91,78:$Va1,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,192:$Vi1,193:$Vj1,197:$Vk1,223:$Vl1,226:$Vm1,233:$Vn1,238:$Vo1,240:$Vp1,316:[1,443],317:199},{64:[1,444]},{64:[1,445],68:$V82},o($V92,[2,644],{317:199,58:$V91,78:$Va1,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,192:$Vi1,193:$Vj1,197:$Vk1,223:$Vl1,226:$Vm1,233:$Vn1,238:$Vo1,240:$Vp1}),{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:447,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},o($Va2,[2,723]),{64:[1,448]},{64:[2,727]},{64:[2,729]},{64:[2,731]},{64:[2,733]},{64:[2,735]},{64:[2,737]},{64:[2,739]},{64:[2,741]},{58:$V91,78:$Va1,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,192:$Vi1,193:$Vj1,197:$Vk1,212:[1,449],223:$Vl1,226:$Vm1,233:$Vn1,238:$Vo1,240:$Vp1,317:199},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:450,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},o($Vq1,[2,1090]),{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:451,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},{64:[2,764],234:$Vb2,381:452,386:453},o($V42,[2,759]),{109:[1,455]},{236:[2,1065]},{80:456,198:$Vc2,199:$Vd2,202:$Ve2,207:$Vf2,210:$Vg2,215:$Vh2,225:$Vi2,245:$Vj2,248:$Vk2,251:$Vl2,252:$Vm2,259:$Vn2},o($Vx1,[2,1040]),{64:[1,469],68:$V22},o($Vx1,[2,1053]),{64:[1,470],68:$V22},{58:$V91,64:[1,471],78:$Va1,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,192:$Vi1,193:$Vj1,197:$Vk1,223:$Vl1,226:$Vm1,233:$Vn1,238:$Vo1,240:$Vp1,317:199},o($Vq1,[2,689]),o($V21,[2,858]),o([26,64,68,78,79,92,126,169,173],[2,19]),o($V2,[2,43]),o($VF1,[2,177],{127:472}),{110:473,112:[1,474]},o($VN1,[2,53]),{64:[1,475],68:[1,476]},o($V32,[2,59]),{71:477,80:478,81:479,82:480,83:481,84:482,85:483,86:484,90:$Vo2,95:$Vp2,96:$Vq2,198:$Vc2,199:$Vd2,202:$Ve2,207:$Vf2,210:$Vg2,215:$Vh2,225:$Vi2,245:$Vj2,248:$Vk2,251:$Vl2,252:$Vm2,259:$Vn2},o($VO1,[2,466]),{126:[1,488]},{64:[1,489],68:[1,490]},o($V32,$VK1,{25:329,24:491,26:$VL1}),o($Vr2,[2,494],{185:[1,492]}),o($V2,[2,238],{68:[1,493]}),o($Vs2,[2,244]),{30:$Vx,31:$Vy,39:67,43:$Vg,70:117,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,150:$VE,162:494,177:57,178:$Vi,179:$Vj,180:$Vk,185:$VI,191:$VK,195:$VL,196:$Vo,201:$VN,203:$VO,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:495,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},o($Vt2,[2,964],{451:496,386:497,234:$Vb2}),o($V62,[2,902]),{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:498,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:500,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,431:499,468:112,470:113,472:114,478:118,479:119,480:120,484:129},o($VR1,[2,866]),{39:67,43:$Vg,59:271,62:$Vr1,96:$Vh,102:166,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo,313:272,348:501,354:269,356:270},o($Vu2,$Vv2,{443:502,232:$Vw2}),o($V72,[2,922]),o($V72,[2,923]),{227:[1,504]},o($V72,[2,925]),{227:[1,505]},o($V72,[2,928]),{227:[1,506]},{227:[1,507]},o($V72,[2,931]),{227:[1,508]},o($V72,[2,933]),{227:[1,509]},{227:[1,510]},o($V72,[2,936]),{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:511,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},{64:[1,512]},{64:[1,513],68:$V82},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:514,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},o($Vq1,[2,544]),o($Vq1,[2,545]),{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:515,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},o([30,31,43,64,68,96,112,126,169,173,178,179,180,192,194,196,197,204,208,211,212,217,218,219,220,224,227,228,229,233,234,235,239,242,244,250,254,261,262,316],[2,547],{317:199,58:$V91,78:$Va1,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,193:$Vj1,223:$Vl1,226:$Vm1,238:$Vo1,240:$Vp1}),o($Va2,[2,724]),o($Vq1,[2,1132]),o($VH1,[2,1153],{317:199,58:$V91,78:$Va1,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,192:$Vi1,193:$Vj1,197:$Vk1,223:$Vl1,226:$Vm1,233:$Vn1,238:$Vo1,240:$Vp1}),o($V32,[2,1095],{317:199,58:$V91,78:$Va1,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,192:$Vi1,193:$Vj1,197:$Vk1,223:$Vl1,226:$Vm1,233:$Vn1,238:$Vo1,240:$Vp1}),{64:[1,516]},{64:[2,769],112:[1,521],242:[1,520],387:517,390:518,391:519},{109:[1,522]},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:375,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,315:523,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},{64:[1,524]},o($Vx2,[2,510]),o($Vx2,[2,511]),o($Vx2,$Vy2,{309:525,62:$Vz2}),o($Vx2,[2,524],{310:527,62:[1,528]}),o($Vx2,[2,514]),o($Vx2,[2,515]),o($Vx2,[2,516]),o($Vx2,[2,517]),o($Vx2,[2,518]),o($Vx2,[2,519]),o($Vx2,[2,520]),o($Vx2,$Vy2,{309:529,62:$Vz2}),o($Vx1,[2,1041]),o($Vx1,[2,1055]),o($Vx1,[2,1059]),{128:530,175:16,404:15,409:$Vb,422:$Vc},o($VM1,[2,137]),{62:[1,532],113:531},o($VN1,[2,57]),{39:67,43:$Vg,67:533,70:410,96:$Vh,102:128,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo},o($V32,[2,73],{72:534,75:535,76:536,25:539,26:$VL1,78:$VA2,79:$VB2}),o($Vx2,[2,85]),o($Vx2,[2,86]),o($Vx2,[2,87]),o($Vx2,[2,88]),o($Vx2,[2,89]),o($Vx2,[2,90]),o($Vx2,[2,91]),{91:[1,540]},{91:[1,541]},{91:[1,542]},{128:543,175:16,404:15,409:$Vb,422:$Vc},o($VP1,[2,189]),{39:67,43:$Vg,70:117,96:$Vh,102:128,136:544,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo,303:415},o($V32,[2,191]),{39:67,43:$Vg,70:307,96:$Vh,102:128,177:57,178:$Vi,179:$Vj,180:$Vk,183:[1,545],196:$Vo},{62:$V52,161:546},{64:[1,547],68:[1,548]},o($V32,[2,657]),o($Vr,[2,957],{448:549,449:550,229:[1,551]}),o($Vt2,[2,965]),o($V62,[2,903],{317:199,58:$V91,78:$Va1,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,192:$Vi1,193:$Vj1,197:$Vk1,223:$Vl1,226:$Vm1,233:$Vn1,238:$Vo1,240:$Vp1}),o($VQ1,[2,874],{68:[1,552]}),o($VC2,[2,889],{317:199,58:$V91,78:$Va1,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,192:$Vi1,193:$Vj1,197:$Vk1,223:$Vl1,226:$Vm1,233:$Vn1,238:$Vo1,240:$Vp1}),o($Vu2,$Vv2,{443:553,232:$Vw2}),o($Vu2,[2,909]),{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:554,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},o($V72,[2,924]),o($V72,[2,927]),o($V72,[2,929]),o($V72,[2,930]),o($V72,[2,932]),o($V72,[2,934]),o($V72,[2,935]),o($VE1,[2,535],{317:199}),o($Vq1,[2,542]),o($Vq1,[2,543]),o($VD1,[2,546],{317:199,58:$V91,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,193:$Vj1,223:$Vl1,226:$Vm1,238:$Vo1,240:$Vp1}),o($V92,[2,645],{317:199,58:$V91,78:$Va1,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,192:$Vi1,193:$Vj1,197:$Vk1,223:$Vl1,226:$Vm1,233:$Vn1,238:$Vo1,240:$Vp1}),o($Vq1,[2,753]),{64:[2,765]},{64:[2,770]},{197:[1,555],395:[1,556]},o($VD2,[2,787]),o($VD2,[2,788]),{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:559,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,452:557,454:558,468:112,470:113,472:114,478:118,479:119,480:120,484:129},o($V42,[2,760],{68:$V82}),o($Vq1,[2,1073]),o($Vx2,[2,512]),{255:[1,560]},o($Vx2,[2,513]),{255:[1,561]},o($Vx2,[2,521]),o($V2,[2,174]),{62:[1,563],114:562},{39:67,43:$Vg,70:565,96:$Vh,102:128,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo,293:564},o($V32,[2,60]),o($V32,[2,69]),o($V32,[2,74],{25:539,76:566,26:$VL1,78:$VA2,79:$VB2}),o($VE2,[2,75]),{79:[1,567]},o($VE2,[2,82]),o($VE2,[2,83]),{71:568,80:478,81:479,82:480,83:481,84:482,85:483,86:484,90:$Vo2,92:[1,569],95:$Vp2,96:$Vq2,198:$Vc2,199:$Vd2,202:$Ve2,207:$Vf2,210:$Vg2,215:$Vh2,225:$Vi2,245:$Vj2,248:$Vk2,251:$Vl2,252:$Vm2,259:$Vn2},{80:570,92:[1,571],198:$Vc2,199:$Vd2,202:$Ve2,207:$Vf2,210:$Vg2,215:$Vh2,225:$Vi2,245:$Vj2,248:$Vk2,251:$Vl2,252:$Vm2,259:$Vn2},{39:67,43:$Vg,92:[1,573],96:$Vh,97:572,99:574,102:575,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo},o($V2,[2,178]),o($V32,$VK1,{25:329,24:576,26:$VL1}),o($Vr2,[2,495]),o($Vs2,[2,245]),o($Vs2,[2,246]),{30:$Vx,31:$Vy,39:67,43:$Vg,70:117,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,185:$VI,191:$VK,195:$VL,196:$Vo,201:$VN,203:$VO,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:577,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},o($Vr,[2,982]),o($Vr,[2,958]),{180:[1,579],185:$VI,255:$VY,256:$VZ,335:578,341:123,342:124},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:580,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},o($Vu2,[2,910]),o($Vu2,[2,952],{317:199,58:$V91,78:$Va1,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,192:$Vi1,193:$Vj1,197:$Vk1,223:$Vl1,226:$Vm1,233:$Vn1,238:$Vo1,240:$Vp1}),o($VF2,$VG2,{392:581}),o($VF2,$VG2,{392:582}),o([64,112,169,173,229,242,254],[2,966],{68:[1,583]}),o($VH2,[2,969]),o($VH2,[2,979],{317:199,456:584,58:$V91,78:$Va1,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,192:$Vi1,193:$Vj1,194:[1,585],197:$Vk1,208:[1,586],223:$Vl1,226:$Vm1,233:$Vn1,238:$Vo1,240:$Vp1}),{64:[1,587]},{64:[1,588],68:[1,589]},o($VM1,[2,141]),{108:$VI2,117:590,119:591},{64:[1,593],68:[1,594]},o($V32,[2,453]),o($VE2,[2,76]),o($VE2,[2,81]),{92:[1,595]},o($Vx2,[2,96]),{68:[1,596]},o($Vx2,[2,100]),{68:[1,598],92:[1,597]},o($Vx2,[2,106]),o($VJ2,[2,108]),{103:[1,599]},o($V32,[2,192]),o($V32,[2,658]),o($Vr,[2,959],{68:[1,600]}),o($Vr,[2,961],{68:[1,601]}),o($VC2,[2,890],{317:199,58:$V91,78:$Va1,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,192:$Vi1,193:$Vj1,197:$Vk1,223:$Vl1,226:$Vm1,233:$Vn1,238:$Vo1,240:$Vp1}),o($VK2,$VL2,{393:602,403:603,205:$VM2,255:$VN2,395:$VO2}),o($VK2,$VL2,{403:603,393:607,205:$VM2,255:$VN2,395:$VO2}),{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:559,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,454:608,468:112,470:113,472:114,478:118,479:119,480:120,484:129},o($VH2,[2,976]),o($VH2,[2,980]),o($VH2,[2,981]),o($Vx2,[2,523]),o($Vx2,[2,525]),{255:[1,609]},{64:[1,610],68:[1,611]},o($V32,[2,150]),{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:612,123:[1,613],150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},{62:[2,450]},{39:67,43:$Vg,70:614,96:$Vh,102:128,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo},o($Vx2,[2,95]),{71:615,80:478,81:479,82:480,83:481,84:482,85:483,86:484,90:$Vo2,95:$Vp2,96:$Vq2,198:$Vc2,199:$Vd2,202:$Ve2,207:$Vf2,210:$Vg2,215:$Vh2,225:$Vi2,245:$Vj2,248:$Vk2,251:$Vl2,252:$Vm2,259:$Vn2},o($Vx2,[2,105]),{39:67,43:$Vg,96:$Vh,99:616,102:575,177:57,178:$Vi,179:$Vj,180:$Vk,196:$Vo},{71:617,80:478,81:479,82:480,83:481,84:482,85:483,86:484,90:$Vo2,95:$Vp2,96:$Vq2,198:$Vc2,199:$Vd2,202:$Ve2,207:$Vf2,210:$Vg2,215:$Vh2,225:$Vi2,245:$Vj2,248:$Vk2,251:$Vl2,252:$Vm2,259:$Vn2},{185:$VI,255:$VY,256:$VZ,335:618,341:123,342:124},{180:[1,619]},{64:$VP2,192:$VQ2,394:620},{237:[1,622]},{241:[1,623]},o($VR2,[2,800]),o($VR2,[2,801]),{64:$VP2,192:$VQ2,394:624},o($VH2,[2,970]),{64:[1,625]},o($VM1,[2,147]),{108:$VI2,119:626},{58:$V91,78:$Va1,91:[1,628],92:$Vc1,122:627,125:[1,629],183:$Vf1,184:$Vg1,186:$Vh1,192:$Vi1,193:$Vj1,197:$Vk1,223:$Vl1,226:$Vm1,233:$Vn1,238:$Vo1,240:$Vp1,317:199},{91:$VS2,122:630,125:$VT2},o($V32,[2,454]),{92:[1,633]},o($VJ2,[2,109]),o($VJ2,$VK1,{25:329,24:634,26:$VL1}),o($Vr,[2,960]),o($Vr,[2,962]),{64:[2,771]},{205:[1,635],255:$VN2,395:$VO2,403:636},o($VK2,[2,790]),o($VK2,[2,791]),{64:[2,772]},o($Vx2,[2,526]),o($V32,[2,151]),{123:[1,637]},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:276,123:$VU2,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:278,123:$VV2,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:638,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},o($VI1,$VU2),o($VI1,$VV2),o($Vx2,[2,99]),o($VJ2,[2,115]),{241:[1,639]},{216:[1,640]},o($V32,[2,159],{122:641,91:$VS2,125:$VT2}),o($V32,[2,158],{317:199,58:$V91,78:$Va1,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,192:$Vi1,193:$Vj1,197:$Vk1,223:$Vl1,226:$Vm1,233:$Vn1,238:$Vo1,240:$Vp1}),{64:[2,795]},{64:[2,796]},{30:$Vx,31:$Vy,39:67,43:$Vg,62:$Vz,70:117,78:$VA,79:$VB,90:$VC,95:$VD,96:$Vh,102:128,121:642,150:$VE,177:57,178:$Vi,179:$Vj,180:$Vk,182:$VF,184:$VH,185:$VI,189:$VJ,191:$VK,195:$VL,196:$Vo,200:$VM,201:$VN,203:$VO,213:$VP,214:$VQ,222:$VR,230:$VS,231:$VT,246:$VU,247:$VV,249:$VW,253:$VX,255:$VY,256:$VZ,257:$V_,258:$V$,260:$V01,265:125,268:126,283:101,303:107,311:93,326:102,328:104,329:105,335:115,337:106,339:116,341:123,342:124,343:127,468:112,470:113,472:114,478:118,479:119,480:120,484:129},o($V32,[2,157],{317:199,58:$V91,78:$Va1,91:$Vb1,92:$Vc1,125:$Vd1,183:$Vf1,184:$Vg1,186:$Vh1,192:$Vi1,193:$Vj1,197:$Vk1,223:$Vl1,226:$Vm1,233:$Vn1,238:$Vo1,240:$Vp1})],
defaultActions: {33:[2,253],108:[2,1069],109:[2,1070],110:[2,1071],111:[2,1072],139:[2,1045],140:[2,1046],141:[2,1047],142:[2,1048],143:[2,1049],144:[2,1050],145:[2,1051],146:[2,1052],311:[2,1064],379:[2,727],380:[2,729],381:[2,731],382:[2,733],383:[2,735],384:[2,737],385:[2,739],386:[2,741],394:[2,1065],517:[2,765],518:[2,770],593:[2,450],620:[2,771],624:[2,772],639:[2,795],640:[2,796]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: lexer.yylloc,
                    ruleId: stack.slice(stack.length - 2, stack.length).join('_'),
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


SqlParseSupport.initSyntaxParser(parser);/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true,"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* skip whitespace */ 
break;
case 1: /* skip comments */ 
break;
case 2: /* skip comments */ 
break;
case 3: parser.yy.partialCursor = false; parser.yy.cursorFound = yy_.yylloc; return 18; 
break;
case 4: parser.yy.partialCursor = true; parser.yy.cursorFound = yy_.yylloc; return 263; 
break;
case 5: this.popState(); return 316; 
break;
case 6: return 'ADVANCE'; 
break;
case 7: return 'ANALYZE'; 
break;
case 8: return 192; 
break;
case 9: return 90; 
break;
case 10: return 126; 
break;
case 11: return 'AT'; 
break;
case 12: return 'BEGINNING' 
break;
case 13: this.begin('between'); return 197; 
break;
case 14: return 198; 
break;
case 15: return 199; 
break;
case 16: return 109; 
break;
case 17: return 200; 
break;
case 18: return 201; 
break;
case 19: return 'CATALOG'; 
break;
case 20: return 'CHANGES'; 
break;
case 21: return 'COLUMN'; 
break;
case 22: return 'COLUMNS'; 
break;
case 23: return 'CONNECTOR'; 
break;
case 24: return 'CONNECTORS'; 
break;
case 25: parser.determineCase(yy_.yytext); return 20; 
break;
case 26: return 'DATE'; 
break;
case 27: return 'DAY'; 
break;
case 28: return 207; 
break;
case 29: return 'DELETE'; 
break;
case 30: return 'DESCRIBE'; 
break;
case 31: return 209; 
break;
case 32: return 210; 
break;
case 33: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('DROP', yy_.yylloc, yy.lexer.upcomingInput()); return 137; 
break;
case 34: return 211; 
break;
case 35: return 'EMIT'; 
break;
case 36: return 212; 
break;
case 37: parser.yy.correlatedSubQuery = true; return 213; 
break;
case 38: parser.determineCase(yy_.yytext); return 'EXPLAIN'; 
break;
case 39: return 'EXPORT'; 
break;
case 40: return 'EXTENDED'; 
break;
case 41: parser.determineCase(yy_.yytext); return 217; 
break;
case 42: return 218; 
break;
case 43: return 'FUNCTION'; 
break;
case 44: return 'FUNCTIONS'; 
break;
case 45: return 219; 
break;
case 46: return 220; 
break;
case 47: return 'HOPPING'; 
break;
case 48: return 'HOUR'; 
break;
case 49: return 'HOURS'; 
break;
case 50: return 222; 
break;
case 51: return 223; 
break;
case 52: return 224; 
break;
case 53: return 157; 
break;
case 54: return 225; 
break;
case 55: return 'INTEGER'; 
break;
case 56: return 158; 
break;
case 57: return 226; 
break;
case 58: return 227; 
break;
case 59: return 'KEY'; 
break;
case 60: return 228; 
break;
case 61: return 58; 
break;
case 62: return 229; 
break;
case 63: return 7; 
break;
case 64: return 'LOAD'; 
break;
case 65: return 95; 
break;
case 66: return 'MILLISECOND'; 
break;
case 67: return 'MILLISECONDS'; 
break;
case 68: return 'MINUTE'; 
break;
case 69: return 'MINUTES'; 
break;
case 70: return 'MONTH'; 
break;
case 71: return 'MONTHS'; 
break;
case 72: return 78; 
break;
case 73: return 79; 
break;
case 74: return 232; 
break;
case 75: return 233; 
break;
case 76: return 235; 
break;
case 77: return 108; 
break;
case 78: return 'PARTITIONS'; 
break;
case 79: return 'PRINT'; 
break;
case 80: return 490; 
break;
case 81: return 489; 
break;
case 82: return 'QUERY'; 
break;
case 83: return 'RENAME'; 
break;
case 84: return 'RESET'; 
break;
case 85: return 239; 
break;
case 86: return 'RUN'; 
break;
case 87: return 'SAMPLE'; 
break;
case 88: return 'SCRIPT'; 
break;
case 89: return 'SECOND'; 
break;
case 90: return 'SECOND'; 
break;
case 91: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SELECT', yy_.yylloc); return 409; 
break;
case 92: return 'SESSION'; 
break;
case 93: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SET', yy_.yylloc); return 17; 
break;
case 94: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SHOW', yy_.yylloc); return 10; 
break;
case 95: return 'SINK'; 
break;
case 96: return 'SOURCE'; 
break;
case 97: return 'STREAM'; 
break;
case 98: return 164; 
break;
case 99: return 248; 
break;
case 100: return 96; 
break;
case 101: return 44; 
break;
case 102: return 163; 
break;
case 103: return 'TERMINATE'; 
break;
case 104: return 250; 
break;
case 105: return 'TIME'; 
break;
case 106: return 251; 
break;
case 107: return 'TO'; 
break;
case 108: return 253; 
break;
case 109: return 'TOPIC'; 
break;
case 110: return 165; 
break;
case 111: return 'TUMBLING'; 
break;
case 112: return 'TYPE'; 
break;
case 113: return 'TYPES'; 
break;
case 114: return 'UNSET'; 
break;
case 115: return 123; 
break;
case 116: return 259; 
break;
case 117: return 261; 
break;
case 118: return 262; 
break;
case 119: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('WITH', yy_.yylloc); return 422; 
break;
case 120: return 'WITHIN'; 
break;
case 121: return 'YEAR'; 
break;
case 122: return 'YEARS'; 
break;
case 123: return 'ZONE'; 
break;
case 124: yy.lexer.unput('('); yy_.yytext = 'abs'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'ABS'; 
break;
case 125: yy.lexer.unput('('); yy_.yytext = 'arraycontains'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'ARRAYCONTAINS'; 
break;
case 126: yy.lexer.unput('('); yy_.yytext = 'ceil'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'CEIL'; 
break;
case 127: yy.lexer.unput('('); yy_.yytext = 'concat'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'CONCAT'; 
break;
case 128: yy.lexer.unput('('); yy_.yytext = 'datetostring'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'DATETOSTRING'; 
break;
case 129: yy.lexer.unput('('); yy_.yytext = 'elt'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'ELT'; 
break;
case 130: yy.lexer.unput('('); yy_.yytext = 'extractjsonfield'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'EXTRACTJSONFIELD'; 
break;
case 131: yy.lexer.unput('('); yy_.yytext = 'field'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'FIELD'; 
break;
case 132: yy.lexer.unput('('); yy_.yytext = 'floor'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'FLOOR'; 
break;
case 133: yy.lexer.unput('('); yy_.yytext = 'geo_distance'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'GEO_DISTANCE'; 
break;
case 134: yy.lexer.unput('('); yy_.yytext = 'ifnull'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'IFNULL'; 
break;
case 135: yy.lexer.unput('('); yy_.yytext = 'lcase'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'LCASE'; 
break;
case 136: yy.lexer.unput('('); yy_.yytext = 'len'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'LEN'; 
break;
case 137: yy.lexer.unput('('); yy_.yytext = 'msk'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'MASK'; 
break;
case 138: yy.lexer.unput('('); yy_.yytext = 'mask_keep_left'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'MASK_KEEP_LEFT'; 
break;
case 139: yy.lexer.unput('('); yy_.yytext = 'mask_keep_right'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'MASK_KEEP_RIGHT'; 
break;
case 140: yy.lexer.unput('('); yy_.yytext = 'mask_left'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'MASK_LEFT'; 
break;
case 141: yy.lexer.unput('('); yy_.yytext = 'mask_right'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'MASK_RIGHT'; 
break;
case 142: yy.lexer.unput('('); yy_.yytext = 'random'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'RANDOM'; 
break;
case 143: yy.lexer.unput('('); yy_.yytext = 'round'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'ROUND'; 
break;
case 144: yy.lexer.unput('('); yy_.yytext = 'split'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'SPLIT'; 
break;
case 145: yy.lexer.unput('('); yy_.yytext = 'stringtodate'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'STRINGTODATE'; 
break;
case 146: yy.lexer.unput('('); yy_.yytext = 'stringtotimestamp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'STRINGTOTIMESTAMP'; 
break;
case 147: yy.lexer.unput('('); yy_.yytext = 'substring'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'SUBSTRING'; 
break;
case 148: yy.lexer.unput('('); yy_.yytext = 'timestamptostring'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'TIMESTAMPTOSTRING'; 
break;
case 149: yy.lexer.unput('('); yy_.yytext = 'trim'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'TRIM'; 
break;
case 150: yy.lexer.unput('('); yy_.yytext = 'ucase'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'UCASE'; 
break;
case 151: yy.lexer.unput('('); yy_.yytext = 'url_decode_param'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'URL_DECODE_PARAM'; 
break;
case 152: yy.lexer.unput('('); yy_.yytext = 'urel_encode_param'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'URL_ENCODE_PARAM'; 
break;
case 153: yy.lexer.unput('('); yy_.yytext = 'url_extract_fragment'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'URL_EXTRACT_FRAGMENT'; 
break;
case 154: yy.lexer.unput('('); yy_.yytext = 'url_extract_host'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'URL_EXTRACT_HOST'; 
break;
case 155: yy.lexer.unput('('); yy_.yytext = 'url_extract_parameter'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'URL_EXTRACT_PARAMETER'; 
break;
case 156: yy.lexer.unput('('); yy_.yytext = 'url_extrct_path'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'URL_EXTRACT_PATH'; 
break;
case 157: yy.lexer.unput('('); yy_.yytext = 'url_extract_port'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'URL_EXTRACT_PORT'; 
break;
case 158: yy.lexer.unput('('); yy_.yytext = 'url_extract_protocol'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'URL_EXTRACT_PROTOCOL'; 
break;
case 159: yy.lexer.unput('('); yy_.yytext = 'url_extract_query'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'URL_EXTRACT_QUERY'; 
break;
case 160: yy.lexer.unput('('); yy_.yytext = 'collect_list'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'COLLECT_LIST'; 
break;
case 161: yy.lexer.unput('('); yy_.yytext = 'collect_set'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'COLLECT_SET'; 
break;
case 162: yy.lexer.unput('('); yy_.yytext = 'count'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 203; 
break;
case 163: yy.lexer.unput('('); yy_.yytext = 'historgram'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'HISTOGRAM'; 
break;
case 164: yy.lexer.unput('('); yy_.yytext = 'max'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 230; 
break;
case 165: yy.lexer.unput('('); yy_.yytext = 'min'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 231; 
break;
case 166: yy.lexer.unput('('); yy_.yytext = 'sum'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 249; 
break;
case 167: yy.lexer.unput('('); yy_.yytext = 'topk'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'TOPK'; 
break;
case 168: yy.lexer.unput('('); yy_.yytext = 'topkdistinct'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'TOPKDISTINCT'; 
break;
case 169: yy.lexer.unput('('); yy_.yytext = 'windowstart'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'WindowStart'; 
break;
case 170: yy.lexer.unput('('); yy_.yytext = 'windowend'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'WindowEnd'; 
break;
case 171: return 255; 
break;
case 172: return 255; 
break;
case 173: return 256; 
break;
case 174: return 179; 
break;
case 175: return 192; 
break;
case 176: return 233; 
break;
case 177: return 186; 
break;
case 178: return 91; 
break;
case 179: return 92; 
break;
case 180: return 125; 
break;
case 181: return 125; 
break;
case 182: return 125; 
break;
case 183: return 125; 
break;
case 184: return 125; 
break;
case 185: return 184; 
break;
case 186: return 183; 
break;
case 187: return 193; 
break;
case 188: return 193; 
break;
case 189: return 193; 
break;
case 190: return 193; 
break;
case 191: return 193; 
break;
case 192: return 193; 
break;
case 193: return 68; 
break;
case 194: return 185; 
break;
case 195: return 103; 
break;
case 196: return 173; 
break;
case 197: return 189; 
break;
case 198: return 182; 
break;
case 199: return 62; 
break;
case 200: return 64; 
break;
case 201: return 187; 
break;
case 202: return 188; 
break;
case 203: return 180; 
break;
case 204: this.begin('backtickedValue'); return 196; 
break;
case 205:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '`')) {
                                               return 267;
                                             }
                                             return 32;
                                           
break;
case 206: this.popState(); return 196; 
break;
case 207: this.begin('singleQuotedValue'); return 30; 
break;
case 208:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '\'')) {
                                               return 267;
                                             }
                                             return 32;
                                           
break;
case 209: this.popState(); return 30; 
break;
case 210: this.begin('doubleQuotedValue'); return 31; 
break;
case 211:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '"')) {
                                               return 267;
                                             }
                                             return 32;
                                           
break;
case 212: this.popState(); return 31; 
break;
case 213: return 169; 
break;
case 214: /* To prevent console logging of unknown chars */ 
break;
case 215: 
break;
case 216: 
break;
case 217: 
break;
case 218: 
break;
case 219: 
break;
case 220:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s)/i,/^(?:--.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:AND)/i,/^(?:ADVANCE)/i,/^(?:ANALYZE)/i,/^(?:AND)/i,/^(?:ARRAY)/i,/^(?:AS)/i,/^(?:AT)/i,/^(?:BEGINNING)/i,/^(?:BETWEEN)/i,/^(?:BIGINT)/i,/^(?:BOOLEAN)/i,/^(?:BY)/i,/^(?:CASE)/i,/^(?:CAST)/i,/^(?:CATALOG)/i,/^(?:CHANGES)/i,/^(?:COLUMN)/i,/^(?:COLUMNS)/i,/^(?:CONNECTOR)/i,/^(?:CONNECTORS)/i,/^(?:CREATE)/i,/^(?:DATE)/i,/^(?:DAY)/i,/^(?:DECIMAL)/i,/^(?:DELETE)/i,/^(?:DESCRIBE)/i,/^(?:DISTINCT)/i,/^(?:DOUBLE)/i,/^(?:DROP)/i,/^(?:ELSE)/i,/^(?:EMIT)/i,/^(?:END)/i,/^(?:EXISTS)/i,/^(?:EXPLAIN)/i,/^(?:EXPORT)/i,/^(?:EXTENDED)/i,/^(?:FROM)/i,/^(?:FULL)/i,/^(?:FUNCTION)/i,/^(?:FUNCTIONS)/i,/^(?:GROUP)/i,/^(?:HAVING)/i,/^(?:HOPPING)/i,/^(?:HOUR)/i,/^(?:HOURS)/i,/^(?:IF)/i,/^(?:IN)/i,/^(?:INNER)/i,/^(?:INSERT)/i,/^(?:INT)/i,/^(?:INTEGER)/i,/^(?:INTO)/i,/^(?:IS)/i,/^(?:JOIN)/i,/^(?:KEY)/i,/^(?:LEFT)/i,/^(?:LIKE)/i,/^(?:LIMIT)/i,/^(?:LIST)/i,/^(?:LOAD)/i,/^(?:MAP)/i,/^(?:MILLISECOND)/i,/^(?:MILLISECONDS)/i,/^(?:MINUTE)/i,/^(?:MINUTES)/i,/^(?:MONTH)/i,/^(?:MONTHS)/i,/^(?:NOT)/i,/^(?:NULL)/i,/^(?:ON)/i,/^(?:OR)/i,/^(?:OUTER)/i,/^(?:PARTITION)/i,/^(?:PARTITIONS)/i,/^(?:PRINT)/i,/^(?:PROPERTIES)/i,/^(?:QUERIES)/i,/^(?:QUERY)/i,/^(?:RENAME)/i,/^(?:RESET)/i,/^(?:RIGHT)/i,/^(?:RUN)/i,/^(?:SAMPLE)/i,/^(?:SCRIPT)/i,/^(?:SECOND)/i,/^(?:SECOND)/i,/^(?:SELECT)/i,/^(?:SESSION)/i,/^(?:SET)/i,/^(?:SHOW)/i,/^(?:SINK)/i,/^(?:SOURCE)/i,/^(?:STREAM)/i,/^(?:STREAMS)/i,/^(?:STRING)/i,/^(?:STRUCT)/i,/^(?:TABLE)/i,/^(?:TABLES)/i,/^(?:TERMINATE)/i,/^(?:THEN)/i,/^(?:TIME)/i,/^(?:TIMESTAMP)/i,/^(?:TO)/i,/^(?:TRUE)/i,/^(?:TOPIC)/i,/^(?:TOPICS)/i,/^(?:TUMBLING)/i,/^(?:TYPE)/i,/^(?:TYPES)/i,/^(?:UNSET)/i,/^(?:VALUES)/i,/^(?:VARCHAR)/i,/^(?:WHEN)/i,/^(?:WHERE)/i,/^(?:WITH)/i,/^(?:WITHIN)/i,/^(?:YEAR)/i,/^(?:YEARS)/i,/^(?:ZONE)/i,/^(?:ABS\s*\()/i,/^(?:ARRAYCONTAINS\s*\()/i,/^(?:CEIL\s*\()/i,/^(?:CONCAT\s*\()/i,/^(?:DATETOSTRING\s*\()/i,/^(?:ELT\s*\()/i,/^(?:EXTRACTJSONFIELD\s*\()/i,/^(?:FIELD\s*\()/i,/^(?:FLOOR\s*\()/i,/^(?:GEO_DISTANCE\s*\()/i,/^(?:IFNULL\s*\()/i,/^(?:LCASE\s*\()/i,/^(?:LEN\s*\()/i,/^(?:MASK\s*\()/i,/^(?:MASK_KEEP_LEFT\s*\()/i,/^(?:MASK_KEEP_RIGHT\s*\()/i,/^(?:MASK_LEFT\s*\()/i,/^(?:MASK_RIGHT\s*\()/i,/^(?:RANDOM\s*\()/i,/^(?:ROUND\s*\()/i,/^(?:SPLIT\s*\()/i,/^(?:STRINGTODATE\s*\()/i,/^(?:STRINGTOTIMESTAMP\s*\()/i,/^(?:SUBSTRING\s*\()/i,/^(?:TIMESTAMPTOSTRING\s*\()/i,/^(?:TRIM\s*\()/i,/^(?:UCASE\s*\()/i,/^(?:URL_DECODE_PARAM\s*\()/i,/^(?:URL_ENCODE_PARAM\s*\()/i,/^(?:URL_EXTRACT_FRAGMENT\s*\()/i,/^(?:URL_EXTRACT_HOST\s*\()/i,/^(?:URL_EXTRACT_PARAMETER\s*\()/i,/^(?:URL_EXTRACT_PATH\s*\()/i,/^(?:URL_EXTRACT_PORT\s*\()/i,/^(?:URL_EXTRACT_PROTOCOL\s*\()/i,/^(?:URL_EXTRACT_QUERY\s*\()/i,/^(?:COLLECT_LIST\s*\()/i,/^(?:COLLECT_SET\s*\()/i,/^(?:COUNT\s*\()/i,/^(?:HISTOGRAM\s*\()/i,/^(?:MAX\s*\()/i,/^(?:MIN\s*\()/i,/^(?:SUM\s*\()/i,/^(?:TOPK\s*\()/i,/^(?:TOPKDISTINCT\s*\()/i,/^(?:WindowStart\s*\()/i,/^(?:WindowEnd\s*\()/i,/^(?:[0-9]+)/i,/^(?:[0-9]+(?:[YSL]|BD)?)/i,/^(?:[0-9]+E)/i,/^(?:[A-Za-z0-9_]+)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<>)/i,/^(?:<=>)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\+)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\|)/i,/^(?:\^)/i,/^(?:&)/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:;)/i,/^(?:~)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\$\{[^}]*\})/i,/^(?:`)/i,/^(?:[^`]+)/i,/^(?:`)/i,/^(?:')/i,/^(?:(?:\\\\|\\[']|[^'])+)/i,/^(?:')/i,/^(?:")/i,/^(?:(?:\\\\|\\["]|[^"])+)/i,/^(?:")/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"hdfs":{"rules":[216],"inclusive":false},"doubleQuotedValue":{"rules":[211,212,219],"inclusive":false},"singleQuotedValue":{"rules":[208,209,218],"inclusive":false},"backtickedValue":{"rules":[205,206,217],"inclusive":false},"between":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,207,210,213,214,215,220],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,207,210,213,214,220],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
export default ksqlSyntaxParser;
