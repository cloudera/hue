// Licensed to Cloudera, Inc. under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  Cloudera, Inc. licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import SqlParseSupport from 'parse/sql/ksql/sqlParseSupport';

var ksqlSyntaxParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,9,15,25,144,150,157,170,174,317,327],$V1=[2,256],$V2=[170,174],$V3=[2,257],$V4=[1,10],$V5=[1,12],$V6=[1,25],$V7=[1,29],$V8=[1,30],$V9=[1,31],$Va=[1,32],$Vb=[1,27],$Vc=[1,28],$Vd=[61,170,174],$Ve=[2,540],$Vf=[1,48],$Vg=[1,59],$Vh=[1,57],$Vi=[1,58],$Vj=[1,54],$Vk=[1,55],$Vl=[2,573],$Vm=[1,61],$Vn=[1,62],$Vo=[1,67],$Vp=[1,72],$Vq=[1,73],$Vr=[61,170,174,255],$Vs=[186,187],$Vt=[35,38,39,55,59,61,65,75,87,88,89,92,93,100,105,109,120,122,123,134,149,170,174,179,180,181,184,185,186,187,193,194,195,197,198,199,200,203,205,208,209,211,212,213,216,218,219,220,221,224,225,226,227,228,229,230,233,234,235,236,239,240,241,243,245,246,249,251,252,253,255,260,262,263,276,376],$Vu=[1,133],$Vv=[1,134],$Vw=[1,97],$Vx=[1,92],$Vy=[1,103],$Vz=[1,106],$VA=[1,108],$VB=[1,109],$VC=[1,93],$VD=[1,90],$VE=[1,95],$VF=[1,131],$VG=[1,94],$VH=[1,119],$VI=[1,137],$VJ=[1,98],$VK=[1,120],$VL=[1,127],$VM=[1,96],$VN=[1,136],$VO=[1,107],$VP=[1,138],$VQ=[1,139],$VR=[1,140],$VS=[1,141],$VT=[1,128],$VU=[1,135],$VV=[1,130],$VW=[1,132],$VX=[1,142],$VY=[1,143],$VZ=[1,144],$V_=[38,39,59,61,75,76,87,92,93,134,150,179,180,181,183,184,185,186,190,192,196,197,201,202,204,214,215,223,231,232,247,248,250,254,256,257,258,259,261,317],$V$=[59,65,317],$V01=[93,134,170,174,179,180,181],$V11=[2,413],$V21=[1,150],$V31=[93,134,179,180,181,197],$V41=[93,134,170,174,179,180,181,197,223],$V51=[2,410],$V61=[1,155],$V71=[61,65,170,174,218,255],$V81=[2,949],$V91=[1,200],$Va1=[1,188],$Vb1=[1,185],$Vc1=[1,186],$Vd1=[1,187],$Ve1=[1,199],$Vf1=[1,194],$Vg1=[1,193],$Vh1=[1,184],$Vi1=[1,192],$Vj1=[1,195],$Vk1=[1,190],$Vl1=[1,189],$Vm1=[1,183],$Vn1=[1,191],$Vo1=[1,202],$Vp1=[1,201],$Vq1=[38,39,55,61,65,75,88,89,93,109,122,123,134,170,174,179,180,181,184,185,187,193,194,195,197,198,205,209,212,213,218,219,220,221,224,225,227,228,229,230,234,235,236,239,240,241,243,245,251,255,262,263,376],$Vr1=[1,208],$Vs1=[1,214],$Vt1=[1,216],$Vu1=[38,39,55,59,61,65,75,88,89,93,109,122,123,134,170,174,179,180,181,184,185,187,193,194,195,197,198,205,209,212,213,218,219,220,221,224,225,227,228,229,230,234,235,236,239,240,241,243,245,251,255,262,263,376],$Vv1=[1,221],$Vw1=[35,38,39,55,59,61,65,75,88,89,93,109,122,123,134,170,174,179,180,181,184,185,186,187,193,194,195,197,198,205,209,212,213,218,219,220,221,224,225,227,228,229,230,234,235,236,239,240,241,243,245,251,255,262,263,376],$Vx1=[38,39,55,61,65,75,88,89,93,109,122,123,134,170,174,179,180,181,184,185,187,193,194,195,197,198,205,209,212,213,218,219,220,221,224,225,227,228,229,230,234,235,236,237,239,240,241,243,245,251,255,262,263,376],$Vy1=[35,61,65,75,76,89,123,170,174,205,218,219,220,221,225,228,229,230,233,235,236,240,245,255,263],$Vz1=[61,170,174,220,221,230,235,255],$VA1=[76,210,215,254],$VB1=[61,65,170,174,205,218,219,220,221,225,228,229,230,233,235,236,240,245,255,263],$VC1=[38,39,61,65,75,93,109,123,134,170,174,179,180,181,193,195,197,198,205,209,212,213,218,219,220,221,225,228,229,230,234,235,236,240,243,245,251,255,262,263,376],$VD1=[38,39,61,65,75,88,89,93,109,122,123,134,170,174,179,180,181,184,185,187,193,194,195,197,198,205,209,212,213,218,219,220,221,225,228,229,230,234,235,236,240,243,245,251,255,262,263,376],$VE1=[317,327],$VF1=[2,927],$VG1=[212,213,262],$VH1=[38,39,59,75,76,87,92,93,134,150,179,180,181,183,185,186,190,192,196,197,201,202,204,214,215,223,231,232,247,248,250,254,256,257,258,259,261],$VI1=[35,38,39,55,61,65,75,76,88,89,93,109,122,123,134,170,174,179,180,181,184,185,187,193,194,195,197,198,205,209,212,213,218,219,220,221,224,225,227,228,229,230,233,234,235,236,239,240,241,243,245,251,255,262,263,376],$VJ1=[2,28],$VK1=[1,329],$VL1=[123,170,174],$VM1=[105,123,170,174],$VN1=[35,55,59,105,123,170,174],$VO1=[35,123],$VP1=[38,39,61,65,93,105,120,123,134,149,170,174,179,180,181,197,205,219,220,221,225,228,229,230,233,235,236,240,245,255,263],$VQ1=[61,170,174,221,230,235,255],$VR1=[61,65,170,174,220,221,230,235,255,263],$VS1=[1,356],$VT1=[1,357],$VU1=[1,358],$VV1=[1,359],$VW1=[1,360],$VX1=[1,361],$VY1=[1,362],$VZ1=[1,363],$V_1=[61,65,170,174,205,219,220,221,225,228,229,230,233,235,236,240,245,255,263],$V$1=[38,39,61,65,93,123,134,170,174,179,180,181,197,205,219,220,221,225,228,229,230,233,235,236,240,245,255,263],$V02=[38,39,61,65,75,88,89,93,109,122,123,134,170,174,179,180,181,187,193,195,197,198,205,209,212,213,218,219,220,221,225,228,229,230,234,235,236,240,243,245,251,255,262,263,376],$V12=[38,39,61,65,93,109,123,134,170,174,179,180,181,193,195,197,205,209,212,213,218,219,220,221,225,228,229,230,234,235,236,240,243,245,251,255,262,263,376],$V22=[1,388],$V32=[61,65,235],$V42=[61,235],$V52=[1,418],$V62=[61,170,174,230,235,255],$V72=[59,93,134,179,180,181,197],$V82=[38,39,55,61,65,75,88,89,93,109,122,123,134,170,174,179,180,181,184,185,187,193,194,195,197,198,205,209,212,213,218,219,220,221,224,225,227,228,229,230,233,234,235,236,239,240,241,243,245,251,255,262,263,376],$V92=[1,453],$Va2=[1,456],$Vb2=[1,457],$Vc2=[1,458],$Vd2=[1,459],$Ve2=[1,460],$Vf2=[1,461],$Vg2=[1,462],$Vh2=[1,463],$Vi2=[1,464],$Vj2=[1,465],$Vk2=[1,466],$Vl2=[1,467],$Vm2=[61,65],$Vn2=[1,484],$Vo2=[1,485],$Vp2=[1,486],$Vq2=[35,61,65],$Vr2=[61,170,174,230,255],$Vs2=[61,65,170,174,205,219,220,221,225,228,229,230,235,236,240,245,255,263],$Vt2=[2,908],$Vu2=[1,502],$Vv2=[35,61,65,75,76,89],$Vw2=[2,522],$Vx2=[1,524],$Vy2=[1,535],$Vz2=[1,536],$VA2=[61,65,170,174,221,230,235,255],$VB2=[198,476],$VC2=[35,61,65,75,76],$VD2=[61,193,206,256,476],$VE2=[2,1025],$VF2=[61,65,109,170,174,230,243,255],$VG2=[1,590],$VH2=[65,89],$VI2=[61,193],$VJ2=[2,1035],$VK2=[1,602],$VL2=[1,603],$VM2=[1,604],$VN2=[2,1040],$VO2=[1,619],$VP2=[217,238],$VQ2=[1,629],$VR2=[1,630],$VS2=[2,168],$VT2=[2,169];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"DataDefinition":3,"CreateStatement":4,"DropStatement":5,"LIST":6,"ListStatement":7,"SetSpecification":8,"SHOW":9,"ShowStatement":10,"DataDefinition_EDIT":11,"CreateStatement_EDIT":12,"DropStatement_EDIT":13,"ListStatement_EDIT":14,"SET":15,"CURSOR":16,"ShowStatement_EDIT":17,"DatabaseDefinition":18,"TableDefinition":19,"ViewDefinition":20,"RoleDefinition":21,"DatabaseDefinition_EDIT":22,"TableDefinition_EDIT":23,"ViewDefinition_EDIT":24,"CREATE":25,"DatabaseOrSchema":26,"OptionalIfNotExists":27,"RegularIdentifier":28,"DatabaseDefinitionOptionals":29,"OptionalIfNotExists_EDIT":30,"OptionalComment":31,"DatabaseDefinitionOptionals_EDIT":32,"OptionalComment_INVALID":33,"Comment":34,"COMMENT":35,"QuotedValue":36,"Comment_INVALID":37,"SINGLE_QUOTE":38,"DOUBLE_QUOTE":39,"VALUE":40,"TABLE":41,"TableDefinitionRightPart":42,"TableDefinitionRightPart_EDIT":43,"TableIdentifierAndOptionalColumnSpecification":44,"OptionalPartitionedBy":45,"OptionalAsSelectStatement":46,"TableIdentifierAndOptionalColumnSpecification_EDIT":47,"PartitionedBy_EDIT":48,"OptionalAsSelectStatement_EDIT":49,"SchemaQualifiedIdentifier":50,"OptionalColumnSpecificationsOrLike":51,"OptionalColumnSpecificationsOrLike_EDIT":52,"SchemaQualifiedIdentifier_EDIT":53,"ParenthesizedColumnSpecificationList":54,"LIKE":55,"SchemaQualifiedTableIdentifier":56,"ParenthesizedColumnSpecificationList_EDIT":57,"SchemaQualifiedTableIdentifier_EDIT":58,"(":59,"ColumnSpecificationList":60,")":61,"ColumnSpecificationList_EDIT":62,"RightParenthesisOrError":63,"ColumnSpecification":64,",":65,"ColumnSpecification_EDIT":66,"ColumnIdentifier":67,"ColumnDataType":68,"OptionalColumnOptions":69,"ColumnDataType_EDIT":70,"ColumnOptions_EDIT":71,"ColumnOptions":72,"ColumnOption":73,"ColumnOption_EDIT":74,"NOT":75,"NULL":76,"PrimitiveType":77,"ArrayType":78,"MapType":79,"StructType":80,"ArrayType_INVALID":81,"MapType_INVALID":82,"StructType_INVALID":83,"ArrayType_EDIT":84,"MapType_EDIT":85,"StructType_EDIT":86,"ARRAY":87,"<":88,">":89,"AnyCursor":90,"GreaterThanOrError":91,"MAP":92,"STRUCT":93,"StructDefinitionList":94,"StructDefinitionList_EDIT":95,"StructDefinition":96,"StructDefinition_EDIT":97,"Commas":98,"RegularOrBacktickedIdentifier":99,":":100,"ColumnDataTypeList":101,"ColumnDataTypeList_EDIT":102,"ColumnDataTypeListInner_EDIT":103,"PartitionedBy":104,"PARTITION":105,"BY":106,"RangeClause":107,"RangeClause_EDIT":108,"RANGE":109,"ParenthesizedColumnList":110,"ParenthesizedPartitionValuesList":111,"ParenthesizedColumnList_EDIT":112,"ParenthesizedPartitionValuesList_EDIT":113,"PartitionValueList":114,"PartitionValueList_EDIT":115,"PartitionValue":116,"PartitionValue_EDIT":117,"ValueExpression":118,"LessThanOrEqualTo":119,"VALUES":120,"ValueExpression_EDIT":121,"COMPARISON_OPERATOR":122,"AS":123,"CommitLocations":124,"QuerySpecification":125,"QuerySpecification_EDIT":126,"VIEW":127,"OptionalParenthesizedViewColumnList":128,"ParenthesizedViewColumnList_EDIT":129,"ParenthesizedViewColumnList":130,"ViewColumnList":131,"ViewColumnList_EDIT":132,"ColumnReference":133,"ROLE":134,"DropDatabaseStatement":135,"DropRoleStatement":136,"DropTableStatement":137,"DropViewStatement":138,"TruncateTableStatement":139,"DropDatabaseStatement_EDIT":140,"DropTableStatement_EDIT":141,"DropViewStatement_EDIT":142,"TruncateTableStatement_EDIT":143,"DROP":144,"OptionalIfExists":145,"OptionalCascade":146,"OptionalIfExists_EDIT":147,"OptionalPurge":148,"PURGE":149,"TRUNCATE":150,"OptionalPartitionSpec":151,"DataManipulation":152,"InsertStatement":153,"InsertValuesStatement":154,"DataManipulation_EDIT":155,"InsertValuesStatement_EDIT":156,"INSERT":157,"INTO":158,"OptionalTable":159,"InsertValuesList":160,"ParenthesizedRowValuesList":161,"RowValuesList":162,"InValueList":163,"TABLES":164,"STREAMS":165,"TOPICS":166,"SqlSyntax":167,"NewStatement":168,"SqlStatements":169,"EOF":170,"SqlAutocomplete":171,"SqlStatements_EDIT":172,"SqlStatement":173,";":174,"SqlStatement_EDIT":175,"CommonTableExpression":176,"SetSpecification_EDIT":177,"NonReservedKeyword":178,"OPTION":179,"REGULAR_IDENTIFIER":180,"VARIABLE_REFERENCE":181,"NonStartingToken":182,"!":183,"*":184,"-":185,".":186,"=":187,"[":188,"]":189,"~":190,"ALL":191,"ANALYTIC":192,"AND":193,"ARITHMETIC_OPERATOR":194,"ASC":195,"AVG":196,"BACKTICK":197,"BETWEEN":198,"BIGINT":199,"BOOLEAN":200,"CASE":201,"CAST":202,"CHAR":203,"COUNT":204,"CROSS":205,"CURRENT":206,"DATABASE":207,"DECIMAL":208,"DESC":209,"DISTINCT":210,"DOUBLE":211,"ELSE":212,"END":213,"EXISTS":214,"FALSE":215,"FLOAT":216,"FOLLOWING":217,"FROM":218,"FULL":219,"GROUP":220,"HAVING":221,"HDFS_START_QUOTE":222,"IF":223,"IN":224,"INNER":225,"INT":226,"IS":227,"JOIN":228,"LEFT":229,"LIMIT":230,"MAX":231,"MIN":232,"ON":233,"OR":234,"ORDER":235,"OUTER":236,"OVER":237,"PRECEDING":238,"REGEXP":239,"RIGHT":240,"RLIKE":241,"ROW":242,"ROWS":243,"SCHEMA":244,"SEMI":245,"SMALLINT":246,"STDDEV_POP":247,"STDDEV_SAMP":248,"STRING":249,"SUM":250,"THEN":251,"TIMESTAMP":252,"TINYINT":253,"TRUE":254,"UNION":255,"UNSIGNED_INTEGER":256,"UNSIGNED_INTEGER_E":257,"VAR_POP":258,"VAR_SAMP":259,"VARCHAR":260,"VARIANCE":261,"WHEN":262,"WHERE":263,"PARTIAL_CURSOR":264,"FromOrIn":265,"SingleQuotedValue":266,"SingleQuotedValue_EDIT":267,"PARTIAL_VALUE":268,"DoubleQuotedValue":269,"DoubleQuotedValue_EDIT":270,"QuotedValue_EDIT":271,"OptionalFromDatabase":272,"DatabaseIdentifier":273,"OptionalFromDatabase_EDIT":274,"DatabaseIdentifier_EDIT":275,"CASCADE":276,"OptionalInDatabase":277,"PartitionSpec":278,"OptionalPartitionSpec_EDIT":279,"PartitionSpec_EDIT":280,"PartitionSpecList":281,"PartitionSpecList_EDIT":282,"RangePartitionSpec":283,"UnsignedValueSpecification":284,"RangePartitionComparisonOperator":285,"RangePartitionSpec_EDIT":286,"ConfigurationName":287,"PartialBacktickedOrAnyCursor":288,"PartialBacktickedIdentifier":289,"PartialBacktickedOrCursor":290,"PartialBacktickedOrPartialCursor":291,"OptionalParenthesizedColumnList":292,"OptionalParenthesizedColumnList_EDIT":293,"ColumnList":294,"ColumnList_EDIT":295,"ParenthesizedSimpleValueList":296,"SimpleValueList":297,"PartitionExpression":298,"PartitionExpression_EDIT":299,"RegularOrBackTickedSchemaQualifiedName":300,"RegularOrBackTickedSchemaQualifiedName_EDIT":301,"LocalOrSchemaQualifiedName":302,"LocalOrSchemaQualifiedName_EDIT":303,"BasicIdentifierChain":304,"ColumnReference_EDIT":305,"BasicIdentifierChain_EDIT":306,"DerivedColumnChain":307,"DerivedColumnChain_EDIT":308,"PartialBacktickedIdentifierOrPartialCursor":309,"OptionalTypeLength":310,"OptionalTypePrecision":311,"SelectStatement":312,"OptionalUnions":313,"SelectStatement_EDIT":314,"OptionalUnions_EDIT":315,"CommonTableExpression_EDIT":316,"SELECT":317,"OptionalAllOrDistinct":318,"SelectList":319,"TableExpression":320,"Unions":321,"Unions_EDIT":322,"UnionClause":323,"UnionClause_EDIT":324,"SelectList_EDIT":325,"TableExpression_EDIT":326,"WITH":327,"WithQueries":328,"WithQueries_EDIT":329,"WithQuery":330,"WithQuery_EDIT":331,"TableSubQueryInner":332,"TableSubQueryInner_EDIT":333,"FromClause":334,"OptionalSelectConditions":335,"FromClause_EDIT":336,"OptionalJoins":337,"OptionalSelectConditions_EDIT":338,"Joins":339,"Joins_INVALID":340,"TableReferenceList":341,"TableReferenceList_EDIT":342,"OptionalWhereClause":343,"OptionalGroupByClause":344,"OptionalHavingClause":345,"OptionalOrderByClause":346,"OptionalLimitClause":347,"WhereClause_EDIT":348,"GroupByClause_EDIT":349,"HavingClause_EDIT":350,"OrderByClause_EDIT":351,"LimitClause_EDIT":352,"WhereClause":353,"GroupByClause":354,"HavingClause":355,"OrderByClause":356,"LimitClause":357,"SearchCondition":358,"SearchCondition_EDIT":359,"GroupByColumnList":360,"GroupByColumnList_EDIT":361,"ColumnGroupingSets":362,"ColumnGroupingSets_EDIT":363,"ColumnGroupingSet_EDIT":364,"GroupByColumnListPartTwo_EDIT":365,"OrderByColumnList":366,"OrderByColumnList_EDIT":367,"OrderByIdentifier":368,"OrderByIdentifier_EDIT":369,"OptionalAscOrDesc":370,"UnsignedNumericLiteral":371,"NonParenthesizedValueExpressionPrimary":372,"OptionalNot":373,"TableSubQuery":374,"ValueExpressionList":375,"BETWEEN_AND":376,"LikeRightPart":377,"CaseRightPart":378,"NonParenthesizedValueExpressionPrimary_EDIT":379,"TableSubQuery_EDIT":380,"ValueExpressionInSecondPart_EDIT":381,"LikeRightPart_EDIT":382,"CaseRightPart_EDIT":383,"EndOrError":384,"ValueExpressionList_EDIT":385,"ColumnOrArbitraryFunctionRef":386,"ArbitraryFunctionRightPart":387,"ArbitraryFunctionName":388,"UserDefinedFunction":389,"UnsignedValueSpecification_EDIT":390,"ColumnOrArbitraryFunctionRef_EDIT":391,"ArbitraryFunctionRightPart_EDIT":392,"UserDefinedFunction_EDIT":393,"SignedInteger":394,"+":395,"UnsignedLiteral":396,"UnsignedLiteral_EDIT":397,"GeneralLiteral":398,"GeneralLiteral_EDIT":399,"ExactNumericLiteral":400,"ApproximateNumericLiteral":401,"TruthValue":402,"SelectSpecification":403,"OptionalCorrelationName":404,"SelectSpecification_EDIT":405,"OptionalCorrelationName_EDIT":406,"TableReference":407,"TableReference_EDIT":408,"TablePrimaryOrJoinedTable":409,"TablePrimaryOrJoinedTable_EDIT":410,"TablePrimary":411,"JoinedTable":412,"TablePrimary_EDIT":413,"JoinedTable_EDIT":414,"Joins_EDIT":415,"JoinType":416,"OptionalJoinCondition":417,"Join_EDIT":418,"JoinType_EDIT":419,"JoinCondition_EDIT":420,"UsingColList":421,"TableOrQueryName":422,"DerivedTable":423,"TableOrQueryName_EDIT":424,"DerivedTable_EDIT":425,"OptionalOnColumn":426,"OptionalOnColumn_EDIT":427,"PushQueryState":428,"PopQueryState":429,"SubQuery":430,"SubQuery_EDIT":431,"QueryExpression":432,"QueryExpression_EDIT":433,"QueryExpressionBody":434,"QueryExpressionBody_EDIT":435,"NonJoinQueryExpression":436,"NonJoinQueryExpression_EDIT":437,"NonJoinQueryTerm":438,"NonJoinQueryTerm_EDIT":439,"NonJoinQueryPrimary":440,"NonJoinQueryPrimary_EDIT":441,"SimpleTable":442,"SimpleTable_EDIT":443,"AggregateFunction":444,"OptionalOverClause":445,"AnalyticFunction":446,"OverClause":447,"CastFunction":448,"AggregateFunction_EDIT":449,"OptionalOverClause_EDIT":450,"AnalyticFunction_EDIT":451,"OverClause_EDIT":452,"CastFunction_EDIT":453,"ArbitraryFunction":454,"ArbitraryFunction_EDIT":455,"CountFunction":456,"SumFunction":457,"OtherAggregateFunction":458,"CountFunction_EDIT":459,"SumFunction_EDIT":460,"OtherAggregateFunction_EDIT":461,"WindowExpression":462,"WindowExpression_EDIT":463,"OptionalPartitionBy":464,"OptionalOrderByAndWindow":465,"PartitionBy_EDIT":466,"OptionalOrderByAndWindow_EDIT":467,"PartitionBy":468,"OptionalWindowSpec":469,"WindowSpec_EDIT":470,"WindowSpec":471,"RowsOrRange":472,"PopLexerState":473,"OptionalCurrentOrPreceding":474,"OptionalAndFollowing":475,"UNBOUNDED":476,"OptionalCurrentOrPreceding_EDIT":477,"OptionalAndFollowing_EDIT":478,"PushHdfsLexerState":479,"HdfsPath":480,"HDFS_PATH":481,"HDFS_END_QUOTE":482,"HdfsPath_EDIT":483,"IntegerOrUnbounded":484,"OtherAggregateFunction_Type":485,"FromOrComma":486,"SetOption":487,"SetValue":488,"QUERIES":489,"PROPERTIES":490,"CaseWhenThenList":491,"CaseWhenThenList_EDIT":492,"CaseWhenThenListPartTwo":493,"CaseWhenThenListPartTwo_EDIT":494,"$accept":0,"$end":1},
terminals_: {2:"error",6:"LIST",9:"SHOW",15:"SET",16:"CURSOR",25:"CREATE",35:"COMMENT",38:"SINGLE_QUOTE",39:"DOUBLE_QUOTE",40:"VALUE",41:"TABLE",55:"LIKE",59:"(",61:")",65:",",75:"NOT",76:"NULL",87:"ARRAY",88:"<",89:">",92:"MAP",93:"STRUCT",100:":",105:"PARTITION",106:"BY",109:"RANGE",120:"VALUES",122:"COMPARISON_OPERATOR",123:"AS",127:"VIEW",134:"ROLE",144:"DROP",149:"PURGE",150:"TRUNCATE",157:"INSERT",158:"INTO",162:"RowValuesList",164:"TABLES",165:"STREAMS",166:"TOPICS",170:"EOF",174:";",177:"SetSpecification_EDIT",179:"OPTION",180:"REGULAR_IDENTIFIER",181:"VARIABLE_REFERENCE",183:"!",184:"*",185:"-",186:".",187:"=",188:"[",189:"]",190:"~",191:"ALL",192:"ANALYTIC",193:"AND",194:"ARITHMETIC_OPERATOR",195:"ASC",196:"AVG",197:"BACKTICK",198:"BETWEEN",199:"BIGINT",200:"BOOLEAN",201:"CASE",202:"CAST",203:"CHAR",204:"COUNT",205:"CROSS",206:"CURRENT",207:"DATABASE",208:"DECIMAL",209:"DESC",210:"DISTINCT",211:"DOUBLE",212:"ELSE",213:"END",214:"EXISTS",215:"FALSE",216:"FLOAT",217:"FOLLOWING",218:"FROM",219:"FULL",220:"GROUP",221:"HAVING",222:"HDFS_START_QUOTE",223:"IF",224:"IN",225:"INNER",226:"INT",227:"IS",228:"JOIN",229:"LEFT",230:"LIMIT",231:"MAX",232:"MIN",233:"ON",234:"OR",235:"ORDER",236:"OUTER",237:"OVER",238:"PRECEDING",239:"REGEXP",240:"RIGHT",241:"RLIKE",242:"ROW",243:"ROWS",244:"SCHEMA",245:"SEMI",246:"SMALLINT",247:"STDDEV_POP",248:"STDDEV_SAMP",249:"STRING",250:"SUM",251:"THEN",252:"TIMESTAMP",253:"TINYINT",254:"TRUE",255:"UNION",256:"UNSIGNED_INTEGER",257:"UNSIGNED_INTEGER_E",258:"VAR_POP",259:"VAR_SAMP",260:"VARCHAR",261:"VARIANCE",262:"WHEN",263:"WHERE",264:"PARTIAL_CURSOR",268:"PARTIAL_VALUE",276:"CASCADE",317:"SELECT",327:"WITH",376:"BETWEEN_AND",395:"+",476:"UNBOUNDED",481:"HDFS_PATH",482:"HDFS_END_QUOTE",489:"QUERIES",490:"PROPERTIES"},
productions_: [0,[3,1],[3,1],[3,2],[3,1],[3,2],[11,1],[11,1],[11,1],[11,2],[11,1],[4,1],[4,1],[4,1],[4,1],[12,1],[12,1],[12,1],[12,2],[18,3],[18,5],[22,4],[22,3],[22,5],[22,4],[22,6],[29,1],[32,1],[31,0],[31,1],[34,2],[33,1],[37,2],[37,2],[37,3],[37,3],[19,4],[23,4],[23,4],[23,3],[42,3],[43,3],[43,3],[43,3],[43,3],[44,2],[47,2],[47,2],[51,0],[51,1],[51,2],[52,1],[52,2],[52,2],[54,3],[57,3],[60,1],[60,3],[62,1],[62,3],[62,3],[62,5],[62,2],[62,4],[62,4],[62,6],[64,3],[66,3],[66,3],[66,3],[69,0],[69,1],[72,1],[72,2],[71,1],[71,2],[71,2],[71,3],[73,2],[73,1],[73,1],[74,2],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[70,1],[70,1],[70,1],[78,4],[81,3],[84,4],[84,4],[79,6],[82,3],[85,6],[85,4],[85,6],[85,5],[80,4],[83,3],[86,4],[94,1],[94,3],[95,1],[95,2],[95,3],[95,3],[95,5],[96,4],[97,5],[97,4],[97,4],[97,4],[97,3],[97,3],[101,1],[101,3],[102,1],[102,2],[102,3],[102,3],[102,5],[103,2],[103,2],[103,1],[103,1],[91,1],[91,1],[45,0],[45,1],[104,3],[48,2],[48,3],[48,3],[107,3],[108,2],[108,2],[108,3],[108,3],[108,3],[111,3],[113,3],[113,3],[114,1],[114,3],[115,1],[115,3],[115,5],[115,3],[115,5],[116,6],[116,4],[116,4],[117,2],[117,2],[117,3],[117,4],[117,4],[117,5],[117,6],[117,6],[117,3],[117,4],[117,4],[119,1],[119,1],[46,0],[46,3],[49,3],[49,3],[124,0],[20,8],[24,4],[24,9],[24,3],[24,6],[24,7],[24,8],[24,8],[24,8],[128,0],[128,1],[130,3],[129,3],[131,2],[131,4],[132,3],[132,5],[132,5],[132,7],[21,3],[5,1],[5,1],[5,1],[5,1],[5,1],[13,1],[13,1],[13,1],[13,1],[13,2],[135,5],[140,3],[140,3],[140,4],[140,5],[140,5],[140,6],[136,3],[137,5],[141,3],[141,4],[141,5],[141,5],[141,6],[148,0],[148,1],[138,4],[142,4],[142,5],[142,3],[142,4],[142,4],[139,4],[143,2],[143,4],[143,3],[143,4],[143,5],[143,5],[143,5],[152,1],[153,1],[155,1],[154,6],[156,2],[156,4],[156,4],[156,5],[156,6],[160,1],[160,3],[161,3],[159,0],[159,1],[7,1],[7,1],[7,1],[14,2],[167,3],[171,3],[171,3],[168,0],[169,0],[169,1],[169,4],[172,1],[172,4],[172,4],[172,7],[173,1],[173,1],[173,1],[175,1],[175,2],[175,1],[175,1],[175,1],[175,1],[178,1],[178,1],[178,1],[28,1],[28,1],[28,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[182,1],[98,1],[98,2],[90,1],[90,1],[265,1],[265,1],[26,1],[26,1],[266,3],[266,2],[267,2],[269,3],[269,2],[270,2],[36,1],[36,1],[271,1],[271,1],[272,0],[272,2],[274,2],[146,0],[146,1],[145,0],[145,2],[147,2],[27,0],[27,3],[30,2],[30,3],[277,0],[277,2],[277,2],[151,0],[151,1],[279,1],[278,4],[280,4],[283,5],[286,2],[286,3],[286,4],[286,5],[286,5],[286,5],[285,1],[285,1],[285,1],[285,1],[287,1],[287,1],[288,1],[288,1],[290,1],[290,1],[291,1],[291,1],[289,2],[63,1],[63,1],[292,0],[292,1],[293,1],[110,3],[112,3],[112,3],[294,1],[294,3],[295,3],[295,5],[296,3],[297,1],[297,3],[56,1],[56,3],[58,1],[58,3],[58,3],[50,1],[50,3],[53,1],[53,3],[53,3],[273,1],[275,1],[281,1],[281,3],[282,1],[282,3],[282,3],[282,5],[298,3],[299,3],[299,3],[299,3],[299,1],[99,1],[99,3],[99,2],[300,1],[300,3],[301,1],[301,3],[302,1],[302,2],[303,1],[303,2],[133,1],[133,3],[305,1],[304,1],[304,3],[306,3],[306,5],[307,1],[307,3],[308,1],[308,3],[308,5],[308,3],[67,1],[309,1],[309,1],[77,1],[77,1],[77,2],[77,2],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,2],[310,0],[310,3],[311,0],[311,3],[311,5],[125,2],[125,3],[125,5],[126,2],[126,2],[126,4],[126,3],[126,3],[126,1],[126,4],[126,3],[312,3],[312,4],[313,0],[313,1],[315,1],[321,1],[321,2],[322,1],[322,2],[322,2],[322,3],[323,4],[324,3],[324,4],[324,4],[314,3],[314,3],[314,4],[314,4],[314,4],[314,5],[314,6],[314,4],[176,2],[316,2],[328,1],[328,3],[329,1],[329,3],[329,3],[329,5],[330,5],[331,2],[331,5],[331,5],[318,0],[318,1],[318,1],[320,2],[326,2],[326,4],[326,3],[337,0],[337,1],[337,1],[334,2],[336,2],[336,2],[335,5],[338,5],[338,5],[338,5],[338,5],[338,5],[338,6],[338,6],[338,6],[338,6],[338,6],[343,0],[343,1],[353,2],[348,2],[348,2],[344,0],[344,1],[354,3],[349,3],[349,3],[349,2],[362,0],[362,1],[362,3],[362,3],[363,1],[363,3],[363,3],[363,5],[363,3],[364,1],[364,1],[360,1],[360,3],[361,1],[361,2],[361,3],[361,3],[361,3],[361,4],[361,5],[365,1],[365,2],[365,1],[346,0],[346,1],[356,3],[351,3],[351,2],[366,1],[366,3],[367,1],[367,2],[367,3],[367,4],[367,5],[368,2],[369,2],[369,2],[370,0],[370,1],[370,1],[347,0],[347,1],[357,2],[357,4],[357,2],[357,4],[352,2],[358,1],[359,1],[118,1],[118,2],[118,2],[118,2],[118,2],[118,4],[118,4],[118,4],[118,6],[118,2],[118,3],[118,3],[118,3],[118,3],[118,3],[118,6],[118,6],[118,5],[118,5],[118,6],[118,5],[118,3],[118,3],[118,3],[118,3],[118,3],[118,2],[118,3],[118,2],[118,3],[121,1],[121,3],[121,2],[121,2],[121,2],[121,2],[121,2],[121,2],[121,2],[121,2],[121,3],[121,4],[121,5],[121,4],[121,4],[121,4],[121,6],[121,6],[121,2],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,4],[121,3],[121,6],[121,6],[121,5],[121,5],[121,6],[121,6],[121,6],[121,6],[121,5],[121,4],[121,5],[121,5],[121,5],[121,5],[121,4],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,2],[121,3],[121,2],[121,3],[121,2],[121,3],[121,2],[121,3],[121,3],[121,4],[121,3],[121,3],[121,3],[375,1],[375,3],[385,1],[385,3],[385,3],[385,5],[385,3],[385,5],[385,4],[385,3],[385,2],[385,2],[385,4],[163,1],[163,3],[372,1],[372,1],[372,2],[372,2],[372,1],[372,1],[379,1],[379,1],[379,2],[379,2],[379,1],[386,1],[386,3],[391,1],[394,1],[394,2],[394,2],[284,1],[390,1],[396,1],[396,1],[397,1],[371,1],[371,1],[400,1],[400,2],[400,3],[400,2],[401,2],[401,3],[401,4],[398,1],[398,1],[398,1],[399,1],[399,1],[402,1],[402,1],[373,0],[373,1],[403,2],[403,1],[405,2],[405,3],[405,2],[319,1],[319,3],[325,1],[325,2],[325,3],[325,3],[325,3],[325,4],[325,3],[325,3],[325,4],[325,4],[325,4],[325,5],[325,5],[341,1],[341,3],[342,1],[342,3],[342,3],[342,5],[342,3],[407,1],[408,1],[409,1],[409,1],[410,1],[410,1],[412,2],[414,2],[414,2],[339,3],[339,4],[340,1],[340,2],[418,3],[418,1],[418,3],[418,3],[418,3],[415,1],[415,2],[415,2],[415,3],[416,2],[416,2],[416,3],[416,2],[416,1],[416,3],[416,2],[416,3],[416,3],[416,2],[416,3],[416,2],[416,3],[416,3],[416,2],[419,2],[419,3],[419,3],[419,2],[419,3],[419,3],[419,3],[419,3],[419,2],[419,3],[419,3],[419,3],[419,3],[419,2],[417,0],[417,2],[421,1],[421,3],[420,2],[420,2],[411,2],[411,2],[413,2],[413,2],[413,2],[422,1],[424,1],[423,1],[425,1],[426,0],[426,2],[427,2],[427,2],[428,0],[429,0],[374,3],[374,4],[380,3],[380,3],[332,2],[333,3],[430,1],[431,1],[432,1],[433,1],[434,1],[435,1],[436,1],[437,1],[438,1],[439,1],[440,1],[441,1],[442,1],[443,1],[404,0],[404,1],[404,1],[404,2],[404,2],[406,1],[406,1],[406,2],[406,2],[406,2],[389,2],[389,2],[389,1],[393,1],[393,2],[393,1],[393,2],[393,2],[393,2],[393,1],[454,2],[454,2],[455,2],[455,2],[388,1],[388,1],[388,1],[388,1],[387,2],[387,3],[392,3],[392,4],[392,3],[444,1],[444,1],[444,1],[449,1],[449,1],[449,1],[446,3],[446,4],[451,4],[451,5],[451,4],[445,0],[445,1],[450,1],[447,2],[447,2],[452,2],[462,4],[463,4],[463,4],[463,5],[463,7],[464,0],[464,1],[468,3],[466,2],[466,3],[466,3],[465,0],[465,2],[467,1],[467,3],[467,2],[469,0],[469,1],[471,5],[471,5],[470,2],[470,6],[470,5],[470,5],[470,5],[470,4],[473,0],[479,0],[480,3],[483,5],[483,4],[483,3],[483,3],[483,2],[472,1],[472,1],[474,0],[474,2],[474,2],[477,2],[477,2],[475,0],[475,3],[475,3],[478,2],[478,3],[478,3],[484,1],[484,1],[345,0],[345,1],[355,2],[350,2],[350,2],[448,6],[448,3],[453,6],[453,5],[453,4],[453,6],[453,5],[453,4],[453,6],[453,5],[453,6],[453,5],[456,4],[456,3],[456,5],[459,5],[459,6],[459,5],[458,4],[458,5],[461,5],[461,6],[461,5],[485,1],[485,1],[485,1],[485,1],[485,1],[485,1],[485,1],[485,1],[486,1],[486,1],[457,5],[457,3],[460,5],[460,6],[460,5],[8,4],[8,2],[487,1],[487,3],[488,1],[488,1],[488,2],[488,1],[488,1],[488,1],[488,1],[10,1],[10,1],[10,1],[10,1],[10,1],[17,2],[381,3],[381,3],[381,3],[377,2],[377,2],[377,2],[382,2],[382,2],[382,2],[382,2],[382,2],[382,2],[378,2],[378,4],[383,2],[383,4],[383,4],[383,3],[383,4],[383,3],[383,4],[383,4],[383,3],[383,4],[383,3],[384,1],[384,1],[491,1],[491,2],[492,1],[492,2],[492,3],[492,3],[492,2],[493,4],[494,2],[494,3],[494,4],[494,4],[494,3],[494,3],[494,4],[494,2],[494,3],[494,2],[494,3],[494,3],[494,4],[494,3],[494,4],[494,4],[494,5],[494,4],[494,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 9:

     parser.suggestSetOptions();
   
break;
case 18: case 204:

     parser.suggestKeywords(['DATABASE', 'ROLE', 'SCHEMA', 'TABLE', 'VIEW']);
   
break;
case 20:

     parser.addNewDatabaseLocation(_$[$0-1], [{ name: $$[$0-1] }]);
   
break;
case 21: case 38:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 23:

     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
     parser.addNewDatabaseLocation(_$[$0], [{ name: $$[$0] }]);
   
break;
case 24:

     parser.addNewDatabaseLocation(_$[$0], [{ name: $$[$0] }]);
   
break;
case 25:

     parser.addNewDatabaseLocation(_$[$0-2], [{ name: $$[$0-2] }]);
   
break;
case 26:

     if (!$$[$0]) {
       parser.suggestKeywords(['COMMENT']);
     }
   
break;
case 44:

     var keywords = [];
     if (!$$[$0-2] && !$$[$0-1]) {
       keywords.push({ value: 'LIKE', weight: 1 });
     } else {
       if (!$$[$0-1]) {
         keywords.push({ value: 'PARTITIONED BY', weight: 12 });
       }
       keywords.push({ value: 'AS', weight: 1 });
     }

     if (keywords.length > 0) {
       parser.suggestKeywords(keywords);
     }
   
break;
case 45:

     parser.addNewTableLocation(_$[$0-1], $$[$0-1], $$[$0]);
     this.$ = $$[$0];
   
break;
case 50:
this.$ = [];
break;
case 52: case 462:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 54: case 190: case 192: case 395: case 398: case 484: case 527: case 668: case 847: case 929: case 981:
this.$ = $$[$0-1];
break;
case 56: case 563:
this.$ = [$$[$0]];
break;
case 57:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 62: case 64:

     parser.checkForKeywords($$[$0-1]);
   
break;
case 63: case 65:

     parser.checkForKeywords($$[$0-3]);
   
break;
case 66:

     this.$ = $$[$0-2];
     this.$.type = $$[$0-1];
     var keywords = [];
     if (!$$[$0]['comment']) {
       keywords.push('COMMENT');
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 67: case 94: case 100: case 101: case 114: case 117: case 126: case 128:

     parser.suggestKeywords(parser.getColumnDataTypeKeywords());
   
break;
case 70:
this.$ = {};
break;
case 72:

     this.$ = {};
     this.$[$$[$0]] = true;
   
break;
case 73:

     $$[$0-1][$$[$0]] = true;
   
break;
case 78: case 79:
this.$ = 'null';
break;
case 80:
this.$ = 'comment';
break;
case 81:

     parser.suggestKeywords(['NULL']);
   
break;
case 99:

     parser.suggestKeywords(parser.getTypeKeywords());
   
break;
case 113: case 116:

     parser.suggestKeywords(['COMMENT']);
   
break;
case 135: case 1007:

     parser.suggestKeywords(['BY']);
   
break;
case 136:

     parser.suggestKeywords(['RANGE']);
   
break;
case 145: case 150: case 151:

     parser.suggestKeywords(['PARTITION']);
   
break;
case 157:

     parser.suggestKeywords(['VALUE', 'VALUES']);
   
break;
case 158:

     if ($$[$0].endsWithLessThanOrEqual) {
      parser.suggestKeywords(['VALUES']);
     }
   
break;
case 159: case 162: case 165:

     parser.suggestKeywords(['<', '<=']);
   
break;
case 160: case 427: case 430:

     parser.suggestKeywords(['VALUES']);
   
break;
case 163: case 166:

     parser.suggestFunctions();
   
break;
case 172: case 181: case 268: case 571: case 932:

     parser.suggestKeywords(['SELECT']);
   
break;
case 174:

     parser.commitLocations();
   
break;
case 176:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
     parser.suggestDatabases({ appendDot: true });
   
break;
case 177:

     if (!$$[$0-6]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 180:

     var keywords = [{value: 'AS', weight: 1 }];
     if (!$$[$0-1]) {
       keywords.push({ value: 'COMMENT', weight: 3 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 187:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['COMMENT']);
     }
   
break;
case 191: case 193:
this.$ = $$[$0-3];
break;
case 208:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestDatabases();
   
break;
case 209:

     parser.suggestKeywords(['CASCADE']);
   
break;
case 211:

     if (!$$[$0-3]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 213: case 232:

     parser.addTablePrimary($$[$0-1]);
   
break;
case 215:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestTables({ onlyTables: true });
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 216:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyTables = true;
     }
   
break;
case 218:

     parser.addTablePrimary($$[$0-2]);
     if (!$$[$0-1]) {
       parser.suggestKeywords(['PURGE']);
     }
   
break;
case 221: case 225: case 227:

     parser.addTablePrimary($$[$0]);
   
break;
case 222:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestTables({ onlyViews: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 223:

     parser.addTablePrimary($$[$0]);
     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 226:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyViews = true;
     }
   
break;
case 228:

     parser.suggestKeywords(['TABLE']);
   
break;
case 229:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 233:

     parser.addTablePrimary($$[$0-1]);
     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 238:

     $$[$0-2].owner = 'insert';
     parser.addTablePrimary($$[$0-2]);
   
break;
case 239:

     parser.suggestKeywords(['INTO']);
   
break;
case 240:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['TABLE']);
     }
     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 242:

     $$[$0-1].owner = 'insert';
     parser.addTablePrimary($$[$0-1]);
     parser.suggestKeywords(['VALUES']);
   
break;
case 252:

     parser.suggestKeywords(['TABLES', 'STREAMS', 'TOPICS']);
   
break;
case 254: case 255:

     return parser.yy.result;
   
break;
case 256:

     parser.prepareNewStatement();
   
break;
case 258: case 260: case 262:

     parser.addStatementLocation(_$[$0]);
   
break;
case 261: case 263:

     parser.addStatementLocation(_$[$0-3]);
   
break;
case 267:

     parser.suggestDdlAndDmlKeywords();
   
break;
case 396: case 399: case 485:
this.$ = '';
break;
case 411: case 414:

     parser.yy.correlatedSubQuery = false;
   
break;
case 412: case 416:

     parser.suggestKeywords(['EXISTS']);
   
break;
case 415:

     parser.suggestKeywords(['NOT EXISTS']);
   
break;
case 426: case 428: case 429: case 431:

     parser.suggestKeywords(['<', '<=', '<>', '=', '>', '>=']);
   
break;
case 452: case 455: case 456: case 481: case 482: case 503: case 506: case 617:

     parser.suggestColumns();
   
break;
case 460: case 486:

     parser.addTableLocation(_$[$0], [ { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0] } ] };
   
break;
case 461: case 487:

     parser.addDatabaseLocation(_$[$0-2], [ { name: $$[$0-2] } ]);
     parser.addTableLocation(_$[$0], [ { name: $$[$0-2] }, { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0-2] }, { name: $$[$0] } ] };
   
break;
case 463: case 468:

     parser.suggestDatabases();
     this.$ = { identifierChain: [{ name: $$[$0-2] }] };
   
break;
case 464: case 489:

     parser.suggestTablesOrColumns($$[$0-2]);
   
break;
case 465:
this.$ = [{ name: $$[$0] }];
break;
case 466:
this.$ = [{ name: $$[$0-2] }, { name: $$[$0-1] }];
break;
case 467:

     parser.suggestDatabases({ appendDot: true });
   
break;
case 471:

     parser.suggestDatabases();
   
break;
case 480: case 622: case 623: case 629: case 630: case 925: case 1008:

     parser.valueExpressionSuggest();
   
break;
case 488:

     parser.suggestTables();
     parser.suggestDatabases({ prependDot: true });
   
break;
case 491:
this.$ = { identifierChain: $$[$0-1].identifierChain, alias: $$[$0] };
break;
case 494:

     parser.yy.locations[parser.yy.locations.length - 1].type = 'column';
   
break;
case 495: case 802:

     parser.addAsteriskLocation(_$[$0], $$[$0-2].concat({ asterisk: true }));
   
break;
case 497:

     this.$ = [ $$[$0].identifier ];
     parser.yy.firstChainLocation = parser.addUnknownLocation($$[$0].location, [ $$[$0].identifier ]);
   
break;
case 498:

     if (parser.yy.firstChainLocation) {
       parser.yy.firstChainLocation.firstInChain = true;
       delete parser.yy.firstChainLocation;
     }
     $$[$0-2].push($$[$0].identifier);
     parser.addUnknownLocation($$[$0].location, $$[$0-2].concat());
   
break;
case 499:

     parser.suggestColumns({
       identifierChain: $$[$0-2]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 500:

     parser.suggestColumns({
       identifierChain: $$[$0-4]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 501:
this.$ = [ $$[$0].identifier ];
break;
case 502:

     $$[$0-2].push($$[$0].identifier);
   
break;
case 504:

     parser.suggestColumns({ identifierChain: $$[$0-2] });
   
break;
case 505:

     parser.suggestColumns({ identifierChain: $$[$0-4] });
   
break;
case 507:
this.$ = { identifier: { name: $$[$0] }, location: _$[$0] };
break;
case 529: case 849:
this.$ = $$[$0-2];
break;
case 532:

     parser.addCommonTableExpressions($$[$0-3]);
   
break;
case 533: case 534: case 566:

     parser.addCommonTableExpressions($$[$0-2]);
   
break;
case 538:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     this.$ = { selectList: $$[$0] };
   
break;
case 539:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     this.$ = { selectList: $$[$0-1], tableExpression: $$[$0] }
   
break;
case 550:

     parser.suggestKeywords(['ALL', 'DISTINCT', 'SELECT']);
   
break;
case 551:

     parser.suggestKeywords(['ALL', 'DISTINCT']);
   
break;
case 553:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     if ($$[$0].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-1]) {
         keywords.push({ value: 'ALL', weight: 2 });
         keywords.push({ value: 'DISTINCT', weight: 2 });
       }
       parser.suggestKeywords(keywords);
     } else {
       parser.checkForSelectListKeywords($$[$01]);
     }
     if ($$[$0].suggestFunctions) {
       parser.suggestFunctions();
     }
     if ($$[$0].suggestColumns) {
       parser.suggestColumns({ identifierChain: [], source: 'select' });
     }
     if ($$[$0].suggestTables) {
       parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     }
     if ($$[$0].suggestDatabases) {
       parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
     }
     if ($$[$0].suggestAggregateFunctions && (!$$[$0-1] || $$[$0-1] === 'ALL')) {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
   
break;
case 554:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-1] || $$[$0-1] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-1]) {
       keywords.push({ value: 'ALL', weight: 2 });
       keywords.push({ value: 'DISTINCT', weight: 2 });
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 555:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
   
break;
case 556:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.selectListNoTableSuggest($$[$0-1], $$[$0-2]);
     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'select';
     }
   
break;
case 557:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2] || $$[$0-2] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-2]) {
       keywords.push({ value: 'ALL', weight: 2 });
       keywords.push({ value: 'DISTINCT', weight: 2 });
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 558:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]), _$[$0-2]);
     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 559:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]), _$[$0-3]);
     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 560:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.checkForSelectListKeywords($$[$0-1]);
     var keywords = ['FROM'];
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.suggestTables({ prependFrom: true });
     parser.suggestDatabases({ prependFrom: true, appendDot: true });
   
break;
case 561: case 599: case 620: case 633: case 637: case 661: case 686: case 687: case 768: case 770: case 834: case 844: case 851: case 863: case 1006: case 1141: case 1142:
this.$ = $$[$0];
break;
case 564:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 568:

     parser.addCommonTableExpressions($$[$0-4]);
   
break;
case 569:

     parser.addCteAliasLocation(_$[$0-4], $$[$0-4]);
     $$[$0-1].alias = $$[$0-4];
     this.$ = $$[$0-1];
   
break;
case 570:

     parser.suggestKeywords(['AS']);
   
break;
case 576: case 577:

     parser.addClauseLocation('whereClause', _$[$0-1], $$[$0].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0].limitClausePreceding || _$[$0-1], $$[$0].limitClauseLocation);
   
break;
case 578:

     var keywords = [];

     parser.addClauseLocation('whereClause', _$[$0-3], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-2].limitClausePreceding || _$[$0-3], $$[$0-2].limitClauseLocation);

     if ($$[$0-3]) {
       if (typeof $$[$0-3].tableReferenceList.hasJoinCondition !== 'undefined' && !$$[$0-3].tableReferenceList.hasJoinCondition) {
         keywords.push({ value: 'ON', weight: 3 });
       }
       if ($$[$0-3].suggestKeywords) {
         keywords = parser.createWeightedKeywords($$[$0-3].suggestKeywords, 3);
       }
       if ($$[$0-3].tableReferenceList.suggestJoinConditions) {
         parser.suggestJoinConditions($$[$0-3].tableReferenceList.suggestJoinConditions);
       }
       if ($$[$0-3].tableReferenceList.suggestJoins) {
         parser.suggestJoins($$[$0-3].tableReferenceList.suggestJoins);
       }
       if ($$[$0-3].tableReferenceList.suggestKeywords) {
         keywords = keywords.concat(parser.createWeightedKeywords($$[$0-3].tableReferenceList.suggestKeywords, 3));
       }

       // Lower the weights for 'TABLESAMPLE'
       keywords.forEach(function (keyword) {
         if (keyword.value === 'TABLESAMPLE') {
           keyword.weight = 1.1;
         }
       });

       if ($$[$0-3].tableReferenceList.types) {
         var veKeywords = parser.getValueExpressionKeywords($$[$0-3].tableReferenceList);
         keywords = keywords.concat(veKeywords.suggestKeywords);
         if (veKeywords.suggestColRefKeywords) {
           parser.suggestColRefKeywords(veKeywords.suggestColRefKeywords);
           parser.addColRefIfExists($$[$0-3].tableReferenceList);
         }
       }
     }

     if ($$[$0-1].empty && $$[$0] && $$[$0].joinType.toUpperCase() === 'JOIN') {
       keywords = keywords.concat(['FULL', 'FULL OUTER', 'INNER', 'LEFT', 'LEFT OUTER', 'RIGHT', 'RIGHT OUTER']);
       parser.suggestKeywords(keywords);
       return;
     }

     if ($$[$0-1].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].suggestFilters) {
       parser.suggestFilters($$[$0-1].suggestFilters);
     }
     if ($$[$0-1].suggestGroupBys) {
       parser.suggestGroupBys($$[$0-1].suggestGroupBys);
     }
     if ($$[$0-1].suggestOrderBys) {
       parser.suggestOrderBys($$[$0-1].suggestOrderBys);
     }

     if ($$[$0-1].empty) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }

     keywords = keywords.concat([
       { value: 'FULL JOIN', weight: 1 },
       { value: 'FULL OUTER JOIN', weight: 1 },
       { value: 'INNER JOIN', weight: 1 },
       { value: 'JOIN', weight: 1 },
       { value: 'LEFT JOIN', weight: 1 },
       { value: 'LEFT OUTER JOIN', weight: 1 },
       { value: 'RIGHT JOIN', weight: 1 },
       { value: 'RIGHT OUTER JOIN', weight: 1 }
     ]);
     parser.suggestKeywords(keywords);
  
break;
case 579:

     // A couple of things are going on here:
     // - If there are no SelectConditions (WHERE, GROUP BY, etc.) we should suggest complete join options
     // - If there's an OptionalJoin at the end, i.e. 'SELECT * FROM foo | JOIN ...' we should suggest
     //   different join types
     // - The FromClause could end with a valueExpression, in which case we should suggest keywords like '='
     //   or 'AND' based on type

     if (!$$[$0-1]) {
       parser.addClauseLocation('whereClause', _$[$0-2]);
       parser.addClauseLocation('limitClause', _$[$0-2]);
       return;
     }
     parser.addClauseLocation('whereClause', _$[$0-2], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-1].limitClausePreceding || _$[$0-2], $$[$0-1].limitClauseLocation);
     var keywords = [];

     if ($$[$0-1].suggestColRefKeywords) {
       parser.suggestColRefKeywords($$[$0-1].suggestColRefKeywords);
       parser.addColRefIfExists($$[$0-1]);
     }

     if ($$[$0-1].suggestKeywords && $$[$0-1].suggestKeywords.length) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].cursorAtEnd) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 583:

     this.$ = { tableReferenceList : $$[$0] }
   
break;
case 584: case 856:

       parser.suggestTables();
       parser.suggestDatabases({ appendDot: true });
   
break;
case 586:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'WHERE', weight: 7 }, { value: 'GROUP BY', weight: 6 }, { value: 'HAVING', weight: 5 }, { value: 'ORDER BY', weight: 4 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true, true]);

     if (keywords.length > 0) {
       this.$ = { suggestKeywords: keywords, empty: !$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0] };
     } else {
       this.$ = {};
     }

     this.$.whereClauseLocation = $$[$0-4] ? _$[$0-4] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;

     if (!$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestFilters = { prefix: 'WHERE', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestGroupBys = { prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-1] && !$$[$0]) {
       this.$.suggestOrderBys = { prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
   
break;
case 587:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'where';
     }
   
break;
case 588:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'group by';
     }
   
break;
case 590:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'order by';
     }
   
break;
case 592:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'GROUP BY', weight: 8 }, { value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true]);
     if ($$[$0-5].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-5].suggestKeywords, 1));
     }
     this.$ = parser.getValueExpressionKeywords($$[$0-5], keywords);
     this.$.cursorAtEnd = !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if ($$[$0-5].columnReference) {
       this.$.columnReference = $$[$0-5].columnReference;
     }
     if (!$$[$0-3]) {
       parser.suggestGroupBys({ prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 593:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true]);
     if ($$[$0-4].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-4].suggestKeywords, 8));
     }
     if ($$[$0-4].valueExpression) {
       this.$ = parser.getValueExpressionKeywords($$[$0-4].valueExpression, keywords);
       if ($$[$0-4].valueExpression.columnReference) {
         this.$.columnReference = $$[$0-4].valueExpression.columnReference;
       }
     } else {
       this.$ = { suggestKeywords: keywords };
     }
     this.$.cursorAtEnd = !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 594:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-1], $$[$0]],
       [{ value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true]);
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0-1] && !$$[$0] };
     if (!$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-3], _$[$0-3]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 595:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0]],
       [{ value: 'LIMIT', weight: 3 }],
       [true]);
     if ($$[$0-2].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-2].suggestKeywords, 4));
     }
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0] };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 596:

     this.$ = { suggestKeywords: [], cursorAtEnd: true };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = _$[$0-1];
   
break;
case 600:

     if ($$[$0].suggestFilters) {
       parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 601:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS', 'NOT EXISTS']);
     parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 604:

     this.$ = { valueExpression: $$[$0] };
   
break;
case 605: case 644:

     parser.suggestSelectListAliases();
   
break;
case 606:

     parser.valueExpressionSuggest();
     parser.suggestSelectListAliases();
     parser.suggestGroupBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 607:

     parser.suggestKeywords(['BY']);
     parser.suggestGroupBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 634:

     if ($$[$0].emptyOrderBy) {
       parser.suggestOrderBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 635:

     parser.suggestKeywords(['BY']);
     parser.suggestOrderBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 639:

     this.$ = { emptyOrderBy: false }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 640: case 641: case 642:
this.$ = { emptyOrderBy: false };
break;
case 643:
this.$ = parser.mergeSuggestKeywords($$[$0]);
break;
case 645:

     this.$ = { emptyOrderBy: true }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 646:

    this.$ = { suggestKeywords: ['ASC', 'DESC'] };
  
break;
case 659: case 660:

     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 662:

     // verifyType($$[$0], 'NUMBER');
     this.$ = $$[$0];
     $$[$0].types = ['NUMBER'];
   
break;
case 663: case 664: case 665: case 666: case 673: case 674: case 675: case 676: case 677: case 678: case 684: case 685: case 706: case 764: case 765: case 823:
this.$ = { types: [ 'BOOLEAN' ] };
break;
case 667:

     this.$ = { types: [ 'BOOLEAN' ] };
     // clear correlated flag after completed sub-query (set by lexer)
     parser.yy.correlatedSubQuery = false;
   
break;
case 669: case 670: case 671: case 672:

     parser.addColRefToVariableIfExists($$[$0-2], $$[$0]);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 679: case 680:

     // verifyType($$[$0-2], 'BOOLEAN');
     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 681: case 682: case 683:

     // verifyType($$[$0-2], 'NUMBER');
     // verifyType($$[$0], 'NUMBER');
     this.$ = { types: [ 'NUMBER' ] };
   
break;
case 689:

     parser.suggestKeywords(['BETWEEN', 'EXISTS', 'IN', 'LIKE', 'REGEXP', 'RLIKE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 690: case 692:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
break;
case 691:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 693:

     parser.suggestFunctions({ types: [ 'BOOLEAN' ] });
     parser.suggestColumns({ types: [ 'BOOLEAN' ] });
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 694:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0].suggestFilters };
break;
case 695:

     parser.suggestFunctions();
     parser.suggestColumns();
     this.$ = { types: [ 'T' ] };
   
break;
case 696:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions('NUMBER');
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 697:

     parser.suggestFunctions({ types: [ 'NUMBER' ] });
     parser.suggestColumns({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ] };
   
break;
case 698:

     parser.suggestKeywords(['FALSE', 'NOT NULL', 'NOT TRUE', 'NOT FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 699:

     parser.suggestKeywords(['FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 700:

     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 701: case 702: case 703:

     parser.suggestKeywords(['NOT']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 704:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-3] ? 'IS NOT DISTINCT FROM' : 'IS DISTINCT FROM');
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 705:

     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 707:

     this.$ = $$[$0-1];
   
break;
case 708:

     parser.valueExpressionSuggest();
     this.$ = { types: ['T'], typeSet: true };
   
break;
case 709:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0].types);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 710: case 711: case 712:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0].types);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 713: case 714: case 715: case 716:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0].types);
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 717: case 719:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2].types);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 718:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2].types);
     this.$ = { types: [ 'BOOLEAN' ] , typeSet: true, endsWithLessThanOrEqual: true };
   
break;
case 720:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2].types);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, endsWithLessThanOrEqual: $$[$0-1] === '<='  };
   
break;
case 721: case 722: case 723: case 724:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2].types);
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 725:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-3].types);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 726:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-2].types);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 727: case 728:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
break;
case 729: case 730:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
break;
case 731:

     if ($$[$0-2].types[0] === $$[$0].types[0] && !$$[$0-5].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2].types);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
   
break;
case 732:

     if ($$[$0-5].types[0] === $$[$0].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5].types);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 733:

     if ($$[$0-5].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5].types);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 734:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 735: case 741:

     parser.suggestValueExpressionKeywords($$[$0-1], ['AND']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 736:

     parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 737:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-4].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4].types)
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
   
break;
case 738:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4].types)
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 739:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4].types)
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 740:

     parser.valueExpressionSuggest($$[$0-4], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-4].types);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 742:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2].types);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 743: case 745: case 747: case 749:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, suggestFilters: true };
   
break;
case 744: case 748:

     parser.addColRefIfExists($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 746: case 750:

     parser.addColRefIfExists($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 751: case 752:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions([ 'NUMBER' ]);
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 753: case 754: case 755:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions(['NUMBER']);
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 756: case 757: case 758:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions(['NUMBER']);
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 759: case 760: case 761:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions(['NUMBER']);
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 762:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 763:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
break;
case 766:

     parser.valueExpressionSuggest(undefined, $$[$0]);
     parser.applyTypeToSuggestions([ 'STRING' ]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 767:

     parser.valueExpressionSuggest(undefined, $$[$0-1] + ' ' + $$[$0]);
     parser.applyTypeToSuggestions([ 'STRING' ]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 769:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 771:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 772:

      this.$ = $$[$0];
      this.$.suggestFilters = $$[$0-1].suggestFilters;
    
break;
case 773:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 774: case 1054: case 1059: case 1060:
this.$ = { types: [ 'T' ] };
break;
case 775: case 777:

     $$[$0].position = 1;
   
break;
case 776:

     $$[$0].position = $$[$0-2].position + 1;
     this.$ = $$[$0];
   
break;
case 778:

     $$[$0-2].position += 1;
   
break;
case 779:

     $$[$0-2].position = 1;
   
break;
case 780:

     $$[$0-4].position += 1;
   
break;
case 781:

     parser.valueExpressionSuggest();
     $$[$0-2].position += 1;
   
break;
case 782:

     parser.valueExpressionSuggest();
     $$[$0-4].position += 1;
   
break;
case 783:

     parser.suggestValueExpressionKeywords($$[$0-3]);
   
break;
case 784: case 785:

     parser.valueExpressionSuggest();
     this.$ = { cursorAtStart : true, position: 1 };
   
break;
case 786: case 787:

     parser.valueExpressionSuggest();
     this.$ = { position: 2 };
   
break;
case 791:
this.$ = { types: ['COLREF'], columnReference: $$[$0].chain };
break;
case 792:

     // We need to handle arbitrary UDFs here instead of inside UserDefinedFunction or there will be a conflict
     // with columnReference for functions like: db.udf(foo)
     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     $$[$0-1].lastLoc.type = 'function';
     $$[$0-1].lastLoc.function = fn;
     $$[$0-1].lastLoc.location = {
       first_line: $$[$0-1].lastLoc.location.first_line,
       last_line: $$[$0-1].lastLoc.location.last_line,
       first_column: $$[$0-1].lastLoc.location.first_column,
       last_column: $$[$0-1].lastLoc.location.last_column - 1
     }
     if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
        $$[$0-1].firstLoc.type = 'database';
     } else {
       delete $$[$0-1].lastLoc.identifierChain;
     }
     if ($$[$0].expression) {
       this.$ = { function: fn, expression: $$[$0].expression, types: parser.findReturnTypes(fn) }
     } else {
       this.$ = { function: fn, types: parser.findReturnTypes(fn) }
     }
   
break;
case 793:

    parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
    if ($$[$0].expression) {
      this.$ = { function: $$[$0-1], expression: $$[$0].expression, types: parser.findReturnTypes($$[$0-1]) }
    } else {
      this.$ = { function: $$[$0-1], types: parser.findReturnTypes($$[$0-1]) }
    }
  
break;
case 795:
this.$ = { types: [ 'NULL' ] };
break;
case 797:

     if ($$[$0].suggestKeywords) {
       this.$ = { types: ['COLREF'], columnReference: $$[$0], suggestKeywords: $$[$0].suggestKeywords };
     } else {
       this.$ = { types: ['COLREF'], columnReference: $$[$0] };
     }
   
break;
case 798:

     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     $$[$0-1].lastLoc.type = 'function';
     $$[$0-1].lastLoc.function = fn;
     $$[$0-1].lastLoc.location = {
       first_line: $$[$0-1].lastLoc.location.first_line,
       last_line: $$[$0-1].lastLoc.location.last_line,
       first_column: $$[$0-1].lastLoc.location.first_column,
       last_column: $$[$0-1].lastLoc.location.last_column - 1
     }
     if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
        $$[$0-1].firstLoc.type = 'database';
     } else {
       delete $$[$0-1].lastLoc.identifierChain;
     }
     if ($$[$0].position) {
       parser.applyArgumentTypesToSuggestions(fn, $$[$0].position);
     }
     this.$ = { types: parser.findReturnTypes(fn) };
   
break;
case 799: case 971: case 972:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     if ($$[$0].position) {
       parser.applyArgumentTypesToSuggestions($$[$0-1], $$[$0].position);
     }
     this.$ = { types: parser.findReturnTypes($$[$0-1]) };
   
break;
case 801:

     var lastLoc = parser.yy.locations[parser.yy.locations.length - 1];
     if (lastLoc.type !== 'variable') {
       lastLoc.type = 'column';
     }
     // used for function references with db prefix
     var firstLoc = parser.yy.locations[parser.yy.locations.length - $$[$0].length];
     this.$ = { chain: $$[$0], firstLoc: firstLoc, lastLoc: lastLoc }
   
break;
case 808:

     parser.suggestValues($$[$0]);
   
break;
case 809:
this.$ = { types: [ 'NUMBER' ] };
break;
case 815: case 817:
this.$ = $$[$0-1] + $$[$0];
break;
case 816:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 821: case 822:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }] }
     } else {
       this.$ = { types: [ 'STRING' ] }
     }
   
break;
case 824:

    this.$ = { partialQuote: '\'', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 825:

    this.$ = { partialQuote: '"', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 830:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
       this.$ = { valueExpression: $$[$0-1], alias: $$[$0].alias };
       if (!parser.yy.selectListAliases) {
         parser.yy.selectListAliases = [];
       }
       parser.yy.selectListAliases.push({ name: $$[$0].alias, types: $$[$0-1].types || ['T'] });
     } else {
       this.$ = { valueExpression: $$[$0-1] }
     }
   
break;
case 831:

     parser.addAsteriskLocation(_$[$0], [{ asterisk: true }]);
     this.$ = { asterisk: true }
   
break;
case 832:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
     }
   
break;
case 833:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.addColumnAliasLocation(_$[$0], $$[$0], _$[$0-2]);
     this.$ = { suggestAggregateFunctions: true };
   
break;
case 835:
this.$ = [ $$[$0] ];
break;
case 836:

     $$[$0-2].push($$[$0]);
   
break;
case 838: case 839:

     this.$ = { cursorAtStart : true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 841:

     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 842:

     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 843:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestTables: true, suggestDatabases: true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 845: case 846: case 848:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true,  };
   
break;
case 859:

     this.$ = $$[$0];

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         this.$.suggestJoins = {
           prependJoin: true,
           tables: tables
         };
       }
      }
   
break;
case 866:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-2];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
        parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 867:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-3];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
       parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 868:
this.$ = { joinType: $$[$0] };
break;
case 869:
this.$ = { joinType: $$[$0-1] };
break;
case 870:

     if ($$[$0-2].suggestKeywords) {
       parser.suggestKeywords($$[$0-2].suggestKeywords);
     }
   
break;
case 871:

     if ($$[$0].suggestKeywords) {
       parser.suggestKeywords($$[$0].suggestKeywords);
     }
   
break;
case 874:

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         parser.suggestJoins({
           prependJoin: false,
           joinType: $$[$0-2],
           tables: tables
         })
       }
     }
     parser.suggestTables();
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 879:
this.$ = 'CROSS JOIN';
break;
case 880:
this.$ = 'FULL JOIN';
break;
case 881:
this.$ = 'FULL OUTER JOIN';
break;
case 882:
this.$ = 'INNER JOIN';
break;
case 883:
this.$ = 'JOIN';
break;
case 884:
this.$ = 'LEFT INNER JOIN';
break;
case 885:
this.$ = 'LEFT JOIN';
break;
case 886:
this.$ = 'LEFT OUTER JOIN';
break;
case 887:
this.$ = 'LEFT SEMI JOIN';
break;
case 888:
this.$ = 'OUTER JOIN';
break;
case 889: case 891:
this.$ = 'RIGHT OUTER JOIN';
break;
case 890:
this.$ = 'RIGHT JOIN';
break;
case 892:
this.$ = 'RIGHT SEMI JOIN';
break;
case 893:
this.$ = 'SEMI JOIN';
break;
case 894: case 896: case 897: case 899: case 900: case 901: case 902: case 904: case 905: case 906: case 907:
this.$ = { suggestKeywords: ['JOIN'] };
break;
case 895: case 898: case 903:
this.$ = { suggestKeywords: ['OUTER'] };
break;
case 908:
this.$ = { noJoinCondition: true, suggestKeywords: ['ON'] };
break;
case 909:
this.$ = { valueExpression: $$[$0] };
break;
case 913:

     parser.valueExpressionSuggest();
     parser.suggestJoinConditions({ prependOn: false });
   
break;
case 914:

     this.$ = {
       primary: $$[$0-1]
     }
     if ($$[$0-1].identifierChain) {
       if ($$[$0]) {
         $$[$0-1].alias = $$[$0].alias
         parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
       }
       parser.addTablePrimary($$[$0-1]);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     } else if ($$[$0].suggestKeywords) {
       keywords = $$[$0].suggestKeywords;
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 915:

     this.$ = {
       primary: $$[$0-1]
     };

     if ($$[$0]) {
       this.$.primary.alias = $$[$0].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 916:

     if ($$[$0]) {
       parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }
   
break;
case 917:

     if ($$[$0]) {
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias);
     }
   
break;
case 927:

     parser.pushQueryState();
   
break;
case 928:

     parser.popQueryState();
   
break;
case 930:

     if ($$[$0-1]) {
       $$[$0-2].alias = $$[$0-1].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0-1].alias });
       parser.addSubqueryAliasLocation($$[$0-1].location, $$[$0-1].alias, $$[$0-2].identifierChain);
     }
     this.$ = $$[$0-2];
   
break;
case 933:

     var subQuery = parser.getSubQuery($$[$0]);
     subQuery.columns.forEach(function (column) {
       parser.expandIdentifierChain({ wrapper: column });
       delete column.linked;
     });
     parser.popQueryState(subQuery);
     this.$ = subQuery;
   
break;
case 950: case 951: case 952: case 953:
this.$ = { alias: $$[$0], location: _$[$0] };
break;
case 959:

     if (!$$[$0]) {
       $$[$0-1].suggestKeywords = ['OVER'];
     }
   
break;
case 966:

     parser.suggestKeywords(['OVER']);
   
break;
case 969: case 970:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     if ($$[$0].expression) {
       this.$ = { function: $$[$0-1], expression: $$[$0].expression, types: parser.findReturnTypes($$[$0-1]) }
     } else {
       this.$ = { function: $$[$0-1], types: parser.findReturnTypes($$[$0-1]) }
     }
   
break;
case 978:
this.$ = { expression: $$[$0-1] };
break;
case 979:

     parser.valueExpressionSuggest();
     this.$ = { position: 1 }
   
break;
case 980:

     parser.suggestValueExpressionKeywords($$[$0-1]);
   
break;
case 988: case 1066: case 1087:
this.$ = { types: parser.findReturnTypes($$[$0-2]) };
break;
case 989:
this.$ = { function: $$[$0-3], expression: $$[$0-2], types: parser.findReturnTypes($$[$0-3]) };
break;
case 990:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-3], 1);
     this.$ = { types: parser.findReturnTypes($$[$0-3]) };
   
break;
case 991:

     parser.suggestValueExpressionKeywords($$[$0-2]);
     this.$ = { types: parser.findReturnTypes($$[$0-4]) };
   
break;
case 992:

     parser.applyArgumentTypesToSuggestions($$[$0-3], $$[$0-1].position);
     this.$ = { types: parser.findReturnTypes($$[$0-3]) };
   
break;
case 1000: case 1001:

     if (parser.yy.result.suggestFunctions) {
       parser.suggestAggregateFunctions();
     }
   
break;
case 1002:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords([{ value: 'PARTITION BY', weight: 2 }, { value: 'ORDER BY', weight: 1 }]);
     } else if (!$$[$0-2]) {
       parser.suggestKeywords(['PARTITION BY']);
     }
   
break;
case 1003:

      if (!$$[$0-1]) {
        parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ORDER BY', weight: 2 }]);
      } else {
        parser.suggestValueExpressionKeywords($$[$0-3]);
      }
    
break;
case 1012:

      // Only allowed in last order by
      delete parser.yy.result.suggestAnalyticFunctions;
    
break;
case 1013:

      var keywords = [];
      if ($$[$0-2].suggestKeywords) {
        keywords = parser.createWeightedKeywords($$[$0-2].suggestKeywords, 2);
      }
      if (!$$[$0]) {
        keywords = keywords.concat([{ value: 'RANGE BETWEEN', weight: 1 }, { value: 'ROWS BETWEEN', weight: 1 }]);
      }
      parser.suggestKeywords(keywords);
    
break;
case 1019:

     parser.suggestKeywords(['BETWEEN']);
   
break;
case 1020:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED PRECEDING']);
     } else if (!$$[$0-1]) {
       parser.suggestKeywords(['AND']);
     }
   
break;
case 1025:

    lexer.popState();
  
break;
case 1026:

    lexer.begin('hdfs');
  
break;
case 1028:

      parser.suggestHdfs({ path: $$[$0-3] });
    
break;
case 1029:

     parser.suggestHdfs({ path: $$[$0-2] });
   
break;
case 1030:

      parser.suggestHdfs({ path: $$[$0-1] });
    
break;
case 1031:

     parser.suggestHdfs({ path: '' });
   
break;
case 1032:

      parser.suggestHdfs({ path: '' });
    
break;
case 1038:

     parser.suggestKeywords(['PRECEDING']);
   
break;
case 1039: case 1044:

     parser.suggestKeywords(['ROW']);
   
break;
case 1043:

     parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED FOLLOWING']);
   
break;
case 1045:

     parser.suggestKeywords(['FOLLOWING']);
   
break;
case 1051:

     parser.valueExpressionSuggest();
     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 1052:

     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 1053: case 1058:
this.$ = { types: [ $$[$0-1].toUpperCase() ] };
break;
case 1055:

     parser.valueExpressionSuggest();
     this.$ = { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 1056: case 1057:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ] };
   
break;
case 1061:

     parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'AS', weight: 2 }]);
     this.$ =  { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 1062:

     parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'AS', weight: 2 }]);
     this.$ = { types: [ 'T' ] };
   
break;
case 1063: case 1064:

     parser.suggestKeywords(parser.getTypeKeywords());
     this.$ = { types: [ 'T' ] };
   
break;
case 1065: case 1071:
this.$ = { types: parser.findReturnTypes($$[$0-3]) };
break;
case 1067: case 1072: case 1086:
this.$ = { types: parser.findReturnTypes($$[$0-4]) };
break;
case 1068:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
     }
     parser.suggestKeywords(keywords);
     this.$ = { types: parser.findReturnTypes($$[$0-4]) };
   
break;
case 1069: case 1074: case 1089:

     parser.suggestValueExpressionKeywords($$[$0-2]);
     this.$ = { types: parser.findReturnTypes($$[$0-5]) };
   
break;
case 1070:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-2]) {
         keywords.push('DISTINCT');
       }
       parser.suggestKeywords(keywords);
     }
     this.$ = { types: parser.findReturnTypes($$[$0-4]) };
   
break;
case 1073:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       if ($$[$0-4].toLowerCase() === 'group_concat') {
         keywords.push('ALL');
       } else {
         keywords.push('DISTINCT');
       }
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     this.$ = { types: parser.findReturnTypes($$[$0-4]) };
   
break;
case 1075:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords(true);
       if (!$$[$0-2]) {
         if ($$[$0-4].toLowerCase() === 'group_concat') {
           keywords.push('ALL');
         } else {
           keywords.push('DISTINCT');
         }
       }
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
       parser.suggestKeywords(keywords);
     }
     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], $$[$0-1].position);
     }
     this.$ = { types: parser.findReturnTypes($$[$0-4]) };
   
break;
case 1088:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     this.$ = { types: parser.findReturnTypes($$[$0-4]) };
   
break;
case 1090:

     if (parser.yy.result.suggestFunctions && ! parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     }
     this.$ = { types: parser.findReturnTypes($$[$0-4]) };
   
break;
case 1107:

     parser.suggestKeywords(['TABLES', 'STREAMS', 'TOPICS', 'QUERIES', 'PROPERTIES']);
   
break;
case 1109:
this.$ = { inValueEdit: true };
break;
case 1110:
this.$ = { inValueEdit: true, cursorAtStart: true };
break;
case 1111: case 1112: case 1113:
this.$ = { suggestKeywords: ['NOT'] };
break;
case 1117: case 1118: case 1119:

     parser.suggestFunctions({ types: [ 'STRING' ] });
     parser.suggestColumns({ types: [ 'STRING' ] });
     this.$ = { types: ['BOOLEAN'] }
   
break;
case 1120: case 1122:
this.$ = parser.findCaseType($$[$0-1]);
break;
case 1121: case 1124:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1123:

     parser.suggestValueExpressionKeywords($$[$0-1], ['END']);
     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1125:
this.$ = parser.findCaseType($$[$0-2]);
break;
case 1126:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1127:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-2]);
   
break;
case 1128:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     this.$.suggestFilters = $$[$0-1].suggestFilters
   
break;
case 1129:

     parser.valueExpressionSuggest();
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1130:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1131:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = $$[$0-1];
   
break;
case 1132:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ] };
   
break;
case 1135:
this.$ = { caseTypes: [ $$[$0] ], lastType: $$[$0] };
break;
case 1136:

     $$[$0-1].caseTypes.push($$[$0]);
     this.$ = { caseTypes: $$[$0-1].caseTypes, lastType: $$[$0] };
   
break;
case 1140:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
   
break;
case 1143:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0].suggestFilters };
break;
case 1144:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1145:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0-2].suggestFilters };
break;
case 1146: case 1147:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0].suggestFilters };
break;
case 1148:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1149:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [$$[$0]] };
   
break;
case 1150:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1151:

      parser.valueExpressionSuggest();
      parser.suggestKeywords(['WHEN']);
      this.$ = { caseTypes: [{ types: ['T'] }] };
    
break;
case 1152: case 1154:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1153:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1155:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [$$[$0]], suggestFilters: true };
   
break;
case 1156:

     parser.suggestValueExpressionKeywords($$[$0-1], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1157:

     parser.suggestValueExpressionKeywords($$[$0-2], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1158: case 1159: case 1160: case 1161:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
}
},
table: [o($V0,$V1,{167:1,168:2}),{1:[3]},o($V2,$V3,{169:3,173:4,3:5,152:6,125:7,4:8,5:9,8:11,153:13,312:14,176:15,18:16,19:17,20:18,21:19,135:20,136:21,137:22,138:23,139:24,154:26,6:$V4,9:$V5,15:$V6,25:$V7,144:$V8,150:$V9,157:$Va,317:$Vb,327:$Vc}),{170:[1,33],174:[1,34]},o($V2,[2,258]),o($V2,[2,264]),o($V2,[2,265]),o($V2,[2,266]),o($V2,[2,1]),o($V2,[2,2]),{7:35,164:[1,36],165:[1,37],166:[1,38]},o($V2,[2,4]),{10:39,164:[1,40],165:[1,41],166:[1,42],489:[1,43],490:[1,44]},o($V2,[2,235]),o($Vd,$Ve,{313:45,321:46,323:47,255:$Vf}),{59:[1,50],312:49,317:$Vb},o($V2,[2,11]),o($V2,[2,12]),o($V2,[2,13]),o($V2,[2,14]),o($V2,[2,195]),o($V2,[2,196]),o($V2,[2,197]),o($V2,[2,198]),o($V2,[2,199]),{28:53,93:$Vg,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,191:[1,52],487:51},o($V2,[2,236]),o([38,39,59,75,76,87,92,93,134,150,179,180,181,183,184,185,186,190,192,196,197,201,202,204,214,215,223,231,232,247,248,250,254,256,257,258,259,261],$Vl,{318:60,191:$Vm,210:$Vn}),{28:66,93:$Vg,99:65,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo,328:63,330:64},{26:68,41:[1,69],127:[1,70],134:[1,71],207:$Vp,244:$Vq},{26:74,41:[1,76],127:[1,77],134:[1,75],207:$Vp,244:$Vq},{41:[1,78]},{158:[1,79]},{1:[2,253]},o($V0,$V1,{168:80}),o($V2,[2,3]),o($V2,[2,249]),o($V2,[2,250]),o($V2,[2,251]),o($V2,[2,5]),o($V2,[2,1102]),o($V2,[2,1103]),o($V2,[2,1104]),o($V2,[2,1105]),o($V2,[2,1106]),o($Vd,[2,527]),o($Vd,[2,541],{323:81,255:$Vf}),o($Vr,[2,543]),o([191,210,317],$V1,{168:82}),o($Vd,$Ve,{321:46,323:47,313:83,255:$Vf}),{125:84,176:15,312:14,317:$Vb,327:$Vc},{186:[1,86],187:[1,85]},o($V2,[2,1092]),o($Vs,[2,1093]),o($Vt,[2,276]),o($Vt,[2,277]),o($Vt,[2,278]),o($Vt,[2,273]),o($Vt,[2,274]),o($Vt,[2,275]),{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:89,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,184:$VD,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,319:87,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,403:88,444:110,446:111,448:112,456:116,457:117,458:118,485:129},o($V_,[2,574]),o($V_,[2,575]),o([59,317],[2,561],{65:[1,145]}),o($V$,[2,563]),{123:[1,146]},o($Vt,[2,483]),{40:[1,147],197:[1,148]},o($V01,$V11,{27:149,223:$V21}),o($V31,$V11,{27:151,223:$V21}),o($V31,$V11,{27:152,223:$V21}),{28:153,93:$Vg,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk},o($V41,[2,393]),o($V41,[2,394]),o($V31,$V51,{145:154,223:$V61}),{28:156,93:$Vg,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk},o($V31,$V51,{145:157,223:$V61}),o($V31,$V51,{145:158,223:$V61}),o($V31,$V51,{145:159,223:$V61}),o($V31,[2,247],{159:160,41:[1,161]}),o($V2,$V3,{173:4,3:5,152:6,125:7,4:8,5:9,8:11,153:13,312:14,176:15,18:16,19:17,20:18,21:19,135:20,136:21,137:22,138:23,139:24,154:26,169:162,6:$V4,9:$V5,15:$V6,25:$V7,144:$V8,150:$V9,157:$Va,317:$Vb,327:$Vc}),o($Vr,[2,544]),{191:$Vm,210:$Vn,317:$Vl,318:163},o($Vd,[2,528]),{61:[1,164]},{28:166,36:168,38:$Vu,39:$Vv,76:[1,171],93:$Vg,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,185:[1,173],186:$VF,215:[1,170],254:[1,169],256:$VV,257:$VW,266:175,269:176,371:172,394:167,395:[1,174],400:121,401:122,488:165},{28:177,93:$Vg,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk},o($Vr,[2,538],{320:178,334:180,65:[1,179],218:[1,181]}),o($V71,[2,835]),o($V71,$V81,{178:56,28:66,266:175,269:176,404:182,377:196,99:197,36:198,38:$Vu,39:$Vv,55:$V91,75:$Va1,88:$Vb1,89:$Vc1,93:$Vg,122:$Vd1,123:$Ve1,134:$Vh,179:$Vi,180:$Vj,181:$Vk,184:$Vf1,185:$Vg1,187:$Vh1,193:$Vi1,194:$Vj1,197:$Vo,198:$Vk1,224:$Vl1,227:$Vm1,234:$Vn1,239:$Vo1,241:$Vp1}),o($V71,[2,831]),o($Vq1,[2,658]),{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:203,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:204,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:205,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:206,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},{59:$Vr1,374:207},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:209,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:211,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,262:$Vs1,266:123,269:124,284:99,304:105,371:113,372:91,378:210,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129,491:212,493:213},o($Vq1,[2,790]),o($Vq1,[2,791],{387:215,59:$Vt1}),{59:$Vt1,387:217},o($Vq1,[2,794]),o($Vq1,[2,795]),o($Vq1,[2,807]),o($Vu1,[2,801],{186:[1,218]}),{59:[2,973]},{59:[2,974]},{59:[2,975]},{59:[2,976]},o($Vq1,[2,993],{445:219,447:220,237:$Vv1}),{237:$Vv1,447:222},o($Vq1,[2,961]),o($Vq1,[2,809]),o($Vq1,[2,810]),o($Vw1,[2,497]),o($Vx1,[2,982]),o($Vx1,[2,983]),o($Vx1,[2,984]),{59:[1,223]},{59:[1,224]},o($Vq1,[2,812]),o($Vq1,[2,813]),o($Vq1,[2,821]),o($Vq1,[2,822]),o($Vq1,[2,823]),o([35,38,39,55,59,61,65,75,87,88,89,92,93,109,122,123,134,170,174,179,180,181,184,185,186,187,193,194,195,197,198,199,200,203,205,208,209,211,212,213,216,218,219,220,221,224,225,226,227,228,229,230,234,235,236,239,240,241,243,245,246,249,251,252,253,255,260,262,263,376],[2,507]),{59:[1,225]},{59:[1,226]},{59:[1,227]},o($Vq1,[2,814],{186:[1,228]}),{256:[1,229],257:[1,230]},{256:[1,231]},{38:[1,233],40:[1,232]},{39:[1,235],40:[1,234]},o($Vq1,[2,826]),o($Vq1,[2,827]),{59:[2,1076]},{59:[2,1077]},{59:[2,1078]},{59:[2,1079]},{59:[2,1080]},{59:[2,1081]},{59:[2,1082]},{59:[2,1083]},{28:66,93:$Vg,99:65,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo,330:236},{59:[1,237]},{197:[1,238]},o($Vt,[2,485]),o($V2,[2,19],{178:56,28:239,93:$Vg,134:$Vh,179:$Vi,180:$Vj,181:$Vk}),{75:[1,240]},{28:66,42:241,44:242,50:243,93:$Vg,99:244,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo},{28:66,50:245,93:$Vg,99:244,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo},o($V2,[2,194]),{28:66,93:$Vg,99:246,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo},{214:[1,247]},o($V2,[2,212]),{28:66,56:248,93:$Vg,99:249,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo},{28:66,56:250,93:$Vg,99:249,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo},{28:66,56:251,93:$Vg,99:249,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo},{28:66,56:252,93:$Vg,99:249,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo},o($V31,[2,248]),o($V2,[2,259]),{312:253,317:$Vb},o($Vd,$Ve,{321:46,323:47,313:254,255:$Vf}),o($V2,[2,1091]),o($V2,[2,1095]),o($V2,[2,1096],{178:56,28:255,93:$Vg,134:$Vh,179:$Vi,180:$Vj,181:$Vk}),o($V2,[2,1098]),o($V2,[2,1099]),o($V2,[2,1100]),o($V2,[2,1101]),o($V01,[2,804]),{186:$VF,256:$VV,257:$VW,371:256,400:121,401:122},{186:$VF,256:$VV,257:$VW,371:257,400:121,401:122},o($Vy1,[2,401]),o($Vy1,[2,402]),o($Vs,[2,1094]),o($Vr,[2,539]),{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:89,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,184:$VD,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,403:258,444:110,446:111,448:112,456:116,457:117,458:118,485:129},o($Vz1,[2,597],{335:259,343:260,353:261,263:[1,262]}),{28:66,56:270,59:$Vr1,93:$Vg,99:249,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo,341:263,374:271,407:264,409:265,411:266,412:267,422:268,423:269},o($V71,[2,830]),o($VA1,[2,828],{373:272,75:[1,273]}),{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:274,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:275,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:276,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:277,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},{55:$V91,198:[1,279],224:[1,278],239:$Vo1,241:$Vp1,377:280},{59:[1,281]},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:282,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:283,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:284,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:285,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:286,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:287,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},o($Vq1,[2,684]),o($VB1,[2,950]),o($VB1,[2,951]),{28:66,36:289,38:$Vu,39:$Vv,93:$Vg,99:288,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo,266:175,269:176},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:290,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:291,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:292,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},o($VC1,[2,659],{377:196,55:$V91,88:$Vb1,89:$Vc1,122:$Vd1,184:$Vf1,185:$Vg1,187:$Vh1,194:$Vj1,224:$Vl1,227:$Vm1,239:$Vo1,241:$Vp1}),o($VC1,[2,660],{377:196,55:$V91,88:$Vb1,89:$Vc1,122:$Vd1,184:$Vf1,185:$Vg1,187:$Vh1,194:$Vj1,224:$Vl1,227:$Vm1,239:$Vo1,241:$Vp1}),o($VC1,[2,661],{377:196,55:$V91,88:$Vb1,89:$Vc1,122:$Vd1,184:$Vf1,185:$Vg1,187:$Vh1,194:$Vj1,224:$Vl1,227:$Vm1,239:$Vo1,241:$Vp1}),o($VD1,[2,662],{377:196}),o($Vq1,[2,667]),o($VE1,$VF1,{374:271,332:293,423:294,428:295,59:$Vr1}),{55:$V91,61:[1,296],75:$Va1,88:$Vb1,89:$Vc1,122:$Vd1,184:$Vf1,185:$Vg1,187:$Vh1,193:$Vi1,194:$Vj1,198:$Vk1,224:$Vl1,227:$Vm1,234:$Vn1,239:$Vo1,241:$Vp1,377:196},o($Vq1,[2,686]),{55:$V91,75:$Va1,88:$Vb1,89:$Vc1,122:$Vd1,184:$Vf1,185:$Vg1,187:$Vh1,193:$Vi1,194:$Vj1,198:$Vk1,224:$Vl1,227:$Vm1,234:$Vn1,239:$Vo1,241:$Vp1,262:$Vs1,377:196,378:297,491:212,493:213},{212:[1,299],213:[1,298],262:$Vs1,493:300},o($VG1,[2,1135]),{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:301,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},o($Vq1,[2,792]),{28:66,38:$Vu,39:$Vv,59:$Vw,61:[1,302],67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:304,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,375:303,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},o($Vq1,[2,793]),{28:66,67:306,93:$Vg,99:126,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,184:[1,305],197:$Vo},o($Vq1,[2,959]),o($Vq1,[2,994]),{28:66,59:[1,309],93:$Vg,99:307,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo,462:308},o($Vq1,[2,960]),{28:66,38:$Vu,39:$Vv,59:$Vw,61:[1,310],67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:304,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,375:311,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},{28:66,38:$Vu,39:$Vv,59:$Vw,61:[1,313],67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:312,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},o($VH1,$Vl,{318:316,61:[1,315],184:[1,314],191:$Vm,210:$Vn}),o($VH1,$Vl,{318:317,61:[1,318],191:$Vm,210:$Vn}),o([38,39,59,61,75,76,87,92,93,134,150,179,180,181,183,185,186,190,192,196,197,201,202,204,214,215,223,231,232,247,248,250,254,256,257,258,259,261],$Vl,{318:319,191:$Vm,210:$Vn}),o($Vq1,[2,815],{256:[1,320],257:[1,321]}),o($Vq1,[2,817]),{256:[1,322]},o($Vq1,[2,818]),{38:[1,323]},o($VI1,[2,396]),{39:[1,324]},o($VI1,[2,399]),o($V$,[2,564]),o($VE1,$VF1,{428:295,332:325}),o($Vt,[2,484]),o($V2,$VJ1,{29:326,31:327,34:328,35:$VK1}),{214:[1,330]},o($V2,[2,36]),o($VL1,[2,132],{45:331,104:332,105:[1,333]}),o($VM1,[2,48],{51:334,54:335,55:[1,336],59:[1,337]}),o($VN1,[2,465],{186:[1,338]}),o($VO1,[2,184],{128:339,130:340,59:[1,341]}),o($V2,[2,408],{146:342,276:[1,343]}),o($V31,[2,411]),o($V2,[2,219],{148:344,149:[1,345]}),o($VP1,[2,460],{186:[1,346]}),o($V2,[2,221]),o($V2,[2,227]),{120:[1,347]},o($Vr,[2,549]),o($Vd,[2,529]),o($V2,[2,1097]),o($V01,[2,805]),o($V01,[2,806]),o($V71,[2,836]),o($Vr,[2,576]),o($VQ1,[2,602],{344:348,354:349,220:[1,350]}),o($Vz1,[2,598]),{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:352,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,358:351,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},o([61,170,174,220,221,230,235,255,263],[2,583],{65:[1,353]}),o($VR1,[2,850]),o($VR1,[2,857]),o($VR1,[2,859],{339:354,416:355,205:$VS1,219:$VT1,225:$VU1,228:$VV1,229:$VW1,236:$VX1,240:$VY1,245:$VZ1}),o($VR1,[2,860]),o($V_1,$V81,{178:56,28:66,266:175,269:176,99:197,36:198,404:364,38:$Vu,39:$Vv,93:$Vg,123:$Ve1,134:$Vh,179:$Vi,180:$Vj,181:$Vk,197:$Vo}),o($V_1,$V81,{178:56,28:66,266:175,269:176,99:197,36:198,404:365,38:$Vu,39:$Vv,93:$Vg,123:$Ve1,134:$Vh,179:$Vi,180:$Vj,181:$Vk,197:$Vo}),o($V$1,[2,919]),o($V$1,[2,921]),{76:[1,366],210:[1,369],215:[1,368],254:[1,367]},o($VA1,[2,829]),o($V02,[2,669],{377:196,55:$V91,184:$Vf1,185:$Vg1,194:$Vj1,224:$Vl1,227:$Vm1,239:$Vo1,241:$Vp1}),o($V02,[2,670],{377:196,55:$V91,184:$Vf1,185:$Vg1,194:$Vj1,224:$Vl1,227:$Vm1,239:$Vo1,241:$Vp1}),o($V02,[2,671],{377:196,55:$V91,184:$Vf1,185:$Vg1,194:$Vj1,224:$Vl1,227:$Vm1,239:$Vo1,241:$Vp1}),o($V02,[2,672],{377:196,55:$V91,184:$Vf1,185:$Vg1,194:$Vj1,224:$Vl1,227:$Vm1,239:$Vo1,241:$Vp1}),{59:[1,370]},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:371,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},o($Vq1,[2,685]),o($VE1,$VF1,{178:56,28:66,372:91,284:99,386:100,388:101,389:102,396:104,304:105,444:110,446:111,448:112,371:113,398:114,67:115,456:116,457:117,458:118,400:121,401:122,266:123,269:124,402:125,99:126,485:129,428:295,118:304,332:372,375:373,38:$Vu,39:$Vv,59:$Vw,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,134:$Vh,150:$VB,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ}),{55:$V91,75:$Va1,88:$Vb1,89:$Vc1,122:$Vd1,184:$Vf1,185:$Vg1,187:$Vh1,193:$Vi1,194:$Vj1,198:$Vk1,224:$Vl1,227:$Vm1,234:$Vn1,239:$Vo1,241:$Vp1,376:[1,374],377:196},o($V12,[2,679],{377:196,55:$V91,75:$Va1,88:$Vb1,89:$Vc1,122:$Vd1,184:$Vf1,185:$Vg1,187:$Vh1,194:$Vj1,198:$Vk1,224:$Vl1,227:$Vm1,239:$Vo1,241:$Vp1}),o($V12,[2,680],{377:196,55:$V91,75:$Va1,88:$Vb1,89:$Vc1,122:$Vd1,184:$Vf1,185:$Vg1,187:$Vh1,194:$Vj1,198:$Vk1,224:$Vl1,227:$Vm1,239:$Vo1,241:$Vp1}),o($VD1,[2,681],{377:196,55:$V91,224:$Vl1,227:$Vm1,239:$Vo1,241:$Vp1}),o($VD1,[2,682],{377:196,55:$V91,224:$Vl1,227:$Vm1,239:$Vo1,241:$Vp1}),o($VD1,[2,683],{377:196,55:$V91,224:$Vl1,227:$Vm1,239:$Vo1,241:$Vp1}),o($VB1,[2,952]),o($VB1,[2,953]),o($VD1,[2,1111],{377:196}),o($VD1,[2,1112],{377:196}),o($VD1,[2,1113],{377:196}),{61:[1,375]},{28:66,36:198,38:$Vu,39:$Vv,61:$V81,93:$Vg,99:197,123:$Ve1,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo,266:175,269:176,404:376},{125:384,176:15,312:14,317:$Vb,327:$Vc,430:377,432:378,434:379,436:380,438:381,440:382,442:383},o($Vq1,[2,668]),o($Vq1,[2,687]),o($Vq1,[2,1120]),{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:385,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},o($VG1,[2,1136]),{55:$V91,75:$Va1,88:$Vb1,89:$Vc1,122:$Vd1,184:$Vf1,185:$Vg1,187:$Vh1,193:$Vi1,194:$Vj1,198:$Vk1,224:$Vl1,227:$Vm1,234:$Vn1,239:$Vo1,241:$Vp1,251:[1,386],377:196},o($Vq1,[2,977]),{61:[1,387],65:$V22},o($V32,[2,775],{377:196,55:$V91,75:$Va1,88:$Vb1,89:$Vc1,122:$Vd1,184:$Vf1,185:$Vg1,187:$Vh1,193:$Vi1,194:$Vj1,198:$Vk1,224:$Vl1,227:$Vm1,234:$Vn1,239:$Vo1,241:$Vp1}),o($Vu1,[2,802]),o($Vw1,[2,498]),o($Vq1,[2,996]),o($Vq1,[2,997]),o($V42,[2,1004],{464:389,468:390,105:[1,391]}),{237:[2,988]},{61:[1,392],65:$V22},{55:$V91,75:$Va1,88:$Vb1,89:$Vc1,122:$Vd1,123:[1,393],184:$Vf1,185:$Vg1,187:$Vh1,193:$Vi1,194:$Vj1,198:$Vk1,224:$Vl1,227:$Vm1,234:$Vn1,239:$Vo1,241:$Vp1,377:196},o($Vq1,[2,1054]),{61:[1,394]},o($Vx1,[2,1066]),{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:304,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,375:395,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:396,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},o($Vx1,[2,1087]),{28:66,38:$Vu,39:$Vv,59:$Vw,61:[1,397],67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:304,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,375:398,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},o($Vq1,[2,816]),{256:[1,399]},o($Vq1,[2,819]),o($VI1,[2,395]),o($VI1,[2,398]),{61:[1,400]},o($V2,[2,20]),o($V2,[2,26]),o([61,65,89,123,170,174],[2,29]),{36:401,38:$Vu,39:$Vv,266:175,269:176},o([93,134,170,174,179,180,181,197],[2,414]),o($V2,[2,170],{46:402,123:[1,403]}),o($VL1,[2,133]),{106:[1,404]},o($VM1,[2,45]),o($VM1,[2,49]),{28:66,56:405,93:$Vg,99:249,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo},{28:66,60:406,64:407,67:408,93:$Vg,99:126,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo},{28:66,93:$Vg,99:409,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo},{31:410,34:328,35:$VK1,123:$VJ1},o($VO1,[2,185]),{28:66,67:115,93:$Vg,99:126,131:411,133:412,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo,304:413},o($V2,[2,205]),o($V2,[2,409]),o($V2,[2,213]),o($V2,[2,220]),{28:66,93:$Vg,99:414,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo},{59:$V52,160:415,161:416,162:[1,417]},o($V62,[2,1048],{345:419,355:420,221:[1,421]}),o($VQ1,[2,603]),{106:[1,422]},o($Vz1,[2,599]),o($Vz1,[2,656],{377:196,55:$V91,75:$Va1,88:$Vb1,89:$Vc1,122:$Vd1,184:$Vf1,185:$Vg1,187:$Vh1,193:$Vi1,194:$Vj1,198:$Vk1,224:$Vl1,227:$Vm1,234:$Vn1,239:$Vo1,241:$Vp1}),{28:66,56:270,59:$Vr1,93:$Vg,99:249,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo,374:271,407:423,409:265,411:266,412:267,422:268,423:269},o($VR1,[2,863],{416:424,205:$VS1,219:$VT1,225:$VU1,228:$VV1,229:$VW1,236:$VX1,240:$VY1,245:$VZ1}),{28:66,56:270,59:$Vr1,93:$Vg,99:249,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo,374:271,411:425,422:268,423:269},{228:[1,426]},{228:[1,427],236:[1,428]},{228:[1,429]},o($V72,[2,883]),{225:[1,430],228:[1,431],236:[1,432],245:[1,433]},{228:[1,434]},{225:[1,435],228:[1,436],236:[1,437],245:[1,438]},{228:[1,439]},o($V_1,[2,914]),o($V_1,[2,915]),o($Vq1,[2,663]),o($Vq1,[2,664]),o($Vq1,[2,665]),{218:[1,440]},o($VE1,$VF1,{178:56,28:66,372:91,284:99,386:100,388:101,389:102,396:104,304:105,444:110,446:111,448:112,371:113,398:114,67:115,456:116,457:117,458:118,400:121,401:122,266:123,269:124,402:125,99:126,485:129,428:295,118:304,332:441,375:442,38:$Vu,39:$Vv,59:$Vw,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,134:$Vh,150:$VB,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ}),{55:$V91,75:$Va1,88:$Vb1,89:$Vc1,122:$Vd1,184:$Vf1,185:$Vg1,187:$Vh1,193:$Vi1,194:$Vj1,198:$Vk1,224:$Vl1,227:$Vm1,234:$Vn1,239:$Vo1,241:$Vp1,376:[1,443],377:196},{61:[1,444]},{61:[1,445],65:$V22},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:446,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},o($V82,[2,929]),{61:[1,447]},{61:[2,933]},{61:[2,935]},{61:[2,937]},{61:[2,939]},{61:[2,941]},{61:[2,943]},{61:[2,945]},{61:[2,947]},{55:$V91,75:$Va1,88:$Vb1,89:$Vc1,122:$Vd1,184:$Vf1,185:$Vg1,187:$Vh1,193:$Vi1,194:$Vj1,198:$Vk1,213:[1,448],224:$Vl1,227:$Vm1,234:$Vn1,239:$Vo1,241:$Vp1,377:196},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:449,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},o($Vq1,[2,978]),{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:450,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},{61:[2,1010],235:$V92,356:452,465:451},o($V42,[2,1005]),{106:[1,454]},{237:[2,989]},{77:455,199:$Va2,200:$Vb2,203:$Vc2,208:$Vd2,211:$Ve2,216:$Vf2,226:$Vg2,246:$Vh2,249:$Vi2,252:$Vj2,253:$Vk2,260:$Vl2},o($Vx1,[2,1065]),{61:[1,468],65:$V22},{55:$V91,61:[1,469],75:$Va1,88:$Vb1,89:$Vc1,122:$Vd1,184:$Vf1,185:$Vg1,187:$Vh1,193:$Vi1,194:$Vj1,198:$Vk1,224:$Vl1,227:$Vm1,234:$Vn1,239:$Vo1,241:$Vp1,377:196},o($Vx1,[2,1071]),{61:[1,470],65:$V22},o($Vq1,[2,820]),o($V$,[2,569]),o([35,61,65,75,76,89,123,170,174],[2,30]),o($V2,[2,40]),o($VE1,[2,174],{124:471}),{107:472,109:[1,473]},o($VM1,[2,50]),{61:[1,474],65:[1,475]},o($Vm2,[2,56]),{68:476,77:477,78:478,79:479,80:480,81:481,82:482,83:483,87:$Vn2,92:$Vo2,93:$Vp2,199:$Va2,200:$Vb2,203:$Vc2,208:$Vd2,211:$Ve2,216:$Vf2,226:$Vg2,246:$Vh2,249:$Vi2,252:$Vj2,253:$Vk2,260:$Vl2},o($VN1,[2,466]),{123:[1,487]},{61:[1,488],65:[1,489]},o($Vm2,$VJ1,{34:328,31:490,35:$VK1}),o($Vq2,[2,494],{186:[1,491]}),o($VP1,[2,461]),o($V2,[2,238]),o($V2,[2,244]),{65:[1,492]},{28:66,38:$Vu,39:$Vv,67:115,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,134:$Vh,150:$VB,163:493,178:56,179:$Vi,180:$Vj,181:$Vk,186:$VF,192:$VH,196:$VI,197:$Vo,202:$VK,204:$VL,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:494,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},o($Vr2,[2,631],{346:495,356:496,235:$V92}),o($V62,[2,1049]),{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:497,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:499,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,360:498,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},o($VR1,[2,851]),{28:66,56:270,59:$Vr1,93:$Vg,99:249,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo,374:271,411:500,422:268,423:269},o($Vs2,$Vt2,{417:501,233:$Vu2}),o($V72,[2,879]),o($V72,[2,880]),{228:[1,503]},o($V72,[2,882]),{228:[1,504]},o($V72,[2,885]),{228:[1,505]},{228:[1,506]},o($V72,[2,888]),{228:[1,507]},o($V72,[2,890]),{228:[1,508]},{228:[1,509]},o($V72,[2,893]),{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:510,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},{61:[1,511]},{61:[1,512],65:$V22},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:513,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},o($Vq1,[2,675]),o($Vq1,[2,676]),o([38,39,61,65,93,109,123,134,170,174,179,180,181,193,195,197,198,205,209,212,213,218,219,220,221,225,228,229,230,234,235,236,240,243,245,251,255,262,263,376],[2,678],{377:196,55:$V91,75:$Va1,88:$Vb1,89:$Vc1,122:$Vd1,184:$Vf1,185:$Vg1,187:$Vh1,194:$Vj1,224:$Vl1,227:$Vm1,239:$Vo1,241:$Vp1}),o($V82,[2,930]),o($Vq1,[2,1121]),o($VG1,[2,1142],{377:196,55:$V91,75:$Va1,88:$Vb1,89:$Vc1,122:$Vd1,184:$Vf1,185:$Vg1,187:$Vh1,193:$Vi1,194:$Vj1,198:$Vk1,224:$Vl1,227:$Vm1,234:$Vn1,239:$Vo1,241:$Vp1}),o($V32,[2,776],{377:196,55:$V91,75:$Va1,88:$Vb1,89:$Vc1,122:$Vd1,184:$Vf1,185:$Vg1,187:$Vh1,193:$Vi1,194:$Vj1,198:$Vk1,224:$Vl1,227:$Vm1,234:$Vn1,239:$Vo1,241:$Vp1}),{61:[1,514]},{61:[2,1015],109:[1,519],243:[1,518],469:515,471:516,472:517},{106:[1,520]},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:304,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,375:521,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},{61:[1,522]},o($Vv2,[2,510]),o($Vv2,[2,511]),o($Vv2,$Vw2,{310:523,59:$Vx2}),o($Vv2,[2,524],{311:525,59:[1,526]}),o($Vv2,[2,514]),o($Vv2,[2,515]),o($Vv2,[2,516]),o($Vv2,[2,517]),o($Vv2,[2,518]),o($Vv2,[2,519]),o($Vv2,[2,520]),o($Vv2,$Vw2,{310:527,59:$Vx2}),o($Vx1,[2,1067]),o($Vx1,[2,1086]),o($Vx1,[2,1072]),{125:528,176:15,312:14,317:$Vb,327:$Vc},o($VL1,[2,134]),{59:[1,530],110:529},o($VM1,[2,54]),{28:66,64:531,67:408,93:$Vg,99:126,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo},o($Vm2,[2,70],{69:532,72:533,73:534,34:537,35:$VK1,75:$Vy2,76:$Vz2}),o($Vv2,[2,82]),o($Vv2,[2,83]),o($Vv2,[2,84]),o($Vv2,[2,85]),o($Vv2,[2,86]),o($Vv2,[2,87]),o($Vv2,[2,88]),{88:[1,538]},{88:[1,539]},{88:[1,540]},{125:541,176:15,312:14,317:$Vb,327:$Vc},o($VO1,[2,186]),{28:66,67:115,93:$Vg,99:126,133:542,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo,304:413},o($Vm2,[2,188]),{28:66,67:306,93:$Vg,99:126,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,184:[1,543],197:$Vo},{59:$V52,161:544},{61:[1,545],65:[1,546]},o($Vm2,[2,788]),o($Vr,[2,649],{347:547,357:548,230:[1,549]}),o($Vr2,[2,632]),o($V62,[2,1050],{377:196,55:$V91,75:$Va1,88:$Vb1,89:$Vc1,122:$Vd1,184:$Vf1,185:$Vg1,187:$Vh1,193:$Vi1,194:$Vj1,198:$Vk1,224:$Vl1,227:$Vm1,234:$Vn1,239:$Vo1,241:$Vp1}),o($VQ1,[2,604],{65:[1,550]}),o($VA2,[2,619],{377:196,55:$V91,75:$Va1,88:$Vb1,89:$Vc1,122:$Vd1,184:$Vf1,185:$Vg1,187:$Vh1,193:$Vi1,194:$Vj1,198:$Vk1,224:$Vl1,227:$Vm1,234:$Vn1,239:$Vo1,241:$Vp1}),o($Vs2,$Vt2,{417:551,233:$Vu2}),o($Vs2,[2,866]),{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:552,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},o($V72,[2,881]),o($V72,[2,884]),o($V72,[2,886]),o($V72,[2,887]),o($V72,[2,889]),o($V72,[2,891]),o($V72,[2,892]),o($VD1,[2,666],{377:196}),o($Vq1,[2,673]),o($Vq1,[2,674]),o($VC1,[2,677],{377:196,55:$V91,88:$Vb1,89:$Vc1,122:$Vd1,184:$Vf1,185:$Vg1,187:$Vh1,194:$Vj1,224:$Vl1,227:$Vm1,239:$Vo1,241:$Vp1}),o($Vq1,[2,999]),{61:[2,1011]},{61:[2,1016]},{198:[1,553],476:[1,554]},o($VB2,[2,1033]),o($VB2,[2,1034]),{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:557,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,366:555,368:556,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},o($V42,[2,1006],{65:$V22}),o($Vq1,[2,1053]),o($Vv2,[2,512]),{256:[1,558]},o($Vv2,[2,513]),{256:[1,559]},o($Vv2,[2,521]),o($V2,[2,171]),{59:[1,561],111:560},{28:66,67:563,93:$Vg,99:126,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo,294:562},o($Vm2,[2,57]),o($Vm2,[2,66]),o($Vm2,[2,71],{34:537,73:564,35:$VK1,75:$Vy2,76:$Vz2}),o($VC2,[2,72]),{76:[1,565]},o($VC2,[2,79]),o($VC2,[2,80]),{68:566,77:477,78:478,79:479,80:480,81:481,82:482,83:483,87:$Vn2,89:[1,567],92:$Vo2,93:$Vp2,199:$Va2,200:$Vb2,203:$Vc2,208:$Vd2,211:$Ve2,216:$Vf2,226:$Vg2,246:$Vh2,249:$Vi2,252:$Vj2,253:$Vk2,260:$Vl2},{77:568,89:[1,569],199:$Va2,200:$Vb2,203:$Vc2,208:$Vd2,211:$Ve2,216:$Vf2,226:$Vg2,246:$Vh2,249:$Vi2,252:$Vj2,253:$Vk2,260:$Vl2},{28:66,89:[1,571],93:$Vg,94:570,96:572,99:573,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo},o($V2,[2,175]),o($Vm2,$VJ1,{34:328,31:574,35:$VK1}),o($Vq2,[2,495]),o($V2,[2,245]),o($V2,[2,246]),{28:66,38:$Vu,39:$Vv,67:115,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,186:$VF,192:$VH,196:$VI,197:$Vo,202:$VK,204:$VL,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:575,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},o($Vr,[2,586]),o($Vr,[2,650]),{181:[1,577],186:$VF,256:$VV,257:$VW,371:576,400:121,401:122},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:578,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},o($Vs2,[2,867]),o($Vs2,[2,909],{377:196,55:$V91,75:$Va1,88:$Vb1,89:$Vc1,122:$Vd1,184:$Vf1,185:$Vg1,187:$Vh1,193:$Vi1,194:$Vj1,198:$Vk1,224:$Vl1,227:$Vm1,234:$Vn1,239:$Vo1,241:$Vp1}),o($VD2,$VE2,{473:579}),o($VD2,$VE2,{473:580}),o([61,109,170,174,230,243,255],[2,633],{65:[1,581]}),o($VF2,[2,636]),o($VF2,[2,646],{377:196,370:582,55:$V91,75:$Va1,88:$Vb1,89:$Vc1,122:$Vd1,184:$Vf1,185:$Vg1,187:$Vh1,193:$Vi1,194:$Vj1,195:[1,583],198:$Vk1,209:[1,584],224:$Vl1,227:$Vm1,234:$Vn1,239:$Vo1,241:$Vp1}),{61:[1,585]},{61:[1,586],65:[1,587]},o($VL1,[2,138]),{105:$VG2,114:588,116:589},{61:[1,591],65:[1,592]},o($Vm2,[2,453]),o($VC2,[2,73]),o($VC2,[2,78]),{89:[1,593]},o($Vv2,[2,93]),{65:[1,594]},o($Vv2,[2,97]),{65:[1,596],89:[1,595]},o($Vv2,[2,103]),o($VH2,[2,105]),{100:[1,597]},o($Vm2,[2,189]),o($Vm2,[2,789]),o($Vr,[2,651],{65:[1,598]}),o($Vr,[2,653],{65:[1,599]}),o($VA2,[2,620],{377:196,55:$V91,75:$Va1,88:$Vb1,89:$Vc1,122:$Vd1,184:$Vf1,185:$Vg1,187:$Vh1,193:$Vi1,194:$Vj1,198:$Vk1,224:$Vl1,227:$Vm1,234:$Vn1,239:$Vo1,241:$Vp1}),o($VI2,$VJ2,{474:600,484:601,206:$VK2,256:$VL2,476:$VM2}),o($VI2,$VJ2,{484:601,474:605,206:$VK2,256:$VL2,476:$VM2}),{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:557,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,368:606,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},o($VF2,[2,643]),o($VF2,[2,647]),o($VF2,[2,648]),o($Vv2,[2,523]),o($Vv2,[2,525]),{256:[1,607]},{61:[1,608],65:[1,609]},o($Vm2,[2,147]),{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:610,120:[1,611],134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},{59:[2,450]},{28:66,67:612,93:$Vg,99:126,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo},o($Vv2,[2,92]),{68:613,77:477,78:478,79:479,80:480,81:481,82:482,83:483,87:$Vn2,92:$Vo2,93:$Vp2,199:$Va2,200:$Vb2,203:$Vc2,208:$Vd2,211:$Ve2,216:$Vf2,226:$Vg2,246:$Vh2,249:$Vi2,252:$Vj2,253:$Vk2,260:$Vl2},o($Vv2,[2,102]),{28:66,93:$Vg,96:614,99:573,134:$Vh,178:56,179:$Vi,180:$Vj,181:$Vk,197:$Vo},{68:615,77:477,78:478,79:479,80:480,81:481,82:482,83:483,87:$Vn2,92:$Vo2,93:$Vp2,199:$Va2,200:$Vb2,203:$Vc2,208:$Vd2,211:$Ve2,216:$Vf2,226:$Vg2,246:$Vh2,249:$Vi2,252:$Vj2,253:$Vk2,260:$Vl2},{186:$VF,256:$VV,257:$VW,371:616,400:121,401:122},{181:[1,617]},{61:$VN2,193:$VO2,475:618},{238:[1,620]},{242:[1,621]},o($VP2,[2,1046]),o($VP2,[2,1047]),{61:$VN2,193:$VO2,475:622},o($VF2,[2,637]),{61:[1,623]},o($VL1,[2,144]),{105:$VG2,116:624},{55:$V91,75:$Va1,88:[1,626],89:$Vc1,119:625,122:[1,627],184:$Vf1,185:$Vg1,187:$Vh1,193:$Vi1,194:$Vj1,198:$Vk1,224:$Vl1,227:$Vm1,234:$Vn1,239:$Vo1,241:$Vp1,377:196},{88:$VQ2,119:628,122:$VR2},o($Vm2,[2,454]),{89:[1,631]},o($VH2,[2,106]),o($VH2,$VJ1,{34:328,31:632,35:$VK1}),o($Vr,[2,652]),o($Vr,[2,654]),{61:[2,1017]},{206:[1,633],256:$VL2,476:$VM2,484:634},o($VI2,[2,1036]),o($VI2,[2,1037]),{61:[2,1018]},o($Vv2,[2,526]),o($Vm2,[2,148]),{120:[1,635]},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:275,120:$VS2,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:277,120:$VT2,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:636,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},o($VH1,$VS2),o($VH1,$VT2),o($Vv2,[2,96]),o($VH2,[2,112]),{242:[1,637]},{217:[1,638]},o($Vm2,[2,156],{119:639,88:$VQ2,122:$VR2}),o($Vm2,[2,155],{377:196,55:$V91,75:$Va1,88:$Vb1,89:$Vc1,122:$Vd1,184:$Vf1,185:$Vg1,187:$Vh1,193:$Vi1,194:$Vj1,198:$Vk1,224:$Vl1,227:$Vm1,234:$Vn1,239:$Vo1,241:$Vp1}),{61:[2,1041]},{61:[2,1042]},{28:66,38:$Vu,39:$Vv,59:$Vw,67:115,75:$Vx,76:$Vy,87:$Vz,92:$VA,93:$Vg,99:126,118:640,134:$Vh,150:$VB,178:56,179:$Vi,180:$Vj,181:$Vk,183:$VC,185:$VE,186:$VF,190:$VG,192:$VH,196:$VI,197:$Vo,201:$VJ,202:$VK,204:$VL,214:$VM,215:$VN,223:$VO,231:$VP,232:$VQ,247:$VR,248:$VS,250:$VT,254:$VU,256:$VV,257:$VW,258:$VX,259:$VY,261:$VZ,266:123,269:124,284:99,304:105,371:113,372:91,386:100,388:101,389:102,396:104,398:114,400:121,401:122,402:125,444:110,446:111,448:112,456:116,457:117,458:118,485:129},o($Vm2,[2,154],{377:196,55:$V91,75:$Va1,88:$Vb1,89:$Vc1,122:$Vd1,184:$Vf1,185:$Vg1,187:$Vh1,193:$Vi1,194:$Vj1,198:$Vk1,224:$Vl1,227:$Vm1,234:$Vn1,239:$Vo1,241:$Vp1})],
defaultActions: {33:[2,253],106:[2,973],107:[2,974],108:[2,975],109:[2,976],137:[2,1076],138:[2,1077],139:[2,1078],140:[2,1079],141:[2,1080],142:[2,1081],143:[2,1082],144:[2,1083],310:[2,988],377:[2,933],378:[2,935],379:[2,937],380:[2,939],381:[2,941],382:[2,943],383:[2,945],384:[2,947],392:[2,989],515:[2,1011],516:[2,1016],591:[2,450],618:[2,1017],622:[2,1018],637:[2,1041],638:[2,1042]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: lexer.yylloc,
                    ruleId: stack.slice(stack.length - 2, stack.length).join('_'),
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


SqlParseSupport.initSyntaxParser(parser);/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true,"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* skip whitespace */ 
break;
case 1: /* skip comments */ 
break;
case 2: /* skip comments */ 
break;
case 3: parser.yy.partialCursor = false; parser.yy.cursorFound = yy_.yylloc; return 16; 
break;
case 4: parser.yy.partialCursor = true; parser.yy.cursorFound = yy_.yylloc; return 264; 
break;
case 5: this.popState(); return 376; 
break;
case 6: return 'ADVANCE'; 
break;
case 7: return 'ANALYZE'; 
break;
case 8: return 193; 
break;
case 9: return 87; 
break;
case 10: return 123; 
break;
case 11: return 'AT'; 
break;
case 12: return 'BEGINNING' 
break;
case 13: this.begin('between'); return 198; 
break;
case 14: return 199; 
break;
case 15: return 200; 
break;
case 16: return 106; 
break;
case 17: return 201; 
break;
case 18: return 202; 
break;
case 19: return 'CATALOG'; 
break;
case 20: return 'CHANGES'; 
break;
case 21: return 'COLUMN'; 
break;
case 22: return 'COLUMNS'; 
break;
case 23: return 'CONNECTOR'; 
break;
case 24: return 'CONNECTORS'; 
break;
case 25: parser.determineCase(yy_.yytext); return 25; 
break;
case 26: return 'DATE'; 
break;
case 27: return 'DAY'; 
break;
case 28: return 208; 
break;
case 29: return 'DELETE'; 
break;
case 30: return 'DESCRIBE'; 
break;
case 31: return 210; 
break;
case 32: return 211; 
break;
case 33: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('DROP', yy_.yylloc, yy.lexer.upcomingInput()); return 144; 
break;
case 34: return 212; 
break;
case 35: return 'EMIT'; 
break;
case 36: return 213; 
break;
case 37: parser.yy.correlatedSubQuery = true; return 214; 
break;
case 38: parser.determineCase(yy_.yytext); return 'EXPLAIN'; 
break;
case 39: return 'EXPORT'; 
break;
case 40: return 'EXTENDED'; 
break;
case 41: parser.determineCase(yy_.yytext); return 218; 
break;
case 42: return 219; 
break;
case 43: return 'FUNCTION'; 
break;
case 44: return 'FUNCTIONS'; 
break;
case 45: return 220; 
break;
case 46: return 221; 
break;
case 47: return 'HOPPING'; 
break;
case 48: return 'HOUR'; 
break;
case 49: return 'HOURS'; 
break;
case 50: return 223; 
break;
case 51: return 224; 
break;
case 52: return 225; 
break;
case 53: return 157; 
break;
case 54: return 226; 
break;
case 55: return 'INTEGER'; 
break;
case 56: return 158; 
break;
case 57: return 227; 
break;
case 58: return 228; 
break;
case 59: return 'KEY'; 
break;
case 60: return 229; 
break;
case 61: return 55; 
break;
case 62: return 230; 
break;
case 63: return 6; 
break;
case 64: return 'LOAD'; 
break;
case 65: return 92; 
break;
case 66: return 'MILLISECOND'; 
break;
case 67: return 'MILLISECONDS'; 
break;
case 68: return 'MINUTE'; 
break;
case 69: return 'MINUTES'; 
break;
case 70: return 'MONTH'; 
break;
case 71: return 'MONTHS'; 
break;
case 72: return 75; 
break;
case 73: return 76; 
break;
case 74: return 233; 
break;
case 75: return 234; 
break;
case 76: return 236; 
break;
case 77: return 105; 
break;
case 78: return 'PARTITIONS'; 
break;
case 79: return 'PRINT'; 
break;
case 80: return 490; 
break;
case 81: return 489; 
break;
case 82: return 'QUERY'; 
break;
case 83: return 'RENAME'; 
break;
case 84: return 'RESET'; 
break;
case 85: return 240; 
break;
case 86: return 'RUN'; 
break;
case 87: return 'SAMPLE'; 
break;
case 88: return 'SCRIPT'; 
break;
case 89: return 'SECOND'; 
break;
case 90: return 'SECOND'; 
break;
case 91: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SELECT', yy_.yylloc); return 317; 
break;
case 92: return 'SESSION'; 
break;
case 93: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SET', yy_.yylloc); return 15; 
break;
case 94: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SHOW', yy_.yylloc); return 9; 
break;
case 95: return 'SINK'; 
break;
case 96: return 'SOURCE'; 
break;
case 97: return 'STREAM'; 
break;
case 98: return 165; 
break;
case 99: return 249; 
break;
case 100: return 93; 
break;
case 101: return 41; 
break;
case 102: return 164; 
break;
case 103: return 'TERMINATE'; 
break;
case 104: return 251; 
break;
case 105: return 'TIME'; 
break;
case 106: return 252; 
break;
case 107: return 'TO'; 
break;
case 108: return 254; 
break;
case 109: return 'TOPIC'; 
break;
case 110: return 166; 
break;
case 111: return 'TUMBLING'; 
break;
case 112: return 'TYPE'; 
break;
case 113: return 'TYPES'; 
break;
case 114: return 'UNSET'; 
break;
case 115: return 120; 
break;
case 116: return 260; 
break;
case 117: return 262; 
break;
case 118: return 263; 
break;
case 119: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('WITH', yy_.yylloc); return 327; 
break;
case 120: return 'WITHIN'; 
break;
case 121: return 'YEAR'; 
break;
case 122: return 'YEARS'; 
break;
case 123: return 'ZONE'; 
break;
case 124: yy.lexer.unput('('); yy_.yytext = 'abs'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'ABS'; 
break;
case 125: yy.lexer.unput('('); yy_.yytext = 'arraycontains'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'ARRAYCONTAINS'; 
break;
case 126: yy.lexer.unput('('); yy_.yytext = 'ceil'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'CEIL'; 
break;
case 127: yy.lexer.unput('('); yy_.yytext = 'concat'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'CONCAT'; 
break;
case 128: yy.lexer.unput('('); yy_.yytext = 'datetostring'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'DATETOSTRING'; 
break;
case 129: yy.lexer.unput('('); yy_.yytext = 'elt'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'ELT'; 
break;
case 130: yy.lexer.unput('('); yy_.yytext = 'extractjsonfield'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'EXTRACTJSONFIELD'; 
break;
case 131: yy.lexer.unput('('); yy_.yytext = 'field'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'FIELD'; 
break;
case 132: yy.lexer.unput('('); yy_.yytext = 'floor'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'FLOOR'; 
break;
case 133: yy.lexer.unput('('); yy_.yytext = 'geo_distance'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'GEO_DISTANCE'; 
break;
case 134: yy.lexer.unput('('); yy_.yytext = 'ifnull'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'IFNULL'; 
break;
case 135: yy.lexer.unput('('); yy_.yytext = 'lcase'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'LCASE'; 
break;
case 136: yy.lexer.unput('('); yy_.yytext = 'len'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'LEN'; 
break;
case 137: yy.lexer.unput('('); yy_.yytext = 'msk'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'MASK'; 
break;
case 138: yy.lexer.unput('('); yy_.yytext = 'mask_keep_left'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'MASK_KEEP_LEFT'; 
break;
case 139: yy.lexer.unput('('); yy_.yytext = 'mask_keep_right'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'MASK_KEEP_RIGHT'; 
break;
case 140: yy.lexer.unput('('); yy_.yytext = 'mask_left'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'MASK_LEFT'; 
break;
case 141: yy.lexer.unput('('); yy_.yytext = 'mask_right'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'MASK_RIGHT'; 
break;
case 142: yy.lexer.unput('('); yy_.yytext = 'random'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'RANDOM'; 
break;
case 143: yy.lexer.unput('('); yy_.yytext = 'round'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'ROUND'; 
break;
case 144: yy.lexer.unput('('); yy_.yytext = 'split'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'SPLIT'; 
break;
case 145: yy.lexer.unput('('); yy_.yytext = 'stringtodate'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'STRINGTODATE'; 
break;
case 146: yy.lexer.unput('('); yy_.yytext = 'stringtotimestamp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'STRINGTOTIMESTAMP'; 
break;
case 147: yy.lexer.unput('('); yy_.yytext = 'substring'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'SUBSTRING'; 
break;
case 148: yy.lexer.unput('('); yy_.yytext = 'timestamptostring'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'TIMESTAMPTOSTRING'; 
break;
case 149: yy.lexer.unput('('); yy_.yytext = 'trim'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'TRIM'; 
break;
case 150: yy.lexer.unput('('); yy_.yytext = 'ucase'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'UCASE'; 
break;
case 151: yy.lexer.unput('('); yy_.yytext = 'url_decode_param'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'URL_DECODE_PARAM'; 
break;
case 152: yy.lexer.unput('('); yy_.yytext = 'urel_encode_param'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'URL_ENCODE_PARAM'; 
break;
case 153: yy.lexer.unput('('); yy_.yytext = 'url_extract_fragment'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'URL_EXTRACT_FRAGMENT'; 
break;
case 154: yy.lexer.unput('('); yy_.yytext = 'url_extract_host'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'URL_EXTRACT_HOST'; 
break;
case 155: yy.lexer.unput('('); yy_.yytext = 'url_extract_parameter'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'URL_EXTRACT_PARAMETER'; 
break;
case 156: yy.lexer.unput('('); yy_.yytext = 'url_extrct_path'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'URL_EXTRACT_PATH'; 
break;
case 157: yy.lexer.unput('('); yy_.yytext = 'url_extract_port'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'URL_EXTRACT_PORT'; 
break;
case 158: yy.lexer.unput('('); yy_.yytext = 'url_extract_protocol'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'URL_EXTRACT_PROTOCOL'; 
break;
case 159: yy.lexer.unput('('); yy_.yytext = 'url_extract_query'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'URL_EXTRACT_QUERY'; 
break;
case 160: yy.lexer.unput('('); yy_.yytext = 'collect_list'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'COLLECT_LIST'; 
break;
case 161: yy.lexer.unput('('); yy_.yytext = 'collect_set'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'COLLECT_SET'; 
break;
case 162: yy.lexer.unput('('); yy_.yytext = 'count'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 204; 
break;
case 163: yy.lexer.unput('('); yy_.yytext = 'historgram'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'HISTOGRAM'; 
break;
case 164: yy.lexer.unput('('); yy_.yytext = 'max'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 231; 
break;
case 165: yy.lexer.unput('('); yy_.yytext = 'min'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 232; 
break;
case 166: yy.lexer.unput('('); yy_.yytext = 'sum'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 250; 
break;
case 167: yy.lexer.unput('('); yy_.yytext = 'topk'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'TOPK'; 
break;
case 168: yy.lexer.unput('('); yy_.yytext = 'topkdistinct'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'TOPKDISTINCT'; 
break;
case 169: yy.lexer.unput('('); yy_.yytext = 'windowstart'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'WindowStart'; 
break;
case 170: yy.lexer.unput('('); yy_.yytext = 'windowend'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'WindowEnd'; 
break;
case 171: return 256; 
break;
case 172: return 256; 
break;
case 173: return 257; 
break;
case 174: return 180; 
break;
case 175: return 193; 
break;
case 176: return 234; 
break;
case 177: return 187; 
break;
case 178: return 88; 
break;
case 179: return 89; 
break;
case 180: return 122; 
break;
case 181: return 122; 
break;
case 182: return 122; 
break;
case 183: return 122; 
break;
case 184: return 122; 
break;
case 185: return 185; 
break;
case 186: return 184; 
break;
case 187: return 194; 
break;
case 188: return 194; 
break;
case 189: return 194; 
break;
case 190: return 194; 
break;
case 191: return 194; 
break;
case 192: return 194; 
break;
case 193: return 65; 
break;
case 194: return 186; 
break;
case 195: return 100; 
break;
case 196: return 174; 
break;
case 197: return 190; 
break;
case 198: return 183; 
break;
case 199: return 59; 
break;
case 200: return 61; 
break;
case 201: return 188; 
break;
case 202: return 189; 
break;
case 203: return 181; 
break;
case 204: this.begin('backtickedValue'); return 197; 
break;
case 205:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '`')) {
                                               return 268;
                                             }
                                             return 40;
                                           
break;
case 206: this.popState(); return 197; 
break;
case 207: this.begin('singleQuotedValue'); return 38; 
break;
case 208:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '\'')) {
                                               return 268;
                                             }
                                             return 40;
                                           
break;
case 209: this.popState(); return 38; 
break;
case 210: this.begin('doubleQuotedValue'); return 39; 
break;
case 211:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '"')) {
                                               return 268;
                                             }
                                             return 40;
                                           
break;
case 212: this.popState(); return 39; 
break;
case 213: return 170; 
break;
case 214: /* To prevent console logging of unknown chars */ 
break;
case 215: 
break;
case 216: 
break;
case 217: 
break;
case 218: 
break;
case 219: 
break;
case 220:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s)/i,/^(?:--.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:AND)/i,/^(?:ADVANCE)/i,/^(?:ANALYZE)/i,/^(?:AND)/i,/^(?:ARRAY)/i,/^(?:AS)/i,/^(?:AT)/i,/^(?:BEGINNING)/i,/^(?:BETWEEN)/i,/^(?:BIGINT)/i,/^(?:BOOLEAN)/i,/^(?:BY)/i,/^(?:CASE)/i,/^(?:CAST)/i,/^(?:CATALOG)/i,/^(?:CHANGES)/i,/^(?:COLUMN)/i,/^(?:COLUMNS)/i,/^(?:CONNECTOR)/i,/^(?:CONNECTORS)/i,/^(?:CREATE)/i,/^(?:DATE)/i,/^(?:DAY)/i,/^(?:DECIMAL)/i,/^(?:DELETE)/i,/^(?:DESCRIBE)/i,/^(?:DISTINCT)/i,/^(?:DOUBLE)/i,/^(?:DROP)/i,/^(?:ELSE)/i,/^(?:EMIT)/i,/^(?:END)/i,/^(?:EXISTS)/i,/^(?:EXPLAIN)/i,/^(?:EXPORT)/i,/^(?:EXTENDED)/i,/^(?:FROM)/i,/^(?:FULL)/i,/^(?:FUNCTION)/i,/^(?:FUNCTIONS)/i,/^(?:GROUP)/i,/^(?:HAVING)/i,/^(?:HOPPING)/i,/^(?:HOUR)/i,/^(?:HOURS)/i,/^(?:IF)/i,/^(?:IN)/i,/^(?:INNER)/i,/^(?:INSERT)/i,/^(?:INT)/i,/^(?:INTEGER)/i,/^(?:INTO)/i,/^(?:IS)/i,/^(?:JOIN)/i,/^(?:KEY)/i,/^(?:LEFT)/i,/^(?:LIKE)/i,/^(?:LIMIT)/i,/^(?:LIST)/i,/^(?:LOAD)/i,/^(?:MAP)/i,/^(?:MILLISECOND)/i,/^(?:MILLISECONDS)/i,/^(?:MINUTE)/i,/^(?:MINUTES)/i,/^(?:MONTH)/i,/^(?:MONTHS)/i,/^(?:NOT)/i,/^(?:NULL)/i,/^(?:ON)/i,/^(?:OR)/i,/^(?:OUTER)/i,/^(?:PARTITION)/i,/^(?:PARTITIONS)/i,/^(?:PRINT)/i,/^(?:PROPERTIES)/i,/^(?:QUERIES)/i,/^(?:QUERY)/i,/^(?:RENAME)/i,/^(?:RESET)/i,/^(?:RIGHT)/i,/^(?:RUN)/i,/^(?:SAMPLE)/i,/^(?:SCRIPT)/i,/^(?:SECOND)/i,/^(?:SECOND)/i,/^(?:SELECT)/i,/^(?:SESSION)/i,/^(?:SET)/i,/^(?:SHOW)/i,/^(?:SINK)/i,/^(?:SOURCE)/i,/^(?:STREAM)/i,/^(?:STREAMS)/i,/^(?:STRING)/i,/^(?:STRUCT)/i,/^(?:TABLE)/i,/^(?:TABLES)/i,/^(?:TERMINATE)/i,/^(?:THEN)/i,/^(?:TIME)/i,/^(?:TIMESTAMP)/i,/^(?:TO)/i,/^(?:TRUE)/i,/^(?:TOPIC)/i,/^(?:TOPICS)/i,/^(?:TUMBLING)/i,/^(?:TYPE)/i,/^(?:TYPES)/i,/^(?:UNSET)/i,/^(?:VALUES)/i,/^(?:VARCHAR)/i,/^(?:WHEN)/i,/^(?:WHERE)/i,/^(?:WITH)/i,/^(?:WITHIN)/i,/^(?:YEAR)/i,/^(?:YEARS)/i,/^(?:ZONE)/i,/^(?:ABS\s*\()/i,/^(?:ARRAYCONTAINS\s*\()/i,/^(?:CEIL\s*\()/i,/^(?:CONCAT\s*\()/i,/^(?:DATETOSTRING\s*\()/i,/^(?:ELT\s*\()/i,/^(?:EXTRACTJSONFIELD\s*\()/i,/^(?:FIELD\s*\()/i,/^(?:FLOOR\s*\()/i,/^(?:GEO_DISTANCE\s*\()/i,/^(?:IFNULL\s*\()/i,/^(?:LCASE\s*\()/i,/^(?:LEN\s*\()/i,/^(?:MASK\s*\()/i,/^(?:MASK_KEEP_LEFT\s*\()/i,/^(?:MASK_KEEP_RIGHT\s*\()/i,/^(?:MASK_LEFT\s*\()/i,/^(?:MASK_RIGHT\s*\()/i,/^(?:RANDOM\s*\()/i,/^(?:ROUND\s*\()/i,/^(?:SPLIT\s*\()/i,/^(?:STRINGTODATE\s*\()/i,/^(?:STRINGTOTIMESTAMP\s*\()/i,/^(?:SUBSTRING\s*\()/i,/^(?:TIMESTAMPTOSTRING\s*\()/i,/^(?:TRIM\s*\()/i,/^(?:UCASE\s*\()/i,/^(?:URL_DECODE_PARAM\s*\()/i,/^(?:URL_ENCODE_PARAM\s*\()/i,/^(?:URL_EXTRACT_FRAGMENT\s*\()/i,/^(?:URL_EXTRACT_HOST\s*\()/i,/^(?:URL_EXTRACT_PARAMETER\s*\()/i,/^(?:URL_EXTRACT_PATH\s*\()/i,/^(?:URL_EXTRACT_PORT\s*\()/i,/^(?:URL_EXTRACT_PROTOCOL\s*\()/i,/^(?:URL_EXTRACT_QUERY\s*\()/i,/^(?:COLLECT_LIST\s*\()/i,/^(?:COLLECT_SET\s*\()/i,/^(?:COUNT\s*\()/i,/^(?:HISTOGRAM\s*\()/i,/^(?:MAX\s*\()/i,/^(?:MIN\s*\()/i,/^(?:SUM\s*\()/i,/^(?:TOPK\s*\()/i,/^(?:TOPKDISTINCT\s*\()/i,/^(?:WindowStart\s*\()/i,/^(?:WindowEnd\s*\()/i,/^(?:[0-9]+)/i,/^(?:[0-9]+(?:[YSL]|BD)?)/i,/^(?:[0-9]+E)/i,/^(?:[A-Za-z0-9_]+)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<>)/i,/^(?:<=>)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\+)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\|)/i,/^(?:\^)/i,/^(?:&)/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:;)/i,/^(?:~)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\$\{[^}]*\})/i,/^(?:`)/i,/^(?:[^`]+)/i,/^(?:`)/i,/^(?:')/i,/^(?:(?:\\\\|\\[']|[^'])+)/i,/^(?:')/i,/^(?:")/i,/^(?:(?:\\\\|\\["]|[^"])+)/i,/^(?:")/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"hdfs":{"rules":[216],"inclusive":false},"doubleQuotedValue":{"rules":[211,212,219],"inclusive":false},"singleQuotedValue":{"rules":[208,209,218],"inclusive":false},"backtickedValue":{"rules":[205,206,217],"inclusive":false},"between":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,207,210,213,214,215,220],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,207,210,213,214,220],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
export default ksqlSyntaxParser;
