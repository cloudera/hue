// Licensed to Cloudera, Inc. under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  Cloudera, Inc. licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import SqlParseSupport from 'parse/sql/druid/sqlParseSupport';

var druidSyntaxParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[13,20,40,152,158,167,176,180,415,428,495,509],$V1=[2,276],$V2=[176,180],$V3=[2,277],$V4=[1,28],$V5=[1,40],$V6=[1,36],$V7=[1,37],$V8=[1,38],$V9=[1,39],$Va=[1,32],$Vb=[1,33],$Vc=[1,31],$Vd=[1,29],$Ve=[74,176,180],$Vf=[2,1013],$Vg=[1,46],$Vh=[1,55],$Vi=[1,57],$Vj=[1,56],$Vk=[1,52],$Vl=[1,53],$Vm=[1,65],$Vn=[2,843],$Vo=[1,67],$Vp=[1,68],$Vq=[1,79],$Vr=[1,80],$Vs=[74,176,180,261],$Vt=[192,193],$Vu=[13,28,43,47,48,56,70,72,74,78,88,100,101,102,105,106,113,118,122,133,135,157,176,180,185,186,187,190,191,192,193,199,200,201,203,204,205,206,209,211,214,215,217,218,219,222,224,225,226,227,230,231,232,233,234,235,236,239,240,241,242,245,246,247,249,251,252,255,257,258,259,261,266,268,269,282,322],$Vv=[13,56,106,185,186,187,203],$Vw=[1,147],$Vx=[1,148],$Vy=[1,111],$Vz=[1,106],$VA=[1,115],$VB=[1,120],$VC=[1,122],$VD=[1,123],$VE=[1,107],$VF=[1,104],$VG=[1,109],$VH=[1,145],$VI=[1,108],$VJ=[1,133],$VK=[1,151],$VL=[1,112],$VM=[1,134],$VN=[1,141],$VO=[1,110],$VP=[1,150],$VQ=[1,121],$VR=[1,152],$VS=[1,153],$VT=[1,154],$VU=[1,155],$VV=[1,142],$VW=[1,149],$VX=[1,144],$VY=[1,146],$VZ=[1,156],$V_=[1,157],$V$=[1,158],$V01=[47,48,56,72,74,88,89,100,105,106,158,185,186,187,189,190,191,192,196,198,202,203,207,208,210,220,221,229,237,238,253,254,256,260,262,263,264,265,267,415],$V11=[72,78,415],$V21=[56,106,176,180,185,186,187],$V31=[2,433],$V41=[1,164],$V51=[56,106,185,186,187,203],$V61=[56,106,176,180,185,186,187,203,229],$V71=[2,430],$V81=[1,169],$V91=[74,78,176,180,224,261],$Va1=[2,763],$Vb1=[1,223],$Vc1=[1,224],$Vd1=[1,212],$Ve1=[1,209],$Vf1=[1,210],$Vg1=[1,211],$Vh1=[1,218],$Vi1=[1,217],$Vj1=[1,208],$Vk1=[1,216],$Vl1=[1,219],$Vm1=[1,214],$Vn1=[1,213],$Vo1=[1,207],$Vp1=[1,215],$Vq1=[1,226],$Vr1=[1,225],$Vs1=[28,47,48,56,70,74,78,88,101,102,106,122,135,176,180,185,186,187,190,191,193,199,200,201,203,204,211,215,218,219,224,225,226,227,230,231,233,234,235,236,240,241,242,245,246,247,249,251,257,261,268,269,322],$Vt1=[1,232],$Vu1=[1,238],$Vv1=[1,240],$Vw1=[28,47,48,56,70,72,74,78,88,101,102,106,122,135,176,180,185,186,187,190,191,193,199,200,201,203,204,211,215,218,219,224,225,226,227,230,231,233,234,235,236,240,241,242,245,246,247,249,251,257,261,268,269,322],$Vx1=[1,245],$Vy1=[28,43,47,48,56,70,72,74,78,88,101,102,106,122,135,176,180,185,186,187,190,191,192,193,199,200,201,203,204,211,215,218,219,224,225,226,227,230,231,233,234,235,236,240,241,242,245,246,247,249,251,257,261,268,269,322],$Vz1=[28,47,48,56,70,74,78,88,101,102,106,122,135,176,180,185,186,187,190,191,193,199,200,201,203,204,211,215,218,219,224,225,226,227,230,231,233,234,235,236,240,241,242,243,245,246,247,249,251,257,261,268,269,322],$VA1=[28,47,48,56,74,78,106,118,133,157,176,180,185,186,187,203,211,225,226,227,231,234,235,236,239,241,242,246,251,261,269],$VB1=[28,43,74,78,88,89,102,176,180,211,224,225,226,227,231,234,235,236,239,241,242,246,251,261,269],$VC1=[176,180,269],$VD1=[78,176,180,224,269],$VE1=[43,74,78,193],$VF1=[74,176,180,226,227,236,241,261],$VG1=[2,1026],$VH1=[1,293],$VI1=[89,216,221,260],$VJ1=[74,78,176,180,211,224,225,226,227,231,234,235,236,239,241,242,246,251,261,269],$VK1=[28,47,48,56,74,78,88,106,122,176,180,185,186,187,199,201,203,204,211,215,218,219,224,225,226,227,231,234,235,236,240,241,242,246,249,251,257,261,268,269,322],$VL1=[28,47,48,56,74,78,88,101,102,106,122,135,176,180,185,186,187,190,191,193,199,200,201,203,204,211,215,218,219,224,225,226,227,231,234,235,236,240,241,242,246,249,251,257,261,268,269,322],$VM1=[415,428],$VN1=[2,741],$VO1=[218,219,268],$VP1=[47,48,56,72,88,89,100,105,106,158,185,186,187,189,191,192,196,198,202,203,207,208,210,220,221,229,237,238,253,254,256,260,262,263,264,265,267],$VQ1=[28,43,47,48,56,70,74,78,88,89,101,102,106,122,135,176,180,185,186,187,190,191,193,199,200,201,203,204,211,215,218,219,224,225,226,227,230,231,233,234,235,236,239,240,241,242,245,246,247,249,251,257,261,268,269,322],$VR1=[74,78],$VS1=[2,41],$VT1=[1,363],$VU1=[28,176,180],$VV1=[28,118,176,180],$VW1=[28,43,70,72,118,176,180],$VX1=[28,43],$VY1=[74,176,180,227,236,241,261],$VZ1=[74,78,176,180,226,227,236,241,261,269],$V_1=[1,396],$V$1=[1,397],$V02=[1,398],$V12=[1,399],$V22=[1,400],$V32=[1,401],$V42=[1,402],$V52=[1,403],$V62=[74,78,176,180,211,225,226,227,231,234,235,236,239,241,242,246,251,261,269],$V72=[28,47,48,56,74,78,106,176,180,185,186,187,203,211,225,226,227,231,234,235,236,239,241,242,246,251,261,269],$V82=[28,47,48,56,74,78,88,101,102,106,122,135,176,180,185,186,187,193,199,201,203,204,211,215,218,219,224,225,226,227,231,234,235,236,240,241,242,246,249,251,257,261,268,269,322],$V92=[28,47,48,56,74,78,106,122,176,180,185,186,187,199,201,203,211,215,218,219,224,225,226,227,231,234,235,236,240,241,242,246,249,251,257,261,268,269,322],$Va2=[1,429],$Vb2=[74,241],$Vc2=[1,458],$Vd2=[74,176,180,236,241,261],$Ve2=[56,72,106,185,186,187,203],$Vf2=[1,486],$Vg2=[74,78,241],$Vh2=[28,47,48,56,70,74,78,88,101,102,106,122,135,176,180,185,186,187,190,191,193,199,200,201,203,204,211,215,218,219,224,225,226,227,230,231,233,234,235,236,239,240,241,242,245,246,247,249,251,257,261,268,269,322],$Vi2=[1,494],$Vj2=[1,497],$Vk2=[1,498],$Vl2=[1,499],$Vm2=[1,500],$Vn2=[1,501],$Vo2=[1,502],$Vp2=[1,503],$Vq2=[1,504],$Vr2=[1,505],$Vs2=[1,506],$Vt2=[1,507],$Vu2=[1,508],$Vv2=[1,525],$Vw2=[1,526],$Vx2=[1,527],$Vy2=[78,176,180],$Vz2=[74,176,180,236,261],$VA2=[74,78,176,180,211,225,226,227,231,234,235,236,241,242,246,251,261,269],$VB2=[2,971],$VC2=[1,542],$VD2=[43,74,78,88,89,102],$VE2=[2,542],$VF2=[1,565],$VG2=[1,576],$VH2=[1,577],$VI2=[74,78,176,180,227,236,241,261],$VJ2=[204,401],$VK2=[43,74,78,88,89],$VL2=[74,199,212,262,401],$VM2=[2,799],$VN2=[74,78,122,176,180,236,249,261],$VO2=[1,630],$VP2=[78,102],$VQ2=[74,199],$VR2=[2,809],$VS2=[1,642],$VT2=[1,643],$VU2=[1,644],$VV2=[2,814],$VW2=[1,659],$VX2=[223,244],$VY2=[1,669],$VZ2=[1,670],$V_2=[2,191],$V$2=[2,192];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"DataDefinition":3,"AlterStatement":4,"CreateStatement":5,"DropStatement":6,"SetSpecification":7,"UseStatement":8,"DataDefinition_EDIT":9,"AlterStatement_EDIT":10,"CreateStatement_EDIT":11,"DropStatement_EDIT":12,"SET":13,"CURSOR":14,"UseStatement_EDIT":15,"AlterTable":16,"AlterView":17,"AlterTable_EDIT":18,"AlterView_EDIT":19,"ALTER":20,"AlterTableLeftSide":21,"PartitionSpec":22,"AlterTableLeftSide_EDIT":23,"TABLE":24,"SchemaQualifiedTableIdentifier":25,"SchemaQualifiedTableIdentifier_EDIT":26,"AlterViewLeftSide":27,"AS":28,"QuerySpecification":29,"AlterViewLeftSide_EDIT":30,"QuerySpecification_EDIT":31,"VIEW":32,"DatabaseDefinition":33,"TableDefinition":34,"ViewDefinition":35,"RoleDefinition":36,"DatabaseDefinition_EDIT":37,"TableDefinition_EDIT":38,"ViewDefinition_EDIT":39,"CREATE":40,"OptionalComment":41,"Comment":42,"COMMENT":43,"QuotedValue":44,"OptionalComment_INVALID":45,"Comment_INVALID":46,"SINGLE_QUOTE":47,"DOUBLE_QUOTE":48,"VALUE":49,"DatabaseOrSchema":50,"OptionalIfNotExists":51,"RegularIdentifier":52,"DatabaseDefinitionOptionals":53,"OptionalIfNotExists_EDIT":54,"DatabaseDefinitionOptionals_EDIT":55,"ROLE":56,"TableDefinitionRightPart":57,"TableDefinitionRightPart_EDIT":58,"TableIdentifierAndOptionalColumnSpecification":59,"OptionalPartitionedBy":60,"OptionalAsSelectStatement":61,"TableIdentifierAndOptionalColumnSpecification_EDIT":62,"PartitionedBy_EDIT":63,"OptionalAsSelectStatement_EDIT":64,"SchemaQualifiedIdentifier":65,"OptionalColumnSpecificationsOrLike":66,"OptionalColumnSpecificationsOrLike_EDIT":67,"SchemaQualifiedIdentifier_EDIT":68,"ParenthesizedColumnSpecificationList":69,"LIKE":70,"ParenthesizedColumnSpecificationList_EDIT":71,"(":72,"ColumnSpecificationList":73,")":74,"ColumnSpecificationList_EDIT":75,"RightParenthesisOrError":76,"ColumnSpecification":77,",":78,"ColumnSpecification_EDIT":79,"ColumnIdentifier":80,"ColumnDataType":81,"OptionalColumnOptions":82,"ColumnDataType_EDIT":83,"ColumnOptions_EDIT":84,"ColumnOptions":85,"ColumnOption":86,"ColumnOption_EDIT":87,"NOT":88,"NULL":89,"PrimitiveType":90,"ArrayType":91,"MapType":92,"StructType":93,"ArrayType_INVALID":94,"MapType_INVALID":95,"StructType_INVALID":96,"ArrayType_EDIT":97,"MapType_EDIT":98,"StructType_EDIT":99,"ARRAY":100,"<":101,">":102,"AnyCursor":103,"GreaterThanOrError":104,"MAP":105,"STRUCT":106,"StructDefinitionList":107,"StructDefinitionList_EDIT":108,"StructDefinition":109,"StructDefinition_EDIT":110,"Commas":111,"RegularOrBacktickedIdentifier":112,":":113,"ColumnDataTypeList":114,"ColumnDataTypeList_EDIT":115,"ColumnDataTypeListInner_EDIT":116,"PartitionedBy":117,"PARTITION":118,"BY":119,"RangeClause":120,"RangeClause_EDIT":121,"RANGE":122,"ParenthesizedColumnList":123,"ParenthesizedPartitionValuesList":124,"ParenthesizedColumnList_EDIT":125,"ParenthesizedPartitionValuesList_EDIT":126,"PartitionValueList":127,"PartitionValueList_EDIT":128,"PartitionValue":129,"PartitionValue_EDIT":130,"ValueExpression":131,"LessThanOrEqualTo":132,"VALUES":133,"ValueExpression_EDIT":134,"COMPARISON_OPERATOR":135,"CommitLocations":136,"OptionalParenthesizedViewColumnList":137,"ParenthesizedViewColumnList_EDIT":138,"ParenthesizedViewColumnList":139,"ViewColumnList":140,"ViewColumnList_EDIT":141,"ColumnReference":142,"DropDatabaseStatement":143,"DropRoleStatement":144,"DropTableStatement":145,"DropViewStatement":146,"TruncateTableStatement":147,"DropDatabaseStatement_EDIT":148,"DropTableStatement_EDIT":149,"DropViewStatement_EDIT":150,"TruncateTableStatement_EDIT":151,"DROP":152,"OptionalIfExists":153,"OptionalCascade":154,"OptionalIfExists_EDIT":155,"OptionalPurge":156,"PURGE":157,"TRUNCATE":158,"OptionalPartitionSpec":159,"DataManipulation":160,"InsertStatement":161,"UpdateStatement":162,"InsertValuesStatement":163,"DataManipulation_EDIT":164,"InsertValuesStatement_EDIT":165,"UpdateStatement_EDIT":166,"INSERT":167,"INTO":168,"OptionalTable":169,"InsertValuesList":170,"ParenthesizedRowValuesList":171,"InValueList":172,"SqlSyntax":173,"NewStatement":174,"SqlStatements":175,"EOF":176,"SqlAutocomplete":177,"SqlStatements_EDIT":178,"SqlStatement":179,";":180,"SqlStatement_EDIT":181,"CommonTableExpression":182,"SetSpecification_EDIT":183,"NonReservedKeyword":184,"OPTION":185,"REGULAR_IDENTIFIER":186,"VARIABLE_REFERENCE":187,"NonStartingToken":188,"!":189,"*":190,"-":191,".":192,"=":193,"[":194,"]":195,"~":196,"ALL":197,"ANALYTIC":198,"AND":199,"ARITHMETIC_OPERATOR":200,"ASC":201,"AVG":202,"BACKTICK":203,"BETWEEN":204,"BIGINT":205,"BOOLEAN":206,"CASE":207,"CAST":208,"CHAR":209,"COUNT":210,"CROSS":211,"CURRENT":212,"DATABASE":213,"DECIMAL":214,"DESC":215,"DISTINCT":216,"DOUBLE":217,"ELSE":218,"END":219,"EXISTS":220,"FALSE":221,"FLOAT":222,"FOLLOWING":223,"FROM":224,"FULL":225,"GROUP":226,"HAVING":227,"HDFS_START_QUOTE":228,"IF":229,"IN":230,"INNER":231,"INT":232,"IS":233,"JOIN":234,"LEFT":235,"LIMIT":236,"MAX":237,"MIN":238,"ON":239,"OR":240,"ORDER":241,"OUTER":242,"OVER":243,"PRECEDING":244,"REGEXP":245,"RIGHT":246,"RLIKE":247,"ROW":248,"ROWS":249,"SCHEMA":250,"SEMI":251,"SMALLINT":252,"STDDEV_POP":253,"STDDEV_SAMP":254,"STRING":255,"SUM":256,"THEN":257,"TIMESTAMP":258,"TINYINT":259,"TRUE":260,"UNION":261,"UNSIGNED_INTEGER":262,"UNSIGNED_INTEGER_E":263,"VAR_POP":264,"VAR_SAMP":265,"VARCHAR":266,"VARIANCE":267,"WHEN":268,"WHERE":269,"PARTIAL_CURSOR":270,"FromOrIn":271,"SingleQuotedValue":272,"SingleQuotedValue_EDIT":273,"PARTIAL_VALUE":274,"DoubleQuotedValue":275,"DoubleQuotedValue_EDIT":276,"QuotedValue_EDIT":277,"OptionalFromDatabase":278,"DatabaseIdentifier":279,"OptionalFromDatabase_EDIT":280,"DatabaseIdentifier_EDIT":281,"CASCADE":282,"OptionalInDatabase":283,"OptionalPartitionSpec_EDIT":284,"PartitionSpec_EDIT":285,"PartitionSpecList":286,"PartitionSpecList_EDIT":287,"RangePartitionSpec":288,"UnsignedValueSpecification":289,"RangePartitionComparisonOperator":290,"RangePartitionSpec_EDIT":291,"ConfigurationName":292,"PartialBacktickedOrAnyCursor":293,"PartialBacktickedIdentifier":294,"PartialBacktickedOrCursor":295,"PartialBacktickedOrPartialCursor":296,"OptionalParenthesizedColumnList":297,"OptionalParenthesizedColumnList_EDIT":298,"ColumnList":299,"ColumnList_EDIT":300,"ParenthesizedSimpleValueList":301,"SimpleValueList":302,"PartitionExpression":303,"PartitionExpression_EDIT":304,"RegularOrBackTickedSchemaQualifiedName":305,"RegularOrBackTickedSchemaQualifiedName_EDIT":306,"LocalOrSchemaQualifiedName":307,"LocalOrSchemaQualifiedName_EDIT":308,"BasicIdentifierChain":309,"ColumnReference_EDIT":310,"BasicIdentifierChain_EDIT":311,"DerivedColumnChain":312,"DerivedColumnChain_EDIT":313,"PartialBacktickedIdentifierOrPartialCursor":314,"OptionalTypeLength":315,"OptionalTypePrecision":316,"NonParenthesizedValueExpressionPrimary":317,"OptionalNot":318,"TableSubQuery":319,"TableSubQueryInner":320,"ValueExpressionList":321,"BETWEEN_AND":322,"LikeRightPart":323,"CaseRightPart":324,"NonParenthesizedValueExpressionPrimary_EDIT":325,"TableSubQuery_EDIT":326,"ValueExpressionInSecondPart_EDIT":327,"LikeRightPart_EDIT":328,"CaseRightPart_EDIT":329,"EndOrError":330,"ValueExpressionList_EDIT":331,"ColumnOrArbitraryFunctionRef":332,"ArbitraryFunctionRightPart":333,"ArbitraryFunctionName":334,"UserDefinedFunction":335,"UnsignedValueSpecification_EDIT":336,"ColumnOrArbitraryFunctionRef_EDIT":337,"ArbitraryFunctionRightPart_EDIT":338,"UserDefinedFunction_EDIT":339,"SignedInteger":340,"UnsignedNumericLiteral":341,"+":342,"UnsignedLiteral":343,"UnsignedLiteral_EDIT":344,"GeneralLiteral":345,"GeneralLiteral_EDIT":346,"ExactNumericLiteral":347,"ApproximateNumericLiteral":348,"TruthValue":349,"TableReference":350,"TablePrimaryOrJoinedTable":351,"TableReference_EDIT":352,"TablePrimaryOrJoinedTable_EDIT":353,"TablePrimary":354,"JoinedTable":355,"TablePrimary_EDIT":356,"JoinedTable_EDIT":357,"Joins":358,"Joins_EDIT":359,"TableOrQueryName":360,"OptionalCorrelationName":361,"DerivedTable":362,"TableOrQueryName_EDIT":363,"DerivedTable_EDIT":364,"OptionalCorrelationName_EDIT":365,"OptionalOnColumn":366,"OptionalOnColumn_EDIT":367,"PushQueryState":368,"PopQueryState":369,"TableSubQueryInner_EDIT":370,"SubQuery":371,"SubQuery_EDIT":372,"QueryExpression":373,"QueryExpression_EDIT":374,"QueryExpressionBody":375,"QueryExpressionBody_EDIT":376,"NonJoinQueryExpression":377,"NonJoinQueryExpression_EDIT":378,"NonJoinQueryTerm":379,"NonJoinQueryTerm_EDIT":380,"NonJoinQueryPrimary":381,"NonJoinQueryPrimary_EDIT":382,"SimpleTable":383,"SimpleTable_EDIT":384,"WindowExpression":385,"OptionalPartitionBy":386,"OptionalOrderByAndWindow":387,"WindowExpression_EDIT":388,"PartitionBy_EDIT":389,"OptionalOrderByAndWindow_EDIT":390,"PartitionBy":391,"OrderByClause":392,"OptionalWindowSpec":393,"OrderByClause_EDIT":394,"WindowSpec_EDIT":395,"WindowSpec":396,"RowsOrRange":397,"PopLexerState":398,"OptionalCurrentOrPreceding":399,"OptionalAndFollowing":400,"UNBOUNDED":401,"OptionalCurrentOrPreceding_EDIT":402,"OptionalAndFollowing_EDIT":403,"PushHdfsLexerState":404,"HdfsPath":405,"HDFS_PATH":406,"HDFS_END_QUOTE":407,"HdfsPath_EDIT":408,"IntegerOrUnbounded":409,"SelectStatement":410,"OptionalUnions":411,"SelectStatement_EDIT":412,"OptionalUnions_EDIT":413,"CommonTableExpression_EDIT":414,"SELECT":415,"OptionalAllOrDistinct":416,"SelectList":417,"TableExpression":418,"SelectList_EDIT":419,"TableExpression_EDIT":420,"FromClause":421,"OptionalSelectConditions":422,"FromClause_EDIT":423,"OptionalJoins":424,"OptionalSelectConditions_EDIT":425,"SelectSpecification":426,"SelectSpecification_EDIT":427,"WITH":428,"WithQueries":429,"WithQueries_EDIT":430,"WithQuery":431,"WithQuery_EDIT":432,"TableReferenceList":433,"TableReferenceList_EDIT":434,"OptionalGroupByClause":435,"GroupByClause":436,"GroupByColumnList":437,"GroupByClause_EDIT":438,"GroupByColumnList_EDIT":439,"ColumnGroupingSets":440,"ColumnGroupingSets_EDIT":441,"ColumnGroupingSet_EDIT":442,"GroupByColumnListPartTwo_EDIT":443,"OptionalHavingClause":444,"HavingClause":445,"HavingClause_EDIT":446,"Joins_INVALID":447,"JoinType":448,"OptionalJoinCondition":449,"Join_EDIT":450,"JoinType_EDIT":451,"JoinCondition_EDIT":452,"UsingColList":453,"OptionalLimitClause":454,"LimitClause":455,"LimitClause_EDIT":456,"OptionalOrderByClause":457,"OrderByColumnList":458,"OrderByColumnList_EDIT":459,"OrderByIdentifier":460,"OrderByIdentifier_EDIT":461,"OptionalAscOrDesc":462,"OptionalWhereClause":463,"WhereClause_EDIT":464,"WhereClause":465,"Unions":466,"Unions_EDIT":467,"UnionClause":468,"UnionClause_EDIT":469,"SearchCondition":470,"SearchCondition_EDIT":471,"SetOption":472,"SetValue":473,"AggregateFunction":474,"OptionalOverClause":475,"AnalyticFunction":476,"OverClause":477,"CastFunction":478,"AggregateFunction_EDIT":479,"OptionalOverClause_EDIT":480,"AnalyticFunction_EDIT":481,"OverClause_EDIT":482,"CastFunction_EDIT":483,"ArbitraryFunction":484,"ArbitraryFunction_EDIT":485,"UdfArgumentList":486,"UdfArgumentList_EDIT":487,"CountFunction":488,"SumFunction":489,"OtherAggregateFunction":490,"CountFunction_EDIT":491,"SumFunction_EDIT":492,"OtherAggregateFunction_EDIT":493,"OtherAggregateFunction_Type":494,"UPDATE":495,"TargetTable":496,"SetClauseList":497,"OptionalFromJoinedTable":498,"TargetTable_EDIT":499,"SetClauseList_EDIT":500,"FromJoinedTable_EDIT":501,"TableName":502,"TableName_EDIT":503,"SetClause":504,"SetClause_EDIT":505,"SetTarget":506,"UpdateSource":507,"UpdateSource_EDIT":508,"USE":509,"CaseWhenThenList":510,"CaseWhenThenList_EDIT":511,"CaseWhenThenListPartTwo":512,"CaseWhenThenListPartTwo_EDIT":513,"$accept":0,"$end":1},
terminals_: {2:"error",13:"SET",14:"CURSOR",20:"ALTER",24:"TABLE",28:"AS",32:"VIEW",40:"CREATE",43:"COMMENT",47:"SINGLE_QUOTE",48:"DOUBLE_QUOTE",49:"VALUE",56:"ROLE",70:"LIKE",72:"(",74:")",78:",",88:"NOT",89:"NULL",100:"ARRAY",101:"<",102:">",105:"MAP",106:"STRUCT",113:":",118:"PARTITION",119:"BY",122:"RANGE",133:"VALUES",135:"COMPARISON_OPERATOR",152:"DROP",157:"PURGE",158:"TRUNCATE",167:"INSERT",168:"INTO",176:"EOF",180:";",183:"SetSpecification_EDIT",185:"OPTION",186:"REGULAR_IDENTIFIER",187:"VARIABLE_REFERENCE",189:"!",190:"*",191:"-",192:".",193:"=",194:"[",195:"]",196:"~",197:"ALL",198:"ANALYTIC",199:"AND",200:"ARITHMETIC_OPERATOR",201:"ASC",202:"AVG",203:"BACKTICK",204:"BETWEEN",205:"BIGINT",206:"BOOLEAN",207:"CASE",208:"CAST",209:"CHAR",210:"COUNT",211:"CROSS",212:"CURRENT",213:"DATABASE",214:"DECIMAL",215:"DESC",216:"DISTINCT",217:"DOUBLE",218:"ELSE",219:"END",220:"EXISTS",221:"FALSE",222:"FLOAT",223:"FOLLOWING",224:"FROM",225:"FULL",226:"GROUP",227:"HAVING",228:"HDFS_START_QUOTE",229:"IF",230:"IN",231:"INNER",232:"INT",233:"IS",234:"JOIN",235:"LEFT",236:"LIMIT",237:"MAX",238:"MIN",239:"ON",240:"OR",241:"ORDER",242:"OUTER",243:"OVER",244:"PRECEDING",245:"REGEXP",246:"RIGHT",247:"RLIKE",248:"ROW",249:"ROWS",250:"SCHEMA",251:"SEMI",252:"SMALLINT",253:"STDDEV_POP",254:"STDDEV_SAMP",255:"STRING",256:"SUM",257:"THEN",258:"TIMESTAMP",259:"TINYINT",260:"TRUE",261:"UNION",262:"UNSIGNED_INTEGER",263:"UNSIGNED_INTEGER_E",264:"VAR_POP",265:"VAR_SAMP",266:"VARCHAR",267:"VARIANCE",268:"WHEN",269:"WHERE",270:"PARTIAL_CURSOR",274:"PARTIAL_VALUE",282:"CASCADE",322:"BETWEEN_AND",342:"+",401:"UNBOUNDED",406:"HDFS_PATH",407:"HDFS_END_QUOTE",415:"SELECT",428:"WITH",495:"UPDATE",509:"USE"},
productions_: [0,[3,1],[3,1],[3,1],[3,1],[3,1],[9,1],[9,1],[9,1],[9,2],[9,1],[4,1],[4,1],[10,1],[10,1],[10,2],[16,2],[18,1],[18,2],[18,2],[18,3],[21,3],[23,3],[23,3],[17,3],[19,1],[19,2],[19,3],[19,3],[19,3],[27,3],[30,3],[30,3],[5,1],[5,1],[5,1],[5,1],[11,1],[11,1],[11,1],[11,2],[41,0],[41,1],[42,2],[45,1],[46,2],[46,2],[46,3],[46,3],[33,3],[33,5],[37,4],[37,3],[37,5],[37,4],[37,6],[53,1],[55,1],[36,3],[34,4],[38,4],[38,4],[38,3],[57,3],[58,3],[58,3],[58,3],[58,3],[59,2],[62,2],[62,2],[66,0],[66,1],[66,2],[67,1],[67,2],[67,2],[69,3],[71,3],[73,1],[73,3],[75,1],[75,3],[75,3],[75,5],[75,2],[75,4],[75,4],[75,6],[77,3],[79,3],[79,3],[79,3],[82,0],[82,1],[85,1],[85,2],[84,1],[84,2],[84,2],[84,3],[86,2],[86,1],[86,1],[87,2],[81,1],[81,1],[81,1],[81,1],[81,1],[81,1],[81,1],[83,1],[83,1],[83,1],[91,4],[94,3],[97,4],[97,4],[92,6],[95,3],[98,6],[98,4],[98,6],[98,5],[93,4],[96,3],[99,4],[107,1],[107,3],[108,1],[108,2],[108,3],[108,3],[108,5],[109,4],[110,5],[110,4],[110,4],[110,4],[110,3],[110,3],[114,1],[114,3],[115,1],[115,2],[115,3],[115,3],[115,5],[116,2],[116,2],[116,1],[116,1],[104,1],[104,1],[60,0],[60,1],[117,3],[63,2],[63,3],[63,3],[120,3],[121,2],[121,2],[121,3],[121,3],[121,3],[124,3],[126,3],[126,3],[127,1],[127,3],[128,1],[128,3],[128,5],[128,3],[128,5],[129,6],[129,4],[129,4],[130,2],[130,2],[130,3],[130,4],[130,4],[130,5],[130,6],[130,6],[130,3],[130,4],[130,4],[132,1],[132,1],[61,0],[61,3],[64,3],[64,3],[136,0],[35,8],[39,4],[39,9],[39,3],[39,6],[39,7],[39,8],[39,8],[39,8],[137,0],[137,1],[139,3],[138,3],[140,2],[140,4],[141,3],[141,5],[141,5],[141,7],[6,1],[6,1],[6,1],[6,1],[6,1],[12,1],[12,1],[12,1],[12,1],[12,2],[143,5],[148,3],[148,3],[148,4],[148,5],[148,5],[148,6],[144,3],[145,5],[149,3],[149,4],[149,5],[149,5],[149,6],[156,0],[156,1],[146,4],[150,4],[150,5],[150,3],[150,4],[150,4],[147,4],[151,2],[151,4],[151,3],[151,4],[151,5],[151,5],[151,5],[160,1],[160,1],[161,1],[164,1],[164,1],[163,6],[165,2],[165,4],[165,4],[165,5],[165,6],[170,1],[170,3],[171,3],[169,0],[169,1],[173,3],[177,3],[177,3],[174,0],[175,0],[175,1],[175,4],[178,1],[178,4],[178,4],[178,7],[179,1],[179,1],[179,1],[181,1],[181,2],[181,1],[181,1],[181,1],[181,1],[184,1],[184,1],[184,1],[52,1],[52,1],[52,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[188,1],[111,1],[111,2],[103,1],[103,1],[271,1],[271,1],[50,1],[50,1],[272,3],[272,2],[273,2],[275,3],[275,2],[276,2],[44,1],[44,1],[277,1],[277,1],[278,0],[278,2],[280,2],[154,0],[154,1],[153,0],[153,2],[155,2],[51,0],[51,3],[54,2],[54,3],[283,0],[283,2],[283,2],[159,0],[159,1],[284,1],[22,4],[285,4],[288,5],[291,2],[291,3],[291,4],[291,5],[291,5],[291,5],[290,1],[290,1],[290,1],[290,1],[292,1],[292,1],[293,1],[293,1],[295,1],[295,1],[296,1],[296,1],[294,2],[76,1],[76,1],[297,0],[297,1],[298,1],[123,3],[125,3],[125,3],[299,1],[299,3],[300,3],[300,5],[301,3],[302,1],[302,3],[25,1],[25,3],[26,1],[26,3],[26,3],[65,1],[65,3],[68,1],[68,3],[68,3],[279,1],[281,1],[286,1],[286,3],[287,1],[287,3],[287,3],[287,5],[303,3],[304,3],[304,3],[304,3],[304,1],[112,1],[112,3],[112,2],[305,1],[305,3],[306,1],[306,3],[307,1],[307,2],[308,1],[308,2],[142,1],[142,3],[310,1],[309,1],[309,3],[311,3],[311,5],[312,1],[312,3],[313,1],[313,3],[313,5],[313,3],[80,1],[314,1],[314,1],[90,1],[90,1],[90,2],[90,2],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,2],[315,0],[315,3],[316,0],[316,3],[316,5],[131,1],[131,2],[131,2],[131,2],[131,2],[131,4],[131,4],[131,4],[131,6],[131,2],[131,3],[131,3],[131,3],[131,3],[131,3],[131,6],[131,6],[131,5],[131,5],[131,6],[131,5],[131,3],[131,3],[131,3],[131,3],[131,3],[131,2],[131,3],[131,2],[131,3],[134,1],[134,3],[134,2],[134,2],[134,2],[134,2],[134,2],[134,2],[134,2],[134,2],[134,3],[134,4],[134,5],[134,4],[134,4],[134,4],[134,6],[134,6],[134,2],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,4],[134,3],[134,6],[134,6],[134,5],[134,5],[134,6],[134,6],[134,6],[134,6],[134,5],[134,4],[134,5],[134,5],[134,5],[134,5],[134,4],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[134,2],[134,3],[134,2],[134,3],[134,2],[134,3],[134,2],[134,3],[134,3],[134,4],[134,3],[134,3],[134,3],[321,1],[321,3],[331,1],[331,3],[331,3],[331,5],[331,3],[331,5],[331,4],[331,3],[331,2],[331,2],[331,4],[172,1],[172,3],[317,1],[317,1],[317,1],[317,2],[317,2],[317,1],[325,1],[325,1],[325,2],[325,2],[325,1],[332,1],[332,3],[337,1],[340,1],[340,2],[340,2],[289,1],[336,1],[343,1],[343,1],[344,1],[341,1],[341,1],[347,1],[347,2],[347,3],[347,2],[348,2],[348,3],[348,4],[345,1],[345,1],[345,1],[346,1],[346,1],[349,1],[349,1],[318,0],[318,1],[350,1],[352,1],[351,1],[351,1],[353,1],[353,1],[355,2],[357,2],[357,2],[354,2],[354,2],[356,2],[356,2],[356,2],[360,1],[363,1],[362,1],[364,1],[366,0],[366,2],[367,2],[367,2],[368,0],[369,0],[319,3],[319,4],[326,3],[326,3],[320,2],[370,3],[371,1],[372,1],[373,1],[374,1],[375,1],[376,1],[377,1],[378,1],[379,1],[380,1],[381,1],[382,1],[383,1],[384,1],[361,0],[361,1],[361,1],[361,2],[361,2],[365,1],[365,1],[365,2],[365,2],[365,2],[385,4],[388,4],[388,4],[388,5],[388,7],[386,0],[386,1],[391,3],[389,2],[389,3],[389,3],[387,0],[387,2],[390,1],[390,3],[390,2],[393,0],[393,1],[396,5],[396,5],[395,2],[395,6],[395,5],[395,5],[395,5],[395,4],[398,0],[404,0],[405,3],[408,5],[408,4],[408,3],[408,3],[408,2],[397,1],[397,1],[399,0],[399,2],[399,2],[402,2],[402,2],[400,0],[400,3],[400,3],[403,2],[403,3],[403,3],[409,1],[409,1],[29,2],[29,3],[29,5],[31,2],[31,2],[31,4],[31,3],[31,3],[31,1],[31,4],[31,3],[410,3],[410,4],[412,3],[412,3],[412,4],[412,4],[412,4],[412,5],[412,6],[412,4],[416,0],[416,1],[416,1],[418,2],[420,2],[420,4],[420,3],[417,1],[417,3],[419,1],[419,2],[419,3],[419,3],[419,3],[419,4],[419,3],[419,3],[419,4],[419,4],[419,4],[419,5],[419,5],[426,2],[426,1],[427,2],[427,3],[427,2],[182,2],[414,2],[429,1],[429,3],[430,1],[430,3],[430,3],[430,5],[431,5],[432,2],[432,5],[432,5],[421,2],[423,2],[423,2],[433,1],[433,3],[434,1],[434,3],[434,3],[434,5],[434,3],[435,0],[435,1],[436,3],[438,3],[438,3],[438,2],[440,0],[440,1],[440,3],[440,3],[441,1],[441,3],[441,3],[441,5],[441,3],[442,1],[442,1],[437,1],[437,3],[439,1],[439,2],[439,3],[439,3],[439,3],[439,4],[439,5],[443,1],[443,2],[443,1],[444,0],[444,1],[445,2],[446,2],[446,2],[424,0],[424,1],[424,1],[358,3],[358,4],[447,1],[447,2],[450,3],[450,1],[450,3],[450,3],[450,3],[359,1],[359,2],[359,2],[359,3],[448,2],[448,2],[448,3],[448,2],[448,1],[448,3],[448,2],[448,3],[448,3],[448,2],[448,3],[448,2],[448,3],[448,3],[448,2],[451,2],[451,3],[451,3],[451,2],[451,3],[451,3],[451,3],[451,3],[451,2],[451,3],[451,3],[451,3],[451,3],[451,2],[449,0],[449,2],[453,1],[453,3],[452,2],[452,2],[454,0],[454,1],[455,2],[455,4],[455,2],[455,4],[456,2],[457,0],[457,1],[392,3],[394,3],[394,2],[458,1],[458,3],[459,1],[459,2],[459,3],[459,4],[459,5],[460,2],[461,2],[461,2],[462,0],[462,1],[462,1],[422,5],[425,5],[425,5],[425,5],[425,5],[425,5],[425,6],[425,6],[425,6],[425,6],[425,6],[411,0],[411,1],[413,1],[466,1],[466,2],[467,1],[467,2],[467,2],[467,3],[468,4],[469,3],[469,4],[469,4],[463,0],[463,1],[465,2],[464,2],[464,2],[470,1],[471,1],[7,4],[7,2],[472,1],[472,3],[473,1],[473,1],[473,2],[473,1],[473,1],[473,1],[473,1],[335,2],[335,2],[335,1],[339,1],[339,2],[339,1],[339,2],[339,2],[339,2],[339,1],[484,2],[484,2],[485,2],[485,2],[334,1],[334,1],[334,1],[334,1],[333,2],[333,3],[338,3],[338,4],[338,3],[486,1],[486,3],[487,1],[487,3],[487,3],[487,5],[487,3],[487,5],[487,4],[487,3],[487,2],[487,2],[487,4],[474,1],[474,1],[474,1],[479,1],[479,1],[479,1],[476,3],[476,4],[481,4],[481,5],[481,4],[475,0],[475,1],[480,1],[477,2],[477,2],[482,2],[478,6],[478,3],[483,6],[483,5],[483,4],[483,6],[483,5],[483,4],[483,6],[483,5],[483,6],[483,5],[488,4],[488,3],[488,5],[491,5],[491,6],[491,5],[490,4],[490,5],[493,5],[493,6],[493,5],[494,1],[494,1],[494,1],[494,1],[494,1],[494,1],[494,1],[494,1],[489,5],[489,3],[492,5],[492,6],[492,5],[162,6],[166,6],[166,6],[166,6],[166,6],[166,7],[166,3],[166,2],[166,2],[166,2],[496,1],[499,1],[502,1],[503,1],[497,1],[497,3],[500,1],[500,3],[500,3],[500,5],[504,3],[505,3],[505,2],[505,1],[506,1],[507,1],[508,1],[498,0],[498,2],[501,2],[501,2],[8,2],[15,2],[327,3],[327,3],[327,3],[323,2],[323,2],[323,2],[328,2],[328,2],[328,2],[328,2],[328,2],[328,2],[324,2],[324,4],[329,2],[329,4],[329,4],[329,3],[329,4],[329,3],[329,4],[329,4],[329,3],[329,4],[329,3],[330,1],[330,1],[510,1],[510,2],[511,1],[511,2],[511,3],[511,3],[511,2],[512,4],[513,2],[513,3],[513,4],[513,4],[513,3],[513,3],[513,4],[513,2],[513,3],[513,2],[513,3],[513,3],[513,4],[513,3],[513,4],[513,4],[513,5],[513,4],[513,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 9:

     parser.suggestSetOptions();
   
break;
case 15:

     parser.suggestKeywords(['TABLE', 'VIEW']);
   
break;
case 21: case 30: case 243: case 247: case 249: case 1145:

     parser.addTablePrimary($$[$0]);
   
break;
case 22: case 238:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyTables = true;
     }
   
break;
case 23:

     parser.suggestTables({ onlyTables: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 26: case 879:

     parser.suggestKeywords(['AS']);
   
break;
case 28: case 195: case 204: case 288: case 746: case 880:

     parser.suggestKeywords(['SELECT']);
   
break;
case 31: case 248:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyViews = true;
     }
   
break;
case 32:

     parser.suggestTables({ onlyViews: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 40: case 226:

     parser.suggestKeywords(['DATABASE', 'ROLE', 'SCHEMA', 'TABLE', 'VIEW']);
   
break;
case 50:

     parser.addNewDatabaseLocation(_$[$0-1], [{ name: $$[$0-1] }]);
   
break;
case 51: case 61:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 53:

     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
     parser.addNewDatabaseLocation(_$[$0], [{ name: $$[$0] }]);
   
break;
case 54:

     parser.addNewDatabaseLocation(_$[$0], [{ name: $$[$0] }]);
   
break;
case 55:

     parser.addNewDatabaseLocation(_$[$0-2], [{ name: $$[$0-2] }]);
   
break;
case 56:

     if (!$$[$0]) {
       parser.suggestKeywords(['COMMENT']);
     }
   
break;
case 67:

     var keywords = [];
     if (!$$[$0-2] && !$$[$0-1]) {
       keywords.push({ value: 'LIKE', weight: 1 });
     } else {
       if (!$$[$0-1]) {
         keywords.push({ value: 'PARTITIONED BY', weight: 12 });
       }
       keywords.push({ value: 'AS', weight: 1 });
     }

     if (keywords.length > 0) {
       parser.suggestKeywords(keywords);
     }
   
break;
case 68:

     parser.addNewTableLocation(_$[$0-1], $$[$0-1], $$[$0]);
     this.$ = $$[$0];
   
break;
case 73:
this.$ = [];
break;
case 75: case 482: case 1142: case 1162:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 77: case 213: case 215: case 415: case 418: case 504: case 557: case 743: case 822: case 862: case 1063: case 1066:
this.$ = $$[$0-1];
break;
case 79: case 872:
this.$ = [$$[$0]];
break;
case 80:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 85: case 87:

     parser.checkForKeywords($$[$0-1]);
   
break;
case 86: case 88:

     parser.checkForKeywords($$[$0-3]);
   
break;
case 89:

     this.$ = $$[$0-2];
     this.$.type = $$[$0-1];
     var keywords = [];
     if (!$$[$0]['comment']) {
       keywords.push('COMMENT');
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 90: case 117: case 123: case 124: case 137: case 140: case 149: case 151:

     parser.suggestKeywords(parser.getColumnDataTypeKeywords());
   
break;
case 93:
this.$ = {};
break;
case 95:

     this.$ = {};
     this.$[$$[$0]] = true;
   
break;
case 96:

     $$[$0-1][$$[$0]] = true;
   
break;
case 101: case 102:
this.$ = 'null';
break;
case 103:
this.$ = 'comment';
break;
case 104:

     parser.suggestKeywords(['NULL']);
   
break;
case 122:

     parser.suggestKeywords(parser.getTypeKeywords());
   
break;
case 136: case 139:

     parser.suggestKeywords(['COMMENT']);
   
break;
case 158: case 781:

     parser.suggestKeywords(['BY']);
   
break;
case 159:

     parser.suggestKeywords(['RANGE']);
   
break;
case 168: case 173: case 174:

     parser.suggestKeywords(['PARTITION']);
   
break;
case 180:

     parser.suggestKeywords(['VALUE', 'VALUES']);
   
break;
case 181:

     if ($$[$0].endsWithLessThanOrEqual) {
      parser.suggestKeywords(['VALUES']);
     }
   
break;
case 182: case 185: case 188:

     parser.suggestKeywords(['<', '<=']);
   
break;
case 183: case 447: case 450:

     parser.suggestKeywords(['VALUES']);
   
break;
case 186: case 189:

     parser.suggestFunctions();
   
break;
case 197:

     parser.commitLocations();
   
break;
case 199:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
     parser.suggestDatabases({ appendDot: true });
   
break;
case 200:

     if (!$$[$0-6]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 203:

     var keywords = [{value: 'AS', weight: 1 }];
     if (!$$[$0-1]) {
       keywords.push({ value: 'COMMENT', weight: 3 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 210:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['COMMENT']);
     }
   
break;
case 214: case 216:
this.$ = $$[$0-3];
break;
case 230:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestDatabases();
   
break;
case 231:

     parser.suggestKeywords(['CASCADE']);
   
break;
case 233:

     if (!$$[$0-3]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 235: case 254:

     parser.addTablePrimary($$[$0-1]);
   
break;
case 237:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestTables({ onlyTables: true });
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 240:

     parser.addTablePrimary($$[$0-2]);
     if (!$$[$0-1]) {
       parser.suggestKeywords(['PURGE']);
     }
   
break;
case 244:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestTables({ onlyViews: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 245:

     parser.addTablePrimary($$[$0]);
     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 250:

     parser.suggestKeywords(['TABLE']);
   
break;
case 251:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 255:

     parser.addTablePrimary($$[$0-1]);
     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 262:

     $$[$0-2].owner = 'insert';
     parser.addTablePrimary($$[$0-2]);
   
break;
case 263:

     parser.suggestKeywords(['INTO']);
   
break;
case 264:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['TABLE']);
     }
     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 266:

     $$[$0-1].owner = 'insert';
     parser.addTablePrimary($$[$0-1]);
     parser.suggestKeywords(['VALUES']);
   
break;
case 274: case 275:

     return parser.yy.result;
   
break;
case 276:

     parser.prepareNewStatement();
   
break;
case 278: case 280: case 282:

     parser.addStatementLocation(_$[$0]);
   
break;
case 281: case 283:

     parser.addStatementLocation(_$[$0-3]);
   
break;
case 287:

     parser.suggestDdlAndDmlKeywords();
   
break;
case 416: case 419: case 505:
this.$ = '';
break;
case 431: case 434:

     parser.yy.correlatedSubQuery = false;
   
break;
case 432: case 436:

     parser.suggestKeywords(['EXISTS']);
   
break;
case 435:

     parser.suggestKeywords(['NOT EXISTS']);
   
break;
case 446: case 448: case 449: case 451:

     parser.suggestKeywords(['<', '<=', '<>', '=', '>', '>=']);
   
break;
case 472: case 475: case 476: case 501: case 502: case 523: case 526: case 907: case 1156:

     parser.suggestColumns();
   
break;
case 480: case 506:

     parser.addTableLocation(_$[$0], [ { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0] } ] };
   
break;
case 481: case 507:

     parser.addDatabaseLocation(_$[$0-2], [ { name: $$[$0-2] } ]);
     parser.addTableLocation(_$[$0], [ { name: $$[$0-2] }, { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0-2] }, { name: $$[$0] } ] };
   
break;
case 483: case 488:

     parser.suggestDatabases();
     this.$ = { identifierChain: [{ name: $$[$0-2] }] };
   
break;
case 484: case 509:

     parser.suggestTablesOrColumns($$[$0-2]);
   
break;
case 485:
this.$ = [{ name: $$[$0] }];
break;
case 486:
this.$ = [{ name: $$[$0-2] }, { name: $$[$0-1] }];
break;
case 487:

     parser.suggestDatabases({ appendDot: true });
   
break;
case 491: case 1165:

     parser.suggestDatabases();
   
break;
case 500: case 739: case 782: case 912: case 913: case 919: case 920:

     parser.valueExpressionSuggest();
   
break;
case 508:

     parser.suggestTables();
     parser.suggestDatabases({ prependDot: true });
   
break;
case 511:
this.$ = { identifierChain: $$[$0-1].identifierChain, alias: $$[$0] };
break;
case 514:

     parser.yy.locations[parser.yy.locations.length - 1].type = 'column';
   
break;
case 515: case 691:

     parser.addAsteriskLocation(_$[$0], $$[$0-2].concat({ asterisk: true }));
   
break;
case 517:

     this.$ = [ $$[$0].identifier ];
     parser.yy.firstChainLocation = parser.addUnknownLocation($$[$0].location, [ $$[$0].identifier ]);
   
break;
case 518:

     if (parser.yy.firstChainLocation) {
       parser.yy.firstChainLocation.firstInChain = true;
       delete parser.yy.firstChainLocation;
     }
     $$[$0-2].push($$[$0].identifier);
     parser.addUnknownLocation($$[$0].location, $$[$0-2].concat());
   
break;
case 519:

     parser.suggestColumns({
       identifierChain: $$[$0-2]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 520:

     parser.suggestColumns({
       identifierChain: $$[$0-4]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 521:
this.$ = [ $$[$0].identifier ];
break;
case 522:

     $$[$0-2].push($$[$0].identifier);
   
break;
case 524:

     parser.suggestColumns({ identifierChain: $$[$0-2] });
   
break;
case 525:

     parser.suggestColumns({ identifierChain: $$[$0-4] });
   
break;
case 527:
this.$ = { identifier: { name: $$[$0] }, location: _$[$0] };
break;
case 548: case 549:

     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 550: case 575:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 551:

     // verifyType($$[$0], 'NUMBER');
     this.$ = $$[$0];
     $$[$0].types = ['NUMBER'];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 552: case 553: case 554:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 555:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 556:

     this.$ = { types: [ 'BOOLEAN' ] };
     // clear correlated flag after completed sub-query (set by lexer)
     parser.yy.correlatedSubQuery = false;
   
break;
case 558: case 559: case 560: case 561:

     parser.addColRefToVariableIfExists($$[$0-2], $$[$0]);
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 562: case 563: case 564: case 565: case 595: case 653: case 654:
this.$ = { types: [ 'BOOLEAN' ] };
break;
case 566:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 567:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 568: case 569:

     // verifyType($$[$0-2], 'BOOLEAN');
     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 570: case 571: case 572:

     // verifyType($$[$0-2], 'NUMBER');
     // verifyType($$[$0], 'NUMBER');
     this.$ = { types: [ 'NUMBER' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 573:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 574:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 576:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 578:

     parser.suggestKeywords(['BETWEEN', 'EXISTS', 'IN', 'LIKE', 'REGEXP', 'RLIKE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 579: case 581:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
break;
case 580:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 582:

     parser.suggestFunctions({ types: [ 'BOOLEAN' ] });
     parser.suggestColumns({ types: [ 'BOOLEAN' ] });
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 583:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0].suggestFilters };
break;
case 584:

     parser.suggestFunctions();
     parser.suggestColumns();
     this.$ = { types: [ 'T' ] };
   
break;
case 585:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 586:

     parser.suggestFunctions({ types: [ 'NUMBER' ] });
     parser.suggestColumns({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ] };
   
break;
case 587:

     parser.suggestKeywords(['FALSE', 'NOT NULL', 'NOT TRUE', 'NOT FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 588:

     parser.suggestKeywords(['FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 589:

     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 590: case 591: case 592:

     parser.suggestKeywords(['NOT']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 593:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-3] ? 'IS NOT DISTINCT FROM' : 'IS DISTINCT FROM');
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 594:

     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 596:

     this.$ = $$[$0-1];
   
break;
case 597:

     parser.valueExpressionSuggest();
     this.$ = { types: ['T'], typeSet: true };
   
break;
case 598:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 599: case 600: case 601:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 602: case 603: case 604: case 605:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0]);
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 606: case 608:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 607:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ] , typeSet: true, endsWithLessThanOrEqual: true };
   
break;
case 609:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, endsWithLessThanOrEqual: $$[$0-1] === '<='  };
   
break;
case 610: case 611: case 612: case 613:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 614:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-3]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 615:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 616: case 617:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
break;
case 618: case 619:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
break;
case 620:

     if ($$[$0-2].types[0] === $$[$0].types[0] && !$$[$0-5].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
   
break;
case 621:

     if ($$[$0-5].types[0] === $$[$0].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 622:

     if ($$[$0-5].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 623:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 624: case 630:

     parser.suggestValueExpressionKeywords($$[$0-1], ['AND']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 625:

     parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 626:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-4].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
   
break;
case 627:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 628:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 629:

     parser.valueExpressionSuggest($$[$0-4], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-4]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 631:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 632: case 634: case 636: case 638:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, suggestFilters: true };
   
break;
case 633: case 637:

     parser.addColRefIfExists($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 635: case 639:

     parser.addColRefIfExists($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 640: case 641:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 642: case 643: case 644:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 645: case 646: case 647:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 648: case 649: case 650:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 651:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 652:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
break;
case 655:

     parser.valueExpressionSuggest(undefined, $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 656:

     parser.valueExpressionSuggest(undefined, $$[$0-1] + ' ' + $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 657: case 659: case 725: case 780: case 859: case 869: case 870: case 886: case 910: case 986: case 990: case 1028: case 1161: case 1199:
this.$ = $$[$0];
break;
case 658:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 660:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 661:

      this.$ = $$[$0];
      this.$.suggestFilters = $$[$0-1].suggestFilters;
    
break;
case 662:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 663: case 1098: case 1103: case 1104:
this.$ = { types: [ 'T' ] };
break;
case 664: case 666:

     $$[$0].position = 1;
   
break;
case 665:

     $$[$0].position = $$[$0-2].position + 1;
     this.$ = $$[$0];
   
break;
case 667:

     $$[$0-2].position += 1;
   
break;
case 668:

     $$[$0-2].position = 1;
   
break;
case 669:

     $$[$0-4].position += 1;
   
break;
case 670:

     parser.valueExpressionSuggest();
     $$[$0-2].position += 1;
   
break;
case 671:

     parser.valueExpressionSuggest();
     $$[$0-4].position += 1;
   
break;
case 672:

     parser.suggestValueExpressionKeywords($$[$0-3]);
   
break;
case 673: case 674:

     parser.valueExpressionSuggest();
     this.$ = { cursorAtStart : true, position: 1 };
   
break;
case 675: case 676:

     parser.valueExpressionSuggest();
     this.$ = { position: 2 };
   
break;
case 680:
this.$ = { types: ['COLREF'], columnReference: $$[$0].chain };
break;
case 681:
this.$ = { types: [ 'NULL' ], text: $$[$0] };
break;
case 682:

     // We need to handle arbitrary UDFs here instead of inside UserDefinedFunction or there will be a conflict
     // with columnReference for functions like: db.udf(foo)
     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     if ($$[$0-1].lastLoc && $$[$0-1].lastLoc.location) {
       $$[$0-1].lastLoc.type = 'function';
       $$[$0-1].lastLoc.function = fn;
       $$[$0-1].lastLoc.location = {
         first_line: $$[$0-1].lastLoc.location.first_line,
         last_line: $$[$0-1].lastLoc.location.last_line,
         first_column: $$[$0-1].lastLoc.location.first_column,
         last_column: $$[$0-1].lastLoc.location.last_column - 1
       }
       if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
          $$[$0-1].firstLoc.type = 'database';
       } else {
         delete $$[$0-1].lastLoc.identifierChain;
       }
     }
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: fn, expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: fn, types: ['UDFREF'] }
     }
   
break;
case 683:

    parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
    if ($$[$0].expressions && $$[$0].expressions.length) {
      this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
    } else {
      this.$ = { function: $$[$0-1], types: ['UDFREF'] }
    }
  
break;
case 686:

     if ($$[$0].suggestKeywords) {
       this.$ = { types: ['COLREF'], columnReference: $$[$0], suggestKeywords: $$[$0].suggestKeywords };
     } else {
       this.$ = { types: ['COLREF'], columnReference: $$[$0] };
     }
   
break;
case 687:

     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     $$[$0-1].lastLoc.type = 'function';
     $$[$0-1].lastLoc.function = fn;
     $$[$0-1].lastLoc.location = {
       first_line: $$[$0-1].lastLoc.location.first_line,
       last_line: $$[$0-1].lastLoc.location.last_line,
       first_column: $$[$0-1].lastLoc.location.first_column,
       last_column: $$[$0-1].lastLoc.location.last_column - 1
     }
     if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
        $$[$0-1].firstLoc.type = 'database';
     } else {
       delete $$[$0-1].lastLoc.identifierChain;
     }
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions(fn, $$[$0].activePosition);
     }
     this.$ = { function: fn, types: ['UDFREF'] };
   
break;
case 688: case 1056: case 1057:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions($$[$0-1], $$[$0].activePosition);
     }
     this.$ = { function: $$[$0-1], types: ['UDFREF'] };
   
break;
case 690:

     var lastLoc = parser.yy.locations[parser.yy.locations.length - 1];
     if (lastLoc.type !== 'variable') {
       lastLoc.type = 'column';
     }
     // used for function references with db prefix
     var firstLoc = parser.yy.locations[parser.yy.locations.length - $$[$0].length];
     this.$ = { chain: $$[$0], firstLoc: firstLoc, lastLoc: lastLoc }
   
break;
case 697:

     parser.suggestValues($$[$0]);
   
break;
case 698:
this.$ = { types: [ 'NUMBER' ], text: $$[$0] };
break;
case 704: case 706: case 707:
this.$ = $$[$0-1] + $$[$0];
break;
case 705: case 708:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 709:
this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 710:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: "'" + $$[$0] + "'" }
     } else {
       this.$ = { types: [ 'STRING' ] }
     }
   
break;
case 711:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: '"' + $$[$0] + '"' }
     } else {
       this.$ = { types: [ 'STRING' ], text: '"' + $$[$0] + '"' }
     }
   
break;
case 712:
this.$ = { types: [ 'BOOLEAN' ], text: $$[$0] };
break;
case 713:

    this.$ = { partialQuote: '\'', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 714:

    this.$ = { partialQuote: '"', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 721:

     this.$ = $$[$0];

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         this.$.suggestJoins = {
           prependJoin: true,
           tables: tables
         };
       }
      }
   
break;
case 728:

     this.$ = {
       primary: $$[$0-1]
     }
     if ($$[$0-1].identifierChain) {
       if ($$[$0]) {
         $$[$0-1].alias = $$[$0].alias
         parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
       }
       parser.addTablePrimary($$[$0-1]);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     } else if ($$[$0].suggestKeywords) {
       keywords = $$[$0].suggestKeywords;
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 729:

     this.$ = {
       primary: $$[$0-1]
     };

     if ($$[$0]) {
       this.$.primary.alias = $$[$0].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 730:

     if ($$[$0]) {
       parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }
   
break;
case 731:

     if ($$[$0]) {
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias);
     }
   
break;
case 741:

     parser.pushQueryState();
   
break;
case 742:

     parser.popQueryState();
   
break;
case 744:

     if ($$[$0-1]) {
       $$[$0-2].alias = $$[$0-1].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0-1].alias });
       parser.addSubqueryAliasLocation($$[$0-1].location, $$[$0-1].alias, $$[$0-2].identifierChain);
     }
     this.$ = $$[$0-2];
   
break;
case 747:

     var subQuery = parser.getSubQuery($$[$0]);
     subQuery.columns.forEach(function (column) {
       parser.expandIdentifierChain({ wrapper: column });
       delete column.linked;
     });
     parser.popQueryState(subQuery);
     this.$ = subQuery;
   
break;
case 764: case 765: case 766: case 767:
this.$ = { alias: $$[$0], location: _$[$0] };
break;
case 774: case 775:

     if (parser.yy.result.suggestFunctions) {
       parser.suggestAggregateFunctions();
     }
   
break;
case 776:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords([{ value: 'PARTITION BY', weight: 2 }, { value: 'ORDER BY', weight: 1 }]);
     } else if (!$$[$0-2]) {
       parser.suggestKeywords(['PARTITION BY']);
     }
   
break;
case 777:

      if (!$$[$0-1]) {
        parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ORDER BY', weight: 2 }]);
      } else {
        parser.suggestValueExpressionKeywords($$[$0-3]);
      }
    
break;
case 786:

      // Only allowed in last order by
      delete parser.yy.result.suggestAnalyticFunctions;
    
break;
case 787:

      var keywords = [];
      if ($$[$0-2].suggestKeywords) {
        keywords = parser.createWeightedKeywords($$[$0-2].suggestKeywords, 2);
      }
      if (!$$[$0]) {
        keywords = keywords.concat([{ value: 'RANGE BETWEEN', weight: 1 }, { value: 'ROWS BETWEEN', weight: 1 }]);
      }
      parser.suggestKeywords(keywords);
    
break;
case 793:

     parser.suggestKeywords(['BETWEEN']);
   
break;
case 794:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED PRECEDING']);
     } else if (!$$[$0-1]) {
       parser.suggestKeywords(['AND']);
     }
   
break;
case 799:

    lexer.popState();
  
break;
case 800:

    lexer.begin('hdfs');
  
break;
case 802:

      parser.suggestHdfs({ path: $$[$0-3] });
    
break;
case 803:

     parser.suggestHdfs({ path: $$[$0-2] });
   
break;
case 804:

      parser.suggestHdfs({ path: $$[$0-1] });
    
break;
case 805:

     parser.suggestHdfs({ path: '' });
   
break;
case 806:

      parser.suggestHdfs({ path: '' });
    
break;
case 812:

     parser.suggestKeywords(['PRECEDING']);
   
break;
case 813: case 818:

     parser.suggestKeywords(['ROW']);
   
break;
case 817:

     parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED FOLLOWING']);
   
break;
case 819:

     parser.suggestKeywords(['FOLLOWING']);
   
break;
case 824: case 864:
this.$ = $$[$0-2];
break;
case 827:

     parser.addCommonTableExpressions($$[$0-3]);
   
break;
case 828: case 829: case 875:

     parser.addCommonTableExpressions($$[$0-2]);
   
break;
case 833:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     this.$ = { selectList: $$[$0] };
   
break;
case 834:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     this.$ = { selectList: $$[$0-1], tableExpression: $$[$0] }
   
break;
case 835:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     if ($$[$0].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-1]) {
         keywords.push({ value: 'ALL', weight: 2 });
         keywords.push({ value: 'DISTINCT', weight: 2 });
       }
       parser.suggestKeywords(keywords);
     } else {
       parser.checkForSelectListKeywords($$[$0]);
     }
     if ($$[$0].suggestFunctions) {
       parser.suggestFunctions();
     }
     if ($$[$0].suggestColumns) {
       parser.suggestColumns({ identifierChain: [], source: 'select' });
     }
     if ($$[$0].suggestTables) {
       parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     }
     if ($$[$0].suggestDatabases) {
       parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
     }
     if ($$[$0].suggestAggregateFunctions && (!$$[$0-1] || $$[$0-1] === 'ALL')) {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
   
break;
case 836:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-1] || $$[$0-1] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-1]) {
       keywords.push({ value: 'ALL', weight: 2 });
       keywords.push({ value: 'DISTINCT', weight: 2 });
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 837:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
   
break;
case 838:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.selectListNoTableSuggest($$[$0-1], $$[$0-2]);
     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'select';
     }
   
break;
case 839:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2] || $$[$0-2] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-2]) {
       keywords.push({ value: 'ALL', weight: 2 });
       keywords.push({ value: 'DISTINCT', weight: 2 });
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 840:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]), _$[$0-2]);
     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 841:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]), _$[$0-3]);
     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 842:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.checkForSelectListKeywords($$[$0-1]);
     var keywords = ['FROM'];
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.suggestTables({ prependFrom: true });
     parser.suggestDatabases({ prependFrom: true, appendDot: true });
   
break;
case 846: case 847:

     parser.addClauseLocation('whereClause', _$[$0-1], $$[$0].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0].limitClausePreceding || _$[$0-1], $$[$0].limitClauseLocation);
   
break;
case 848:

     var keywords = [];

     parser.addClauseLocation('whereClause', _$[$0-3], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-2].limitClausePreceding || _$[$0-3], $$[$0-2].limitClauseLocation);

     if ($$[$0-3]) {
       if (typeof $$[$0-3].tableReferenceList.hasJoinCondition !== 'undefined' && !$$[$0-3].tableReferenceList.hasJoinCondition) {
         keywords.push({ value: 'ON', weight: 3 });
       }
       if ($$[$0-3].suggestKeywords) {
         keywords = parser.createWeightedKeywords($$[$0-3].suggestKeywords, 3);
       }
       if ($$[$0-3].tableReferenceList.suggestJoinConditions) {
         parser.suggestJoinConditions($$[$0-3].tableReferenceList.suggestJoinConditions);
       }
       if ($$[$0-3].tableReferenceList.suggestJoins) {
         parser.suggestJoins($$[$0-3].tableReferenceList.suggestJoins);
       }
       if ($$[$0-3].tableReferenceList.suggestKeywords) {
         keywords = keywords.concat(parser.createWeightedKeywords($$[$0-3].tableReferenceList.suggestKeywords, 3));
       }

       // Lower the weights for 'TABLESAMPLE'
       keywords.forEach(function (keyword) {
         if (keyword.value === 'TABLESAMPLE') {
           keyword.weight = 1.1;
         }
       });

       if ($$[$0-3].tableReferenceList.types) {
         var veKeywords = parser.getValueExpressionKeywords($$[$0-3].tableReferenceList);
         keywords = keywords.concat(veKeywords.suggestKeywords);
         if (veKeywords.suggestColRefKeywords) {
           parser.suggestColRefKeywords(veKeywords.suggestColRefKeywords);
           parser.addColRefIfExists($$[$0-3].tableReferenceList);
         }
       }
     }

     if ($$[$0-1].empty && $$[$0] && $$[$0].joinType.toUpperCase() === 'JOIN') {
       keywords = keywords.concat(['FULL', 'FULL OUTER', 'INNER', 'LEFT', 'LEFT OUTER', 'RIGHT', 'RIGHT OUTER']);
       parser.suggestKeywords(keywords);
       return;
     }

     if ($$[$0-1].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].suggestFilters) {
       parser.suggestFilters($$[$0-1].suggestFilters);
     }
     if ($$[$0-1].suggestGroupBys) {
       parser.suggestGroupBys($$[$0-1].suggestGroupBys);
     }
     if ($$[$0-1].suggestOrderBys) {
       parser.suggestOrderBys($$[$0-1].suggestOrderBys);
     }

     if ($$[$0-1].empty) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }

     keywords = keywords.concat([
       { value: 'FULL JOIN', weight: 1 },
       { value: 'FULL OUTER JOIN', weight: 1 },
       { value: 'INNER JOIN', weight: 1 },
       { value: 'JOIN', weight: 1 },
       { value: 'LEFT JOIN', weight: 1 },
       { value: 'LEFT OUTER JOIN', weight: 1 },
       { value: 'RIGHT JOIN', weight: 1 },
       { value: 'RIGHT OUTER JOIN', weight: 1 }
     ]);
     parser.suggestKeywords(keywords);
  
break;
case 849:

     // A couple of things are going on here:
     // - If there are no SelectConditions (WHERE, GROUP BY, etc.) we should suggest complete join options
     // - If there's an OptionalJoin at the end, i.e. 'SELECT * FROM foo | JOIN ...' we should suggest
     //   different join types
     // - The FromClause could end with a valueExpression, in which case we should suggest keywords like '='
     //   or 'AND' based on type

     if (!$$[$0-1]) {
       parser.addClauseLocation('whereClause', _$[$0-2]);
       parser.addClauseLocation('limitClause', _$[$0-2]);
       return;
     }
     parser.addClauseLocation('whereClause', _$[$0-2], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-1].limitClausePreceding || _$[$0-2], $$[$0-1].limitClauseLocation);
     var keywords = [];

     if ($$[$0-1].suggestColRefKeywords) {
       parser.suggestColRefKeywords($$[$0-1].suggestColRefKeywords);
       parser.addColRefIfExists($$[$0-1]);
     }

     if ($$[$0-1].suggestKeywords && $$[$0-1].suggestKeywords.length) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].cursorAtEnd) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 850:
this.$ = [ $$[$0] ];
break;
case 851:

     $$[$0-2].push($$[$0]);
   
break;
case 853: case 854:

     this.$ = { cursorAtStart : true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 856:

     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 857:

     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 858:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestTables: true, suggestDatabases: true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 860: case 861: case 863:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true,  };
   
break;
case 865:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
       this.$ = { valueExpression: $$[$0-1], alias: $$[$0].alias };
       if (!parser.yy.selectListAliases) {
         parser.yy.selectListAliases = [];
       }
       parser.yy.selectListAliases.push($$[$0-1].function && $$[$0-1].types && $$[$0-1].types.length && $$[$0-1].types[0] === 'UDFREF' ? { name: $$[$0].alias, udfRef: $$[$0-1].function, types: $$[$0-1].types } : { name: $$[$0].alias, types: $$[$0-1].types || ['T'] });
     } else {
       this.$ = { valueExpression: $$[$0-1] }
     }
   
break;
case 866:

     parser.addAsteriskLocation(_$[$0], [{ asterisk: true }]);
     this.$ = { asterisk: true }
   
break;
case 867:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
     }
   
break;
case 868:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.addColumnAliasLocation(_$[$0], $$[$0], _$[$0-2]);
     this.$ = { suggestAggregateFunctions: true };
   
break;
case 873:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 877:

     parser.addCommonTableExpressions($$[$0-4]);
   
break;
case 878:

     parser.addCteAliasLocation(_$[$0-4], $$[$0-4]);
     $$[$0-1].alias = $$[$0-4];
     this.$ = $$[$0-1];
   
break;
case 882:

     this.$ = { tableReferenceList : $$[$0] }
   
break;
case 883: case 891:

       parser.suggestTables();
       parser.suggestDatabases({ appendDot: true });
   
break;
case 894:

     this.$ = { valueExpression: $$[$0] };
   
break;
case 895: case 997:

     parser.suggestSelectListAliases();
   
break;
case 896:

     parser.valueExpressionSuggest();
     parser.suggestSelectListAliases();
     parser.suggestGroupBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 897:

     parser.suggestKeywords(['BY']);
     parser.suggestGroupBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 924:

     parser.valueExpressionSuggest();
     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 925:

     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 929:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-2];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
        parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 930:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-3];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
       parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 931:
this.$ = { joinType: $$[$0] };
break;
case 932:
this.$ = { joinType: $$[$0-1] };
break;
case 933:

     if ($$[$0-2].suggestKeywords) {
       parser.suggestKeywords($$[$0-2].suggestKeywords);
     }
   
break;
case 934:

     if ($$[$0].suggestKeywords) {
       parser.suggestKeywords($$[$0].suggestKeywords);
     }
   
break;
case 937:

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         parser.suggestJoins({
           prependJoin: false,
           joinType: $$[$0-2],
           tables: tables
         })
       }
     }
     parser.suggestTables();
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 942:
this.$ = 'CROSS JOIN';
break;
case 943:
this.$ = 'FULL JOIN';
break;
case 944:
this.$ = 'FULL OUTER JOIN';
break;
case 945:
this.$ = 'INNER JOIN';
break;
case 946:
this.$ = 'JOIN';
break;
case 947:
this.$ = 'LEFT INNER JOIN';
break;
case 948:
this.$ = 'LEFT JOIN';
break;
case 949:
this.$ = 'LEFT OUTER JOIN';
break;
case 950:
this.$ = 'LEFT SEMI JOIN';
break;
case 951:
this.$ = 'OUTER JOIN';
break;
case 952: case 954:
this.$ = 'RIGHT OUTER JOIN';
break;
case 953:
this.$ = 'RIGHT JOIN';
break;
case 955:
this.$ = 'RIGHT SEMI JOIN';
break;
case 956:
this.$ = 'SEMI JOIN';
break;
case 957: case 959: case 960: case 962: case 963: case 964: case 965: case 967: case 968: case 969: case 970:
this.$ = { suggestKeywords: ['JOIN'] };
break;
case 958: case 961: case 966:
this.$ = { suggestKeywords: ['OUTER'] };
break;
case 971:
this.$ = { noJoinCondition: true, suggestKeywords: ['ON'] };
break;
case 972:
this.$ = { valueExpression: $$[$0] };
break;
case 976:

     parser.valueExpressionSuggest();
     parser.suggestJoinConditions({ prependOn: false });
   
break;
case 983:

     parser.suggestKeywords([{ value: '10', weight: 10000 }, { value: '100', weight: 10000 }, { value: '1000', weight: 10000 }, { value: '5000', weight: 10000 }, { value: '10000', weight: 10000 }])
   
break;
case 987:

     if ($$[$0].emptyOrderBy) {
       parser.suggestOrderBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 988:

     parser.suggestKeywords(['BY']);
     parser.suggestOrderBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 992:

     this.$ = { emptyOrderBy: false }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 993: case 994: case 995:
this.$ = { emptyOrderBy: false };
break;
case 996:
this.$ = parser.mergeSuggestKeywords($$[$0]);
break;
case 998:

     this.$ = { emptyOrderBy: true }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 999:
this.$ = { suggestKeywords: ['ASC', 'DESC'] };;
break;
case 1002:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'WHERE', weight: 7 }, { value: 'GROUP BY', weight: 6 }, { value: 'HAVING', weight: 5 }, { value: 'ORDER BY', weight: 4 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true, true]);

     if (keywords.length > 0) {
       this.$ = { suggestKeywords: keywords, empty: !$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0] };
     } else {
       this.$ = {};
     }

     this.$.whereClauseLocation = $$[$0-4] ? _$[$0-4] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;

     if (!$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestFilters = { prefix: 'WHERE', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestGroupBys = { prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-1] && !$$[$0]) {
       this.$.suggestOrderBys = { prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
   
break;
case 1003:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'where';
     }
   
break;
case 1004:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'group by';
     }
   
break;
case 1006:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'order by';
     }
   
break;
case 1008:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'GROUP BY', weight: 8 }, { value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true]);
     if ($$[$0-5].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-5].suggestKeywords, 1));
     }
     this.$ = parser.getValueExpressionKeywords($$[$0-5], keywords);
     this.$.cursorAtEnd = !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if ($$[$0-5].columnReference) {
       this.$.columnReference = $$[$0-5].columnReference;
     }
     if (!$$[$0-3]) {
       parser.suggestGroupBys({ prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 1009:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true]);
     if ($$[$0-4].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-4].suggestKeywords, 8));
     }
     if ($$[$0-4].valueExpression) {
       this.$ = parser.getValueExpressionKeywords($$[$0-4].valueExpression, keywords);
       if ($$[$0-4].valueExpression.columnReference) {
         this.$.columnReference = $$[$0-4].valueExpression.columnReference;
       }
     } else {
       this.$ = { suggestKeywords: keywords };
     }
     this.$.cursorAtEnd = !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 1010:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-1], $$[$0]],
       [{ value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true]);
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0-1] && !$$[$0] };
     if (!$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-3], _$[$0-3]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 1011:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0]],
       [{ value: 'LIMIT', weight: 3 }],
       [true]);
     if ($$[$0-2].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-2].suggestKeywords, 4));
     }
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0] };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 1012:

     this.$ = { suggestKeywords: [], cursorAtEnd: true };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = _$[$0-1];
   
break;
case 1023:

     parser.suggestKeywords(['ALL', 'DISTINCT', 'SELECT']);
   
break;
case 1024:

     parser.suggestKeywords(['ALL', 'DISTINCT']);
   
break;
case 1029:

     if ($$[$0].suggestFilters) {
       parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 1030:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS', 'NOT EXISTS']);
     parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 1044:

     if (!$$[$0]) {
       $$[$0-1].suggestKeywords = ['OVER'];
     }
   
break;
case 1051:

     parser.suggestKeywords(['OVER']);
   
break;
case 1054: case 1055:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: $$[$0-1], types: ['UDFREF'] }
     }
   
break;
case 1064:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }]
     }
   
break;
case 1065:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = $$[$0-3];
   
break;
case 1067: case 1069:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0], location: _$[$0] }]
     }
   
break;
case 1068: case 1070:

     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: $$[$0], location: _$[$0] }])
     }
   
break;
case 1071:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0-2], location: _$[$0-2] }].concat($$[$0].expressions)
     }
   
break;
case 1072:

     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: $$[$0-2], location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 1073:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: { text: '' }, location: _$[$0] }])
     }
   
break;
case 1074:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: { text: '' }, location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 1075:

     parser.suggestValueExpressionKeywords($$[$0-3].expressions[$$[$0-3].expressions.length - 1].expression);
     this.$ = {
       activePosition: $$[$0-3].activePosition,
       expressions: $$[$0-3].expressions.concat($$[$0].expressions)
     }
   
break;
case 1076:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 1077:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 1078:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 1079:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-3] }, { expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 1086:

    this.$ = { function: $$[$0-2], types: ['UDFREF'] }
  
break;
case 1087:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     this.$ = {
       function: $$[$0-3],
       expression: $$[$0-1].expressions[$$[$0-1].expressions.length - 1].expression,
       types: ['UDFREF']
     }
   
break;
case 1088:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-3], 1);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 1089:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-2].expressions);
     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 1090:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     parser.applyArgumentTypesToSuggestions($$[$0-3], $$[$0-1].activePosition);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 1097:

     var expression = $$[$0-3];
     parser.extractExpressionText(expression, $$[$0-3], $$[$0-2], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-5], [{
       expression: expression,
       location: {
         first_line: _$[$0-3].first_line,
         last_line: _$[$0-1].last_line,
         first_column: _$[$0-3].first_column,
         last_column: _$[$0-1].last_column
       }
     }]);
     this.$ = { types: [ $$[$0-1].toUpperCase() ] }
   
break;
case 1099:

     parser.valueExpressionSuggest();
     this.$ = { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 1100: case 1101:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ] };
   
break;
case 1102:
this.$ = { types: [ $$[$0-1].toUpperCase() ] };
break;
case 1105:

     parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'AS', weight: 2 }]);
     this.$ =  { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 1106:

     parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'AS', weight: 2 }]);
     this.$ = { types: [ 'T' ] };
   
break;
case 1107: case 1108:

     parser.suggestKeywords(parser.getTypeKeywords());
     this.$ = { types: [ 'T' ] };
   
break;
case 1109:

     parser.addFunctionArgumentLocations($$[$0-3], [{
       expression: { text: $$[$0-1] },
       location: _$[$0-1]
     }]);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] }
   
break;
case 1110: case 1129:

     this.$ = { function: $$[$0-2], types: ['UDFREF'] }
   
break;
case 1111:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] }
   
break;
case 1112:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 1113: case 1118:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 1114:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-2]) {
         keywords.push('DISTINCT');
       }
       parser.suggestKeywords(keywords);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 1115:

     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 1116: case 1128:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 1117:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       if ($$[$0-4].toLowerCase() === 'group_concat') {
         keywords.push('ALL');
       } else {
         keywords.push('DISTINCT');
       }
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 1119:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords(true);
       if (!$$[$0-2]) {
         if ($$[$0-4].toLowerCase() === 'group_concat') {
           keywords.push('ALL');
         } else {
           keywords.push('DISTINCT');
         }
       }
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
       parser.suggestKeywords(keywords);
     }
     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], $$[$0-1].activePosition);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 1130:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 1131:

     parser.suggestValueExpressionKeywords($$[$0-2]);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 1132:

     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 1138:

     parser.suggestKeywords([ 'WHERE' ]);
   
break;
case 1139:

     parser.suggestKeywords([ 'SET' ]);
   
break;
case 1155:

     parser.suggestKeywords([ '=' ]);
   
break;
case 1164:

     if (! parser.yy.cursorFound) {
       parser.yy.result.useDatabase = $$[$0];
     }
   
break;
case 1167:
this.$ = { inValueEdit: true };
break;
case 1168:
this.$ = { inValueEdit: true, cursorAtStart: true };
break;
case 1169: case 1170: case 1171:

     this.$ = { suggestKeywords: ['NOT'] }
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1175: case 1176: case 1177:

     parser.suggestFunctions({ types: [ 'STRING' ] });
     parser.suggestColumns({ types: [ 'STRING' ] });
     this.$ = { types: ['BOOLEAN'] }
   
break;
case 1178:

     this.$ = parser.findCaseType($$[$0-1])
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1179:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1180:
this.$ = parser.findCaseType($$[$0-1]);
break;
case 1181:

     parser.suggestValueExpressionKeywords($$[$0-1], ['END']);
     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1182:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1183:
this.$ = parser.findCaseType($$[$0-2]);
break;
case 1184:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1185:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-2]);
   
break;
case 1186:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     this.$.suggestFilters = $$[$0-1].suggestFilters
   
break;
case 1187:

     parser.valueExpressionSuggest();
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1188:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1189:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = $$[$0-1];
   
break;
case 1190:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ] };
   
break;
case 1193:

     this.$ = { caseTypes: [ $$[$0] ], lastType: $$[$0] }
     parser.extractExpressionText(this.$, $$[$0]);
   
break;
case 1194:

     $$[$0-1].caseTypes.push($$[$0]);
     this.$ = { caseTypes: $$[$0-1].caseTypes, lastType: $$[$0] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1198:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
   
break;
case 1200:

     this.$ = $$[$0]
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1201:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0].suggestFilters };
break;
case 1202:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1203:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0-2].suggestFilters };
break;
case 1204: case 1205:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0].suggestFilters };
break;
case 1206:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1207:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [$$[$0]] };
   
break;
case 1208:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1209:

      parser.valueExpressionSuggest();
      parser.suggestKeywords(['WHEN']);
      this.$ = { caseTypes: [{ types: ['T'] }] };
    
break;
case 1210: case 1212:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1211:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1213:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [$$[$0]], suggestFilters: true };
   
break;
case 1214:

     parser.suggestValueExpressionKeywords($$[$0-1], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1215:

     parser.suggestValueExpressionKeywords($$[$0-2], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1216: case 1217: case 1218: case 1219:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
}
},
table: [o($V0,$V1,{173:1,174:2}),{1:[3]},o($V2,$V3,{175:3,179:4,3:5,160:6,29:7,4:8,5:9,6:10,7:11,8:12,161:13,162:14,410:15,182:16,16:17,17:18,33:19,34:20,35:21,36:22,143:23,144:24,145:25,146:26,147:27,163:30,21:34,27:35,13:$V4,20:$V5,40:$V6,152:$V7,158:$V8,167:$V9,415:$Va,428:$Vb,495:$Vc,509:$Vd}),{176:[1,41],180:[1,42]},o($V2,[2,278]),o($V2,[2,284]),o($V2,[2,285]),o($V2,[2,286]),o($V2,[2,1]),o($V2,[2,2]),o($V2,[2,3]),o($V2,[2,4]),o($V2,[2,5]),o($V2,[2,257]),o($V2,[2,258]),o($Ve,$Vf,{411:43,466:44,468:45,261:$Vg}),{72:[1,48],410:47,415:$Va},o($V2,[2,11]),o($V2,[2,12]),o($V2,[2,33]),o($V2,[2,34]),o($V2,[2,35]),o($V2,[2,36]),o($V2,[2,217]),o($V2,[2,218]),o($V2,[2,219]),o($V2,[2,220]),o($V2,[2,221]),{52:51,56:$Vh,106:$Vi,184:54,185:$Vj,186:$Vk,187:$Vl,197:[1,50],472:49},{52:58,56:$Vh,106:$Vi,184:54,185:$Vj,186:$Vk,187:$Vl},o($V2,[2,259]),{52:64,56:$Vh,106:$Vi,112:63,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm,305:62,307:61,496:59,502:60},o([47,48,56,72,88,89,100,105,106,158,185,186,187,189,190,191,192,196,198,202,203,207,208,210,220,221,229,237,238,253,254,256,260,262,263,264,265,267],$Vn,{416:66,197:$Vo,216:$Vp}),{52:64,56:$Vh,106:$Vi,112:71,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm,429:69,431:70},{22:72,118:[1,73]},{28:[1,74]},{24:[1,76],32:[1,77],50:75,56:[1,78],213:$Vq,250:$Vr},{24:[1,83],32:[1,84],50:81,56:[1,82],213:$Vq,250:$Vr},{24:[1,85]},{168:[1,86]},{24:[1,87],32:[1,88]},{1:[2,273]},o($V0,$V1,{174:89}),o($Ve,[2,822]),o($Ve,[2,1014],{468:90,261:$Vg}),o($Vs,[2,1016]),o([197,216,415],$V1,{174:91}),o($Ve,$Vf,{466:44,468:45,411:92,261:$Vg}),{29:93,182:16,410:15,415:$Va,428:$Vb},{192:[1,95],193:[1,94]},o($V2,[2,1034]),o($Vt,[2,1035]),o($Vu,[2,296]),o($Vu,[2,297]),o($Vu,[2,298]),o($Vu,[2,293]),o($Vu,[2,294]),o($Vu,[2,295]),o($V2,[2,1164]),{13:[1,96]},{13:[2,1143]},{13:[2,1145]},{13:[2,510],52:64,56:$Vh,106:$Vi,112:97,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm},o($Vv,[2,506],{192:[1,98]}),o($Vu,[2,503]),{49:[1,99],203:[1,100]},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:103,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,190:$VF,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,417:101,426:102,474:124,476:125,478:126,488:130,489:131,490:132,494:143},o($V01,[2,844]),o($V01,[2,845]),o([72,415],[2,870],{78:[1,159]}),o($V11,[2,872]),{28:[1,160]},o($V2,[2,16]),{72:[1,161]},{29:162,182:16,410:15,415:$Va,428:$Vb},o($V21,$V31,{51:163,229:$V41}),o($V51,$V31,{51:165,229:$V41}),o($V51,$V31,{51:166,229:$V41}),{52:167,56:$Vh,106:$Vi,184:54,185:$Vj,186:$Vk,187:$Vl},o($V61,[2,413]),o($V61,[2,414]),o($V51,$V71,{153:168,229:$V81}),{52:170,56:$Vh,106:$Vi,184:54,185:$Vj,186:$Vk,187:$Vl},o($V51,$V71,{153:171,229:$V81}),o($V51,$V71,{153:172,229:$V81}),o($V51,$V71,{153:173,229:$V81}),o($V51,[2,271],{169:174,24:[1,175]}),{25:176,52:64,56:$Vh,106:$Vi,112:177,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm},{25:178,52:64,56:$Vh,106:$Vi,112:177,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm},o($V2,$V3,{179:4,3:5,160:6,29:7,4:8,5:9,6:10,7:11,8:12,161:13,162:14,410:15,182:16,16:17,17:18,33:19,34:20,35:21,36:22,143:23,144:24,145:25,146:26,147:27,163:30,21:34,27:35,175:179,13:$V4,20:$V5,40:$V6,152:$V7,158:$V8,167:$V9,415:$Va,428:$Vb,495:$Vc,509:$Vd}),o($Vs,[2,1017]),{197:$Vo,216:$Vp,415:$Vn,416:180},o($Ve,[2,823]),{74:[1,181]},{44:185,47:$Vw,48:$Vx,52:183,56:$Vh,89:[1,188],106:$Vi,184:54,185:$Vj,186:$Vk,187:$Vl,191:[1,190],192:$VH,221:[1,187],260:[1,186],262:$VX,263:$VY,272:192,275:193,340:184,341:189,342:[1,191],347:135,348:136,473:182},{52:194,56:$Vh,106:$Vi,184:54,185:$Vj,186:$Vk,187:$Vl},{52:64,56:$Vh,80:129,106:$Vi,112:140,142:198,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm,309:199,497:195,504:196,506:197},{13:[2,511]},{52:64,56:$Vh,106:$Vi,112:200,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm},{203:[1,201]},o($Vu,[2,505]),o($Vs,[2,833],{418:202,421:204,78:[1,203],224:[1,205]}),o($V91,[2,850]),o($V91,$Va1,{184:54,52:64,272:192,275:193,361:206,323:220,112:221,44:222,28:$Vb1,47:$Vw,48:$Vx,56:$Vh,70:$Vc1,88:$Vd1,101:$Ve1,102:$Vf1,106:$Vi,135:$Vg1,185:$Vj,186:$Vk,187:$Vl,190:$Vh1,191:$Vi1,193:$Vj1,199:$Vk1,200:$Vl1,203:$Vm,204:$Vm1,230:$Vn1,233:$Vo1,240:$Vp1,245:$Vq1,247:$Vr1}),o($V91,[2,866]),o($Vs1,[2,547]),{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:227,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:228,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:229,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:230,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},{72:$Vt1,319:231},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:233,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:235,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,268:$Vu1,272:137,275:138,289:113,309:119,317:105,324:234,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143,510:236,512:237},o($Vs1,[2,679]),o($Vs1,[2,680],{333:239,72:$Vv1}),o($Vs1,[2,681]),{72:$Vv1,333:241},o($Vs1,[2,684]),o($Vs1,[2,696]),o($Vw1,[2,690],{192:[1,242]}),{72:[2,1058]},{72:[2,1059]},{72:[2,1060]},{72:[2,1061]},o($Vs1,[2,1091],{475:243,477:244,243:$Vx1}),{243:$Vx1,477:246},o($Vs1,[2,1046]),o($Vs1,[2,698]),o($Vs1,[2,699]),o($Vy1,[2,517]),o($Vz1,[2,1080]),o($Vz1,[2,1081]),o($Vz1,[2,1082]),{72:[1,247]},{72:[1,248]},o($Vs1,[2,701]),o($Vs1,[2,702]),o($Vs1,[2,710]),o($Vs1,[2,711]),o($Vs1,[2,712]),o([28,43,47,48,56,70,72,74,78,88,100,101,102,105,106,122,135,176,180,185,186,187,190,191,192,193,199,200,201,203,204,205,206,209,211,214,215,217,218,219,222,224,225,226,227,230,231,232,233,234,235,236,240,241,242,245,246,247,249,251,252,255,257,258,259,261,266,268,269,322],[2,527]),{72:[1,249]},{72:[1,250]},{72:[1,251]},o($Vs1,[2,703],{192:[1,252]}),{262:[1,253],263:[1,254]},{262:[1,255]},{47:[1,257],49:[1,256]},{48:[1,259],49:[1,258]},o($Vs1,[2,715]),o($Vs1,[2,716]),{72:[2,1120]},{72:[2,1121]},{72:[2,1122]},{72:[2,1123]},{72:[2,1124]},{72:[2,1125]},{72:[2,1126]},{72:[2,1127]},{52:64,56:$Vh,106:$Vi,112:71,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm,431:260},{72:[1,261]},{52:64,56:$Vh,80:264,106:$Vi,112:140,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm,286:262,303:263},o($V2,[2,24]),o($V2,[2,49],{184:54,52:265,56:$Vh,106:$Vi,185:$Vj,186:$Vk,187:$Vl}),{88:[1,266]},{52:64,56:$Vh,57:267,59:268,65:269,106:$Vi,112:270,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm},{52:64,56:$Vh,65:271,106:$Vi,112:270,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm},o($V2,[2,58]),{52:64,56:$Vh,106:$Vi,112:272,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm},{220:[1,273]},o($V2,[2,234]),{25:274,52:64,56:$Vh,106:$Vi,112:177,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm},{25:275,52:64,56:$Vh,106:$Vi,112:177,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm},{25:276,52:64,56:$Vh,106:$Vi,112:177,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm},{25:277,52:64,56:$Vh,106:$Vi,112:177,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm},o($V51,[2,272]),{118:[2,21]},o($VA1,[2,480],{192:[1,278]}),{28:[2,30]},o($V2,[2,279]),{410:279,415:$Va},o($Ve,$Vf,{466:44,468:45,411:280,261:$Vg}),o($V2,[2,1033]),o($V2,[2,1037]),o($V2,[2,1038],{184:54,52:281,56:$Vh,106:$Vi,185:$Vj,186:$Vk,187:$Vl}),o($V2,[2,1040]),o($V2,[2,1041]),o($V2,[2,1042]),o($V2,[2,1043]),o($V21,[2,693]),{192:$VH,262:$VX,263:$VY,341:282,347:135,348:136},{192:$VH,262:$VX,263:$VY,341:283,347:135,348:136},o($VB1,[2,421]),o($VB1,[2,422]),o($Vt,[2,1036]),o($VC1,[2,1160],{498:284,78:[1,285],224:[1,286]}),o($VD1,[2,1147]),{193:[1,287]},{193:[2,1157]},o($VE1,[2,514],{192:[1,288]}),o($Vv,[2,507]),o($Vu,[2,504]),o($Vs,[2,834]),{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:103,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,190:$VF,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,426:289,474:124,476:125,478:126,488:130,489:131,490:132,494:143},o($VF1,$VG1,{422:290,463:291,465:292,269:$VH1}),{25:301,52:64,56:$Vh,72:$Vt1,106:$Vi,112:177,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm,319:302,350:295,351:296,354:297,355:298,360:299,362:300,433:294},o($V91,[2,865]),o($VI1,[2,717],{318:303,88:[1,304]}),{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:305,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:306,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:307,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:308,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},{70:$Vc1,204:[1,310],230:[1,309],245:$Vq1,247:$Vr1,323:311},{72:[1,312]},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:313,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:314,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:315,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:316,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:317,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:318,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},o($Vs1,[2,573]),o($VJ1,[2,764]),o($VJ1,[2,765]),{44:320,47:$Vw,48:$Vx,52:64,56:$Vh,106:$Vi,112:319,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm,272:192,275:193},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:321,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:322,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:323,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},o($VK1,[2,548],{323:220,70:$Vc1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,200:$Vl1,230:$Vn1,233:$Vo1,245:$Vq1,247:$Vr1}),o($VK1,[2,549],{323:220,70:$Vc1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,200:$Vl1,230:$Vn1,233:$Vo1,245:$Vq1,247:$Vr1}),o($VK1,[2,550],{323:220,70:$Vc1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,200:$Vl1,230:$Vn1,233:$Vo1,245:$Vq1,247:$Vr1}),o($VL1,[2,551],{323:220}),o($Vs1,[2,556]),o($VM1,$VN1,{319:302,320:324,362:325,368:326,72:$Vt1}),{70:$Vc1,74:[1,327],88:$Vd1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,199:$Vk1,200:$Vl1,204:$Vm1,230:$Vn1,233:$Vo1,240:$Vp1,245:$Vq1,247:$Vr1,323:220},o($Vs1,[2,575]),{70:$Vc1,88:$Vd1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,199:$Vk1,200:$Vl1,204:$Vm1,230:$Vn1,233:$Vo1,240:$Vp1,245:$Vq1,247:$Vr1,268:$Vu1,323:220,324:328,510:236,512:237},{218:[1,330],219:[1,329],268:$Vu1,512:331},o($VO1,[2,1193]),{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:332,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},o($Vs1,[2,682]),{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,74:[1,333],80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:335,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,486:334,488:130,489:131,490:132,494:143},o($Vs1,[2,683]),{52:64,56:$Vh,80:337,106:$Vi,112:140,184:54,185:$Vj,186:$Vk,187:$Vl,190:[1,336],203:$Vm},o($Vs1,[2,1044]),o($Vs1,[2,1092]),{52:64,56:$Vh,72:[1,340],106:$Vi,112:338,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm,385:339},o($Vs1,[2,1045]),{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,74:[1,341],80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:335,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,486:342,488:130,489:131,490:132,494:143},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,74:[1,344],80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:343,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},o($VP1,$Vn,{416:347,74:[1,346],190:[1,345],197:$Vo,216:$Vp}),o($VP1,$Vn,{416:348,74:[1,349],197:$Vo,216:$Vp}),o([47,48,56,72,74,88,89,100,105,106,158,185,186,187,189,191,192,196,198,202,203,207,208,210,220,221,229,237,238,253,254,256,260,262,263,264,265,267],$Vn,{416:350,197:$Vo,216:$Vp}),o($Vs1,[2,704],{262:[1,351],263:[1,352]}),o($Vs1,[2,706]),{262:[1,353]},o($Vs1,[2,707]),{47:[1,354]},o($VQ1,[2,416]),{48:[1,355]},o($VQ1,[2,419]),o($V11,[2,873]),o($VM1,$VN1,{368:326,320:356}),{74:[1,357],78:[1,358]},o($VR1,[2,492]),{193:[1,359]},o($V2,$VS1,{53:360,41:361,42:362,43:$VT1}),{220:[1,364]},o($V2,[2,59]),o($VU1,[2,155],{60:365,117:366,118:[1,367]}),o($VV1,[2,71],{66:368,69:369,70:[1,370],72:[1,371]}),o($VW1,[2,485],{192:[1,372]}),o($VX1,[2,207],{137:373,139:374,72:[1,375]}),o($V2,[2,428],{154:376,282:[1,377]}),o($V51,[2,431]),o($V2,[2,241],{156:378,157:[1,379]}),o($V2,[2,243]),o($V2,[2,249]),{133:[1,380]},{52:64,56:$Vh,106:$Vi,112:381,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm},o($Vs,[2,1022]),o($Ve,[2,824]),o($V2,[2,1039]),o($V21,[2,694]),o($V21,[2,695]),o($V2,$VG1,{465:292,463:382,269:$VH1}),{52:64,56:$Vh,80:129,106:$Vi,112:140,142:198,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm,309:199,504:383,506:197},{25:301,52:64,56:$Vh,72:$Vt1,106:$Vi,112:177,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm,319:302,350:384,351:296,354:297,355:298,360:299,362:300},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:386,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143,507:385},{52:64,56:$Vh,80:337,106:$Vi,112:140,184:54,185:$Vj,186:$Vk,187:$Vl,190:[1,387],203:$Vm},o($V91,[2,851]),o($Vs,[2,846]),o($VY1,[2,892],{435:388,436:389,226:[1,390]}),o($VF1,[2,1027]),{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:392,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,470:391,474:124,476:125,478:126,488:130,489:131,490:132,494:143},o([74,176,180,226,227,236,241,261,269],[2,882],{78:[1,393]}),o($VZ1,[2,885]),o($VZ1,[2,719]),o($VZ1,[2,721],{358:394,448:395,211:$V_1,225:$V$1,231:$V02,234:$V12,235:$V22,242:$V32,246:$V42,251:$V52}),o($VZ1,[2,722]),o($V62,$Va1,{184:54,52:64,272:192,275:193,112:221,44:222,361:404,28:$Vb1,47:$Vw,48:$Vx,56:$Vh,106:$Vi,185:$Vj,186:$Vk,187:$Vl,203:$Vm}),o($V62,$Va1,{184:54,52:64,272:192,275:193,112:221,44:222,361:405,28:$Vb1,47:$Vw,48:$Vx,56:$Vh,106:$Vi,185:$Vj,186:$Vk,187:$Vl,203:$Vm}),o($V72,[2,733]),o($V72,[2,735]),{89:[1,406],216:[1,409],221:[1,408],260:[1,407]},o($VI1,[2,718]),o($V82,[2,558],{323:220,70:$Vc1,190:$Vh1,191:$Vi1,200:$Vl1,230:$Vn1,233:$Vo1,245:$Vq1,247:$Vr1}),o($V82,[2,559],{323:220,70:$Vc1,190:$Vh1,191:$Vi1,200:$Vl1,230:$Vn1,233:$Vo1,245:$Vq1,247:$Vr1}),o($V82,[2,560],{323:220,70:$Vc1,190:$Vh1,191:$Vi1,200:$Vl1,230:$Vn1,233:$Vo1,245:$Vq1,247:$Vr1}),o($V82,[2,561],{323:220,70:$Vc1,190:$Vh1,191:$Vi1,200:$Vl1,230:$Vn1,233:$Vo1,245:$Vq1,247:$Vr1}),{72:[1,410]},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:411,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},o($Vs1,[2,574]),o($VM1,$VN1,{184:54,52:64,317:105,289:113,332:114,334:116,335:117,343:118,309:119,474:124,476:125,478:126,341:127,345:128,80:129,488:130,489:131,490:132,347:135,348:136,272:137,275:138,349:139,112:140,494:143,368:326,320:412,321:413,131:414,47:$Vw,48:$Vx,56:$Vh,72:$Vy,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,158:$VD,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$}),{70:$Vc1,88:$Vd1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,199:$Vk1,200:$Vl1,204:$Vm1,230:$Vn1,233:$Vo1,240:$Vp1,245:$Vq1,247:$Vr1,322:[1,415],323:220},o($V92,[2,568],{323:220,70:$Vc1,88:$Vd1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,200:$Vl1,204:$Vm1,230:$Vn1,233:$Vo1,245:$Vq1,247:$Vr1}),o($V92,[2,569],{323:220,70:$Vc1,88:$Vd1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,200:$Vl1,204:$Vm1,230:$Vn1,233:$Vo1,245:$Vq1,247:$Vr1}),o($VL1,[2,570],{323:220,70:$Vc1,230:$Vn1,233:$Vo1,245:$Vq1,247:$Vr1}),o($VL1,[2,571],{323:220,70:$Vc1,230:$Vn1,233:$Vo1,245:$Vq1,247:$Vr1}),o($VL1,[2,572],{323:220,70:$Vc1,230:$Vn1,233:$Vo1,245:$Vq1,247:$Vr1}),o($VJ1,[2,766]),o($VJ1,[2,767]),o($VL1,[2,1169],{323:220}),o($VL1,[2,1170],{323:220}),o($VL1,[2,1171],{323:220}),{74:[1,416]},{28:$Vb1,44:222,47:$Vw,48:$Vx,52:64,56:$Vh,74:$Va1,106:$Vi,112:221,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm,272:192,275:193,361:417},{29:425,182:16,371:418,373:419,375:420,377:421,379:422,381:423,383:424,410:15,415:$Va,428:$Vb},o($Vs1,[2,557]),o($Vs1,[2,576]),o($Vs1,[2,1178]),{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:426,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},o($VO1,[2,1194]),{70:$Vc1,88:$Vd1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,199:$Vk1,200:$Vl1,204:$Vm1,230:$Vn1,233:$Vo1,240:$Vp1,245:$Vq1,247:$Vr1,257:[1,427],323:220},o($Vs1,[2,1062]),{74:[1,428],78:$Va2},o($VR1,[2,1067],{323:220,70:$Vc1,88:$Vd1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,199:$Vk1,200:$Vl1,204:$Vm1,230:$Vn1,233:$Vo1,240:$Vp1,245:$Vq1,247:$Vr1}),o($Vw1,[2,691]),o($Vy1,[2,518]),o($Vs1,[2,1094]),o($Vs1,[2,1095]),o($Vb2,[2,778],{386:430,391:431,118:[1,432]}),{243:[2,1086]},{74:[1,433],78:$Va2},{28:[1,434],70:$Vc1,88:$Vd1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,199:$Vk1,200:$Vl1,204:$Vm1,230:$Vn1,233:$Vo1,240:$Vp1,245:$Vq1,247:$Vr1,323:220},o($Vs1,[2,1098]),{74:[1,435]},o($Vz1,[2,1110]),{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:335,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,486:436,488:130,489:131,490:132,494:143},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:437,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},o($Vz1,[2,1129]),{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,74:[1,438],80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:335,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,486:439,488:130,489:131,490:132,494:143},o($Vs1,[2,705]),{262:[1,440]},o($Vs1,[2,708]),o($VQ1,[2,415]),o($VQ1,[2,418]),{74:[1,441]},o($V2,[2,443]),{52:64,56:$Vh,80:264,106:$Vi,112:140,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm,303:442},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:443,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},o($V2,[2,50]),o($V2,[2,56]),o([28,74,78,102,176,180],[2,42]),{44:444,47:$Vw,48:$Vx,272:192,275:193},o([56,106,176,180,185,186,187,203],[2,434]),o($V2,[2,193],{61:445,28:[1,446]}),o($VU1,[2,156]),{119:[1,447]},o($VV1,[2,68]),o($VV1,[2,72]),{25:448,52:64,56:$Vh,106:$Vi,112:177,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm},{52:64,56:$Vh,73:449,77:450,80:451,106:$Vi,112:140,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm},{52:64,56:$Vh,106:$Vi,112:452,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm},{28:$VS1,41:453,42:362,43:$VT1},o($VX1,[2,208]),{52:64,56:$Vh,80:129,106:$Vi,112:140,140:454,142:455,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm,309:199},o($V2,[2,227]),o($V2,[2,429]),o($V2,[2,235]),o($V2,[2,242]),{72:$Vc2,170:456,171:457},o($VA1,[2,481]),o($V2,[2,1133]),o($VD1,[2,1148]),o($VC1,[2,1161]),o($VD1,[2,1153]),o($VD1,[2,1158],{323:220,70:$Vc1,88:$Vd1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,199:$Vk1,200:$Vl1,204:$Vm1,230:$Vn1,233:$Vo1,240:$Vp1,245:$Vq1,247:$Vr1}),o($VE1,[2,515]),o($Vd2,[2,921],{444:459,445:460,227:[1,461]}),o($VY1,[2,893]),{119:[1,462]},o($VF1,[2,1028]),o($VF1,[2,1031],{323:220,70:$Vc1,88:$Vd1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,199:$Vk1,200:$Vl1,204:$Vm1,230:$Vn1,233:$Vo1,240:$Vp1,245:$Vq1,247:$Vr1}),{25:301,52:64,56:$Vh,72:$Vt1,106:$Vi,112:177,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm,319:302,350:463,351:296,354:297,355:298,360:299,362:300},o($VZ1,[2,725],{448:464,211:$V_1,225:$V$1,231:$V02,234:$V12,235:$V22,242:$V32,246:$V42,251:$V52}),{25:301,52:64,56:$Vh,72:$Vt1,106:$Vi,112:177,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm,319:302,354:465,360:299,362:300},{234:[1,466]},{234:[1,467],242:[1,468]},{234:[1,469]},o($Ve2,[2,946]),{231:[1,470],234:[1,471],242:[1,472],251:[1,473]},{234:[1,474]},{231:[1,475],234:[1,476],242:[1,477],251:[1,478]},{234:[1,479]},o($V62,[2,728]),o($V62,[2,729]),o($Vs1,[2,552]),o($Vs1,[2,553]),o($Vs1,[2,554]),{224:[1,480]},o($VM1,$VN1,{184:54,52:64,317:105,289:113,332:114,334:116,335:117,343:118,309:119,474:124,476:125,478:126,341:127,345:128,80:129,488:130,489:131,490:132,347:135,348:136,272:137,275:138,349:139,112:140,494:143,368:326,131:414,320:481,321:482,47:$Vw,48:$Vx,56:$Vh,72:$Vy,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,158:$VD,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$}),{70:$Vc1,88:$Vd1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,199:$Vk1,200:$Vl1,204:$Vm1,230:$Vn1,233:$Vo1,240:$Vp1,245:$Vq1,247:$Vr1,322:[1,483],323:220},{74:[1,484]},{74:[1,485],78:$Vf2},o($Vg2,[2,664],{323:220,70:$Vc1,88:$Vd1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,199:$Vk1,200:$Vl1,204:$Vm1,230:$Vn1,233:$Vo1,240:$Vp1,245:$Vq1,247:$Vr1}),{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:487,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},o($Vh2,[2,743]),{74:[1,488]},{74:[2,747]},{74:[2,749]},{74:[2,751]},{74:[2,753]},{74:[2,755]},{74:[2,757]},{74:[2,759]},{74:[2,761]},{70:$Vc1,88:$Vd1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,199:$Vk1,200:$Vl1,204:$Vm1,219:[1,489],230:$Vn1,233:$Vo1,240:$Vp1,245:$Vq1,247:$Vr1,323:220},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:490,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},o($Vs1,[2,1063]),{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:491,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},{74:[2,784],241:$Vi2,387:492,392:493},o($Vb2,[2,779]),{119:[1,495]},{243:[2,1087]},{90:496,205:$Vj2,206:$Vk2,209:$Vl2,214:$Vm2,217:$Vn2,222:$Vo2,232:$Vp2,252:$Vq2,255:$Vr2,258:$Vs2,259:$Vt2,266:$Vu2},o($Vz1,[2,1109]),{74:[1,509],78:$Va2},{70:$Vc1,74:[1,510],88:$Vd1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,199:$Vk1,200:$Vl1,204:$Vm1,230:$Vn1,233:$Vo1,240:$Vp1,245:$Vq1,247:$Vr1,323:220},o($Vz1,[2,1115]),{74:[1,511],78:$Va2},o($Vs1,[2,709]),o($V11,[2,878]),o($VR1,[2,493]),o($VR1,[2,498],{323:220,70:$Vc1,88:$Vd1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,199:$Vk1,200:$Vl1,204:$Vm1,230:$Vn1,233:$Vo1,240:$Vp1,245:$Vq1,247:$Vr1}),o([28,43,74,78,88,89,102,176,180],[2,43]),o($V2,[2,63]),o($VM1,[2,197],{136:512}),{120:513,122:[1,514]},o($VV1,[2,73]),{74:[1,515],78:[1,516]},o($VR1,[2,79]),{81:517,90:518,91:519,92:520,93:521,94:522,95:523,96:524,100:$Vv2,105:$Vw2,106:$Vx2,205:$Vj2,206:$Vk2,209:$Vl2,214:$Vm2,217:$Vn2,222:$Vo2,232:$Vp2,252:$Vq2,255:$Vr2,258:$Vs2,259:$Vt2,266:$Vu2},o($VW1,[2,486]),{28:[1,528]},{74:[1,529],78:[1,530]},o($VR1,$VS1,{42:362,41:531,43:$VT1}),o($V2,[2,262],{78:[1,532]}),o($Vy2,[2,268]),{47:$Vw,48:$Vx,52:64,56:$Vh,80:129,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,158:$VD,172:533,184:54,185:$Vj,186:$Vk,187:$Vl,192:$VH,198:$VJ,202:$VK,203:$Vm,208:$VM,210:$VN,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:534,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},o($Vz2,[2,984],{457:535,392:536,241:$Vi2}),o($Vd2,[2,922]),{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:537,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:539,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,437:538,474:124,476:125,478:126,488:130,489:131,490:132,494:143},o($VZ1,[2,886]),{25:301,52:64,56:$Vh,72:$Vt1,106:$Vi,112:177,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm,319:302,354:540,360:299,362:300},o($VA2,$VB2,{449:541,239:$VC2}),o($Ve2,[2,942]),o($Ve2,[2,943]),{234:[1,543]},o($Ve2,[2,945]),{234:[1,544]},o($Ve2,[2,948]),{234:[1,545]},{234:[1,546]},o($Ve2,[2,951]),{234:[1,547]},o($Ve2,[2,953]),{234:[1,548]},{234:[1,549]},o($Ve2,[2,956]),{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:550,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},{74:[1,551]},{74:[1,552],78:$Vf2},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:553,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},o($Vs1,[2,564]),o($Vs1,[2,565]),{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:554,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},o([28,47,48,56,74,78,106,122,176,180,185,186,187,199,201,203,204,211,215,218,219,224,225,226,227,231,234,235,236,240,241,242,246,249,251,257,261,268,269,322],[2,567],{323:220,70:$Vc1,88:$Vd1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,200:$Vl1,230:$Vn1,233:$Vo1,245:$Vq1,247:$Vr1}),o($Vh2,[2,744]),o($Vs1,[2,1179]),o($VO1,[2,1200],{323:220,70:$Vc1,88:$Vd1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,199:$Vk1,200:$Vl1,204:$Vm1,230:$Vn1,233:$Vo1,240:$Vp1,245:$Vq1,247:$Vr1}),o($VR1,[2,1068],{323:220,70:$Vc1,88:$Vd1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,199:$Vk1,200:$Vl1,204:$Vm1,230:$Vn1,233:$Vo1,240:$Vp1,245:$Vq1,247:$Vr1}),{74:[1,555]},{74:[2,789],122:[1,560],249:[1,559],393:556,396:557,397:558},{119:[1,561]},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:414,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,321:562,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},{74:[1,563]},o($VD2,[2,530]),o($VD2,[2,531]),o($VD2,$VE2,{315:564,72:$VF2}),o($VD2,[2,544],{316:566,72:[1,567]}),o($VD2,[2,534]),o($VD2,[2,535]),o($VD2,[2,536]),o($VD2,[2,537]),o($VD2,[2,538]),o($VD2,[2,539]),o($VD2,[2,540]),o($VD2,$VE2,{315:568,72:$VF2}),o($Vz1,[2,1111]),o($Vz1,[2,1128]),o($Vz1,[2,1116]),{29:569,182:16,410:15,415:$Va,428:$Vb},o($VU1,[2,157]),{72:[1,571],123:570},o($VV1,[2,77]),{52:64,56:$Vh,77:572,80:451,106:$Vi,112:140,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm},o($VR1,[2,93],{82:573,85:574,86:575,42:578,43:$VT1,88:$VG2,89:$VH2}),o($VD2,[2,105]),o($VD2,[2,106]),o($VD2,[2,107]),o($VD2,[2,108]),o($VD2,[2,109]),o($VD2,[2,110]),o($VD2,[2,111]),{101:[1,579]},{101:[1,580]},{101:[1,581]},{29:582,182:16,410:15,415:$Va,428:$Vb},o($VX1,[2,209]),{52:64,56:$Vh,80:129,106:$Vi,112:140,142:583,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm,309:199},o($VR1,[2,211]),{72:$Vc2,171:584},{74:[1,585],78:[1,586]},o($VR1,[2,677]),o($Vs,[2,977],{454:587,455:588,236:[1,589]}),o($Vz2,[2,985]),o($Vd2,[2,923],{323:220,70:$Vc1,88:$Vd1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,199:$Vk1,200:$Vl1,204:$Vm1,230:$Vn1,233:$Vo1,240:$Vp1,245:$Vq1,247:$Vr1}),o($VY1,[2,894],{78:[1,590]}),o($VI2,[2,909],{323:220,70:$Vc1,88:$Vd1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,199:$Vk1,200:$Vl1,204:$Vm1,230:$Vn1,233:$Vo1,240:$Vp1,245:$Vq1,247:$Vr1}),o($VA2,$VB2,{449:591,239:$VC2}),o($VA2,[2,929]),{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:592,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},o($Ve2,[2,944]),o($Ve2,[2,947]),o($Ve2,[2,949]),o($Ve2,[2,950]),o($Ve2,[2,952]),o($Ve2,[2,954]),o($Ve2,[2,955]),o($VL1,[2,555],{323:220}),o($Vs1,[2,562]),o($Vs1,[2,563]),o($VK1,[2,566],{323:220,70:$Vc1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,200:$Vl1,230:$Vn1,233:$Vo1,245:$Vq1,247:$Vr1}),o($Vg2,[2,665],{323:220,70:$Vc1,88:$Vd1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,199:$Vk1,200:$Vl1,204:$Vm1,230:$Vn1,233:$Vo1,240:$Vp1,245:$Vq1,247:$Vr1}),o($Vs1,[2,773]),{74:[2,785]},{74:[2,790]},{204:[1,593],401:[1,594]},o($VJ2,[2,807]),o($VJ2,[2,808]),{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:597,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,458:595,460:596,474:124,476:125,478:126,488:130,489:131,490:132,494:143},o($Vb2,[2,780],{78:$Vf2}),o($Vs1,[2,1097]),o($VD2,[2,532]),{262:[1,598]},o($VD2,[2,533]),{262:[1,599]},o($VD2,[2,541]),o($V2,[2,194]),{72:[1,601],124:600},{52:64,56:$Vh,80:603,106:$Vi,112:140,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm,299:602},o($VR1,[2,80]),o($VR1,[2,89]),o($VR1,[2,94],{42:578,86:604,43:$VT1,88:$VG2,89:$VH2}),o($VK2,[2,95]),{89:[1,605]},o($VK2,[2,102]),o($VK2,[2,103]),{81:606,90:518,91:519,92:520,93:521,94:522,95:523,96:524,100:$Vv2,102:[1,607],105:$Vw2,106:$Vx2,205:$Vj2,206:$Vk2,209:$Vl2,214:$Vm2,217:$Vn2,222:$Vo2,232:$Vp2,252:$Vq2,255:$Vr2,258:$Vs2,259:$Vt2,266:$Vu2},{90:608,102:[1,609],205:$Vj2,206:$Vk2,209:$Vl2,214:$Vm2,217:$Vn2,222:$Vo2,232:$Vp2,252:$Vq2,255:$Vr2,258:$Vs2,259:$Vt2,266:$Vu2},{52:64,56:$Vh,102:[1,611],106:$Vi,107:610,109:612,112:613,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm},o($V2,[2,198]),o($VR1,$VS1,{42:362,41:614,43:$VT1}),o($Vy2,[2,269]),o($Vy2,[2,270]),{47:$Vw,48:$Vx,52:64,56:$Vh,80:129,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,192:$VH,198:$VJ,202:$VK,203:$Vm,208:$VM,210:$VN,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:615,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},o($Vs,[2,1002]),o($Vs,[2,978]),{187:[1,617],192:$VH,262:$VX,263:$VY,341:616,347:135,348:136},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:618,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},o($VA2,[2,930]),o($VA2,[2,972],{323:220,70:$Vc1,88:$Vd1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,199:$Vk1,200:$Vl1,204:$Vm1,230:$Vn1,233:$Vo1,240:$Vp1,245:$Vq1,247:$Vr1}),o($VL2,$VM2,{398:619}),o($VL2,$VM2,{398:620}),o([74,122,176,180,236,249,261],[2,986],{78:[1,621]}),o($VN2,[2,989]),o($VN2,[2,999],{323:220,462:622,70:$Vc1,88:$Vd1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,199:$Vk1,200:$Vl1,201:[1,623],204:$Vm1,215:[1,624],230:$Vn1,233:$Vo1,240:$Vp1,245:$Vq1,247:$Vr1}),{74:[1,625]},{74:[1,626],78:[1,627]},o($VU1,[2,161]),{118:$VO2,127:628,129:629},{74:[1,631],78:[1,632]},o($VR1,[2,473]),o($VK2,[2,96]),o($VK2,[2,101]),{102:[1,633]},o($VD2,[2,116]),{78:[1,634]},o($VD2,[2,120]),{78:[1,636],102:[1,635]},o($VD2,[2,126]),o($VP2,[2,128]),{113:[1,637]},o($VR1,[2,212]),o($VR1,[2,678]),o($Vs,[2,979],{78:[1,638]}),o($Vs,[2,981],{78:[1,639]}),o($VI2,[2,910],{323:220,70:$Vc1,88:$Vd1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,199:$Vk1,200:$Vl1,204:$Vm1,230:$Vn1,233:$Vo1,240:$Vp1,245:$Vq1,247:$Vr1}),o($VQ2,$VR2,{399:640,409:641,212:$VS2,262:$VT2,401:$VU2}),o($VQ2,$VR2,{409:641,399:645,212:$VS2,262:$VT2,401:$VU2}),{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:597,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,460:646,474:124,476:125,478:126,488:130,489:131,490:132,494:143},o($VN2,[2,996]),o($VN2,[2,1000]),o($VN2,[2,1001]),o($VD2,[2,543]),o($VD2,[2,545]),{262:[1,647]},{74:[1,648],78:[1,649]},o($VR1,[2,170]),{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:650,133:[1,651],158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},{72:[2,470]},{52:64,56:$Vh,80:652,106:$Vi,112:140,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm},o($VD2,[2,115]),{81:653,90:518,91:519,92:520,93:521,94:522,95:523,96:524,100:$Vv2,105:$Vw2,106:$Vx2,205:$Vj2,206:$Vk2,209:$Vl2,214:$Vm2,217:$Vn2,222:$Vo2,232:$Vp2,252:$Vq2,255:$Vr2,258:$Vs2,259:$Vt2,266:$Vu2},o($VD2,[2,125]),{52:64,56:$Vh,106:$Vi,109:654,112:613,184:54,185:$Vj,186:$Vk,187:$Vl,203:$Vm},{81:655,90:518,91:519,92:520,93:521,94:522,95:523,96:524,100:$Vv2,105:$Vw2,106:$Vx2,205:$Vj2,206:$Vk2,209:$Vl2,214:$Vm2,217:$Vn2,222:$Vo2,232:$Vp2,252:$Vq2,255:$Vr2,258:$Vs2,259:$Vt2,266:$Vu2},{192:$VH,262:$VX,263:$VY,341:656,347:135,348:136},{187:[1,657]},{74:$VV2,199:$VW2,400:658},{244:[1,660]},{248:[1,661]},o($VX2,[2,820]),o($VX2,[2,821]),{74:$VV2,199:$VW2,400:662},o($VN2,[2,990]),{74:[1,663]},o($VU1,[2,167]),{118:$VO2,129:664},{70:$Vc1,88:$Vd1,101:[1,666],102:$Vf1,132:665,135:[1,667],190:$Vh1,191:$Vi1,193:$Vj1,199:$Vk1,200:$Vl1,204:$Vm1,230:$Vn1,233:$Vo1,240:$Vp1,245:$Vq1,247:$Vr1,323:220},{101:$VY2,132:668,135:$VZ2},o($VR1,[2,474]),{102:[1,671]},o($VP2,[2,129]),o($VP2,$VS1,{42:362,41:672,43:$VT1}),o($Vs,[2,980]),o($Vs,[2,982]),{74:[2,791]},{212:[1,673],262:$VT2,401:$VU2,409:674},o($VQ2,[2,810]),o($VQ2,[2,811]),{74:[2,792]},o($VD2,[2,546]),o($VR1,[2,171]),{133:[1,675]},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:306,133:$V_2,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:308,133:$V$2,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:676,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},o($VP1,$V_2),o($VP1,$V$2),o($VD2,[2,119]),o($VP2,[2,135]),{248:[1,677]},{223:[1,678]},o($VR1,[2,179],{132:679,101:$VY2,135:$VZ2}),o($VR1,[2,178],{323:220,70:$Vc1,88:$Vd1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,199:$Vk1,200:$Vl1,204:$Vm1,230:$Vn1,233:$Vo1,240:$Vp1,245:$Vq1,247:$Vr1}),{74:[2,815]},{74:[2,816]},{47:$Vw,48:$Vx,52:64,56:$Vh,72:$Vy,80:129,88:$Vz,89:$VA,100:$VB,105:$VC,106:$Vi,112:140,131:680,158:$VD,184:54,185:$Vj,186:$Vk,187:$Vl,189:$VE,191:$VG,192:$VH,196:$VI,198:$VJ,202:$VK,203:$Vm,207:$VL,208:$VM,210:$VN,220:$VO,221:$VP,229:$VQ,237:$VR,238:$VS,253:$VT,254:$VU,256:$VV,260:$VW,262:$VX,263:$VY,264:$VZ,265:$V_,267:$V$,272:137,275:138,289:113,309:119,317:105,332:114,334:116,335:117,341:127,343:118,345:128,347:135,348:136,349:139,474:124,476:125,478:126,488:130,489:131,490:132,494:143},o($VR1,[2,177],{323:220,70:$Vc1,88:$Vd1,101:$Ve1,102:$Vf1,135:$Vg1,190:$Vh1,191:$Vi1,193:$Vj1,199:$Vk1,200:$Vl1,204:$Vm1,230:$Vn1,233:$Vo1,240:$Vp1,245:$Vq1,247:$Vr1})],
defaultActions: {41:[2,273],60:[2,1143],61:[2,1145],97:[2,511],120:[2,1058],121:[2,1059],122:[2,1060],123:[2,1061],151:[2,1120],152:[2,1121],153:[2,1122],154:[2,1123],155:[2,1124],156:[2,1125],157:[2,1126],158:[2,1127],176:[2,21],178:[2,30],198:[2,1157],341:[2,1086],418:[2,747],419:[2,749],420:[2,751],421:[2,753],422:[2,755],423:[2,757],424:[2,759],425:[2,761],433:[2,1087],556:[2,785],557:[2,790],631:[2,470],658:[2,791],662:[2,792],677:[2,815],678:[2,816]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: lexer.yylloc,
                    ruleId: stack.slice(stack.length - 2, stack.length).join('_'),
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


SqlParseSupport.initSyntaxParser(parser);/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true,"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* skip whitespace */ 
break;
case 1: /* skip comments */ 
break;
case 2: /* skip comments */ 
break;
case 3: parser.yy.partialCursor = false; parser.yy.cursorFound = yy_.yylloc; return 14; 
break;
case 4: parser.yy.partialCursor = true; parser.yy.cursorFound = yy_.yylloc; return 270; 
break;
case 5: this.popState(); return 322; 
break;
case 6: return 197; 
break;
case 7: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('ALTER', yy_.yylloc, yy.lexer.upcomingInput()); return 20; 
break;
case 8: return 199; 
break;
case 9: return 28; 
break;
case 10: return 201; 
break;
case 11: this.begin('between'); return 204; 
break;
case 12: return 205; 
break;
case 13: return 206; 
break;
case 14: return 119; 
break;
case 15: return 282; 
break;
case 16: return 207; 
break;
case 17: return 209; 
break;
case 18: return 43; 
break;
case 19: parser.determineCase(yy_.yytext); return 40; 
break;
case 20: return 211; 
break;
case 21: return 212; 
break;
case 22: return 213; 
break;
case 23: return 214; 
break;
case 24: return 215; 
break;
case 25: return 216; 
break;
case 26: return 200; 
break;
case 27: return 217; 
break;
case 28: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('DROP', yy_.yylloc, yy.lexer.upcomingInput()); return 152; 
break;
case 29: return 218; 
break;
case 30: return 219; 
break;
case 31: parser.yy.correlatedSubQuery = true; return 220; 
break;
case 32: return 221; 
break;
case 33: return 222; 
break;
case 34: return 223; 
break;
case 35: parser.determineCase(yy_.yytext); return 224; 
break;
case 36: return 225; 
break;
case 37: return 226; 
break;
case 38: return 227; 
break;
case 39: return 229; 
break;
case 40: return 230; 
break;
case 41: return 231; 
break;
case 42: return 167; 
break;
case 43: return 232; 
break;
case 44: return 168; 
break;
case 45: return 233; 
break;
case 46: return 234; 
break;
case 47: return 235; 
break;
case 48: return 70; 
break;
case 49: return 236; 
break;
case 50: return 88; 
break;
case 51: return 89; 
break;
case 52: return 239; 
break;
case 53: return 185; 
break;
case 54: return 240; 
break;
case 55: return 241; 
break;
case 56: return 242; 
break;
case 57: return 118; 
break;
case 58: return 244; 
break;
case 59: return 157; 
break;
case 60: return 122; 
break;
case 61: return 245; 
break;
case 62: return 246; 
break;
case 63: return 247; 
break;
case 64: return 248; 
break;
case 65: return 56; 
break;
case 66: return 249; 
break;
case 67: return 250; 
break;
case 68: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SELECT', yy_.yylloc); return 415; 
break;
case 69: return 251; 
break;
case 70: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SET', yy_.yylloc); return 13; 
break;
case 71: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SHOW', yy_.yylloc); return 'SHOW'; 
break;
case 72: return 252; 
break;
case 73: return 255; 
break;
case 74: return 24; 
break;
case 75: return 257; 
break;
case 76: return 258; 
break;
case 77: return 259; 
break;
case 78: return 'TO'; 
break;
case 79: return 260; 
break;
case 80: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('TRUNCATE', yy_.yylloc, yy.lexer.upcomingInput()); return 158; 
break;
case 81: return 401; 
break;
case 82: return 261; 
break;
case 83: parser.determineCase(yy_.yytext); return 495; 
break;
case 84: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('USE', yy_.yylloc); return 509; 
break;
case 85: return 133; 
break;
case 86: return 266; 
break;
case 87: return 32; 
break;
case 88: return 268; 
break;
case 89: return 269; 
break;
case 90: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('WITH', yy_.yylloc); return 428; 
break;
case 91: return 243; 
break;
case 92: return 56; 
break;
case 93: yy.lexer.unput('('); yy_.yytext = 'avg'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 202; 
break;
case 94: yy.lexer.unput('('); yy_.yytext = 'cast'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 208; 
break;
case 95: yy.lexer.unput('('); yy_.yytext = 'count'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 210; 
break;
case 96: yy.lexer.unput('('); yy_.yytext = 'max'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 237; 
break;
case 97: yy.lexer.unput('('); yy_.yytext = 'min'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 238; 
break;
case 98: yy.lexer.unput('('); yy_.yytext = 'stddev_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 253; 
break;
case 99: yy.lexer.unput('('); yy_.yytext = 'stddev_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 254; 
break;
case 100: yy.lexer.unput('('); yy_.yytext = 'sum'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 256; 
break;
case 101: yy.lexer.unput('('); yy_.yytext = 'var_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 264; 
break;
case 102: yy.lexer.unput('('); yy_.yytext = 'var_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 265; 
break;
case 103: yy.lexer.unput('('); yy_.yytext = 'variance'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 267; 
break;
case 104: yy.lexer.unput('('); yy_.yytext = 'cume_dist'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 198; 
break;
case 105: yy.lexer.unput('('); yy_.yytext = 'dense_rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 198; 
break;
case 106: yy.lexer.unput('('); yy_.yytext = 'first_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 198; 
break;
case 107: yy.lexer.unput('('); yy_.yytext = 'lag'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 198; 
break;
case 108: yy.lexer.unput('('); yy_.yytext = 'last_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 198; 
break;
case 109: yy.lexer.unput('('); yy_.yytext = 'lead'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 198; 
break;
case 110: yy.lexer.unput('('); yy_.yytext = 'rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 198; 
break;
case 111: yy.lexer.unput('('); yy_.yytext = 'row_number'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 198; 
break;
case 112: return 262; 
break;
case 113: return 262; 
break;
case 114: return 263; 
break;
case 115: return 186; 
break;
case 116: parser.yy.cursorFound = true; return 14; 
break;
case 117: parser.yy.cursorFound = true; return 270; 
break;
case 118: return 228; 
break;
case 119: parser.addFileLocation(yy_.yylloc, yy_.yytext); return 406; 
break;
case 120: this.popState(); return 407; 
break;
case 121: return 176; 
break;
case 122: return 199; 
break;
case 123: return 240; 
break;
case 124: return 193; 
break;
case 125: return 101; 
break;
case 126: return 102; 
break;
case 127: return 135; 
break;
case 128: return 135; 
break;
case 129: return 135; 
break;
case 130: return 135; 
break;
case 131: return 135; 
break;
case 132: return 191; 
break;
case 133: return 190; 
break;
case 134: return 200; 
break;
case 135: return 200; 
break;
case 136: return 200; 
break;
case 137: return 200; 
break;
case 138: return 200; 
break;
case 139: return 200; 
break;
case 140: return 78; 
break;
case 141: return 192; 
break;
case 142: return 113; 
break;
case 143: return 180; 
break;
case 144: return 196; 
break;
case 145: return 189; 
break;
case 146: return 72; 
break;
case 147: return 74; 
break;
case 148: return 194; 
break;
case 149: return 195; 
break;
case 150: return 187; 
break;
case 151: this.begin('backtickedValue'); return 203; 
break;
case 152:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '`')) {
                                               return 274;
                                             }
                                             return 49;
                                           
break;
case 153: this.popState(); return 203; 
break;
case 154: this.begin('singleQuotedValue'); return 47; 
break;
case 155:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '\'')) {
                                               return 274;
                                             }
                                             return 49;
                                           
break;
case 156: this.popState(); return 47; 
break;
case 157: this.begin('doubleQuotedValue'); return 48; 
break;
case 158:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '"')) {
                                               return 274;
                                             }
                                             return 49;
                                           
break;
case 159: this.popState(); return 48; 
break;
case 160: return 176; 
break;
case 161: /* To prevent console logging of unknown chars */ 
break;
case 162: 
break;
case 163: 
break;
case 164: 
break;
case 165: 
break;
case 166: 
break;
case 167:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s)/i,/^(?:--.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:AND)/i,/^(?:ALL)/i,/^(?:ALTER)/i,/^(?:AND)/i,/^(?:AS)/i,/^(?:ASC)/i,/^(?:BETWEEN)/i,/^(?:BIGINT)/i,/^(?:BOOLEAN)/i,/^(?:BY)/i,/^(?:CASCADE)/i,/^(?:CASE)/i,/^(?:CHAR)/i,/^(?:COMMENT)/i,/^(?:CREATE)/i,/^(?:CROSS)/i,/^(?:CURRENT)/i,/^(?:DATABASE)/i,/^(?:DECIMAL)/i,/^(?:DESC)/i,/^(?:DISTINCT)/i,/^(?:DIV)/i,/^(?:DOUBLE)/i,/^(?:DROP)/i,/^(?:ELSE)/i,/^(?:END)/i,/^(?:EXISTS)/i,/^(?:FALSE)/i,/^(?:FLOAT)/i,/^(?:FOLLOWING)/i,/^(?:FROM)/i,/^(?:FULL)/i,/^(?:GROUP)/i,/^(?:HAVING)/i,/^(?:IF)/i,/^(?:IN)/i,/^(?:INNER)/i,/^(?:INSERT)/i,/^(?:INT)/i,/^(?:INTO)/i,/^(?:IS)/i,/^(?:JOIN)/i,/^(?:LEFT)/i,/^(?:LIKE)/i,/^(?:LIMIT)/i,/^(?:NOT)/i,/^(?:NULL)/i,/^(?:ON)/i,/^(?:OPTION)/i,/^(?:OR)/i,/^(?:ORDER)/i,/^(?:OUTER)/i,/^(?:PARTITION)/i,/^(?:PRECEDING)/i,/^(?:PURGE)/i,/^(?:RANGE)/i,/^(?:REGEXP)/i,/^(?:RIGHT)/i,/^(?:RLIKE)/i,/^(?:ROW)/i,/^(?:ROLE)/i,/^(?:ROWS)/i,/^(?:SCHEMA)/i,/^(?:SELECT)/i,/^(?:SEMI)/i,/^(?:SET)/i,/^(?:SHOW)/i,/^(?:SMALLINT)/i,/^(?:STRING)/i,/^(?:TABLE)/i,/^(?:THEN)/i,/^(?:TIMESTAMP)/i,/^(?:TINYINT)/i,/^(?:TO)/i,/^(?:TRUE)/i,/^(?:TRUNCATE)/i,/^(?:UNBOUNDED)/i,/^(?:UNION)/i,/^(?:UPDATE)/i,/^(?:USE)/i,/^(?:VALUES)/i,/^(?:VARCHAR)/i,/^(?:VIEW)/i,/^(?:WHEN)/i,/^(?:WHERE)/i,/^(?:WITH)/i,/^(?:OVER)/i,/^(?:ROLE)/i,/^(?:AVG\s*\()/i,/^(?:CAST\s*\()/i,/^(?:COUNT\s*\()/i,/^(?:MAX\s*\()/i,/^(?:MIN\s*\()/i,/^(?:STDDEV_POP\s*\()/i,/^(?:STDDEV_SAMP\s*\()/i,/^(?:SUM\s*\()/i,/^(?:VAR_POP\s*\()/i,/^(?:VAR_SAMP\s*\()/i,/^(?:VARIANCE\s*\()/i,/^(?:CUME_DIST\s*\()/i,/^(?:DENSE_RANK\s*\()/i,/^(?:FIRST_VALUE\s*\()/i,/^(?:LAG\s*\()/i,/^(?:LAST_VALUE\s*\()/i,/^(?:LEAD\s*\()/i,/^(?:RANK\s*\()/i,/^(?:ROW_NUMBER\s*\()/i,/^(?:[0-9]+)/i,/^(?:[0-9]+(?:[YSL]|BD)?)/i,/^(?:[0-9]+E)/i,/^(?:[A-Za-z0-9_]+)/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:\s+['"])/i,/^(?:[^'"\u2020\u2021]+)/i,/^(?:['"])/i,/^(?:$)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<>)/i,/^(?:<=>)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\+)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\|)/i,/^(?:\^)/i,/^(?:&)/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:;)/i,/^(?:~)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\$\{[^}]*\})/i,/^(?:`)/i,/^(?:[^`]+)/i,/^(?:`)/i,/^(?:')/i,/^(?:(?:\\\\|\\[']|[^'])+)/i,/^(?:')/i,/^(?:")/i,/^(?:(?:\\\\|\\["]|[^"])+)/i,/^(?:")/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"hdfs":{"rules":[116,117,118,119,120,121,163],"inclusive":false},"doubleQuotedValue":{"rules":[158,159,166],"inclusive":false},"singleQuotedValue":{"rules":[155,156,165],"inclusive":false},"backtickedValue":{"rules":[152,153,164],"inclusive":false},"between":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,154,157,160,161,162,167],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,154,157,160,161,167],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
export default druidSyntaxParser;
