// Licensed to Cloudera, Inc. under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  Cloudera, Inc. licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import SqlParseSupport from 'parse/sql/calcite/sqlParseSupport';

var calciteSyntaxParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[14,18,35,145,165,177,244,279,329,345,348,352],$V1=[2,633],$V2=[348,352],$V3=[2,634],$V4=[1,28],$V5=[1,40],$V6=[1,37],$V7=[1,38],$V8=[1,39],$V9=[1,33],$Va=[1,34],$Vb=[1,29],$Vc=[1,32],$Vd=[1,30],$Ve=[76,348,352],$Vf=[2,458],$Vg=[1,48],$Vh=[1,55],$Vi=[1,57],$Vj=[1,53],$Vk=[1,56],$Vl=[1,52],$Vm=[1,66],$Vn=[45,46,58,74,90,91,102,107,108,231,258,275,277,278,279,302,303,304,305,306,307,308,309,310,311,312,314,315,356,357,359,360,363,366,370,378,397,398],$Vo=[2,420],$Vp=[1,72],$Vq=[1,73],$Vr=[1,81],$Vs=[1,82],$Vt=[76,267,348,352],$Vu=[273,275],$Vv=[14,30,41,45,46,58,72,74,76,80,90,102,103,104,107,108,115,120,124,135,137,157,185,193,204,217,218,219,220,221,222,223,224,225,229,231,235,242,243,258,267,269,273,275,348,352,356,357,360,364,365,366,367,368,369,371,374,375,376,377,379,382,383,384,385,387,388,390,392,393,394,395,396,399,400,413,447],$Vw=[58,108,231,356,357,366],$Vx=[2,787],$Vy=[1,98],$Vz=[14,58,108,231,356,357,366],$VA=[74,80,244],$VB=[1,160],$VC=[1,161],$VD=[1,116],$VE=[1,111],$VF=[1,122],$VG=[1,124],$VH=[1,126],$VI=[1,109],$VJ=[1,158],$VK=[1,162],$VL=[1,163],$VM=[1,127],$VN=[1,149],$VO=[1,150],$VP=[1,151],$VQ=[1,152],$VR=[1,153],$VS=[1,154],$VT=[1,155],$VU=[1,156],$VV=[1,142],$VW=[1,143],$VX=[1,136],$VY=[1,125],$VZ=[1,137],$V_=[1,112],$V$=[1,114],$V01=[1,113],$V11=[1,117],$V21=[1,115],$V31=[1,157],$V41=[1,159],$V51=[45,46,58,74,76,90,91,102,107,108,231,244,258,275,277,278,279,302,303,304,305,306,307,308,309,310,311,312,314,315,356,357,359,360,363,366,370,378,397,398],$V61=[58,108,231,348,352,356,357],$V71=[2,790],$V81=[1,168],$V91=[58,108,231,314,348,352,356,357,366],$Va1=[1,209],$Vb1=[76,80,185,267,348,352],$Vc1=[2,1109],$Vd1=[1,229],$Ve1=[1,230],$Vf1=[1,218],$Vg1=[1,215],$Vh1=[1,216],$Vi1=[1,217],$Vj1=[1,224],$Vk1=[1,214],$Vl1=[1,223],$Vm1=[1,222],$Vn1=[1,225],$Vo1=[1,220],$Vp1=[1,219],$Vq1=[1,213],$Vr1=[1,221],$Vs1=[1,232],$Vt1=[1,231],$Vu1=[30,45,46,58,72,76,80,90,103,104,108,124,137,185,193,204,217,218,219,220,221,222,223,224,229,231,235,242,243,258,267,269,273,348,352,356,357,360,364,365,366,367,376,377,382,384,385,387,388,390,394,400,447],$Vv1=[1,238],$Vw1=[1,244],$Vx1=[1,246],$Vy1=[30,45,46,58,72,74,76,80,90,103,104,108,124,137,185,193,204,217,218,219,220,221,222,223,224,229,231,235,242,243,258,267,269,273,348,352,356,357,360,364,365,366,367,376,377,382,384,385,387,388,390,394,400,447],$Vz1=[1,251],$VA1=[30,41,45,46,58,72,74,76,80,90,103,104,108,124,137,185,193,204,217,218,219,220,221,222,223,224,229,231,235,242,243,258,267,269,273,275,348,352,356,357,360,364,365,366,367,376,377,382,384,385,387,388,390,394,400,447],$VB1=[30,45,46,58,72,76,80,90,103,104,108,124,137,185,193,204,217,218,219,220,221,222,223,224,229,231,235,242,243,258,267,269,273,326,348,352,356,357,360,364,365,366,367,376,377,382,384,385,387,388,390,394,400,447],$VC1=[30,45,46,58,76,80,108,120,135,157,193,204,217,218,219,220,221,222,223,224,225,229,231,235,267,269,348,352,356,357,366],$VD1=[30,41,76,80,90,91,104,185,193,204,217,218,219,220,221,222,223,224,225,229,235,267,269,348,352],$VE1=[269,348,352],$VF1=[80,185,269,348,352],$VG1=[41,76,80,273],$VH1=[177,244],$VI1=[2,1087],$VJ1=[76,193,204,229,235,267,348,352],$VK1=[2,471],$VL1=[1,298],$VM1=[91,252,277,278],$VN1=[76,80,185,193,204,217,218,219,220,221,222,223,224,225,229,235,267,269,348,352],$VO1=[30,45,46,58,76,80,90,108,124,185,193,204,217,218,219,220,221,222,223,224,229,231,235,242,243,267,269,348,352,356,357,364,366,367,376,377,385,390,394,400,447],$VP1=[30,45,46,58,76,80,90,103,104,108,124,137,185,193,204,217,218,219,220,221,222,223,224,229,231,235,242,243,258,267,269,273,348,352,356,357,360,364,365,366,367,376,377,385,390,394,400,447],$VQ1=[376,377,400],$VR1=[45,46,58,74,90,91,102,107,108,231,275,277,278,279,302,303,304,305,306,307,308,309,310,311,312,314,315,356,357,359,360,363,366,370,378,397,398],$VS1=[30,41,45,46,58,72,76,80,90,91,103,104,108,124,137,185,193,204,217,218,219,220,221,222,223,224,225,229,231,235,242,243,258,267,269,273,348,352,356,357,360,364,365,366,367,376,377,382,384,385,387,388,390,394,400,447],$VT1=[76,80],$VU1=[2,39],$VV1=[1,366],$VW1=[30,348,352],$VX1=[30,120,348,352],$VY1=[30,41,72,74,120,348,352],$VZ1=[30,41],$V_1=[76,204,229,235,267,348,352],$V$1=[76,80,193,204,229,235,267,269,348,352],$V02=[1,408],$V12=[1,411],$V22=[1,409],$V32=[1,413],$V42=[1,410],$V52=[1,412],$V62=[1,415],$V72=[1,414],$V82=[76,80,193,204,217,218,219,220,221,222,223,224,225,229,235,267,269,348,352],$V92=[30,45,46,58,76,80,108,193,204,217,218,219,220,221,222,223,224,225,229,231,235,267,269,348,352,356,357,366],$Va2=[30,45,46,58,76,80,90,103,104,108,124,137,185,193,204,217,218,219,220,221,222,223,224,229,231,235,242,243,267,269,273,348,352,356,357,364,366,367,376,377,385,390,394,400,447],$Vb2=[30,45,46,58,76,80,108,124,185,193,204,217,218,219,220,221,222,223,224,229,231,235,242,243,267,269,348,352,356,357,364,366,376,377,385,390,394,400,447],$Vc2=[1,433],$Vd2=[76,235],$Ve2=[1,461],$Vf2=[76,229,235,267,348,352],$Vg2=[58,74,108,231,356,357,366],$Vh2=[1,489],$Vi2=[76,80,235],$Vj2=[30,45,46,58,72,76,80,90,103,104,108,124,137,185,193,204,217,218,219,220,221,222,223,224,225,229,231,235,242,243,258,267,269,273,348,352,356,357,360,364,365,366,367,376,377,382,384,385,387,388,390,394,400,447],$Vk2=[1,497],$Vl2=[1,500],$Vm2=[1,501],$Vn2=[1,502],$Vo2=[1,503],$Vp2=[1,504],$Vq2=[1,505],$Vr2=[1,506],$Vs2=[1,507],$Vt2=[1,508],$Vu2=[1,509],$Vv2=[1,510],$Vw2=[1,511],$Vx2=[1,528],$Vy2=[1,529],$Vz2=[1,530],$VA2=[80,348,352],$VB2=[76,229,267,348,352],$VC2=[76,80,193,204,217,218,219,220,221,222,223,224,229,235,267,269,348,352],$VD2=[2,377],$VE2=[1,545],$VF2=[41,76,80,90,91,104],$VG2=[2,899],$VH2=[1,568],$VI2=[1,579],$VJ2=[1,580],$VK2=[76,80,204,229,235,267,348,352],$VL2=[367,502],$VM2=[41,76,80,90,91],$VN2=[76,364,372,397,502],$VO2=[2,1145],$VP2=[76,80,124,229,267,348,352,390],$VQ2=[1,633],$VR2=[80,104],$VS2=[76,364],$VT2=[2,1155],$VU2=[1,645],$VV2=[1,646],$VW2=[1,647],$VX2=[2,1160],$VY2=[1,662],$VZ2=[380,386],$V_2=[1,672],$V$2=[1,673],$V03=[2,193],$V13=[2,194];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"DataDefinition":3,"AlterStatement":4,"CreateStatement":5,"DropStatement":6,"SetSpecification":7,"TruncateTableStatement":8,"UseStatement":9,"DataDefinition_EDIT":10,"AlterStatement_EDIT":11,"CreateStatement_EDIT":12,"DropStatement_EDIT":13,"SET":14,"CURSOR":15,"TruncateTableStatement_EDIT":16,"UseStatement_EDIT":17,"ALTER":18,"AlterTable_EDIT":19,"AlterView_EDIT":20,"AlterTable":21,"AlterView":22,"AlterTableLeftSide":23,"PartitionSpec":24,"AlterTableLeftSide_EDIT":25,"TABLE":26,"SchemaQualifiedTableIdentifier":27,"SchemaQualifiedTableIdentifier_EDIT":28,"AlterViewLeftSide":29,"AS":30,"QuerySpecification":31,"AlterViewLeftSide_EDIT":32,"QuerySpecification_EDIT":33,"VIEW":34,"CREATE":35,"DatabaseDefinition_EDIT":36,"TableDefinition_EDIT":37,"ViewDefinition_EDIT":38,"OptionalComment":39,"Comment":40,"COMMENT":41,"QuotedValue":42,"OptionalComment_INVALID":43,"Comment_INVALID":44,"SINGLE_QUOTE":45,"DOUBLE_QUOTE":46,"VALUE":47,"DatabaseDefinition":48,"RoleDefinition":49,"TableDefinition":50,"ViewDefinition":51,"DatabaseOrSchema":52,"OptionalIfNotExists":53,"RegularIdentifier":54,"DatabaseDefinitionOptionals":55,"OptionalIfNotExists_EDIT":56,"DatabaseDefinitionOptionals_EDIT":57,"ROLE":58,"TableDefinitionRightPart":59,"TableDefinitionRightPart_EDIT":60,"TableIdentifierAndOptionalColumnSpecification":61,"OptionalPartitionedBy":62,"OptionalAsSelectStatement":63,"TableIdentifierAndOptionalColumnSpecification_EDIT":64,"PartitionedBy_EDIT":65,"OptionalAsSelectStatement_EDIT":66,"SchemaQualifiedIdentifier":67,"OptionalColumnSpecificationsOrLike":68,"OptionalColumnSpecificationsOrLike_EDIT":69,"SchemaQualifiedIdentifier_EDIT":70,"ParenthesizedColumnSpecificationList":71,"LIKE":72,"ParenthesizedColumnSpecificationList_EDIT":73,"(":74,"ColumnSpecificationList":75,")":76,"ColumnSpecificationList_EDIT":77,"RightParenthesisOrError":78,"ColumnSpecification":79,",":80,"ColumnSpecification_EDIT":81,"ColumnIdentifier":82,"ColumnDataType":83,"OptionalColumnOptions":84,"ColumnDataType_EDIT":85,"ColumnOptions_EDIT":86,"ColumnOptions":87,"ColumnOption":88,"ColumnOption_EDIT":89,"NOT":90,"NULL":91,"PrimitiveType":92,"ArrayType":93,"MapType":94,"StructType":95,"ArrayType_INVALID":96,"MapType_INVALID":97,"StructType_INVALID":98,"ArrayType_EDIT":99,"MapType_EDIT":100,"StructType_EDIT":101,"ARRAY":102,"<":103,">":104,"AnyCursor":105,"GreaterThanOrError":106,"MAP":107,"STRUCT":108,"StructDefinitionList":109,"StructDefinitionList_EDIT":110,"StructDefinition":111,"StructDefinition_EDIT":112,"Commas":113,"RegularOrBacktickedIdentifier":114,":":115,"ColumnDataTypeList":116,"ColumnDataTypeList_EDIT":117,"ColumnDataTypeListInner_EDIT":118,"PartitionedBy":119,"PARTITION":120,"BY":121,"RangeClause":122,"RangeClause_EDIT":123,"RANGE":124,"ParenthesizedColumnList":125,"ParenthesizedPartitionValuesList":126,"ParenthesizedColumnList_EDIT":127,"ParenthesizedPartitionValuesList_EDIT":128,"PartitionValueList":129,"PartitionValueList_EDIT":130,"PartitionValue":131,"PartitionValue_EDIT":132,"ValueExpression":133,"LessThanOrEqualTo":134,"VALUES":135,"ValueExpression_EDIT":136,"COMPARISON_OPERATOR":137,"CommitLocations":138,"OptionalParenthesizedViewColumnList":139,"ParenthesizedViewColumnList_EDIT":140,"ParenthesizedViewColumnList":141,"ViewColumnList":142,"ViewColumnList_EDIT":143,"ColumnReference":144,"DROP":145,"DropDatabaseStatement_EDIT":146,"DropTableStatement_EDIT":147,"DropViewStatement_EDIT":148,"DropDatabaseStatement":149,"DropRoleStatement":150,"DropTableStatement":151,"DropViewStatement":152,"OptionalIfExists":153,"OptionalCascade":154,"OptionalIfExists_EDIT":155,"OptionalPurge":156,"PURGE":157,"DataManipulation":158,"InsertStatement":159,"UpdateStatement":160,"InsertValuesStatement":161,"DataManipulation_EDIT":162,"InsertValuesStatement_EDIT":163,"UpdateStatement_EDIT":164,"INSERT":165,"INTO":166,"OptionalTable":167,"InsertValuesList":168,"ParenthesizedRowValuesList":169,"InValueList":170,"CommonTableExpression":171,"SelectStatement":172,"OptionalUnions":173,"SelectStatement_EDIT":174,"OptionalUnions_EDIT":175,"CommonTableExpression_EDIT":176,"WITH":177,"WithQueries":178,"WithQueries_EDIT":179,"WithQuery":180,"WithQuery_EDIT":181,"TableSubQueryInner":182,"TableSubQueryInner_EDIT":183,"FromClause":184,"FROM":185,"TableReferenceList":186,"FromClause_EDIT":187,"TableReferenceList_EDIT":188,"TableReference":189,"TableReference_EDIT":190,"OptionalGroupByClause":191,"GroupByClause":192,"GROUP":193,"GroupByColumnList":194,"GroupByClause_EDIT":195,"GroupByColumnList_EDIT":196,"ColumnGroupingSets":197,"ColumnGroupingSets_EDIT":198,"ColumnGroupingSet_EDIT":199,"ColumnReference_EDIT":200,"GroupByColumnListPartTwo_EDIT":201,"OptionalHavingClause":202,"HavingClause":203,"HAVING":204,"HavingClause_EDIT":205,"OptionalJoins":206,"Joins":207,"Joins_INVALID":208,"JoinType":209,"TablePrimary":210,"OptionalJoinCondition":211,"Join_EDIT":212,"JoinType_EDIT":213,"TablePrimary_EDIT":214,"JoinCondition_EDIT":215,"Joins_EDIT":216,"CROSS":217,"JOIN":218,"FULL":219,"OUTER":220,"INNER":221,"LEFT":222,"SEMI":223,"RIGHT":224,"ON":225,"UsingColList":226,"OptionalLimitClause":227,"LimitClause":228,"LIMIT":229,"UnsignedNumericLiteral":230,"VARIABLE_REFERENCE":231,"LimitClause_EDIT":232,"OptionalOrderByClause":233,"OrderByClause":234,"ORDER":235,"OrderByColumnList":236,"OrderByClause_EDIT":237,"OrderByColumnList_EDIT":238,"OrderByIdentifier":239,"OrderByIdentifier_EDIT":240,"OptionalAscOrDesc":241,"ASC":242,"DESC":243,"SELECT":244,"OptionalAllOrDistinct":245,"SelectList":246,"TableExpression":247,"STREAM":248,"SelectList_EDIT":249,"TableExpression_EDIT":250,"ALL":251,"DISTINCT":252,"OptionalSelectConditions":253,"OptionalSelectConditions_EDIT":254,"SelectSpecification":255,"SelectSpecification_EDIT":256,"OptionalCorrelationName":257,"*":258,"OptionalCorrelationName_EDIT":259,"OptionalWhereClause":260,"WhereClause_EDIT":261,"WhereClause":262,"Unions":263,"Unions_EDIT":264,"UnionClause":265,"UnionClause_EDIT":266,"UNION":267,"NewStatement":268,"WHERE":269,"SearchCondition":270,"SearchCondition_EDIT":271,"SetOption":272,"=":273,"SetValue":274,".":275,"SignedInteger":276,"TRUE":277,"FALSE":278,"TRUNCATE":279,"OptionalPartitionSpec":280,"UserDefinedFunction":281,"AggregateFunction":282,"OptionalOverClause":283,"AnalyticFunction":284,"OverClause":285,"CastFunction":286,"UserDefinedFunction_EDIT":287,"AggregateFunction_EDIT":288,"OptionalOverClause_EDIT":289,"AnalyticFunction_EDIT":290,"OverClause_EDIT":291,"CastFunction_EDIT":292,"OtherAggregateFunction":293,"CountFunction":294,"SumFunction":295,"OtherAggregateFunction_EDIT":296,"CountFunction_EDIT":297,"SumFunction_EDIT":298,"OtherAggregateFunction_Type":299,"UdfArgumentList":300,"UdfArgumentList_EDIT":301,"AVG":302,"MAX":303,"MIN":304,"STDDEV_POP":305,"STDDEV_SAMP":306,"VAR_POP":307,"VAR_SAMP":308,"VARIANCE":309,"COUNT":310,"SUM":311,"ANALYTIC":312,"ArbitraryFunctionName":313,"IF":314,"CAST":315,"NonParenthesizedValueExpressionPrimary":316,"ColumnOrArbitraryFunctionRef":317,"ArbitraryFunctionRightPart":318,"UnsignedValueSpecification":319,"NonParenthesizedValueExpressionPrimary_EDIT":320,"ArbitraryFunctionRightPart_EDIT":321,"UnsignedValueSpecification_EDIT":322,"ColumnOrArbitraryFunctionRef_EDIT":323,"ArbitraryFunction":324,"ArbitraryFunction_EDIT":325,"OVER":326,"WindowExpression":327,"WindowExpression_EDIT":328,"UPDATE":329,"TargetTable":330,"SetClauseList":331,"OptionalFromJoinedTable":332,"TargetTable_EDIT":333,"SetClauseList_EDIT":334,"FromJoinedTable_EDIT":335,"TableName":336,"TableName_EDIT":337,"LocalOrSchemaQualifiedName":338,"LocalOrSchemaQualifiedName_EDIT":339,"SetClause":340,"SetClause_EDIT":341,"SetTarget":342,"UpdateSource":343,"UpdateSource_EDIT":344,"USE":345,"SqlSyntax":346,"SqlStatements":347,"EOF":348,"SqlAutocomplete":349,"SqlStatements_EDIT":350,"SqlStatement":351,";":352,"SqlStatement_EDIT":353,"SetSpecification_EDIT":354,"NonReservedKeyword":355,"OPTION":356,"REGULAR_IDENTIFIER":357,"NonStartingToken":358,"!":359,"-":360,"[":361,"]":362,"~":363,"AND":364,"ARITHMETIC_OPERATOR":365,"BACKTICK":366,"BETWEEN":367,"BIGINT":368,"BOOLEAN":369,"CASE":370,"CHAR":371,"CURRENT":372,"DATABASE":373,"DECIMAL":374,"DOUBLE":375,"ELSE":376,"END":377,"EXISTS":378,"FLOAT":379,"FOLLOWING":380,"HDFS_START_QUOTE":381,"IN":382,"INT":383,"IS":384,"OR":385,"PRECEDING":386,"REGEXP":387,"RLIKE":388,"ROW":389,"ROWS":390,"SCHEMA":391,"SMALLINT":392,"STRING":393,"THEN":394,"TIMESTAMP":395,"TINYINT":396,"UNSIGNED_INTEGER":397,"UNSIGNED_INTEGER_E":398,"VARCHAR":399,"WHEN":400,"PARTIAL_CURSOR":401,"FromOrIn":402,"SingleQuotedValue":403,"SingleQuotedValue_EDIT":404,"PARTIAL_VALUE":405,"DoubleQuotedValue":406,"DoubleQuotedValue_EDIT":407,"QuotedValue_EDIT":408,"OptionalFromDatabase":409,"DatabaseIdentifier":410,"OptionalFromDatabase_EDIT":411,"DatabaseIdentifier_EDIT":412,"CASCADE":413,"OptionalInDatabase":414,"OptionalPartitionSpec_EDIT":415,"PartitionSpec_EDIT":416,"PartitionSpecList":417,"PartitionSpecList_EDIT":418,"RangePartitionSpec":419,"RangePartitionComparisonOperator":420,"RangePartitionSpec_EDIT":421,"ConfigurationName":422,"PartialBacktickedOrAnyCursor":423,"PartialBacktickedIdentifier":424,"PartialBacktickedOrCursor":425,"PartialBacktickedOrPartialCursor":426,"OptionalParenthesizedColumnList":427,"OptionalParenthesizedColumnList_EDIT":428,"ColumnList":429,"ColumnList_EDIT":430,"ParenthesizedSimpleValueList":431,"SimpleValueList":432,"PartitionExpression":433,"PartitionExpression_EDIT":434,"RegularOrBackTickedSchemaQualifiedName":435,"RegularOrBackTickedSchemaQualifiedName_EDIT":436,"BasicIdentifierChain":437,"BasicIdentifierChain_EDIT":438,"DerivedColumnChain":439,"DerivedColumnChain_EDIT":440,"PartialBacktickedIdentifierOrPartialCursor":441,"OptionalTypeLength":442,"OptionalTypePrecision":443,"OptionalNot":444,"TableSubQuery":445,"ValueExpressionList":446,"BETWEEN_AND":447,"LikeRightPart":448,"CaseRightPart":449,"TableSubQuery_EDIT":450,"ValueExpressionInSecondPart_EDIT":451,"LikeRightPart_EDIT":452,"CaseRightPart_EDIT":453,"EndOrError":454,"ValueExpressionList_EDIT":455,"+":456,"UnsignedLiteral":457,"UnsignedLiteral_EDIT":458,"GeneralLiteral":459,"GeneralLiteral_EDIT":460,"ExactNumericLiteral":461,"ApproximateNumericLiteral":462,"TruthValue":463,"TablePrimaryOrJoinedTable":464,"TablePrimaryOrJoinedTable_EDIT":465,"JoinedTable":466,"JoinedTable_EDIT":467,"TableOrQueryName":468,"DerivedTable":469,"TableOrQueryName_EDIT":470,"DerivedTable_EDIT":471,"OptionalOnColumn":472,"OptionalOnColumn_EDIT":473,"PushQueryState":474,"PopQueryState":475,"SubQuery":476,"SubQuery_EDIT":477,"QueryExpression":478,"QueryExpression_EDIT":479,"QueryExpressionBody":480,"QueryExpressionBody_EDIT":481,"NonJoinQueryExpression":482,"NonJoinQueryExpression_EDIT":483,"NonJoinQueryTerm":484,"NonJoinQueryTerm_EDIT":485,"NonJoinQueryPrimary":486,"NonJoinQueryPrimary_EDIT":487,"SimpleTable":488,"SimpleTable_EDIT":489,"OptionalPartitionBy":490,"OptionalOrderByAndWindow":491,"PartitionBy_EDIT":492,"OptionalOrderByAndWindow_EDIT":493,"PartitionBy":494,"OptionalWindowSpec":495,"WindowSpec_EDIT":496,"WindowSpec":497,"RowsOrRange":498,"PopLexerState":499,"OptionalCurrentOrPreceding":500,"OptionalAndFollowing":501,"UNBOUNDED":502,"OptionalCurrentOrPreceding_EDIT":503,"OptionalAndFollowing_EDIT":504,"PushHdfsLexerState":505,"HdfsPath":506,"HDFS_PATH":507,"HDFS_END_QUOTE":508,"HdfsPath_EDIT":509,"IntegerOrUnbounded":510,"CaseWhenThenList":511,"CaseWhenThenList_EDIT":512,"CaseWhenThenListPartTwo":513,"CaseWhenThenListPartTwo_EDIT":514,"$accept":0,"$end":1},
terminals_: {2:"error",14:"SET",15:"CURSOR",18:"ALTER",26:"TABLE",30:"AS",34:"VIEW",35:"CREATE",41:"COMMENT",45:"SINGLE_QUOTE",46:"DOUBLE_QUOTE",47:"VALUE",58:"ROLE",72:"LIKE",74:"(",76:")",80:",",90:"NOT",91:"NULL",102:"ARRAY",103:"<",104:">",107:"MAP",108:"STRUCT",115:":",120:"PARTITION",121:"BY",124:"RANGE",135:"VALUES",137:"COMPARISON_OPERATOR",145:"DROP",157:"PURGE",165:"INSERT",166:"INTO",177:"WITH",185:"FROM",193:"GROUP",204:"HAVING",217:"CROSS",218:"JOIN",219:"FULL",220:"OUTER",221:"INNER",222:"LEFT",223:"SEMI",224:"RIGHT",225:"ON",229:"LIMIT",231:"VARIABLE_REFERENCE",235:"ORDER",242:"ASC",243:"DESC",244:"SELECT",248:"STREAM",251:"ALL",252:"DISTINCT",258:"*",267:"UNION",269:"WHERE",273:"=",275:".",277:"TRUE",278:"FALSE",279:"TRUNCATE",302:"AVG",303:"MAX",304:"MIN",305:"STDDEV_POP",306:"STDDEV_SAMP",307:"VAR_POP",308:"VAR_SAMP",309:"VARIANCE",310:"COUNT",311:"SUM",312:"ANALYTIC",314:"IF",315:"CAST",326:"OVER",329:"UPDATE",345:"USE",348:"EOF",352:";",354:"SetSpecification_EDIT",356:"OPTION",357:"REGULAR_IDENTIFIER",359:"!",360:"-",361:"[",362:"]",363:"~",364:"AND",365:"ARITHMETIC_OPERATOR",366:"BACKTICK",367:"BETWEEN",368:"BIGINT",369:"BOOLEAN",370:"CASE",371:"CHAR",372:"CURRENT",373:"DATABASE",374:"DECIMAL",375:"DOUBLE",376:"ELSE",377:"END",378:"EXISTS",379:"FLOAT",380:"FOLLOWING",381:"HDFS_START_QUOTE",382:"IN",383:"INT",384:"IS",385:"OR",386:"PRECEDING",387:"REGEXP",388:"RLIKE",389:"ROW",390:"ROWS",391:"SCHEMA",392:"SMALLINT",393:"STRING",394:"THEN",395:"TIMESTAMP",396:"TINYINT",397:"UNSIGNED_INTEGER",398:"UNSIGNED_INTEGER_E",399:"VARCHAR",400:"WHEN",401:"PARTIAL_CURSOR",405:"PARTIAL_VALUE",413:"CASCADE",447:"BETWEEN_AND",456:"+",502:"UNBOUNDED",507:"HDFS_PATH",508:"HDFS_END_QUOTE"},
productions_: [0,[3,1],[3,1],[3,1],[3,1],[3,1],[3,1],[10,1],[10,1],[10,1],[10,2],[10,1],[10,1],[11,2],[11,1],[11,1],[4,1],[4,1],[21,2],[19,1],[19,2],[19,2],[19,3],[23,3],[25,3],[25,3],[22,3],[20,1],[20,2],[20,3],[20,3],[20,3],[29,3],[32,3],[32,3],[12,2],[12,1],[12,1],[12,1],[39,0],[39,1],[40,2],[43,1],[44,2],[44,2],[44,3],[44,3],[5,1],[5,1],[5,1],[5,1],[48,3],[48,5],[36,4],[36,3],[36,5],[36,4],[36,6],[55,1],[57,1],[49,3],[50,4],[37,4],[37,4],[37,3],[59,3],[60,3],[60,3],[60,3],[60,3],[61,2],[64,2],[64,2],[68,0],[68,1],[68,2],[69,1],[69,2],[69,2],[71,3],[73,3],[75,1],[75,3],[77,1],[77,3],[77,3],[77,5],[77,2],[77,4],[77,4],[77,6],[79,3],[81,3],[81,3],[81,3],[84,0],[84,1],[87,1],[87,2],[86,1],[86,2],[86,2],[86,3],[88,2],[88,1],[88,1],[89,2],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[85,1],[85,1],[85,1],[93,4],[96,3],[99,4],[99,4],[94,6],[97,3],[100,6],[100,4],[100,6],[100,5],[95,4],[98,3],[101,4],[109,1],[109,3],[110,1],[110,2],[110,3],[110,3],[110,5],[111,4],[112,5],[112,4],[112,4],[112,4],[112,3],[112,3],[116,1],[116,3],[117,1],[117,2],[117,3],[117,3],[117,5],[118,2],[118,2],[118,1],[118,1],[106,1],[106,1],[62,0],[62,1],[119,3],[65,2],[65,3],[65,3],[122,3],[123,2],[123,2],[123,3],[123,3],[123,3],[126,3],[128,3],[128,3],[129,1],[129,3],[130,1],[130,3],[130,5],[130,3],[130,5],[131,6],[131,4],[131,4],[132,2],[132,2],[132,3],[132,4],[132,4],[132,5],[132,6],[132,6],[132,3],[132,4],[132,4],[134,1],[134,1],[63,0],[63,3],[66,3],[66,3],[138,0],[51,8],[38,4],[38,9],[38,3],[38,6],[38,7],[38,8],[38,8],[38,8],[139,0],[139,1],[141,3],[140,3],[142,2],[142,4],[143,3],[143,5],[143,5],[143,7],[13,2],[13,1],[13,1],[13,1],[6,1],[6,1],[6,1],[6,1],[149,5],[146,3],[146,3],[146,4],[146,5],[146,5],[146,6],[150,3],[151,5],[147,3],[147,4],[147,5],[147,5],[147,6],[156,0],[156,1],[152,4],[148,4],[148,5],[148,3],[148,4],[148,4],[158,1],[158,1],[159,1],[162,1],[162,1],[161,6],[163,2],[163,4],[163,4],[163,5],[163,6],[168,1],[168,3],[169,3],[167,0],[167,1],[31,3],[31,5],[31,2],[33,4],[33,3],[33,3],[33,1],[33,4],[33,3],[33,2],[33,2],[171,2],[176,2],[178,1],[178,3],[179,1],[179,3],[179,3],[179,5],[180,5],[181,2],[181,5],[181,5],[184,2],[187,2],[187,2],[186,1],[186,3],[188,1],[188,3],[188,3],[188,5],[188,3],[191,0],[191,1],[192,3],[195,3],[195,3],[195,2],[197,0],[197,1],[197,3],[197,3],[198,1],[198,3],[198,3],[198,5],[198,3],[199,1],[199,1],[194,1],[194,3],[196,1],[196,2],[196,3],[196,3],[196,3],[196,4],[196,5],[201,1],[201,2],[201,1],[202,0],[202,1],[203,2],[205,2],[205,2],[206,0],[206,1],[206,1],[207,3],[207,4],[208,1],[208,2],[212,3],[212,1],[212,3],[212,3],[212,3],[216,1],[216,2],[216,2],[216,3],[209,2],[209,2],[209,3],[209,2],[209,1],[209,3],[209,2],[209,3],[209,3],[209,2],[209,3],[209,2],[209,3],[209,3],[209,2],[213,2],[213,3],[213,3],[213,2],[213,3],[213,3],[213,3],[213,3],[213,2],[213,3],[213,3],[213,3],[213,3],[213,2],[211,0],[211,2],[226,1],[226,3],[215,2],[215,2],[227,0],[227,1],[228,2],[228,4],[228,2],[228,4],[232,2],[233,0],[233,1],[234,3],[237,3],[237,2],[236,1],[236,3],[238,1],[238,2],[238,3],[238,4],[238,5],[239,2],[240,2],[240,2],[241,0],[241,1],[241,1],[172,3],[172,4],[172,4],[174,3],[174,3],[174,4],[174,4],[174,4],[174,5],[174,6],[174,4],[174,4],[245,0],[245,1],[245,1],[247,2],[250,2],[250,4],[250,3],[246,1],[246,3],[249,1],[249,2],[249,3],[249,3],[249,3],[249,4],[249,3],[249,3],[249,4],[249,4],[249,4],[249,5],[249,5],[255,2],[255,1],[256,2],[256,3],[256,2],[253,5],[254,5],[254,5],[254,5],[254,5],[254,5],[254,6],[254,6],[254,6],[254,6],[254,6],[173,0],[173,1],[175,1],[263,1],[263,2],[264,1],[264,2],[264,2],[264,3],[265,4],[266,3],[266,4],[266,4],[260,0],[260,1],[262,2],[261,2],[261,2],[270,1],[271,1],[7,2],[7,4],[272,1],[272,3],[274,1],[274,1],[274,2],[274,1],[274,1],[274,1],[274,1],[8,4],[16,2],[16,4],[16,3],[16,4],[16,5],[16,5],[16,5],[281,2],[281,2],[281,1],[287,1],[287,2],[287,1],[287,2],[287,2],[287,2],[287,1],[282,1],[282,1],[282,1],[288,1],[288,1],[288,1],[293,4],[293,5],[296,5],[296,6],[296,5],[299,1],[299,1],[299,1],[299,1],[299,1],[299,1],[299,1],[299,1],[294,4],[294,3],[294,5],[297,5],[297,6],[297,5],[295,5],[295,3],[298,5],[298,6],[298,5],[284,3],[284,4],[290,4],[290,5],[290,4],[313,1],[313,1],[313,1],[313,1],[286,6],[286,3],[292,6],[292,5],[292,4],[292,6],[292,5],[292,4],[292,6],[292,5],[292,6],[292,5],[316,2],[316,2],[316,1],[316,1],[316,1],[316,1],[320,2],[320,2],[320,1],[320,1],[320,1],[324,2],[324,2],[325,2],[325,2],[318,2],[318,3],[321,3],[321,4],[321,3],[300,1],[300,3],[301,1],[301,3],[301,3],[301,5],[301,3],[301,5],[301,4],[301,3],[301,2],[301,2],[301,4],[283,0],[283,1],[289,1],[285,2],[285,2],[291,2],[160,6],[164,6],[164,6],[164,6],[164,6],[164,7],[164,3],[164,2],[164,2],[164,2],[330,1],[333,1],[336,1],[337,1],[331,1],[331,3],[334,1],[334,3],[334,3],[334,5],[340,3],[341,3],[341,2],[341,1],[342,1],[343,1],[344,1],[332,0],[332,2],[335,2],[335,2],[9,2],[17,2],[346,3],[349,3],[349,3],[268,0],[347,0],[347,1],[347,4],[350,1],[350,4],[350,4],[350,7],[351,1],[351,1],[351,1],[353,1],[353,2],[353,1],[353,1],[353,1],[353,1],[355,1],[355,1],[355,1],[54,1],[54,1],[54,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[358,1],[113,1],[113,2],[105,1],[105,1],[402,1],[402,1],[52,1],[52,1],[403,3],[403,2],[404,2],[406,3],[406,2],[407,2],[42,1],[42,1],[408,1],[408,1],[409,0],[409,2],[411,2],[154,0],[154,1],[153,0],[153,2],[155,2],[53,0],[53,3],[56,2],[56,3],[414,0],[414,2],[414,2],[280,0],[280,1],[415,1],[24,4],[416,4],[419,5],[421,2],[421,3],[421,4],[421,5],[421,5],[421,5],[420,1],[420,1],[420,1],[420,1],[422,1],[422,1],[423,1],[423,1],[425,1],[425,1],[426,1],[426,1],[424,2],[78,1],[78,1],[427,0],[427,1],[428,1],[125,3],[127,3],[127,3],[429,1],[429,3],[430,3],[430,5],[431,3],[432,1],[432,3],[27,1],[27,3],[28,1],[28,3],[28,3],[67,1],[67,3],[70,1],[70,3],[70,3],[410,1],[412,1],[417,1],[417,3],[418,1],[418,3],[418,3],[418,5],[433,3],[434,3],[434,3],[434,3],[434,1],[114,1],[114,3],[114,2],[435,1],[435,3],[436,1],[436,3],[338,1],[338,2],[339,1],[339,2],[144,1],[144,3],[200,1],[437,1],[437,3],[438,3],[438,5],[439,1],[439,3],[440,1],[440,3],[440,5],[440,3],[82,1],[441,1],[441,1],[92,1],[92,1],[92,2],[92,2],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,2],[442,0],[442,3],[443,0],[443,3],[443,5],[133,1],[133,2],[133,2],[133,2],[133,2],[133,4],[133,4],[133,4],[133,6],[133,2],[133,3],[133,3],[133,3],[133,3],[133,3],[133,6],[133,6],[133,5],[133,5],[133,6],[133,5],[133,3],[133,3],[133,3],[133,3],[133,3],[133,2],[133,3],[133,2],[133,3],[136,1],[136,3],[136,2],[136,2],[136,2],[136,2],[136,2],[136,2],[136,2],[136,2],[136,3],[136,4],[136,5],[136,4],[136,4],[136,4],[136,6],[136,6],[136,2],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,4],[136,3],[136,6],[136,6],[136,5],[136,5],[136,6],[136,6],[136,6],[136,6],[136,5],[136,4],[136,5],[136,5],[136,5],[136,5],[136,4],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,2],[136,3],[136,2],[136,3],[136,2],[136,3],[136,2],[136,3],[136,3],[136,4],[136,3],[136,3],[136,3],[446,1],[446,3],[455,1],[455,3],[455,3],[455,5],[455,3],[455,5],[455,4],[455,3],[455,2],[455,2],[455,4],[170,1],[170,3],[317,1],[317,3],[323,1],[276,1],[276,2],[276,2],[319,1],[322,1],[457,1],[457,1],[458,1],[230,1],[230,1],[461,1],[461,2],[461,3],[461,2],[462,2],[462,3],[462,4],[459,1],[459,1],[459,1],[460,1],[460,1],[463,1],[463,1],[444,0],[444,1],[189,1],[190,1],[464,1],[464,1],[465,1],[465,1],[466,2],[467,2],[467,2],[210,2],[210,2],[214,2],[214,2],[214,2],[468,1],[470,1],[469,1],[471,1],[472,0],[472,2],[473,2],[473,2],[474,0],[475,0],[445,3],[445,4],[450,3],[450,3],[182,2],[183,3],[476,1],[477,1],[478,1],[479,1],[480,1],[481,1],[482,1],[483,1],[484,1],[485,1],[486,1],[487,1],[488,1],[489,1],[257,0],[257,1],[257,1],[257,2],[257,2],[259,1],[259,1],[259,2],[259,2],[259,2],[327,4],[328,4],[328,4],[328,5],[328,7],[490,0],[490,1],[494,3],[492,2],[492,3],[492,3],[491,0],[491,2],[493,1],[493,3],[493,2],[495,0],[495,1],[497,5],[497,5],[496,2],[496,6],[496,5],[496,5],[496,5],[496,4],[499,0],[505,0],[506,3],[509,5],[509,4],[509,3],[509,3],[509,2],[498,1],[498,1],[500,0],[500,2],[500,2],[503,2],[503,2],[501,0],[501,3],[501,3],[504,2],[504,3],[504,3],[510,1],[510,1],[451,3],[451,3],[451,3],[448,2],[448,2],[448,2],[452,2],[452,2],[452,2],[452,2],[452,2],[452,2],[449,2],[449,4],[453,2],[453,4],[453,4],[453,3],[453,4],[453,3],[453,4],[453,4],[453,3],[453,4],[453,3],[454,1],[454,1],[511,1],[511,2],[512,1],[512,2],[512,3],[512,3],[512,2],[513,4],[514,2],[514,3],[514,4],[514,4],[514,3],[514,3],[514,4],[514,2],[514,3],[514,2],[514,3],[514,3],[514,4],[514,3],[514,4],[514,4],[514,5],[514,4],[514,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 10:

     parser.suggestSetOptions();
   
break;
case 13:

     parser.suggestKeywords(['TABLE', 'VIEW']);
   
break;
case 23: case 32: case 243: case 247: case 489: case 609:

     parser.addTablePrimary($$[$0]);
   
break;
case 24: case 238:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyTables = true;
     }
   
break;
case 25:

     parser.suggestTables({ onlyTables: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 28: case 285:

     parser.suggestKeywords(['AS']);
   
break;
case 30: case 197: case 206: case 286: case 645: case 1092:

     parser.suggestKeywords(['SELECT']);
   
break;
case 33: case 248:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyViews = true;
     }
   
break;
case 34:

     parser.suggestTables({ onlyViews: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 35: case 219:

     parser.suggestKeywords(['DATABASE', 'ROLE', 'SCHEMA', 'TABLE', 'VIEW']);
   
break;
case 52:

     parser.addNewDatabaseLocation(_$[$0-1], [{ name: $$[$0-1] }]);
   
break;
case 53: case 63:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 55:

     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
     parser.addNewDatabaseLocation(_$[$0], [{ name: $$[$0] }]);
   
break;
case 56:

     parser.addNewDatabaseLocation(_$[$0], [{ name: $$[$0] }]);
   
break;
case 57:

     parser.addNewDatabaseLocation(_$[$0-2], [{ name: $$[$0-2] }]);
   
break;
case 58:

     if (!$$[$0]) {
       parser.suggestKeywords(['COMMENT']);
     }
   
break;
case 69:

     var keywords = [];
     if (!$$[$0-2] && !$$[$0-1]) {
       keywords.push({ value: 'LIKE', weight: 1 });
     } else {
       if (!$$[$0-1]) {
         keywords.push({ value: 'PARTITIONED BY', weight: 12 });
       }
       keywords.push({ value: 'AS', weight: 1 });
     }

     if (keywords.length > 0) {
       parser.suggestKeywords(keywords);
     }
   
break;
case 70:

     parser.addNewTableLocation(_$[$0-1], $$[$0-1], $$[$0]);
     this.$ = $$[$0];
   
break;
case 75:
this.$ = [];
break;
case 77: case 606: case 626: case 839:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 79: case 215: case 217: case 267: case 439: case 574: case 577: case 772: case 775: case 861: case 914: case 1089:
this.$ = $$[$0-1];
break;
case 81: case 278:
this.$ = [$$[$0]];
break;
case 82:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 87: case 89:

     parser.checkForKeywords($$[$0-1]);
   
break;
case 88: case 90:

     parser.checkForKeywords($$[$0-3]);
   
break;
case 91:

     this.$ = $$[$0-2];
     this.$.type = $$[$0-1];
     var keywords = [];
     if (!$$[$0]['comment']) {
       keywords.push('COMMENT');
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 92: case 119: case 125: case 126: case 139: case 142: case 151: case 153:

     parser.suggestKeywords(parser.getColumnDataTypeKeywords());
   
break;
case 95:
this.$ = {};
break;
case 97:

     this.$ = {};
     this.$[$$[$0]] = true;
   
break;
case 98:

     $$[$0-1][$$[$0]] = true;
   
break;
case 103: case 104:
this.$ = 'null';
break;
case 105:
this.$ = 'comment';
break;
case 106:

     parser.suggestKeywords(['NULL']);
   
break;
case 124:

     parser.suggestKeywords(parser.getTypeKeywords());
   
break;
case 138: case 141:

     parser.suggestKeywords(['COMMENT']);
   
break;
case 160: case 1127:

     parser.suggestKeywords(['BY']);
   
break;
case 161:

     parser.suggestKeywords(['RANGE']);
   
break;
case 170: case 175: case 176:

     parser.suggestKeywords(['PARTITION']);
   
break;
case 182:

     parser.suggestKeywords(['VALUE', 'VALUES']);
   
break;
case 183:

     if ($$[$0].endsWithLessThanOrEqual) {
      parser.suggestKeywords(['VALUES']);
     }
   
break;
case 184: case 187: case 190:

     parser.suggestKeywords(['<', '<=']);
   
break;
case 185: case 804: case 807:

     parser.suggestKeywords(['VALUES']);
   
break;
case 188: case 191:

     parser.suggestFunctions();
   
break;
case 199:

     parser.commitLocations();
   
break;
case 201:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
     parser.suggestDatabases({ appendDot: true });
   
break;
case 202:

     if (!$$[$0-6]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 205:

     var keywords = [{value: 'AS', weight: 1 }];
     if (!$$[$0-1]) {
       keywords.push({ value: 'COMMENT', weight: 3 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 212:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['COMMENT']);
     }
   
break;
case 216: case 218:
this.$ = $$[$0-3];
break;
case 230:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestDatabases();
   
break;
case 231:

     parser.suggestKeywords(['CASCADE']);
   
break;
case 233:

     if (!$$[$0-3]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 235: case 494:

     parser.addTablePrimary($$[$0-1]);
   
break;
case 237:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestTables({ onlyTables: true });
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 240:

     parser.addTablePrimary($$[$0-2]);
     if (!$$[$0-1]) {
       parser.suggestKeywords(['PURGE']);
     }
   
break;
case 244:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestTables({ onlyViews: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 245:

     parser.addTablePrimary($$[$0]);
     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 254:

     $$[$0-2].owner = 'insert';
     parser.addTablePrimary($$[$0-2]);
   
break;
case 255:

     parser.suggestKeywords(['INTO']);
   
break;
case 256:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['TABLE']);
     }
     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 258:

     $$[$0-1].owner = 'insert';
     parser.addTablePrimary($$[$0-1]);
     parser.suggestKeywords(['VALUES']);
   
break;
case 266: case 441:
this.$ = $$[$0-2];
break;
case 268:

     parser.addCommonTableExpressions($$[$0-3]);
   
break;
case 269: case 270: case 281:

     parser.addCommonTableExpressions($$[$0-2]);
   
break;
case 276: case 292: case 316: case 392: case 396: case 436: case 446: case 473: case 625: case 1014: case 1016: case 1071: case 1126: case 1201:
this.$ = $$[$0];
break;
case 279:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 283:

     parser.addCommonTableExpressions($$[$0-4]);
   
break;
case 284:

     parser.addCteAliasLocation(_$[$0-4], $$[$0-4]);
     $$[$0-1].alias = $$[$0-4];
     this.$ = $$[$0-1];
   
break;
case 288:

     this.$ = { tableReferenceList : $$[$0] }
   
break;
case 289: case 297:

       parser.suggestTables();
       parser.suggestDatabases({ appendDot: true });
   
break;
case 300:

     this.$ = { valueExpression: $$[$0] };
   
break;
case 301: case 403:

     parser.suggestSelectListAliases();
   
break;
case 302:

     parser.valueExpressionSuggest();
     parser.suggestSelectListAliases();
     parser.suggestGroupBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 303:

     parser.suggestKeywords(['BY']);
     parser.suggestGroupBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 313: case 620: case 829: case 832: case 833: case 858: case 859: case 880: case 883:

     parser.suggestColumns();
   
break;
case 318: case 319: case 325: case 326: case 857: case 1085: case 1128:

     parser.valueExpressionSuggest();
   
break;
case 330:

     parser.valueExpressionSuggest();
     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 331:

     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 335:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-2];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
        parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 336:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-3];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
       parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 337:
this.$ = { joinType: $$[$0] };
break;
case 338:
this.$ = { joinType: $$[$0-1] };
break;
case 339:

     if ($$[$0-2].suggestKeywords) {
       parser.suggestKeywords($$[$0-2].suggestKeywords);
     }
   
break;
case 340:

     if ($$[$0].suggestKeywords) {
       parser.suggestKeywords($$[$0].suggestKeywords);
     }
   
break;
case 343:

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         parser.suggestJoins({
           prependJoin: false,
           joinType: $$[$0-2],
           tables: tables
         })
       }
     }
     parser.suggestTables();
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 348:
this.$ = 'CROSS JOIN';
break;
case 349:
this.$ = 'FULL JOIN';
break;
case 350:
this.$ = 'FULL OUTER JOIN';
break;
case 351:
this.$ = 'INNER JOIN';
break;
case 352:
this.$ = 'JOIN';
break;
case 353:
this.$ = 'LEFT INNER JOIN';
break;
case 354:
this.$ = 'LEFT JOIN';
break;
case 355:
this.$ = 'LEFT OUTER JOIN';
break;
case 356:
this.$ = 'LEFT SEMI JOIN';
break;
case 357:
this.$ = 'OUTER JOIN';
break;
case 358: case 360:
this.$ = 'RIGHT OUTER JOIN';
break;
case 359:
this.$ = 'RIGHT JOIN';
break;
case 361:
this.$ = 'RIGHT SEMI JOIN';
break;
case 362:
this.$ = 'SEMI JOIN';
break;
case 363: case 365: case 366: case 368: case 369: case 370: case 371: case 373: case 374: case 375: case 376:
this.$ = { suggestKeywords: ['JOIN'] };
break;
case 364: case 367: case 372:
this.$ = { suggestKeywords: ['OUTER'] };
break;
case 377:
this.$ = { noJoinCondition: true, suggestKeywords: ['ON'] };
break;
case 378:
this.$ = { valueExpression: $$[$0] };
break;
case 382:

     parser.valueExpressionSuggest();
     parser.suggestJoinConditions({ prependOn: false });
   
break;
case 389:

     parser.suggestKeywords([{ value: '10', weight: 10000 }, { value: '100', weight: 10000 }, { value: '1000', weight: 10000 }, { value: '5000', weight: 10000 }, { value: '10000', weight: 10000 }])
   
break;
case 393:

     if ($$[$0].emptyOrderBy) {
       parser.suggestOrderBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 394:

     parser.suggestKeywords(['BY']);
     parser.suggestOrderBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 398:

     this.$ = { emptyOrderBy: false }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 399: case 400: case 401:
this.$ = { emptyOrderBy: false };
break;
case 402:
this.$ = parser.mergeSuggestKeywords($$[$0]);
break;
case 404:

     this.$ = { emptyOrderBy: true }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 405:
this.$ = { suggestKeywords: ['ASC', 'DESC'] };;
break;
case 408:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     this.$ = { selectList: $$[$0] };
   
break;
case 409:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     this.$ = { selectList: $$[$0-1], tableExpression: $$[$0] }
   
break;
case 411:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     if ($$[$0].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-1]) {
         keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
       }
       parser.suggestKeywords(keywords);
     } else {
       parser.checkForSelectListKeywords($$[$0]);
     }
     if ($$[$0].suggestFunctions) {
       parser.suggestFunctions();
     }
     if ($$[$0].suggestColumns) {
       parser.suggestColumns({ identifierChain: [], source: 'select' });
     }
     if ($$[$0].suggestTables) {
       parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     }
     if ($$[$0].suggestDatabases) {
       parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
     }
     if ($$[$0].suggestAggregateFunctions && (!$$[$0-1] || $$[$0-1] === 'ALL')) {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
   
break;
case 412:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-1] || $$[$0-1] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-1]) {
       keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 413:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
   
break;
case 414:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.selectListNoTableSuggest($$[$0-1], $$[$0-2]);
     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'select';
     }
   
break;
case 415:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2] || $$[$0-2] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-2]) {
       keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 416:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]), _$[$0-2]);
     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 417:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]), _$[$0-3]);
     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 418:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.checkForSelectListKeywords($$[$0-1]);
     var keywords = ['FROM'];
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.suggestTables({ prependFrom: true });
     parser.suggestDatabases({ prependFrom: true, appendDot: true });
   
break;
case 419:

   if (!$$[$0-1]) {
     parser.suggestKeywords(['ALL', 'DISTINCT']);
   }
 
break;
case 423: case 424:

     parser.addClauseLocation('whereClause', _$[$0-1], $$[$0].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0].limitClausePreceding || _$[$0-1], $$[$0].limitClauseLocation);
   
break;
case 425:

     var keywords = [];

     parser.addClauseLocation('whereClause', _$[$0-3], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-2].limitClausePreceding || _$[$0-3], $$[$0-2].limitClauseLocation);

     if ($$[$0-3]) {
       if (typeof $$[$0-3].tableReferenceList.hasJoinCondition !== 'undefined' && !$$[$0-3].tableReferenceList.hasJoinCondition) {
         keywords.push({ value: 'ON', weight: 3 });
       }
       if ($$[$0-3].suggestKeywords) {
         keywords = parser.createWeightedKeywords($$[$0-3].suggestKeywords, 3);
       }
       if ($$[$0-3].tableReferenceList.suggestJoinConditions) {
         parser.suggestJoinConditions($$[$0-3].tableReferenceList.suggestJoinConditions);
       }
       if ($$[$0-3].tableReferenceList.suggestJoins) {
         parser.suggestJoins($$[$0-3].tableReferenceList.suggestJoins);
       }
       if ($$[$0-3].tableReferenceList.suggestKeywords) {
         keywords = keywords.concat(parser.createWeightedKeywords($$[$0-3].tableReferenceList.suggestKeywords, 3));
       }

       // Lower the weights for 'TABLESAMPLE'
       keywords.forEach(function (keyword) {
         if (keyword.value === 'TABLESAMPLE') {
           keyword.weight = 1.1;
         }
       });

       if ($$[$0-3].tableReferenceList.types) {
         var veKeywords = parser.getValueExpressionKeywords($$[$0-3].tableReferenceList);
         keywords = keywords.concat(veKeywords.suggestKeywords);
         if (veKeywords.suggestColRefKeywords) {
           parser.suggestColRefKeywords(veKeywords.suggestColRefKeywords);
           parser.addColRefIfExists($$[$0-3].tableReferenceList);
         }
       }
     }

     if ($$[$0-1].empty && $$[$0] && $$[$0].joinType.toUpperCase() === 'JOIN') {
       keywords = keywords.concat(['FULL', 'FULL OUTER', 'INNER', 'LEFT', 'LEFT OUTER', 'RIGHT', 'RIGHT OUTER']);
       parser.suggestKeywords(keywords);
       return;
     }

     if ($$[$0-1].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].suggestFilters) {
       parser.suggestFilters($$[$0-1].suggestFilters);
     }
     if ($$[$0-1].suggestGroupBys) {
       parser.suggestGroupBys($$[$0-1].suggestGroupBys);
     }
     if ($$[$0-1].suggestOrderBys) {
       parser.suggestOrderBys($$[$0-1].suggestOrderBys);
     }

     if ($$[$0-1].empty) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }

     keywords = keywords.concat([
       { value: 'FULL JOIN', weight: 1 },
       { value: 'FULL OUTER JOIN', weight: 1 },
       { value: 'INNER JOIN', weight: 1 },
       { value: 'JOIN', weight: 1 },
       { value: 'LEFT JOIN', weight: 1 },
       { value: 'LEFT OUTER JOIN', weight: 1 },
       { value: 'RIGHT JOIN', weight: 1 },
       { value: 'RIGHT OUTER JOIN', weight: 1 }
     ]);
     parser.suggestKeywords(keywords);
  
break;
case 426:

     // A couple of things are going on here:
     // - If there are no SelectConditions (WHERE, GROUP BY, etc.) we should suggest complete join options
     // - If there's an OptionalJoin at the end, i.e. 'SELECT * FROM foo | JOIN ...' we should suggest
     //   different join types
     // - The FromClause could end with a valueExpression, in which case we should suggest keywords like '='
     //   or 'AND' based on type

     if (!$$[$0-1]) {
       parser.addClauseLocation('whereClause', _$[$0-2]);
       parser.addClauseLocation('limitClause', _$[$0-2]);
       return;
     }
     parser.addClauseLocation('whereClause', _$[$0-2], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-1].limitClausePreceding || _$[$0-2], $$[$0-1].limitClauseLocation);
     var keywords = [];

     if ($$[$0-1].suggestColRefKeywords) {
       parser.suggestColRefKeywords($$[$0-1].suggestColRefKeywords);
       parser.addColRefIfExists($$[$0-1]);
     }

     if ($$[$0-1].suggestKeywords && $$[$0-1].suggestKeywords.length) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].cursorAtEnd) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 427:
this.$ = [ $$[$0] ];
break;
case 428:

     $$[$0-2].push($$[$0]);
   
break;
case 430: case 431:

     this.$ = { cursorAtStart : true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 433:

     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 434:

     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 435:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestTables: true, suggestDatabases: true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 437: case 438: case 440:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true,  };
   
break;
case 442:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
       this.$ = { valueExpression: $$[$0-1], alias: $$[$0].alias };
       if (!parser.yy.selectListAliases) {
         parser.yy.selectListAliases = [];
       }
       parser.yy.selectListAliases.push($$[$0-1].function && $$[$0-1].types && $$[$0-1].types.length && $$[$0-1].types[0] === 'UDFREF' ? { name: $$[$0].alias, udfRef: $$[$0-1].function, types: $$[$0-1].types } : { name: $$[$0].alias, types: $$[$0-1].types || ['T'] });
     } else {
       this.$ = { valueExpression: $$[$0-1] }
     }
   
break;
case 443:

     parser.addAsteriskLocation(_$[$0], [{ asterisk: true }]);
     this.$ = { asterisk: true }
   
break;
case 444:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
     }
   
break;
case 445:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.addColumnAliasLocation(_$[$0], $$[$0], _$[$0-2]);
     this.$ = { suggestAggregateFunctions: true };
   
break;
case 447:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'WHERE', weight: 7 }, { value: 'GROUP BY', weight: 6 }, { value: 'HAVING', weight: 5 }, { value: 'ORDER BY', weight: 4 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true, true]);

     if (keywords.length > 0) {
       this.$ = { suggestKeywords: keywords, empty: !$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0] };
     } else {
       this.$ = {};
     }

     this.$.whereClauseLocation = $$[$0-4] ? _$[$0-4] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;

     if (!$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestFilters = { prefix: 'WHERE', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestGroupBys = { prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-1] && !$$[$0]) {
       this.$.suggestOrderBys = { prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
   
break;
case 448:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'where';
     }
   
break;
case 449:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'group by';
     }
   
break;
case 451:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'order by';
     }
   
break;
case 453:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'GROUP BY', weight: 8 }, { value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true]);
     if ($$[$0-5].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-5].suggestKeywords, 1));
     }
     this.$ = parser.getValueExpressionKeywords($$[$0-5], keywords);
     this.$.cursorAtEnd = !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if ($$[$0-5].columnReference) {
       this.$.columnReference = $$[$0-5].columnReference;
     }
     if (!$$[$0-3]) {
       parser.suggestGroupBys({ prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 454:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true]);
     if ($$[$0-4].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-4].suggestKeywords, 8));
     }
     if ($$[$0-4].valueExpression) {
       this.$ = parser.getValueExpressionKeywords($$[$0-4].valueExpression, keywords);
       if ($$[$0-4].valueExpression.columnReference) {
         this.$.columnReference = $$[$0-4].valueExpression.columnReference;
       }
     } else {
       this.$ = { suggestKeywords: keywords };
     }
     this.$.cursorAtEnd = !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 455:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-1], $$[$0]],
       [{ value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true]);
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0-1] && !$$[$0] };
     if (!$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-3], _$[$0-3]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 456:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0]],
       [{ value: 'LIMIT', weight: 3 }],
       [true]);
     if ($$[$0-2].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-2].suggestKeywords, 4));
     }
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0] };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 457:

     this.$ = { suggestKeywords: [], cursorAtEnd: true };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = _$[$0-1];
   
break;
case 468:

     parser.suggestKeywords(['ALL', 'DISTINCT', 'SELECT']);
   
break;
case 469:

     parser.suggestKeywords(['ALL', 'DISTINCT']);
   
break;
case 474:

     if ($$[$0].suggestFilters) {
       parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 475:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS', 'NOT EXISTS']);
     parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 490:

     parser.suggestKeywords(['TABLE']);
   
break;
case 491:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 495:

     parser.addTablePrimary($$[$0-1]);
     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 497:

     if (!$$[$0]) {
       $$[$0-1].suggestKeywords = ['OVER'];
     }
   
break;
case 504:

     parser.suggestKeywords(['OVER']);
   
break;
case 513:

     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 514: case 532:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 515:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       if ($$[$0-4].toLowerCase() === 'group_concat') {
         keywords.push('ALL');
       } else {
         keywords.push('DISTINCT');
       }
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 516: case 530:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 517:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords(true);
       if (!$$[$0-2]) {
         if ($$[$0-4].toLowerCase() === 'group_concat') {
           keywords.push('ALL');
         } else {
           keywords.push('DISTINCT');
         }
       }
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
       parser.suggestKeywords(keywords);
     }
     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], $$[$0-1].activePosition);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 526:

     parser.addFunctionArgumentLocations($$[$0-3], [{
       expression: { text: $$[$0-1] },
       location: _$[$0-1]
     }]);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] }
   
break;
case 527: case 533:

     this.$ = { function: $$[$0-2], types: ['UDFREF'] }
   
break;
case 528:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] }
   
break;
case 529:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 531:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-2]) {
         keywords.push('DISTINCT');
       }
       parser.suggestKeywords(keywords);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 534:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 535:

     parser.suggestValueExpressionKeywords($$[$0-2]);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 536:

     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 537:

    this.$ = { function: $$[$0-2], types: ['UDFREF'] }
  
break;
case 538:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     this.$ = {
       function: $$[$0-3],
       expression: $$[$0-1].expressions[$$[$0-1].expressions.length - 1].expression,
       types: ['UDFREF']
     }
   
break;
case 539:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-3], 1);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 540:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-2].expressions);
     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 541:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     parser.applyArgumentTypesToSuggestions($$[$0-3], $$[$0-1].activePosition);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 546:

     var expression = $$[$0-3];
     parser.extractExpressionText(expression, $$[$0-3], $$[$0-2], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-5], [{
       expression: expression,
       location: {
         first_line: _$[$0-3].first_line,
         last_line: _$[$0-1].last_line,
         first_column: _$[$0-3].first_column,
         last_column: _$[$0-1].last_column
       }
     }]);
     this.$ = { types: [ $$[$0-1].toUpperCase() ] }
   
break;
case 547: case 552: case 553: case 1020:
this.$ = { types: [ 'T' ] };
break;
case 548:

     parser.valueExpressionSuggest();
     this.$ = { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 549: case 550:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ] };
   
break;
case 551:
this.$ = { types: [ $$[$0-1].toUpperCase() ] };
break;
case 554:

     parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'AS', weight: 2 }]);
     this.$ =  { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 555:

     parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'AS', weight: 2 }]);
     this.$ = { types: [ 'T' ] };
   
break;
case 556: case 557:

     parser.suggestKeywords(parser.getTypeKeywords());
     this.$ = { types: [ 'T' ] };
   
break;
case 558:

     // We need to handle arbitrary UDFs here instead of inside UserDefinedFunction or there will be a conflict
     // with columnReference for functions like: db.udf(foo)
     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     if ($$[$0-1].lastLoc && $$[$0-1].lastLoc.location) {
       $$[$0-1].lastLoc.type = 'function';
       $$[$0-1].lastLoc.function = fn;
       $$[$0-1].lastLoc.location = {
         first_line: $$[$0-1].lastLoc.location.first_line,
         last_line: $$[$0-1].lastLoc.location.last_line,
         first_column: $$[$0-1].lastLoc.location.first_column,
         last_column: $$[$0-1].lastLoc.location.last_column - 1
       }
       if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
          $$[$0-1].firstLoc.type = 'database';
       } else {
         delete $$[$0-1].lastLoc.identifierChain;
       }
     }
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: fn, expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: fn, types: ['UDFREF'] }
     }
   
break;
case 559:

    parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
    if ($$[$0].expressions && $$[$0].expressions.length) {
      this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
    } else {
      this.$ = { function: $$[$0-1], types: ['UDFREF'] }
    }
  
break;
case 562:
this.$ = { types: ['COLREF'], columnReference: $$[$0].chain };
break;
case 563:
this.$ = { types: [ 'NULL' ], text: $$[$0] };
break;
case 564:

     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     $$[$0-1].lastLoc.type = 'function';
     $$[$0-1].lastLoc.function = fn;
     $$[$0-1].lastLoc.location = {
       first_line: $$[$0-1].lastLoc.location.first_line,
       last_line: $$[$0-1].lastLoc.location.last_line,
       first_column: $$[$0-1].lastLoc.location.first_column,
       last_column: $$[$0-1].lastLoc.location.last_column - 1
     }
     if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
        $$[$0-1].firstLoc.type = 'database';
     } else {
       delete $$[$0-1].lastLoc.identifierChain;
     }
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions(fn, $$[$0].activePosition);
     }
     this.$ = { function: fn, types: ['UDFREF'] };
   
break;
case 565: case 571: case 572:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions($$[$0-1], $$[$0].activePosition);
     }
     this.$ = { function: $$[$0-1], types: ['UDFREF'] };
   
break;
case 568:

     if ($$[$0].suggestKeywords) {
       this.$ = { types: ['COLREF'], columnReference: $$[$0], suggestKeywords: $$[$0].suggestKeywords };
     } else {
       this.$ = { types: ['COLREF'], columnReference: $$[$0] };
     }
   
break;
case 569: case 570:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: $$[$0-1], types: ['UDFREF'] }
     }
   
break;
case 575:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }]
     }
   
break;
case 576:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = $$[$0-3];
   
break;
case 578: case 580:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0], location: _$[$0] }]
     }
   
break;
case 579: case 581:

     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: $$[$0], location: _$[$0] }])
     }
   
break;
case 582:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0-2], location: _$[$0-2] }].concat($$[$0].expressions)
     }
   
break;
case 583:

     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: $$[$0-2], location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 584:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: { text: '' }, location: _$[$0] }])
     }
   
break;
case 585:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: { text: '' }, location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 586:

     parser.suggestValueExpressionKeywords($$[$0-3].expressions[$$[$0-3].expressions.length - 1].expression);
     this.$ = {
       activePosition: $$[$0-3].activePosition,
       expressions: $$[$0-3].expressions.concat($$[$0].expressions)
     }
   
break;
case 587:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 588:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 589:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 590:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-3] }, { expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 602:

     parser.suggestKeywords([ 'WHERE' ]);
   
break;
case 603:

     parser.suggestKeywords([ 'SET' ]);
   
break;
case 619:

     parser.suggestKeywords([ '=' ]);
   
break;
case 628:

     if (! parser.yy.cursorFound) {
       parser.yy.result.useDatabase = $$[$0];
     }
   
break;
case 629: case 848:

     parser.suggestDatabases();
   
break;
case 631: case 632:

     return parser.yy.result;
   
break;
case 633:

     parser.prepareNewStatement();
   
break;
case 635: case 637: case 639:

     parser.addStatementLocation(_$[$0]);
   
break;
case 638: case 640:

     parser.addStatementLocation(_$[$0-3]);
   
break;
case 644:

     parser.suggestDdlAndDmlKeywords();
   
break;
case 773: case 776: case 862:
this.$ = '';
break;
case 788: case 791:

     parser.yy.correlatedSubQuery = false;
   
break;
case 789: case 793:

     parser.suggestKeywords(['EXISTS']);
   
break;
case 792:

     parser.suggestKeywords(['NOT EXISTS']);
   
break;
case 803: case 805: case 806: case 808:

     parser.suggestKeywords(['<', '<=', '<>', '=', '>', '>=']);
   
break;
case 837: case 863:

     parser.addTableLocation(_$[$0], [ { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0] } ] };
   
break;
case 838: case 864:

     parser.addDatabaseLocation(_$[$0-2], [ { name: $$[$0-2] } ]);
     parser.addTableLocation(_$[$0], [ { name: $$[$0-2] }, { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0-2] }, { name: $$[$0] } ] };
   
break;
case 840: case 845:

     parser.suggestDatabases();
     this.$ = { identifierChain: [{ name: $$[$0-2] }] };
   
break;
case 841: case 866:

     parser.suggestTablesOrColumns($$[$0-2]);
   
break;
case 842:
this.$ = [{ name: $$[$0] }];
break;
case 843:
this.$ = [{ name: $$[$0-2] }, { name: $$[$0-1] }];
break;
case 844:

     parser.suggestDatabases({ appendDot: true });
   
break;
case 865:

     parser.suggestTables();
     parser.suggestDatabases({ prependDot: true });
   
break;
case 868:
this.$ = { identifierChain: $$[$0-1].identifierChain, alias: $$[$0] };
break;
case 871:

     parser.yy.locations[parser.yy.locations.length - 1].type = 'column';
   
break;
case 872: case 1037:

     parser.addAsteriskLocation(_$[$0], $$[$0-2].concat({ asterisk: true }));
   
break;
case 874:

     this.$ = [ $$[$0].identifier ];
     parser.yy.firstChainLocation = parser.addUnknownLocation($$[$0].location, [ $$[$0].identifier ]);
   
break;
case 875:

     if (parser.yy.firstChainLocation) {
       parser.yy.firstChainLocation.firstInChain = true;
       delete parser.yy.firstChainLocation;
     }
     $$[$0-2].push($$[$0].identifier);
     parser.addUnknownLocation($$[$0].location, $$[$0-2].concat());
   
break;
case 876:

     parser.suggestColumns({
       identifierChain: $$[$0-2]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 877:

     parser.suggestColumns({
       identifierChain: $$[$0-4]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 878:
this.$ = [ $$[$0].identifier ];
break;
case 879:

     $$[$0-2].push($$[$0].identifier);
   
break;
case 881:

     parser.suggestColumns({ identifierChain: $$[$0-2] });
   
break;
case 882:

     parser.suggestColumns({ identifierChain: $$[$0-4] });
   
break;
case 884:
this.$ = { identifier: { name: $$[$0] }, location: _$[$0] };
break;
case 905: case 906:

     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 907: case 932:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 908:

     // verifyType($$[$0], 'NUMBER');
     this.$ = $$[$0];
     $$[$0].types = ['NUMBER'];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 909: case 910: case 911:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 912:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 913:

     this.$ = { types: [ 'BOOLEAN' ] };
     // clear correlated flag after completed sub-query (set by lexer)
     parser.yy.correlatedSubQuery = false;
   
break;
case 915: case 916: case 917: case 918:

     parser.addColRefToVariableIfExists($$[$0-2], $$[$0]);
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 919: case 920: case 921: case 922: case 952: case 1010: case 1011:
this.$ = { types: [ 'BOOLEAN' ] };
break;
case 923:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 924:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 925: case 926:

     // verifyType($$[$0-2], 'BOOLEAN');
     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 927: case 928: case 929:

     // verifyType($$[$0-2], 'NUMBER');
     // verifyType($$[$0], 'NUMBER');
     this.$ = { types: [ 'NUMBER' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 930:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 931:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 933:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 935:

     parser.suggestKeywords(['BETWEEN', 'EXISTS', 'IN', 'LIKE', 'REGEXP', 'RLIKE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 936: case 938:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
break;
case 937:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 939:

     parser.suggestFunctions({ types: [ 'BOOLEAN' ] });
     parser.suggestColumns({ types: [ 'BOOLEAN' ] });
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 940:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0].suggestFilters };
break;
case 941:

     parser.suggestFunctions();
     parser.suggestColumns();
     this.$ = { types: [ 'T' ] };
   
break;
case 942:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 943:

     parser.suggestFunctions({ types: [ 'NUMBER' ] });
     parser.suggestColumns({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ] };
   
break;
case 944:

     parser.suggestKeywords(['FALSE', 'NOT NULL', 'NOT TRUE', 'NOT FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 945:

     parser.suggestKeywords(['FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 946:

     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 947: case 948: case 949:

     parser.suggestKeywords(['NOT']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 950:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-3] ? 'IS NOT DISTINCT FROM' : 'IS DISTINCT FROM');
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 951:

     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 953:

     this.$ = $$[$0-1];
   
break;
case 954:

     parser.valueExpressionSuggest();
     this.$ = { types: ['T'], typeSet: true };
   
break;
case 955:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 956: case 957: case 958:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 959: case 960: case 961: case 962:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0]);
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 963: case 965:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 964:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ] , typeSet: true, endsWithLessThanOrEqual: true };
   
break;
case 966:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, endsWithLessThanOrEqual: $$[$0-1] === '<='  };
   
break;
case 967: case 968: case 969: case 970:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 971:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-3]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 972:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 973: case 974:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
break;
case 975: case 976:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
break;
case 977:

     if ($$[$0-2].types[0] === $$[$0].types[0] && !$$[$0-5].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
   
break;
case 978:

     if ($$[$0-5].types[0] === $$[$0].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 979:

     if ($$[$0-5].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 980:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 981: case 987:

     parser.suggestValueExpressionKeywords($$[$0-1], ['AND']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 982:

     parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 983:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-4].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
   
break;
case 984:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 985:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 986:

     parser.valueExpressionSuggest($$[$0-4], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-4]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 988:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 989: case 991: case 993: case 995:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, suggestFilters: true };
   
break;
case 990: case 994:

     parser.addColRefIfExists($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 992: case 996:

     parser.addColRefIfExists($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 997: case 998:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 999: case 1000: case 1001:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 1002: case 1003: case 1004:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 1005: case 1006: case 1007:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 1008:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1009:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
break;
case 1012:

     parser.valueExpressionSuggest(undefined, $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1013:

     parser.valueExpressionSuggest(undefined, $$[$0-1] + ' ' + $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1015:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1017:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1018:

      this.$ = $$[$0];
      this.$.suggestFilters = $$[$0-1].suggestFilters;
    
break;
case 1019:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1021: case 1023:

     $$[$0].position = 1;
   
break;
case 1022:

     $$[$0].position = $$[$0-2].position + 1;
     this.$ = $$[$0];
   
break;
case 1024:

     $$[$0-2].position += 1;
   
break;
case 1025:

     $$[$0-2].position = 1;
   
break;
case 1026:

     $$[$0-4].position += 1;
   
break;
case 1027:

     parser.valueExpressionSuggest();
     $$[$0-2].position += 1;
   
break;
case 1028:

     parser.valueExpressionSuggest();
     $$[$0-4].position += 1;
   
break;
case 1029:

     parser.suggestValueExpressionKeywords($$[$0-3]);
   
break;
case 1030: case 1031:

     parser.valueExpressionSuggest();
     this.$ = { cursorAtStart : true, position: 1 };
   
break;
case 1032: case 1033:

     parser.valueExpressionSuggest();
     this.$ = { position: 2 };
   
break;
case 1036:

     var lastLoc = parser.yy.locations[parser.yy.locations.length - 1];
     if (lastLoc.type !== 'variable') {
       lastLoc.type = 'column';
     }
     // used for function references with db prefix
     var firstLoc = parser.yy.locations[parser.yy.locations.length - $$[$0].length];
     this.$ = { chain: $$[$0], firstLoc: firstLoc, lastLoc: lastLoc }
   
break;
case 1043:

     parser.suggestValues($$[$0]);
   
break;
case 1044:
this.$ = { types: [ 'NUMBER' ], text: $$[$0] };
break;
case 1050: case 1052: case 1053:
this.$ = $$[$0-1] + $$[$0];
break;
case 1051: case 1054:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 1055:
this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 1056:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: "'" + $$[$0] + "'" }
     } else {
       this.$ = { types: [ 'STRING' ] }
     }
   
break;
case 1057:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: '"' + $$[$0] + '"' }
     } else {
       this.$ = { types: [ 'STRING' ], text: '"' + $$[$0] + '"' }
     }
   
break;
case 1058:
this.$ = { types: [ 'BOOLEAN' ], text: $$[$0] };
break;
case 1059:

    this.$ = { partialQuote: '\'', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 1060:

    this.$ = { partialQuote: '"', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 1067:

     this.$ = $$[$0];

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         this.$.suggestJoins = {
           prependJoin: true,
           tables: tables
         };
       }
      }
   
break;
case 1074:

     this.$ = {
       primary: $$[$0-1]
     }
     if ($$[$0-1].identifierChain) {
       if ($$[$0]) {
         $$[$0-1].alias = $$[$0].alias
         parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
       }
       parser.addTablePrimary($$[$0-1]);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     } else if ($$[$0].suggestKeywords) {
       keywords = $$[$0].suggestKeywords;
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 1075:

     this.$ = {
       primary: $$[$0-1]
     };

     if ($$[$0]) {
       this.$.primary.alias = $$[$0].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 1076:

     if ($$[$0]) {
       parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }
   
break;
case 1077:

     if ($$[$0]) {
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias);
     }
   
break;
case 1087:

     parser.pushQueryState();
   
break;
case 1088:

     parser.popQueryState();
   
break;
case 1090:

     if ($$[$0-1]) {
       $$[$0-2].alias = $$[$0-1].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0-1].alias });
       parser.addSubqueryAliasLocation($$[$0-1].location, $$[$0-1].alias, $$[$0-2].identifierChain);
     }
     this.$ = $$[$0-2];
   
break;
case 1093:

     var subQuery = parser.getSubQuery($$[$0]);
     subQuery.columns.forEach(function (column) {
       parser.expandIdentifierChain({ wrapper: column });
       delete column.linked;
     });
     parser.popQueryState(subQuery);
     this.$ = subQuery;
   
break;
case 1110: case 1111: case 1112: case 1113:
this.$ = { alias: $$[$0], location: _$[$0] };
break;
case 1120: case 1121:

     if (parser.yy.result.suggestFunctions) {
       parser.suggestAggregateFunctions();
     }
   
break;
case 1122:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords([{ value: 'PARTITION BY', weight: 2 }, { value: 'ORDER BY', weight: 1 }]);
     } else if (!$$[$0-2]) {
       parser.suggestKeywords(['PARTITION BY']);
     }
   
break;
case 1123:

      if (!$$[$0-1]) {
        parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ORDER BY', weight: 2 }]);
      } else {
        parser.suggestValueExpressionKeywords($$[$0-3]);
      }
    
break;
case 1132:

      // Only allowed in last order by
      delete parser.yy.result.suggestAnalyticFunctions;
    
break;
case 1133:

      var keywords = [];
      if ($$[$0-2].suggestKeywords) {
        keywords = parser.createWeightedKeywords($$[$0-2].suggestKeywords, 2);
      }
      if (!$$[$0]) {
        keywords = keywords.concat([{ value: 'RANGE BETWEEN', weight: 1 }, { value: 'ROWS BETWEEN', weight: 1 }]);
      }
      parser.suggestKeywords(keywords);
    
break;
case 1139:

     parser.suggestKeywords(['BETWEEN']);
   
break;
case 1140:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED PRECEDING']);
     } else if (!$$[$0-1]) {
       parser.suggestKeywords(['AND']);
     }
   
break;
case 1145:

    lexer.popState();
  
break;
case 1146:

    lexer.begin('hdfs');
  
break;
case 1148:

      parser.suggestHdfs({ path: $$[$0-3] });
    
break;
case 1149:

     parser.suggestHdfs({ path: $$[$0-2] });
   
break;
case 1150:

      parser.suggestHdfs({ path: $$[$0-1] });
    
break;
case 1151:

     parser.suggestHdfs({ path: '' });
   
break;
case 1152:

      parser.suggestHdfs({ path: '' });
    
break;
case 1158:

     parser.suggestKeywords(['PRECEDING']);
   
break;
case 1159: case 1164:

     parser.suggestKeywords(['ROW']);
   
break;
case 1163:

     parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED FOLLOWING']);
   
break;
case 1165:

     parser.suggestKeywords(['FOLLOWING']);
   
break;
case 1169:
this.$ = { inValueEdit: true };
break;
case 1170:
this.$ = { inValueEdit: true, cursorAtStart: true };
break;
case 1171: case 1172: case 1173:

     this.$ = { suggestKeywords: ['NOT'] }
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1177: case 1178: case 1179:

     parser.suggestFunctions({ types: [ 'STRING' ] });
     parser.suggestColumns({ types: [ 'STRING' ] });
     this.$ = { types: ['BOOLEAN'] }
   
break;
case 1180:

     this.$ = parser.findCaseType($$[$0-1])
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1181:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1182:
this.$ = parser.findCaseType($$[$0-1]);
break;
case 1183:

     parser.suggestValueExpressionKeywords($$[$0-1], ['END']);
     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1184:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1185:
this.$ = parser.findCaseType($$[$0-2]);
break;
case 1186:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1187:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-2]);
   
break;
case 1188:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     this.$.suggestFilters = $$[$0-1].suggestFilters
   
break;
case 1189:

     parser.valueExpressionSuggest();
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1190:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1191:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = $$[$0-1];
   
break;
case 1192:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ] };
   
break;
case 1195:

     this.$ = { caseTypes: [ $$[$0] ], lastType: $$[$0] }
     parser.extractExpressionText(this.$, $$[$0]);
   
break;
case 1196:

     $$[$0-1].caseTypes.push($$[$0]);
     this.$ = { caseTypes: $$[$0-1].caseTypes, lastType: $$[$0] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1200:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
   
break;
case 1202:

     this.$ = $$[$0]
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1203:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0].suggestFilters };
break;
case 1204:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1205:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0-2].suggestFilters };
break;
case 1206: case 1207:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0].suggestFilters };
break;
case 1208:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1209:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [$$[$0]] };
   
break;
case 1210:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1211:

      parser.valueExpressionSuggest();
      parser.suggestKeywords(['WHEN']);
      this.$ = { caseTypes: [{ types: ['T'] }] };
    
break;
case 1212: case 1214:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1213:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1215:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [$$[$0]], suggestFilters: true };
   
break;
case 1216:

     parser.suggestValueExpressionKeywords($$[$0-1], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1217:

     parser.suggestValueExpressionKeywords($$[$0-2], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1218: case 1219: case 1220: case 1221:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
}
},
table: [o($V0,$V1,{346:1,268:2}),{1:[3]},o($V2,$V3,{347:3,351:4,3:5,158:6,31:7,4:8,5:9,6:10,7:11,8:12,9:13,159:14,160:15,171:16,172:17,21:18,22:19,48:20,49:21,50:22,51:23,149:24,150:25,151:26,152:27,161:31,23:35,29:36,14:$V4,18:$V5,35:$V6,145:$V7,165:$V8,177:$V9,244:$Va,279:$Vb,329:$Vc,345:$Vd}),{348:[1,41],352:[1,42]},o($V2,[2,635]),o($V2,[2,641]),o($V2,[2,642]),o($V2,[2,643]),o($V2,[2,1]),o($V2,[2,2]),o($V2,[2,3]),o($V2,[2,4]),o($V2,[2,5]),o($V2,[2,6]),o($V2,[2,249]),o($V2,[2,250]),{74:[1,44],172:43,244:$Va},o($Ve,$Vf,{173:45,263:46,265:47,267:$Vg}),o($V2,[2,16]),o($V2,[2,17]),o($V2,[2,47]),o($V2,[2,48]),o($V2,[2,49]),o($V2,[2,50]),o($V2,[2,223]),o($V2,[2,224]),o($V2,[2,225]),o($V2,[2,226]),{54:51,58:$Vh,108:$Vi,231:$Vj,251:[1,49],272:50,355:54,356:$Vk,357:$Vl},{26:[1,58]},{54:59,58:$Vh,108:$Vi,231:$Vj,355:54,356:$Vk,357:$Vl},o($V2,[2,251]),{54:65,58:$Vh,108:$Vi,114:64,231:$Vj,330:60,336:61,338:62,355:54,356:$Vk,357:$Vl,366:$Vm,435:63},{54:65,58:$Vh,108:$Vi,114:69,178:67,180:68,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm},o($Vn,$Vo,{245:70,248:[1,71],251:$Vp,252:$Vq}),{24:74,120:[1,75]},{30:[1,76]},{26:[1,79],34:[1,80],52:77,58:[1,78],373:$Vr,391:$Vs},{26:[1,85],34:[1,86],52:83,58:[1,84],373:$Vr,391:$Vs},{166:[1,87]},{26:[1,88],34:[1,89]},{1:[2,630]},o($V0,$V1,{268:90}),o($Ve,$Vf,{263:46,265:47,173:91,267:$Vg}),{31:92,171:16,172:17,177:$V9,244:$Va},o($Ve,[2,267]),o($Ve,[2,459],{265:93,267:$Vg}),o($Vt,[2,461]),o([244,251,252],$V1,{268:94}),o($V2,[2,478]),{273:[1,95],275:[1,96]},o($Vu,[2,480]),o($Vv,[2,653]),o($Vv,[2,654]),o($Vv,[2,655]),o($Vv,[2,650]),o($Vv,[2,651]),o($Vv,[2,652]),o($Vw,$Vx,{153:97,314:$Vy}),o($V2,[2,628]),{14:[1,99]},{14:[2,607]},{14:[2,609]},{14:[2,867],54:65,58:$Vh,108:$Vi,114:100,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm},o($Vz,[2,863],{275:[1,101]}),o($Vv,[2,860]),{47:[1,102],366:[1,103]},o([74,244],[2,276],{80:[1,104]}),o($VA,[2,278]),{30:[1,105]},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:108,230:138,231:$Vj,246:106,255:107,258:$VI,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},o($Vn,$Vo,{245:164,251:$Vp,252:$Vq}),o($V51,[2,421]),o($V51,[2,422]),o($V2,[2,18]),{74:[1,165]},{31:166,171:16,172:17,177:$V9,244:$Va},o($V61,$V71,{53:167,314:$V81}),{54:169,58:$Vh,108:$Vi,231:$Vj,355:54,356:$Vk,357:$Vl},o($Vw,$V71,{53:170,314:$V81}),o($Vw,$V71,{53:171,314:$V81}),o($V91,[2,770]),o($V91,[2,771]),o($Vw,$Vx,{153:172,314:$Vy}),{54:173,58:$Vh,108:$Vi,231:$Vj,355:54,356:$Vk,357:$Vl},o($Vw,$Vx,{153:174,314:$Vy}),o($Vw,$Vx,{153:175,314:$Vy}),o($Vw,[2,263],{167:176,26:[1,177]}),{27:178,54:65,58:$Vh,108:$Vi,114:179,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm},{27:180,54:65,58:$Vh,108:$Vi,114:179,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm},o($V2,$V3,{351:4,3:5,158:6,31:7,4:8,5:9,6:10,7:11,8:12,9:13,159:14,160:15,171:16,172:17,21:18,22:19,48:20,49:21,50:22,51:23,149:24,150:25,151:26,152:27,161:31,23:35,29:36,347:181,14:$V4,18:$V5,35:$V6,145:$V7,165:$V8,177:$V9,244:$Va,279:$Vb,329:$Vc,345:$Vd}),o($Ve,[2,265]),{76:[1,182]},o($Vt,[2,462]),{244:$Vo,245:183,251:$Vp,252:$Vq},{42:187,45:$VB,46:$VC,54:185,58:$Vh,91:[1,190],108:$Vi,230:191,231:$Vj,274:184,275:$VJ,276:186,277:[1,188],278:[1,189],355:54,356:$Vk,357:$Vl,360:[1,192],397:$V31,398:$V41,403:194,406:195,456:[1,193],461:144,462:145},{54:196,58:$Vh,108:$Vi,231:$Vj,355:54,356:$Vk,357:$Vl},{27:197,54:65,58:$Vh,108:$Vi,114:179,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm},{378:[1,198]},{54:65,58:$Vh,82:132,108:$Vi,114:140,144:202,231:$Vj,331:199,340:200,342:201,355:54,356:$Vk,357:$Vl,366:$Vm,437:203},{14:[2,868]},{54:65,58:$Vh,108:$Vi,114:204,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm},{366:[1,205]},o($Vv,[2,862]),{54:65,58:$Vh,108:$Vi,114:69,180:206,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm},{74:[1,207]},o($Vt,[2,408],{247:208,184:210,80:$Va1,185:[1,211]}),o($Vb1,[2,427]),o($Vb1,$Vc1,{355:54,54:65,403:194,406:195,257:212,448:226,114:227,42:228,30:$Vd1,45:$VB,46:$VC,58:$Vh,72:$Ve1,90:$Vf1,103:$Vg1,104:$Vh1,108:$Vi,137:$Vi1,231:$Vj,258:$Vj1,273:$Vk1,356:$Vk,357:$Vl,360:$Vl1,364:$Vm1,365:$Vn1,366:$Vm,367:$Vo1,382:$Vp1,384:$Vq1,385:$Vr1,387:$Vs1,388:$Vt1}),o($Vb1,[2,443]),o($Vu1,[2,904]),{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:233,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:234,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:235,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:236,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{74:$Vv1,445:237},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:239,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:241,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,400:$Vw1,403:146,406:147,437:123,449:240,457:131,459:139,461:144,462:145,463:148,511:242,513:243},o($Vu1,[2,562],{318:245,74:$Vx1}),{74:$Vx1,318:247},o($Vu1,[2,560]),o($Vu1,[2,561]),o($Vu1,[2,563]),o($Vy1,[2,1036],{275:[1,248]}),{74:[2,542]},{74:[2,543]},{74:[2,544]},{74:[2,545]},o($Vu1,[2,591],{283:249,285:250,326:$Vz1}),{285:252,326:$Vz1},o($Vu1,[2,499]),o($Vu1,[2,1042]),o($VA1,[2,874]),o($VB1,[2,507]),o($VB1,[2,508]),o($VB1,[2,509]),{74:[1,253]},{74:[1,254]},o($Vu1,[2,1044]),o($Vu1,[2,1045]),o([30,41,45,46,58,72,74,76,80,90,102,103,104,107,108,124,137,185,193,204,217,218,219,220,221,222,223,224,229,231,235,242,243,258,267,269,273,275,348,352,356,357,360,364,365,366,367,368,369,371,374,375,376,377,379,382,383,384,385,387,388,390,392,393,394,395,396,399,400,447],[2,884]),{74:[1,255]},{74:[1,256]},{74:[1,257]},o($Vu1,[2,1047]),o($Vu1,[2,1048]),o($Vu1,[2,1056]),o($Vu1,[2,1057]),o($Vu1,[2,1058]),{74:[2,518]},{74:[2,519]},{74:[2,520]},{74:[2,521]},{74:[2,522]},{74:[2,523]},{74:[2,524]},{74:[2,525]},o($Vu1,[2,1049],{275:[1,258]}),{397:[1,259],398:[1,260]},{397:[1,261]},{45:[1,263],47:[1,262]},{46:[1,265],47:[1,264]},o($Vu1,[2,1061]),o($Vu1,[2,1062]),{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:108,230:138,231:$Vj,246:266,255:107,258:$VI,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{54:65,58:$Vh,82:269,108:$Vi,114:140,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm,417:267,433:268},o($V2,[2,26]),o($V2,[2,51],{355:54,54:270,58:$Vh,108:$Vi,231:$Vj,356:$Vk,357:$Vl}),{90:[1,271]},o($V2,[2,60]),{54:65,58:$Vh,59:272,61:273,67:274,108:$Vi,114:275,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm},{54:65,58:$Vh,67:276,108:$Vi,114:275,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm},{54:65,58:$Vh,108:$Vi,114:277,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm},o($V2,[2,234]),{27:278,54:65,58:$Vh,108:$Vi,114:179,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm},{27:279,54:65,58:$Vh,108:$Vi,114:179,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm},{27:280,54:65,58:$Vh,108:$Vi,114:179,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm},o($Vw,[2,264]),{120:[2,23]},o($VC1,[2,837],{275:[1,281]}),{30:[2,32]},o($V2,[2,636]),o($Ve,$Vf,{263:46,265:47,173:282,267:$Vg}),{172:283,244:$Va},o($V2,[2,479]),o($V2,[2,482]),o($V2,[2,483],{355:54,54:284,58:$Vh,108:$Vi,231:$Vj,356:$Vk,357:$Vl}),o($V2,[2,485]),o($V2,[2,486]),o($V2,[2,487]),o($V2,[2,488]),o($V61,[2,1039]),{230:285,275:$VJ,397:$V31,398:$V41,461:144,462:145},{230:286,275:$VJ,397:$V31,398:$V41,461:144,462:145},o($VD1,[2,778]),o($VD1,[2,779]),o($Vu,[2,481]),o($V2,[2,489]),o($Vw,[2,788]),o($VE1,[2,624],{332:287,80:[1,288],185:[1,289]}),o($VF1,[2,611]),{273:[1,290]},{273:[2,621]},o($VG1,[2,871],{275:[1,291]}),o($Vz,[2,864]),o($Vv,[2,861]),o($VA,[2,279]),o($VH1,$VI1,{182:292,474:293}),o($Vt,[2,409]),{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:108,230:138,231:$Vj,255:294,258:$VI,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},o($VJ1,$VK1,{253:295,260:296,262:297,269:$VL1}),{27:306,54:65,58:$Vh,74:$Vv1,108:$Vi,114:179,186:299,189:300,210:302,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm,445:307,464:301,466:303,468:304,469:305},o($Vb1,[2,442]),o($VM1,[2,1063],{444:308,90:[1,309]}),{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:310,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:311,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:312,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:313,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{72:$Ve1,367:[1,315],382:[1,314],387:$Vs1,388:$Vt1,448:316},{74:[1,317]},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:318,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:319,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:320,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:321,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:322,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:323,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},o($Vu1,[2,930]),o($VN1,[2,1110]),o($VN1,[2,1111]),{42:325,45:$VB,46:$VC,54:65,58:$Vh,108:$Vi,114:324,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm,403:194,406:195},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:326,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:327,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:328,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},o($VO1,[2,905],{448:226,72:$Ve1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,365:$Vn1,382:$Vp1,384:$Vq1,387:$Vs1,388:$Vt1}),o($VO1,[2,906],{448:226,72:$Ve1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,365:$Vn1,382:$Vp1,384:$Vq1,387:$Vs1,388:$Vt1}),o($VO1,[2,907],{448:226,72:$Ve1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,365:$Vn1,382:$Vp1,384:$Vq1,387:$Vs1,388:$Vt1}),o($VP1,[2,908],{448:226}),o($Vu1,[2,913]),o($VH1,$VI1,{474:293,445:307,182:329,469:330,74:$Vv1}),{72:$Ve1,76:[1,331],90:$Vf1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,364:$Vm1,365:$Vn1,367:$Vo1,382:$Vp1,384:$Vq1,385:$Vr1,387:$Vs1,388:$Vt1,448:226},o($Vu1,[2,932]),{72:$Ve1,90:$Vf1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,364:$Vm1,365:$Vn1,367:$Vo1,382:$Vp1,384:$Vq1,385:$Vr1,387:$Vs1,388:$Vt1,400:$Vw1,448:226,449:332,511:242,513:243},{376:[1,334],377:[1,333],400:$Vw1,513:335},o($VQ1,[2,1195]),{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:336,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},o($Vu1,[2,558]),{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,76:[1,337],82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:339,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,300:338,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},o($Vu1,[2,559]),{54:65,58:$Vh,82:341,108:$Vi,114:140,231:$Vj,258:[1,340],355:54,356:$Vk,357:$Vl,366:$Vm},o($Vu1,[2,497]),o($Vu1,[2,592]),{54:65,58:$Vh,74:[1,344],108:$Vi,114:342,231:$Vj,327:343,355:54,356:$Vk,357:$Vl,366:$Vm},o($Vu1,[2,498]),{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,76:[1,345],82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:339,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,300:346,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,76:[1,348],82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:347,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},o([45,46,58,74,76,90,91,102,107,108,231,275,277,278,279,302,303,304,305,306,307,308,309,310,311,312,314,315,356,357,359,360,363,366,370,378,397,398],$Vo,{245:349,251:$Vp,252:$Vq}),o($VR1,$Vo,{245:352,76:[1,351],251:$Vp,252:$Vq,258:[1,350]}),o($VR1,$Vo,{245:353,76:[1,354],251:$Vp,252:$Vq}),o($Vu1,[2,1050],{397:[1,355],398:[1,356]}),o($Vu1,[2,1052]),{397:[1,357]},o($Vu1,[2,1053]),{45:[1,358]},o($VS1,[2,773]),{46:[1,359]},o($VS1,[2,776]),o($Vt,[2,410],{80:$Va1}),{76:[1,360],80:[1,361]},o($VT1,[2,849]),{273:[1,362]},o($V2,$VU1,{55:363,39:364,40:365,41:$VV1}),{378:[1,367]},o($V2,[2,61]),o($VW1,[2,157],{62:368,119:369,120:[1,370]}),o($VX1,[2,73],{68:371,71:372,72:[1,373],74:[1,374]}),o($VY1,[2,842],{275:[1,375]}),o($VZ1,[2,209],{139:376,141:377,74:[1,378]}),o($V2,[2,785],{154:379,413:[1,380]}),o($V2,[2,241],{156:381,157:[1,382]}),o($V2,[2,243]),{135:[1,383]},{54:65,58:$Vh,108:$Vi,114:384,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm},o($Ve,[2,266]),o($Vt,[2,467]),o($V2,[2,484]),o($V61,[2,1040]),o($V61,[2,1041]),o($V2,$VK1,{262:297,260:385,269:$VL1}),{54:65,58:$Vh,82:132,108:$Vi,114:140,144:202,231:$Vj,340:386,342:201,355:54,356:$Vk,357:$Vl,366:$Vm,437:203},{27:306,54:65,58:$Vh,74:$Vv1,108:$Vi,114:179,189:387,210:302,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm,445:307,464:301,466:303,468:304,469:305},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:389,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,343:388,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{54:65,58:$Vh,82:341,108:$Vi,114:140,231:$Vj,258:[1,390],355:54,356:$Vk,357:$Vl,366:$Vm},{76:[1,391]},{31:399,171:16,172:17,177:$V9,244:$Va,476:392,478:393,480:394,482:395,484:396,486:397,488:398},o($Vb1,[2,428]),o($Vt,[2,423]),o($V_1,[2,298],{191:400,192:401,193:[1,402]}),o($VJ1,[2,472]),{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:404,230:138,231:$Vj,270:403,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},o([76,193,204,229,235,267,269,348,352],[2,288],{80:[1,405]}),o($V$1,[2,291]),o($V$1,[2,1065]),o($V$1,[2,1067],{207:406,209:407,217:$V02,218:$V12,219:$V22,220:$V32,221:$V42,222:$V52,223:$V62,224:$V72}),o($V$1,[2,1068]),o($V82,$Vc1,{355:54,54:65,403:194,406:195,114:227,42:228,257:416,30:$Vd1,45:$VB,46:$VC,58:$Vh,108:$Vi,231:$Vj,356:$Vk,357:$Vl,366:$Vm}),o($V82,$Vc1,{355:54,54:65,403:194,406:195,114:227,42:228,257:417,30:$Vd1,45:$VB,46:$VC,58:$Vh,108:$Vi,231:$Vj,356:$Vk,357:$Vl,366:$Vm}),o($V92,[2,1079]),o($V92,[2,1081]),{91:[1,418],252:[1,421],277:[1,419],278:[1,420]},o($VM1,[2,1064]),o($Va2,[2,915],{448:226,72:$Ve1,258:$Vj1,360:$Vl1,365:$Vn1,382:$Vp1,384:$Vq1,387:$Vs1,388:$Vt1}),o($Va2,[2,916],{448:226,72:$Ve1,258:$Vj1,360:$Vl1,365:$Vn1,382:$Vp1,384:$Vq1,387:$Vs1,388:$Vt1}),o($Va2,[2,917],{448:226,72:$Ve1,258:$Vj1,360:$Vl1,365:$Vn1,382:$Vp1,384:$Vq1,387:$Vs1,388:$Vt1}),o($Va2,[2,918],{448:226,72:$Ve1,258:$Vj1,360:$Vl1,365:$Vn1,382:$Vp1,384:$Vq1,387:$Vs1,388:$Vt1}),{74:[1,422]},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:423,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},o($Vu1,[2,931]),o($VH1,$VI1,{355:54,54:65,316:110,317:118,313:119,281:120,319:121,437:123,282:128,284:129,286:130,457:131,82:132,293:133,294:134,295:135,230:138,459:139,114:140,299:141,461:144,462:145,403:146,406:147,463:148,474:293,182:424,446:425,133:426,45:$VB,46:$VC,58:$Vh,74:$VD,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,314:$VY,315:$VZ,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41}),{72:$Ve1,90:$Vf1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,364:$Vm1,365:$Vn1,367:$Vo1,382:$Vp1,384:$Vq1,385:$Vr1,387:$Vs1,388:$Vt1,447:[1,427],448:226},o($Vb2,[2,925],{448:226,72:$Ve1,90:$Vf1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,365:$Vn1,367:$Vo1,382:$Vp1,384:$Vq1,387:$Vs1,388:$Vt1}),o($Vb2,[2,926],{448:226,72:$Ve1,90:$Vf1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,365:$Vn1,367:$Vo1,382:$Vp1,384:$Vq1,387:$Vs1,388:$Vt1}),o($VP1,[2,927],{448:226,72:$Ve1,382:$Vp1,384:$Vq1,387:$Vs1,388:$Vt1}),o($VP1,[2,928],{448:226,72:$Ve1,382:$Vp1,384:$Vq1,387:$Vs1,388:$Vt1}),o($VP1,[2,929],{448:226,72:$Ve1,382:$Vp1,384:$Vq1,387:$Vs1,388:$Vt1}),o($VN1,[2,1112]),o($VN1,[2,1113]),o($VP1,[2,1171],{448:226}),o($VP1,[2,1172],{448:226}),o($VP1,[2,1173],{448:226}),{76:[1,428]},{30:$Vd1,42:228,45:$VB,46:$VC,54:65,58:$Vh,76:$Vc1,108:$Vi,114:227,231:$Vj,257:429,355:54,356:$Vk,357:$Vl,366:$Vm,403:194,406:195},o($Vu1,[2,914]),o($Vu1,[2,933]),o($Vu1,[2,1180]),{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:430,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},o($VQ1,[2,1196]),{72:$Ve1,90:$Vf1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,364:$Vm1,365:$Vn1,367:$Vo1,382:$Vp1,384:$Vq1,385:$Vr1,387:$Vs1,388:$Vt1,394:[1,431],448:226},o($Vu1,[2,573]),{76:[1,432],80:$Vc2},o($VT1,[2,578],{448:226,72:$Ve1,90:$Vf1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,364:$Vm1,365:$Vn1,367:$Vo1,382:$Vp1,384:$Vq1,385:$Vr1,387:$Vs1,388:$Vt1}),o($Vy1,[2,1037]),o($VA1,[2,875]),o($Vu1,[2,594]),o($Vu1,[2,595]),o($Vd2,[2,1124],{490:434,494:435,120:[1,436]}),{326:[2,537]},{76:[1,437],80:$Vc2},{30:[1,438],72:$Ve1,90:$Vf1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,364:$Vm1,365:$Vn1,367:$Vo1,382:$Vp1,384:$Vq1,385:$Vr1,387:$Vs1,388:$Vt1,448:226},o($Vu1,[2,547]),{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,76:[1,439],82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:339,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,300:440,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{76:[1,441]},o($VB1,[2,527]),{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:339,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,300:442,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:443,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},o($VB1,[2,533]),o($Vu1,[2,1051]),{397:[1,444]},o($Vu1,[2,1054]),o($VS1,[2,772]),o($VS1,[2,775]),o($V2,[2,800]),{54:65,58:$Vh,82:269,108:$Vi,114:140,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm,433:445},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:446,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},o($V2,[2,52]),o($V2,[2,58]),o([30,76,80,104,348,352],[2,40]),{42:447,45:$VB,46:$VC,403:194,406:195},o([58,108,231,348,352,356,357,366],[2,791]),o($V2,[2,195],{63:448,30:[1,449]}),o($VW1,[2,158]),{121:[1,450]},o($VX1,[2,70]),o($VX1,[2,74]),{27:451,54:65,58:$Vh,108:$Vi,114:179,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm},{54:65,58:$Vh,75:452,79:453,82:454,108:$Vi,114:140,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm},{54:65,58:$Vh,108:$Vi,114:455,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm},{30:$VU1,39:456,40:365,41:$VV1},o($VZ1,[2,210]),{54:65,58:$Vh,82:132,108:$Vi,114:140,142:457,144:458,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm,437:203},o($V2,[2,227]),o($V2,[2,786]),o($V2,[2,235]),o($V2,[2,242]),{74:$Ve2,168:459,169:460},o($VC1,[2,838]),o($V2,[2,597]),o($VF1,[2,612]),o($VE1,[2,625]),o($VF1,[2,617]),o($VF1,[2,622],{448:226,72:$Ve1,90:$Vf1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,364:$Vm1,365:$Vn1,367:$Vo1,382:$Vp1,384:$Vq1,385:$Vr1,387:$Vs1,388:$Vt1}),o($VG1,[2,872]),o($VA,[2,284]),{76:[2,1093]},{76:[2,1095]},{76:[2,1097]},{76:[2,1099]},{76:[2,1101]},{76:[2,1103]},{76:[2,1105]},{76:[2,1107]},o($Vf2,[2,327],{202:462,203:463,204:[1,464]}),o($V_1,[2,299]),{121:[1,465]},o($VJ1,[2,473]),o($VJ1,[2,476],{448:226,72:$Ve1,90:$Vf1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,364:$Vm1,365:$Vn1,367:$Vo1,382:$Vp1,384:$Vq1,385:$Vr1,387:$Vs1,388:$Vt1}),{27:306,54:65,58:$Vh,74:$Vv1,108:$Vi,114:179,189:466,210:302,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm,445:307,464:301,466:303,468:304,469:305},o($V$1,[2,1071],{209:467,217:$V02,218:$V12,219:$V22,220:$V32,221:$V42,222:$V52,223:$V62,224:$V72}),{27:306,54:65,58:$Vh,74:$Vv1,108:$Vi,114:179,210:468,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm,445:307,468:304,469:305},{218:[1,469]},{218:[1,470],220:[1,471]},{218:[1,472]},o($Vg2,[2,352]),{218:[1,474],220:[1,475],221:[1,473],223:[1,476]},{218:[1,477]},{218:[1,479],220:[1,480],221:[1,478],223:[1,481]},{218:[1,482]},o($V82,[2,1074]),o($V82,[2,1075]),o($Vu1,[2,909]),o($Vu1,[2,910]),o($Vu1,[2,911]),{185:[1,483]},o($VH1,$VI1,{355:54,54:65,316:110,317:118,313:119,281:120,319:121,437:123,282:128,284:129,286:130,457:131,82:132,293:133,294:134,295:135,230:138,459:139,114:140,299:141,461:144,462:145,403:146,406:147,463:148,474:293,133:426,182:484,446:485,45:$VB,46:$VC,58:$Vh,74:$VD,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,314:$VY,315:$VZ,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41}),{72:$Ve1,90:$Vf1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,364:$Vm1,365:$Vn1,367:$Vo1,382:$Vp1,384:$Vq1,385:$Vr1,387:$Vs1,388:$Vt1,447:[1,486],448:226},{76:[1,487]},{76:[1,488],80:$Vh2},o($Vi2,[2,1021],{448:226,72:$Ve1,90:$Vf1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,364:$Vm1,365:$Vn1,367:$Vo1,382:$Vp1,384:$Vq1,385:$Vr1,387:$Vs1,388:$Vt1}),{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:490,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},o($Vj2,[2,1089]),{76:[1,491]},{72:$Ve1,90:$Vf1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,364:$Vm1,365:$Vn1,367:$Vo1,377:[1,492],382:$Vp1,384:$Vq1,385:$Vr1,387:$Vs1,388:$Vt1,448:226},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:493,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},o($Vu1,[2,574]),{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:494,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{76:[2,1130],234:496,235:$Vk2,491:495},o($Vd2,[2,1125]),{121:[1,498]},{326:[2,538]},{92:499,368:$Vl2,369:$Vm2,371:$Vn2,374:$Vo2,375:$Vp2,379:$Vq2,383:$Vr2,392:$Vs2,393:$Vt2,395:$Vu2,396:$Vv2,399:$Vw2},o($VB1,[2,513]),{76:[1,512],80:$Vc2},o($VB1,[2,526]),{76:[1,513],80:$Vc2},{72:$Ve1,76:[1,514],90:$Vf1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,364:$Vm1,365:$Vn1,367:$Vo1,382:$Vp1,384:$Vq1,385:$Vr1,387:$Vs1,388:$Vt1,448:226},o($Vu1,[2,1055]),o($VT1,[2,850]),o($VT1,[2,855],{448:226,72:$Ve1,90:$Vf1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,364:$Vm1,365:$Vn1,367:$Vo1,382:$Vp1,384:$Vq1,385:$Vr1,387:$Vs1,388:$Vt1}),o([30,41,76,80,90,91,104,348,352],[2,41]),o($V2,[2,65]),o($VH1,[2,199],{138:515}),{122:516,124:[1,517]},o($VX1,[2,75]),{76:[1,518],80:[1,519]},o($VT1,[2,81]),{83:520,92:521,93:522,94:523,95:524,96:525,97:526,98:527,102:$Vx2,107:$Vy2,108:$Vz2,368:$Vl2,369:$Vm2,371:$Vn2,374:$Vo2,375:$Vp2,379:$Vq2,383:$Vr2,392:$Vs2,393:$Vt2,395:$Vu2,396:$Vv2,399:$Vw2},o($VY1,[2,843]),{30:[1,531]},{76:[1,532],80:[1,533]},o($VT1,$VU1,{40:365,39:534,41:$VV1}),o($V2,[2,254],{80:[1,535]}),o($VA2,[2,260]),{45:$VB,46:$VC,54:65,58:$Vh,82:132,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,170:536,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:537,317:118,319:121,355:54,356:$Vk,357:$Vl,366:$Vm,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},o($VB2,[2,390],{233:538,234:539,235:$Vk2}),o($Vf2,[2,328]),{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:540,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:542,194:541,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},o($V$1,[2,292]),{27:306,54:65,58:$Vh,74:$Vv1,108:$Vi,114:179,210:543,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm,445:307,468:304,469:305},o($VC2,$VD2,{211:544,225:$VE2}),o($Vg2,[2,348]),o($Vg2,[2,349]),{218:[1,546]},o($Vg2,[2,351]),{218:[1,547]},o($Vg2,[2,354]),{218:[1,548]},{218:[1,549]},o($Vg2,[2,357]),{218:[1,550]},o($Vg2,[2,359]),{218:[1,551]},{218:[1,552]},o($Vg2,[2,362]),{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:553,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{76:[1,554]},{76:[1,555],80:$Vh2},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:556,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},o($Vu1,[2,921]),o($Vu1,[2,922]),{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:557,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},o([30,45,46,58,76,80,108,124,185,193,204,217,218,219,220,221,222,223,224,229,231,235,242,243,267,269,348,352,356,357,364,366,367,376,377,385,390,394,400,447],[2,924],{448:226,72:$Ve1,90:$Vf1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,365:$Vn1,382:$Vp1,384:$Vq1,387:$Vs1,388:$Vt1}),o($Vj2,[2,1090]),o($Vu1,[2,1181]),o($VQ1,[2,1202],{448:226,72:$Ve1,90:$Vf1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,364:$Vm1,365:$Vn1,367:$Vo1,382:$Vp1,384:$Vq1,385:$Vr1,387:$Vs1,388:$Vt1}),o($VT1,[2,579],{448:226,72:$Ve1,90:$Vf1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,364:$Vm1,365:$Vn1,367:$Vo1,382:$Vp1,384:$Vq1,385:$Vr1,387:$Vs1,388:$Vt1}),{76:[1,558]},{76:[2,1135],124:[1,563],390:[1,562],495:559,497:560,498:561},{121:[1,564]},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:426,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,446:565,457:131,459:139,461:144,462:145,463:148},{76:[1,566]},o($VF2,[2,887]),o($VF2,[2,888]),o($VF2,$VG2,{442:567,74:$VH2}),o($VF2,[2,901],{443:569,74:[1,570]}),o($VF2,[2,891]),o($VF2,[2,892]),o($VF2,[2,893]),o($VF2,[2,894]),o($VF2,[2,895]),o($VF2,[2,896]),o($VF2,[2,897]),o($VF2,$VG2,{442:571,74:$VH2}),o($VB1,[2,514]),o($VB1,[2,528]),o($VB1,[2,532]),{31:572,171:16,172:17,177:$V9,244:$Va},o($VW1,[2,159]),{74:[1,574],125:573},o($VX1,[2,79]),{54:65,58:$Vh,79:575,82:454,108:$Vi,114:140,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm},o($VT1,[2,95],{84:576,87:577,88:578,40:581,41:$VV1,90:$VI2,91:$VJ2}),o($VF2,[2,107]),o($VF2,[2,108]),o($VF2,[2,109]),o($VF2,[2,110]),o($VF2,[2,111]),o($VF2,[2,112]),o($VF2,[2,113]),{103:[1,582]},{103:[1,583]},{103:[1,584]},{31:585,171:16,172:17,177:$V9,244:$Va},o($VZ1,[2,211]),{54:65,58:$Vh,82:132,108:$Vi,114:140,144:586,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm,437:203},o($VT1,[2,213]),{74:$Ve2,169:587},{76:[1,588],80:[1,589]},o($VT1,[2,1034]),o($Vt,[2,383],{227:590,228:591,229:[1,592]}),o($VB2,[2,391]),o($Vf2,[2,329],{448:226,72:$Ve1,90:$Vf1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,364:$Vm1,365:$Vn1,367:$Vo1,382:$Vp1,384:$Vq1,385:$Vr1,387:$Vs1,388:$Vt1}),o($V_1,[2,300],{80:[1,593]}),o($VK2,[2,315],{448:226,72:$Ve1,90:$Vf1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,364:$Vm1,365:$Vn1,367:$Vo1,382:$Vp1,384:$Vq1,385:$Vr1,387:$Vs1,388:$Vt1}),o($VC2,$VD2,{211:594,225:$VE2}),o($VC2,[2,335]),{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:595,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},o($Vg2,[2,350]),o($Vg2,[2,353]),o($Vg2,[2,355]),o($Vg2,[2,356]),o($Vg2,[2,358]),o($Vg2,[2,360]),o($Vg2,[2,361]),o($VP1,[2,912],{448:226}),o($Vu1,[2,919]),o($Vu1,[2,920]),o($VO1,[2,923],{448:226,72:$Ve1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,365:$Vn1,382:$Vp1,384:$Vq1,387:$Vs1,388:$Vt1}),o($Vi2,[2,1022],{448:226,72:$Ve1,90:$Vf1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,364:$Vm1,365:$Vn1,367:$Vo1,382:$Vp1,384:$Vq1,385:$Vr1,387:$Vs1,388:$Vt1}),o($Vu1,[2,1119]),{76:[2,1131]},{76:[2,1136]},{367:[1,596],502:[1,597]},o($VL2,[2,1153]),o($VL2,[2,1154]),{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:600,230:138,231:$Vj,236:598,239:599,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},o($Vd2,[2,1126],{80:$Vh2}),o($Vu1,[2,546]),o($VF2,[2,889]),{397:[1,601]},o($VF2,[2,890]),{397:[1,602]},o($VF2,[2,898]),o($V2,[2,196]),{74:[1,604],126:603},{54:65,58:$Vh,82:606,108:$Vi,114:140,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm,429:605},o($VT1,[2,82]),o($VT1,[2,91]),o($VT1,[2,96],{40:581,88:607,41:$VV1,90:$VI2,91:$VJ2}),o($VM2,[2,97]),{91:[1,608]},o($VM2,[2,104]),o($VM2,[2,105]),{83:609,92:521,93:522,94:523,95:524,96:525,97:526,98:527,102:$Vx2,104:[1,610],107:$Vy2,108:$Vz2,368:$Vl2,369:$Vm2,371:$Vn2,374:$Vo2,375:$Vp2,379:$Vq2,383:$Vr2,392:$Vs2,393:$Vt2,395:$Vu2,396:$Vv2,399:$Vw2},{92:611,104:[1,612],368:$Vl2,369:$Vm2,371:$Vn2,374:$Vo2,375:$Vp2,379:$Vq2,383:$Vr2,392:$Vs2,393:$Vt2,395:$Vu2,396:$Vv2,399:$Vw2},{54:65,58:$Vh,104:[1,614],108:$Vi,109:613,111:615,114:616,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm},o($V2,[2,200]),o($VT1,$VU1,{40:365,39:617,41:$VV1}),o($VA2,[2,261]),o($VA2,[2,262]),{45:$VB,46:$VC,54:65,58:$Vh,82:132,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:618,317:118,319:121,355:54,356:$Vk,357:$Vl,366:$Vm,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},o($Vt,[2,447]),o($Vt,[2,384]),{230:619,231:[1,620],275:$VJ,397:$V31,398:$V41,461:144,462:145},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:621,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},o($VC2,[2,336]),o($VC2,[2,378],{448:226,72:$Ve1,90:$Vf1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,364:$Vm1,365:$Vn1,367:$Vo1,382:$Vp1,384:$Vq1,385:$Vr1,387:$Vs1,388:$Vt1}),o($VN2,$VO2,{499:622}),o($VN2,$VO2,{499:623}),o([76,124,229,267,348,352,390],[2,392],{80:[1,624]}),o($VP2,[2,395]),o($VP2,[2,405],{448:226,241:625,72:$Ve1,90:$Vf1,103:$Vg1,104:$Vh1,137:$Vi1,242:[1,626],243:[1,627],258:$Vj1,273:$Vk1,360:$Vl1,364:$Vm1,365:$Vn1,367:$Vo1,382:$Vp1,384:$Vq1,385:$Vr1,387:$Vs1,388:$Vt1}),{76:[1,628]},{76:[1,629],80:[1,630]},o($VW1,[2,163]),{120:$VQ2,129:631,131:632},{76:[1,634],80:[1,635]},o($VT1,[2,830]),o($VM2,[2,98]),o($VM2,[2,103]),{104:[1,636]},o($VF2,[2,118]),{80:[1,637]},o($VF2,[2,122]),{80:[1,639],104:[1,638]},o($VF2,[2,128]),o($VR2,[2,130]),{115:[1,640]},o($VT1,[2,214]),o($VT1,[2,1035]),o($Vt,[2,385],{80:[1,641]}),o($Vt,[2,387],{80:[1,642]}),o($VK2,[2,316],{448:226,72:$Ve1,90:$Vf1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,364:$Vm1,365:$Vn1,367:$Vo1,382:$Vp1,384:$Vq1,385:$Vr1,387:$Vs1,388:$Vt1}),o($VS2,$VT2,{500:643,510:644,372:$VU2,397:$VV2,502:$VW2}),o($VS2,$VT2,{510:644,500:648,372:$VU2,397:$VV2,502:$VW2}),{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:600,230:138,231:$Vj,239:649,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},o($VP2,[2,402]),o($VP2,[2,406]),o($VP2,[2,407]),o($VF2,[2,900]),o($VF2,[2,902]),{397:[1,650]},{76:[1,651],80:[1,652]},o($VT1,[2,172]),{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:653,135:[1,654],230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{74:[2,827]},{54:65,58:$Vh,82:655,108:$Vi,114:140,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm},o($VF2,[2,117]),{83:656,92:521,93:522,94:523,95:524,96:525,97:526,98:527,102:$Vx2,107:$Vy2,108:$Vz2,368:$Vl2,369:$Vm2,371:$Vn2,374:$Vo2,375:$Vp2,379:$Vq2,383:$Vr2,392:$Vs2,393:$Vt2,395:$Vu2,396:$Vv2,399:$Vw2},o($VF2,[2,127]),{54:65,58:$Vh,108:$Vi,111:657,114:616,231:$Vj,355:54,356:$Vk,357:$Vl,366:$Vm},{83:658,92:521,93:522,94:523,95:524,96:525,97:526,98:527,102:$Vx2,107:$Vy2,108:$Vz2,368:$Vl2,369:$Vm2,371:$Vn2,374:$Vo2,375:$Vp2,379:$Vq2,383:$Vr2,392:$Vs2,393:$Vt2,395:$Vu2,396:$Vv2,399:$Vw2},{230:659,275:$VJ,397:$V31,398:$V41,461:144,462:145},{231:[1,660]},{76:$VX2,364:$VY2,501:661},{386:[1,663]},{389:[1,664]},o($VZ2,[2,1166]),o($VZ2,[2,1167]),{76:$VX2,364:$VY2,501:665},o($VP2,[2,396]),{76:[1,666]},o($VW1,[2,169]),{120:$VQ2,131:667},{72:$Ve1,90:$Vf1,103:[1,669],104:$Vh1,134:668,137:[1,670],258:$Vj1,273:$Vk1,360:$Vl1,364:$Vm1,365:$Vn1,367:$Vo1,382:$Vp1,384:$Vq1,385:$Vr1,387:$Vs1,388:$Vt1,448:226},{103:$V_2,134:671,137:$V$2},o($VT1,[2,831]),{104:[1,674]},o($VR2,[2,131]),o($VR2,$VU1,{40:365,39:675,41:$VV1}),o($Vt,[2,386]),o($Vt,[2,388]),{76:[2,1137]},{372:[1,676],397:$VV2,502:$VW2,510:677},o($VS2,[2,1156]),o($VS2,[2,1157]),{76:[2,1138]},o($VF2,[2,903]),o($VT1,[2,173]),{135:[1,678]},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:311,135:$V03,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:313,135:$V13,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:679,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},o($VR1,$V03),o($VR1,$V13),o($VF2,[2,121]),o($VR2,[2,137]),{389:[1,680]},{380:[1,681]},o($VT1,[2,181],{134:682,103:$V_2,137:$V$2}),o($VT1,[2,180],{448:226,72:$Ve1,90:$Vf1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,364:$Vm1,365:$Vn1,367:$Vo1,382:$Vp1,384:$Vq1,385:$Vr1,387:$Vs1,388:$Vt1}),{76:[2,1161]},{76:[2,1162]},{45:$VB,46:$VC,54:65,58:$Vh,74:$VD,82:132,90:$VE,91:$VF,102:$VG,107:$VH,108:$Vi,114:140,133:683,230:138,231:$Vj,275:$VJ,277:$VK,278:$VL,279:$VM,281:120,282:128,284:129,286:130,293:133,294:134,295:135,299:141,302:$VN,303:$VO,304:$VP,305:$VQ,306:$VR,307:$VS,308:$VT,309:$VU,310:$VV,311:$VW,312:$VX,313:119,314:$VY,315:$VZ,316:110,317:118,319:121,355:54,356:$Vk,357:$Vl,359:$V_,360:$V$,363:$V01,366:$Vm,370:$V11,378:$V21,397:$V31,398:$V41,403:146,406:147,437:123,457:131,459:139,461:144,462:145,463:148},o($VT1,[2,179],{448:226,72:$Ve1,90:$Vf1,103:$Vg1,104:$Vh1,137:$Vi1,258:$Vj1,273:$Vk1,360:$Vl1,364:$Vm1,365:$Vn1,367:$Vo1,382:$Vp1,384:$Vq1,385:$Vr1,387:$Vs1,388:$Vt1})],
defaultActions: {41:[2,630],61:[2,607],62:[2,609],100:[2,868],124:[2,542],125:[2,543],126:[2,544],127:[2,545],149:[2,518],150:[2,519],151:[2,520],152:[2,521],153:[2,522],154:[2,523],155:[2,524],156:[2,525],178:[2,23],180:[2,32],202:[2,621],345:[2,537],392:[2,1093],393:[2,1095],394:[2,1097],395:[2,1099],396:[2,1101],397:[2,1103],398:[2,1105],399:[2,1107],437:[2,538],559:[2,1131],560:[2,1136],634:[2,827],661:[2,1137],665:[2,1138],680:[2,1161],681:[2,1162]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: lexer.yylloc,
                    ruleId: stack.slice(stack.length - 2, stack.length).join('_'),
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


SqlParseSupport.initSyntaxParser(parser);/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true,"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* skip whitespace */ 
break;
case 1: /* skip comments */ 
break;
case 2: /* skip comments */ 
break;
case 3: parser.yy.partialCursor = false; parser.yy.cursorFound = yy_.yylloc; return 15; 
break;
case 4: parser.yy.partialCursor = true; parser.yy.cursorFound = yy_.yylloc; return 401; 
break;
case 5: this.popState(); return 447; 
break;
case 6: return 251; 
break;
case 7: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('ALTER', yy_.yylloc, yy.lexer.upcomingInput()); return 18; 
break;
case 8: return 364; 
break;
case 9: return 30; 
break;
case 10: return 242; 
break;
case 11: this.begin('between'); return 367; 
break;
case 12: return 368; 
break;
case 13: return 369; 
break;
case 14: return 121; 
break;
case 15: return 413; 
break;
case 16: return 370; 
break;
case 17: return 371; 
break;
case 18: return 41; 
break;
case 19: parser.determineCase(yy_.yytext); return 35; 
break;
case 20: return 217; 
break;
case 21: return 372; 
break;
case 22: return 373; 
break;
case 23: return 374; 
break;
case 24: return 243; 
break;
case 25: return 252; 
break;
case 26: return 365; 
break;
case 27: return 375; 
break;
case 28: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('DROP', yy_.yylloc, yy.lexer.upcomingInput()); return 145; 
break;
case 29: return 376; 
break;
case 30: return 377; 
break;
case 31: parser.yy.correlatedSubQuery = true; return 378; 
break;
case 32: return 278; 
break;
case 33: return 379; 
break;
case 34: return 380; 
break;
case 35: parser.determineCase(yy_.yytext); return 185; 
break;
case 36: return 219; 
break;
case 37: return 193; 
break;
case 38: return 204; 
break;
case 39: return 314; 
break;
case 40: return 382; 
break;
case 41: return 221; 
break;
case 42: return 165; 
break;
case 43: return 383; 
break;
case 44: return 166; 
break;
case 45: return 384; 
break;
case 46: return 218; 
break;
case 47: return 222; 
break;
case 48: return 72; 
break;
case 49: return 229; 
break;
case 50: return 90; 
break;
case 51: return 91; 
break;
case 52: return 225; 
break;
case 53: return 356; 
break;
case 54: return 385; 
break;
case 55: return 235; 
break;
case 56: return 220; 
break;
case 57: return 120; 
break;
case 58: return 386; 
break;
case 59: return 157; 
break;
case 60: return 124; 
break;
case 61: return 387; 
break;
case 62: return 224; 
break;
case 63: return 388; 
break;
case 64: return 389; 
break;
case 65: return 58; 
break;
case 66: return 390; 
break;
case 67: return 391; 
break;
case 68: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SELECT', yy_.yylloc); return 244; 
break;
case 69: return 223; 
break;
case 70: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SET', yy_.yylloc); return 14; 
break;
case 71: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SHOW', yy_.yylloc); return 'SHOW'; 
break;
case 72: return 392; 
break;
case 73: return 393; 
break;
case 74: return 26; 
break;
case 75: return 394; 
break;
case 76: return 395; 
break;
case 77: return 396; 
break;
case 78: return 'TO'; 
break;
case 79: return 277; 
break;
case 80: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('TRUNCATE', yy_.yylloc, yy.lexer.upcomingInput()); return 279; 
break;
case 81: return 502; 
break;
case 82: return 267; 
break;
case 83: parser.determineCase(yy_.yytext); return 329; 
break;
case 84: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('USE', yy_.yylloc); return 345; 
break;
case 85: return 135; 
break;
case 86: return 399; 
break;
case 87: return 34; 
break;
case 88: return 400; 
break;
case 89: return 269; 
break;
case 90: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('WITH', yy_.yylloc); return 177; 
break;
case 91: return 326; 
break;
case 92: return 58; 
break;
case 93: yy.lexer.unput('('); yy_.yytext = 'avg'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 302; 
break;
case 94: yy.lexer.unput('('); yy_.yytext = 'cast'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 315; 
break;
case 95: yy.lexer.unput('('); yy_.yytext = 'count'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 310; 
break;
case 96: yy.lexer.unput('('); yy_.yytext = 'max'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 303; 
break;
case 97: yy.lexer.unput('('); yy_.yytext = 'min'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 304; 
break;
case 98: yy.lexer.unput('('); yy_.yytext = 'stddev_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 305; 
break;
case 99: yy.lexer.unput('('); yy_.yytext = 'stddev_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 306; 
break;
case 100: yy.lexer.unput('('); yy_.yytext = 'sum'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 311; 
break;
case 101: yy.lexer.unput('('); yy_.yytext = 'var_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 307; 
break;
case 102: yy.lexer.unput('('); yy_.yytext = 'var_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 308; 
break;
case 103: yy.lexer.unput('('); yy_.yytext = 'variance'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 309; 
break;
case 104: yy.lexer.unput('('); yy_.yytext = 'cume_dist'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 312; 
break;
case 105: yy.lexer.unput('('); yy_.yytext = 'dense_rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 312; 
break;
case 106: yy.lexer.unput('('); yy_.yytext = 'first_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 312; 
break;
case 107: yy.lexer.unput('('); yy_.yytext = 'lag'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 312; 
break;
case 108: yy.lexer.unput('('); yy_.yytext = 'last_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 312; 
break;
case 109: yy.lexer.unput('('); yy_.yytext = 'lead'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 312; 
break;
case 110: yy.lexer.unput('('); yy_.yytext = 'rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 312; 
break;
case 111: yy.lexer.unput('('); yy_.yytext = 'row_number'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 312; 
break;
case 112: return 397; 
break;
case 113: return 397; 
break;
case 114: return 398; 
break;
case 115: return 357; 
break;
case 116: parser.yy.cursorFound = true; return 15; 
break;
case 117: parser.yy.cursorFound = true; return 401; 
break;
case 118: return 381; 
break;
case 119: parser.addFileLocation(yy_.yylloc, yy_.yytext); return 507; 
break;
case 120: this.popState(); return 508; 
break;
case 121: return 348; 
break;
case 122: return 364; 
break;
case 123: return 385; 
break;
case 124: return 273; 
break;
case 125: return 103; 
break;
case 126: return 104; 
break;
case 127: return 137; 
break;
case 128: return 137; 
break;
case 129: return 137; 
break;
case 130: return 137; 
break;
case 131: return 137; 
break;
case 132: return 360; 
break;
case 133: return 258; 
break;
case 134: return 365; 
break;
case 135: return 365; 
break;
case 136: return 365; 
break;
case 137: return 365; 
break;
case 138: return 365; 
break;
case 139: return 365; 
break;
case 140: return 80; 
break;
case 141: return 275; 
break;
case 142: return 115; 
break;
case 143: return 352; 
break;
case 144: return 363; 
break;
case 145: return 359; 
break;
case 146: return 74; 
break;
case 147: return 76; 
break;
case 148: return 361; 
break;
case 149: return 362; 
break;
case 150: return 231; 
break;
case 151: this.begin('backtickedValue'); return 366; 
break;
case 152:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '`')) {
                                               return 405;
                                             }
                                             return 47;
                                           
break;
case 153: this.popState(); return 366; 
break;
case 154: this.begin('singleQuotedValue'); return 45; 
break;
case 155:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '\'')) {
                                               return 405;
                                             }
                                             return 47;
                                           
break;
case 156: this.popState(); return 45; 
break;
case 157: this.begin('doubleQuotedValue'); return 46; 
break;
case 158:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '"')) {
                                               return 405;
                                             }
                                             return 47;
                                           
break;
case 159: this.popState(); return 46; 
break;
case 160: return 348; 
break;
case 161: /* To prevent console logging of unknown chars */ 
break;
case 162: 
break;
case 163: 
break;
case 164: 
break;
case 165: 
break;
case 166: 
break;
case 167:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s)/i,/^(?:--.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:AND)/i,/^(?:ALL)/i,/^(?:ALTER)/i,/^(?:AND)/i,/^(?:AS)/i,/^(?:ASC)/i,/^(?:BETWEEN)/i,/^(?:BIGINT)/i,/^(?:BOOLEAN)/i,/^(?:BY)/i,/^(?:CASCADE)/i,/^(?:CASE)/i,/^(?:CHAR)/i,/^(?:COMMENT)/i,/^(?:CREATE)/i,/^(?:CROSS)/i,/^(?:CURRENT)/i,/^(?:DATABASE)/i,/^(?:DECIMAL)/i,/^(?:DESC)/i,/^(?:DISTINCT)/i,/^(?:DIV)/i,/^(?:DOUBLE)/i,/^(?:DROP)/i,/^(?:ELSE)/i,/^(?:END)/i,/^(?:EXISTS)/i,/^(?:FALSE)/i,/^(?:FLOAT)/i,/^(?:FOLLOWING)/i,/^(?:FROM)/i,/^(?:FULL)/i,/^(?:GROUP)/i,/^(?:HAVING)/i,/^(?:IF)/i,/^(?:IN)/i,/^(?:INNER)/i,/^(?:INSERT)/i,/^(?:INT)/i,/^(?:INTO)/i,/^(?:IS)/i,/^(?:JOIN)/i,/^(?:LEFT)/i,/^(?:LIKE)/i,/^(?:LIMIT)/i,/^(?:NOT)/i,/^(?:NULL)/i,/^(?:ON)/i,/^(?:OPTION)/i,/^(?:OR)/i,/^(?:ORDER)/i,/^(?:OUTER)/i,/^(?:PARTITION)/i,/^(?:PRECEDING)/i,/^(?:PURGE)/i,/^(?:RANGE)/i,/^(?:REGEXP)/i,/^(?:RIGHT)/i,/^(?:RLIKE)/i,/^(?:ROW)/i,/^(?:ROLE)/i,/^(?:ROWS)/i,/^(?:SCHEMA)/i,/^(?:SELECT)/i,/^(?:SEMI)/i,/^(?:SET)/i,/^(?:SHOW)/i,/^(?:SMALLINT)/i,/^(?:STRING)/i,/^(?:TABLE)/i,/^(?:THEN)/i,/^(?:TIMESTAMP)/i,/^(?:TINYINT)/i,/^(?:TO)/i,/^(?:TRUE)/i,/^(?:TRUNCATE)/i,/^(?:UNBOUNDED)/i,/^(?:UNION)/i,/^(?:UPDATE)/i,/^(?:USE)/i,/^(?:VALUES)/i,/^(?:VARCHAR)/i,/^(?:VIEW)/i,/^(?:WHEN)/i,/^(?:WHERE)/i,/^(?:WITH)/i,/^(?:OVER)/i,/^(?:ROLE)/i,/^(?:AVG\s*\()/i,/^(?:CAST\s*\()/i,/^(?:COUNT\s*\()/i,/^(?:MAX\s*\()/i,/^(?:MIN\s*\()/i,/^(?:STDDEV_POP\s*\()/i,/^(?:STDDEV_SAMP\s*\()/i,/^(?:SUM\s*\()/i,/^(?:VAR_POP\s*\()/i,/^(?:VAR_SAMP\s*\()/i,/^(?:VARIANCE\s*\()/i,/^(?:CUME_DIST\s*\()/i,/^(?:DENSE_RANK\s*\()/i,/^(?:FIRST_VALUE\s*\()/i,/^(?:LAG\s*\()/i,/^(?:LAST_VALUE\s*\()/i,/^(?:LEAD\s*\()/i,/^(?:RANK\s*\()/i,/^(?:ROW_NUMBER\s*\()/i,/^(?:[0-9]+)/i,/^(?:[0-9]+(?:[YSL]|BD)?)/i,/^(?:[0-9]+E)/i,/^(?:[A-Za-z0-9_]+)/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:\s+['"])/i,/^(?:[^'"\u2020\u2021]+)/i,/^(?:['"])/i,/^(?:$)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<>)/i,/^(?:<=>)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\+)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\|)/i,/^(?:\^)/i,/^(?:&)/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:;)/i,/^(?:~)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\$\{[^}]*\})/i,/^(?:`)/i,/^(?:[^`]+)/i,/^(?:`)/i,/^(?:')/i,/^(?:(?:\\\\|\\[']|[^'])+)/i,/^(?:')/i,/^(?:")/i,/^(?:(?:\\\\|\\["]|[^"])+)/i,/^(?:")/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"hdfs":{"rules":[116,117,118,119,120,121,163],"inclusive":false},"doubleQuotedValue":{"rules":[158,159,166],"inclusive":false},"singleQuotedValue":{"rules":[155,156,165],"inclusive":false},"backtickedValue":{"rules":[152,153,164],"inclusive":false},"between":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,154,157,160,161,162,167],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,154,157,160,161,167],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
export default calciteSyntaxParser;
