// Licensed to Cloudera, Inc. under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  Cloudera, Inc. licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import SqlParseSupport from 'parse/sql/dasksql/sqlParseSupport';

var dasksqlSyntaxParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[13,90,173,177,179,180],$V1=[2,315],$V2=[173,177],$V3=[2,316],$V4=[1,10],$V5=[1,11],$V6=[1,5],$V7=[1,6],$V8=[8,173,177],$V9=[2,192],$Va=[1,19],$Vb=[1,26],$Vc=[1,28],$Vd=[1,29],$Ve=[1,30],$Vf=[1,25],$Vg=[1,24],$Vh=[2,154],$Vi=[1,32],$Vj=[1,33],$Vk=[8,112,173,177],$Vl=[7,17,90],$Vm=[7,8,17,20,27,35,50,63,64,65,66,67,68,69,70,71,75,77,81,88,89,103,112,114,173,177,185,186,187,188,191,192,193,194,195,199,200,201,202,207,212,213,214,220,223,224,225,226,230,231,232,234,237,241,249,316],$Vn=[1,53],$Vo=[1,46],$Vp=[1,86],$Vq=[1,87],$Vr=[1,88],$Vs=[1,89],$Vt=[1,90],$Vu=[1,91],$Vv=[1,92],$Vw=[1,93],$Vx=[1,79],$Vy=[1,80],$Vz=[1,73],$VA=[1,61],$VB=[1,62],$VC=[1,63],$VD=[1,64],$VE=[1,74],$VF=[1,59],$VG=[1,49],$VH=[1,51],$VI=[1,95],$VJ=[1,50],$VK=[1,54],$VL=[1,98],$VM=[1,52],$VN=[1,100],$VO=[1,48],$VP=[1,97],$VQ=[1,99],$VR=[1,94],$VS=[1,96],$VT=[7,8,77,90,103,138,139,140,141,142,143,144,145,146,147,148,150,151,152,153,154,160,185,186,187,188,190,191,192,198,201,205,212,215,216,225,237,244,245,246],$VU=[8,17,27,112,173,177],$VV=[2,791],$VW=[1,128],$VX=[1,123],$VY=[1,122],$VZ=[1,114],$V_=[1,113],$V$=[1,115],$V01=[1,121],$V11=[1,124],$V21=[1,119],$V31=[1,116],$V41=[1,118],$V51=[1,112],$V61=[1,129],$V71=[1,117],$V81=[1,120],$V91=[1,131],$Va1=[1,130],$Vb1=[8,17,20,27,35,50,63,64,65,66,67,68,69,70,75,77,81,88,89,103,112,114,173,177,185,186,187,188,191,193,194,195,199,200,201,202,207,212,213,214,220,223,224,225,226,230,231,232,234,237,241,249,316],$Vc1=[1,139],$Vd1=[1,145],$Ve1=[1,147],$Vf1=[7,8,17,20,27,35,50,63,64,65,66,67,68,69,70,75,77,81,88,89,103,112,114,173,177,185,186,187,188,191,193,194,195,199,200,201,202,207,212,213,214,220,223,224,225,226,230,231,232,234,237,241,249,316],$Vg1=[1,152],$Vh1=[7,8,17,20,27,35,50,63,64,65,66,67,68,69,70,75,77,81,88,89,103,112,114,173,177,185,186,187,188,191,192,193,194,195,199,200,201,202,207,212,213,214,220,223,224,225,226,230,231,232,234,237,241,249,316],$Vi1=[8,17,20,27,35,50,63,64,65,66,67,68,69,70,75,77,81,88,89,103,112,114,168,173,177,185,186,187,188,191,193,194,195,199,200,201,202,207,212,213,214,220,223,224,225,226,230,231,232,234,237,241,249,316],$Vj1=[13,90],$Vk1=[2,769],$Vl1=[8,35,50,75,81,112,173,177],$Vm1=[97,160,216,244],$Vn1=[8,17,27,35,50,63,64,65,66,67,68,69,70,71,75,81,112,114,173,177],$Vo1=[8,17,20,27,35,50,63,64,65,66,67,68,69,70,75,77,81,88,89,112,114,173,177,185,186,187,188,199,201,202,212,213,214,225,226,230,234,237,241,249,316],$Vp1=[8,17,20,27,35,50,63,64,65,66,67,68,69,70,75,77,81,88,89,103,112,114,173,177,185,186,187,188,191,193,194,195,199,200,201,202,207,212,213,214,225,226,230,234,237,241,249,316],$Vq1=[213,214,249],$Vr1=[7,77,138,139,140,141,142,143,144,145,146,147,148,150,151,152,153,154,160,185,186,187,188,190,191,192,198,201,205,212,215,216,225,237,244,245,246],$Vs1=[8,17,20,27,35,50,63,64,65,66,67,68,69,70,71,75,77,81,88,89,103,112,114,173,177,185,186,187,188,191,193,194,195,199,200,201,202,207,212,213,214,220,223,224,225,226,230,231,232,234,237,241,249,316],$Vt1=[8,50,75,81,112,173,177],$Vu1=[8,17,35,50,75,81,112,114,173,177],$Vv1=[1,255],$Vw1=[1,258],$Vx1=[1,256],$Vy1=[1,260],$Vz1=[1,257],$VA1=[1,259],$VB1=[1,262],$VC1=[1,261],$VD1=[8,17,35,50,63,64,65,66,67,68,69,70,71,75,81,112,114,173,177],$VE1=[8,17,20,35,50,63,64,65,66,67,68,69,70,71,75,77,81,112,114,173,177,185,186,187,188,201,212,237],$VF1=[8,17,20,27,35,50,63,64,65,66,67,68,69,70,75,77,81,88,89,112,114,173,177,185,186,187,188,193,194,195,199,201,202,207,212,213,214,225,226,230,234,237,241,249,316],$VG1=[8,17,20,27,35,50,63,64,65,66,67,68,69,70,75,77,81,88,89,112,114,173,177,185,186,187,188,199,201,212,213,214,226,230,234,237,241,249,316],$VH1=[1,281],$VI1=[8,17],$VJ1=[8,81],$VK1=[8,75,81,112,173,177],$VL1=[7,77,185,186,187,188,201],$VM1=[1,321],$VN1=[8,17,81],$VO1=[1,329],$VP1=[8,75,112,173,177],$VQ1=[8,17,35,50,63,64,65,66,67,68,69,70,75,81,112,114,173,177],$VR1=[2,113],$VS1=[1,354],$VT1=[1,377],$VU1=[2,581],$VV1=[8,17,50,75,81,112,173,177],$VW1=[202,373],$VX1=[8,199,208,245,373],$VY1=[2,827],$VZ1=[8,17,75,112,173,177,230,234],$V_1=[8,199],$V$1=[2,837],$V02=[1,410],$V12=[1,411],$V22=[1,412],$V32=[2,842],$V42=[1,419],$V52=[218,228];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"QuerySpecification":3,"CommonTableExpression":4,"SelectStatement":5,"OptionalUnions":6,"(":7,")":8,"QuerySpecification_EDIT":9,"SelectStatement_EDIT":10,"OptionalUnions_EDIT":11,"CommonTableExpression_EDIT":12,"WITH":13,"WithQueries":14,"WithQueries_EDIT":15,"WithQuery":16,",":17,"WithQuery_EDIT":18,"RegularOrBacktickedIdentifier":19,"AS":20,"TableSubQueryInner":21,"CURSOR":22,"AnyCursor":23,"RightParenthesisOrError":24,"TableSubQueryInner_EDIT":25,"FromClause":26,"FROM":27,"TableReferenceList":28,"FromClause_EDIT":29,"TableReferenceList_EDIT":30,"TableReference":31,"TableReference_EDIT":32,"OptionalGroupByClause":33,"GroupByClause":34,"GROUP":35,"BY":36,"GroupByColumnList":37,"GroupByClause_EDIT":38,"GroupByColumnList_EDIT":39,"ColumnGroupingSets":40,"ColumnReference":41,"ColumnGroupingSets_EDIT":42,"ColumnGroupingSet_EDIT":43,"ColumnReference_EDIT":44,"ValueExpression":45,"ValueExpression_EDIT":46,"GroupByColumnListPartTwo_EDIT":47,"OptionalHavingClause":48,"HavingClause":49,"HAVING":50,"HavingClause_EDIT":51,"OptionalJoins":52,"Joins":53,"Joins_INVALID":54,"JoinType":55,"TablePrimary":56,"OptionalJoinCondition":57,"Join_EDIT":58,"JoinType_EDIT":59,"TablePrimary_EDIT":60,"JoinCondition_EDIT":61,"Joins_EDIT":62,"CROSS":63,"JOIN":64,"FULL":65,"OUTER":66,"INNER":67,"LEFT":68,"SEMI":69,"RIGHT":70,"ON":71,"UsingColList":72,"OptionalLimitClause":73,"LimitClause":74,"LIMIT":75,"UnsignedNumericLiteral":76,"VARIABLE_REFERENCE":77,"LimitClause_EDIT":78,"OptionalOrderByClause":79,"OrderByClause":80,"ORDER":81,"OrderByColumnList":82,"OrderByClause_EDIT":83,"OrderByColumnList_EDIT":84,"OrderByIdentifier":85,"OrderByIdentifier_EDIT":86,"OptionalAscOrDesc":87,"ASC":88,"DESC":89,"SELECT":90,"OptionalAllOrDistinct":91,"SelectList":92,"TableExpression":93,"SelectList_EDIT":94,"TableExpression_EDIT":95,"ALL":96,"DISTINCT":97,"OptionalSelectConditions":98,"OptionalSelectConditions_EDIT":99,"SelectSpecification":100,"SelectSpecification_EDIT":101,"OptionalCorrelationName":102,"*":103,"OptionalCorrelationName_EDIT":104,"OptionalWhereClause":105,"WhereClause_EDIT":106,"WhereClause":107,"Unions":108,"Unions_EDIT":109,"UnionClause":110,"UnionClause_EDIT":111,"UNION":112,"NewStatement":113,"WHERE":114,"SearchCondition":115,"SearchCondition_EDIT":116,"UserDefinedFunction":117,"AggregateFunction":118,"OptionalOverClause":119,"AnalyticFunction":120,"OverClause":121,"CastFunction":122,"UserDefinedFunction_EDIT":123,"AggregateFunction_EDIT":124,"OptionalOverClause_EDIT":125,"AnalyticFunction_EDIT":126,"OverClause_EDIT":127,"CastFunction_EDIT":128,"OtherAggregateFunction":129,"CountFunction":130,"SumFunction":131,"OtherAggregateFunction_EDIT":132,"CountFunction_EDIT":133,"SumFunction_EDIT":134,"OtherAggregateFunction_Type":135,"UdfArgumentList":136,"UdfArgumentList_EDIT":137,"AVG":138,"MAX":139,"MIN":140,"STDDEV_POP":141,"STDDEV_SAMP":142,"VAR_POP":143,"VAR_SAMP":144,"VARIANCE":145,"COUNT":146,"SUM":147,"ANALYTIC":148,"ArbitraryFunctionName":149,"ARRAY":150,"IF":151,"MAP":152,"TRUNCATE":153,"CAST":154,"PrimitiveType":155,"NonParenthesizedValueExpressionPrimary":156,"ColumnOrArbitraryFunctionRef":157,"ArbitraryFunctionRightPart":158,"UnsignedValueSpecification":159,"NULL":160,"NonParenthesizedValueExpressionPrimary_EDIT":161,"ArbitraryFunctionRightPart_EDIT":162,"UnsignedValueSpecification_EDIT":163,"ColumnOrArbitraryFunctionRef_EDIT":164,"ArbitraryFunction":165,"RegularIdentifier":166,"ArbitraryFunction_EDIT":167,"OVER":168,"WindowExpression":169,"WindowExpression_EDIT":170,"SqlSyntax":171,"SqlStatements":172,"EOF":173,"SqlAutocomplete":174,"SqlStatements_EDIT":175,"SqlStatement":176,";":177,"SqlStatement_EDIT":178,"DataDefinition":179,"DataManipulation":180,"DataDefinition_EDIT":181,"DataManipulation_EDIT":182,"SetSpecification_EDIT":183,"NonReservedKeyword":184,"ROLE":185,"OPTION":186,"STRUCT":187,"REGULAR_IDENTIFIER":188,"NonStartingToken":189,"!":190,"-":191,".":192,"<":193,"=":194,">":195,"[":196,"]":197,"~":198,"AND":199,"ARITHMETIC_OPERATOR":200,"BACKTICK":201,"BETWEEN":202,"BIGINT":203,"BOOLEAN":204,"CASE":205,"CHAR":206,"COMPARISON_OPERATOR":207,"CURRENT":208,"DATABASE":209,"DECIMAL":210,"DOUBLE":211,"DOUBLE_QUOTE":212,"ELSE":213,"END":214,"EXISTS":215,"FALSE":216,"FLOAT":217,"FOLLOWING":218,"HDFS_START_QUOTE":219,"IN":220,"INT":221,"INTO":222,"IS":223,"LIKE":224,"NOT":225,"OR":226,"PARTITION":227,"PRECEDING":228,"PURGE":229,"RANGE":230,"REGEXP":231,"RLIKE":232,"ROW":233,"ROWS":234,"SCHEMA":235,"SET":236,"SINGLE_QUOTE":237,"SMALLINT":238,"STRING":239,"TABLE":240,"THEN":241,"TIMESTAMP":242,"TINYINT":243,"TRUE":244,"UNSIGNED_INTEGER":245,"UNSIGNED_INTEGER_E":246,"VALUES":247,"VARCHAR":248,"WHEN":249,"Commas":250,"PARTIAL_CURSOR":251,"FromOrIn":252,"DatabaseOrSchema":253,"SingleQuotedValue":254,"VALUE":255,"SingleQuotedValue_EDIT":256,"PARTIAL_VALUE":257,"DoubleQuotedValue":258,"DoubleQuotedValue_EDIT":259,"QuotedValue":260,"QuotedValue_EDIT":261,"OptionalFromDatabase":262,"DatabaseIdentifier":263,"OptionalFromDatabase_EDIT":264,"DatabaseIdentifier_EDIT":265,"OptionalCascade":266,"CASCADE":267,"OptionalIfExists":268,"OptionalIfExists_EDIT":269,"OptionalIfNotExists":270,"OptionalIfNotExists_EDIT":271,"OptionalInDatabase":272,"OptionalPartitionSpec":273,"PartitionSpec":274,"OptionalPartitionSpec_EDIT":275,"PartitionSpec_EDIT":276,"PartitionSpecList":277,"PartitionSpecList_EDIT":278,"RangePartitionSpec":279,"RangePartitionComparisonOperator":280,"RangePartitionSpec_EDIT":281,"ConfigurationName":282,"PartialBacktickedOrAnyCursor":283,"PartialBacktickedIdentifier":284,"PartialBacktickedOrCursor":285,"PartialBacktickedOrPartialCursor":286,"OptionalParenthesizedColumnList":287,"ParenthesizedColumnList":288,"OptionalParenthesizedColumnList_EDIT":289,"ParenthesizedColumnList_EDIT":290,"ColumnList":291,"ColumnList_EDIT":292,"ColumnIdentifier":293,"ParenthesizedSimpleValueList":294,"SimpleValueList":295,"SchemaQualifiedTableIdentifier":296,"SchemaQualifiedTableIdentifier_EDIT":297,"SchemaQualifiedIdentifier":298,"SchemaQualifiedIdentifier_EDIT":299,"PartitionExpression":300,"PartitionExpression_EDIT":301,"RegularOrBackTickedSchemaQualifiedName":302,"RegularOrBackTickedSchemaQualifiedName_EDIT":303,"LocalOrSchemaQualifiedName":304,"LocalOrSchemaQualifiedName_EDIT":305,"BasicIdentifierChain":306,"BasicIdentifierChain_EDIT":307,"DerivedColumnChain":308,"DerivedColumnChain_EDIT":309,"PartialBacktickedIdentifierOrPartialCursor":310,"OptionalTypeLength":311,"OptionalTypePrecision":312,"OptionalNot":313,"TableSubQuery":314,"ValueExpressionList":315,"BETWEEN_AND":316,"LikeRightPart":317,"CaseRightPart":318,"TableSubQuery_EDIT":319,"ValueExpressionInSecondPart_EDIT":320,"LikeRightPart_EDIT":321,"CaseRightPart_EDIT":322,"EndOrError":323,"ValueExpressionList_EDIT":324,"InValueList":325,"SignedInteger":326,"+":327,"UnsignedLiteral":328,"UnsignedLiteral_EDIT":329,"GeneralLiteral":330,"GeneralLiteral_EDIT":331,"ExactNumericLiteral":332,"ApproximateNumericLiteral":333,"TruthValue":334,"TablePrimaryOrJoinedTable":335,"TablePrimaryOrJoinedTable_EDIT":336,"JoinedTable":337,"JoinedTable_EDIT":338,"TableOrQueryName":339,"DerivedTable":340,"TableOrQueryName_EDIT":341,"DerivedTable_EDIT":342,"OptionalOnColumn":343,"OptionalOnColumn_EDIT":344,"PushQueryState":345,"PopQueryState":346,"SubQuery":347,"SubQuery_EDIT":348,"QueryExpression":349,"QueryExpression_EDIT":350,"QueryExpressionBody":351,"QueryExpressionBody_EDIT":352,"NonJoinQueryExpression":353,"NonJoinQueryExpression_EDIT":354,"NonJoinQueryTerm":355,"NonJoinQueryTerm_EDIT":356,"NonJoinQueryPrimary":357,"NonJoinQueryPrimary_EDIT":358,"SimpleTable":359,"SimpleTable_EDIT":360,"OptionalPartitionBy":361,"OptionalOrderByAndWindow":362,"PartitionBy_EDIT":363,"OptionalOrderByAndWindow_EDIT":364,"PartitionBy":365,"OptionalWindowSpec":366,"WindowSpec_EDIT":367,"WindowSpec":368,"RowsOrRange":369,"PopLexerState":370,"OptionalCurrentOrPreceding":371,"OptionalAndFollowing":372,"UNBOUNDED":373,"OptionalCurrentOrPreceding_EDIT":374,"OptionalAndFollowing_EDIT":375,"PushHdfsLexerState":376,"HdfsPath":377,"HDFS_PATH":378,"HDFS_END_QUOTE":379,"HdfsPath_EDIT":380,"IntegerOrUnbounded":381,"CaseWhenThenList":382,"CaseWhenThenList_EDIT":383,"CaseWhenThenListPartTwo":384,"CaseWhenThenListPartTwo_EDIT":385,"$accept":0,"$end":1},
terminals_: {2:"error",7:"(",8:")",13:"WITH",17:",",20:"AS",22:"CURSOR",27:"FROM",35:"GROUP",36:"BY",50:"HAVING",63:"CROSS",64:"JOIN",65:"FULL",66:"OUTER",67:"INNER",68:"LEFT",69:"SEMI",70:"RIGHT",71:"ON",75:"LIMIT",77:"VARIABLE_REFERENCE",81:"ORDER",88:"ASC",89:"DESC",90:"SELECT",96:"ALL",97:"DISTINCT",103:"*",112:"UNION",114:"WHERE",138:"AVG",139:"MAX",140:"MIN",141:"STDDEV_POP",142:"STDDEV_SAMP",143:"VAR_POP",144:"VAR_SAMP",145:"VARIANCE",146:"COUNT",147:"SUM",148:"ANALYTIC",150:"ARRAY",151:"IF",152:"MAP",153:"TRUNCATE",154:"CAST",160:"NULL",168:"OVER",173:"EOF",177:";",179:"DataDefinition",180:"DataManipulation",181:"DataDefinition_EDIT",182:"DataManipulation_EDIT",183:"SetSpecification_EDIT",185:"ROLE",186:"OPTION",187:"STRUCT",188:"REGULAR_IDENTIFIER",190:"!",191:"-",192:".",193:"<",194:"=",195:">",196:"[",197:"]",198:"~",199:"AND",200:"ARITHMETIC_OPERATOR",201:"BACKTICK",202:"BETWEEN",203:"BIGINT",204:"BOOLEAN",205:"CASE",206:"CHAR",207:"COMPARISON_OPERATOR",208:"CURRENT",209:"DATABASE",210:"DECIMAL",211:"DOUBLE",212:"DOUBLE_QUOTE",213:"ELSE",214:"END",215:"EXISTS",216:"FALSE",217:"FLOAT",218:"FOLLOWING",219:"HDFS_START_QUOTE",220:"IN",221:"INT",222:"INTO",223:"IS",224:"LIKE",225:"NOT",226:"OR",227:"PARTITION",228:"PRECEDING",229:"PURGE",230:"RANGE",231:"REGEXP",232:"RLIKE",233:"ROW",234:"ROWS",235:"SCHEMA",236:"SET",237:"SINGLE_QUOTE",238:"SMALLINT",239:"STRING",240:"TABLE",241:"THEN",242:"TIMESTAMP",243:"TINYINT",244:"TRUE",245:"UNSIGNED_INTEGER",246:"UNSIGNED_INTEGER_E",247:"VALUES",248:"VARCHAR",249:"WHEN",251:"PARTIAL_CURSOR",255:"VALUE",257:"PARTIAL_VALUE",267:"CASCADE",316:"BETWEEN_AND",327:"+",373:"UNBOUNDED",378:"HDFS_PATH",379:"HDFS_END_QUOTE"},
productions_: [0,[3,3],[3,5],[3,2],[9,4],[9,3],[9,3],[9,1],[9,4],[9,3],[9,2],[9,2],[4,2],[12,2],[14,1],[14,3],[15,1],[15,3],[15,3],[15,5],[16,5],[18,2],[18,5],[18,5],[26,2],[29,2],[29,2],[28,1],[28,3],[30,1],[30,3],[30,3],[30,5],[30,3],[33,0],[33,1],[34,3],[38,3],[38,3],[38,2],[40,0],[40,1],[40,3],[40,3],[42,1],[42,3],[42,3],[42,5],[42,3],[43,1],[43,1],[37,1],[37,3],[39,1],[39,2],[39,3],[39,3],[39,3],[39,4],[39,5],[47,1],[47,2],[47,1],[48,0],[48,1],[49,2],[51,2],[51,2],[52,0],[52,1],[52,1],[53,3],[53,4],[54,1],[54,2],[58,3],[58,1],[58,3],[58,3],[58,3],[62,1],[62,2],[62,2],[62,3],[55,2],[55,2],[55,3],[55,2],[55,1],[55,3],[55,2],[55,3],[55,3],[55,2],[55,3],[55,2],[55,3],[55,3],[55,2],[59,2],[59,3],[59,3],[59,2],[59,3],[59,3],[59,3],[59,3],[59,2],[59,3],[59,3],[59,3],[59,3],[59,2],[57,0],[57,2],[72,1],[72,3],[61,2],[61,2],[73,0],[73,1],[74,2],[74,4],[74,2],[74,4],[78,2],[79,0],[79,1],[80,3],[83,3],[83,2],[82,1],[82,3],[84,1],[84,2],[84,3],[84,4],[84,5],[85,2],[86,2],[86,2],[87,0],[87,1],[87,1],[5,3],[5,4],[10,3],[10,3],[10,4],[10,4],[10,4],[10,5],[10,6],[10,4],[91,0],[91,1],[91,1],[93,2],[95,2],[95,4],[95,3],[92,1],[92,3],[94,1],[94,2],[94,3],[94,3],[94,3],[94,4],[94,3],[94,3],[94,4],[94,4],[94,4],[94,5],[94,5],[100,2],[100,1],[101,2],[101,3],[101,2],[98,5],[99,5],[99,5],[99,5],[99,5],[99,5],[99,6],[99,6],[99,6],[99,6],[99,6],[6,0],[6,1],[11,1],[108,1],[108,2],[109,1],[109,2],[109,2],[109,3],[110,4],[111,3],[111,4],[111,4],[105,0],[105,1],[107,2],[106,2],[106,2],[115,1],[116,1],[117,2],[117,2],[117,1],[123,1],[123,2],[123,1],[123,2],[123,2],[123,2],[123,1],[118,1],[118,1],[118,1],[124,1],[124,1],[124,1],[129,4],[129,5],[132,5],[132,6],[132,5],[135,1],[135,1],[135,1],[135,1],[135,1],[135,1],[135,1],[135,1],[130,4],[130,3],[130,5],[133,5],[133,6],[133,5],[131,5],[131,3],[134,5],[134,6],[134,5],[120,3],[120,4],[126,4],[126,5],[126,4],[149,1],[149,1],[149,1],[149,1],[122,6],[122,3],[128,6],[128,5],[128,4],[128,6],[128,5],[128,4],[128,6],[128,5],[128,6],[128,5],[156,2],[156,2],[156,1],[156,1],[156,1],[156,1],[161,2],[161,2],[161,1],[161,1],[161,1],[165,2],[165,2],[167,2],[167,2],[158,2],[158,3],[162,3],[162,4],[162,3],[136,1],[136,3],[137,1],[137,3],[137,3],[137,5],[137,3],[137,5],[137,4],[137,3],[137,2],[137,2],[137,4],[119,0],[119,1],[125,1],[121,2],[121,2],[127,2],[171,3],[174,3],[174,3],[113,0],[172,0],[172,1],[172,4],[175,1],[175,4],[175,4],[175,7],[176,1],[176,1],[176,1],[178,1],[178,2],[178,1],[178,1],[178,1],[178,1],[184,1],[184,1],[184,1],[166,1],[166,1],[166,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[189,1],[250,1],[250,2],[23,1],[23,1],[252,1],[252,1],[253,1],[253,1],[254,3],[254,2],[256,2],[258,3],[258,2],[259,2],[260,1],[260,1],[261,1],[261,1],[262,0],[262,2],[264,2],[266,0],[266,1],[268,0],[268,2],[269,2],[270,0],[270,3],[271,2],[271,3],[272,0],[272,2],[272,2],[273,0],[273,1],[275,1],[274,4],[276,4],[279,5],[281,2],[281,3],[281,4],[281,5],[281,5],[281,5],[280,1],[280,1],[280,1],[280,1],[282,1],[282,1],[283,1],[283,1],[285,1],[285,1],[286,1],[286,1],[284,2],[24,1],[24,1],[287,0],[287,1],[289,1],[288,3],[290,3],[290,3],[291,1],[291,3],[292,3],[292,5],[294,3],[295,1],[295,3],[296,1],[296,3],[297,1],[297,3],[297,3],[298,1],[298,3],[299,1],[299,3],[299,3],[263,1],[265,1],[277,1],[277,3],[278,1],[278,3],[278,3],[278,5],[300,3],[301,3],[301,3],[301,3],[301,1],[19,1],[19,3],[19,2],[302,1],[302,3],[303,1],[303,3],[304,1],[304,2],[305,1],[305,2],[41,1],[41,3],[44,1],[306,1],[306,3],[307,3],[307,5],[308,1],[308,3],[309,1],[309,3],[309,5],[309,3],[293,1],[310,1],[310,1],[155,1],[155,1],[155,2],[155,2],[155,1],[155,1],[155,1],[155,1],[155,1],[155,1],[155,1],[155,2],[311,0],[311,3],[312,0],[312,3],[312,5],[45,1],[45,2],[45,2],[45,2],[45,2],[45,4],[45,4],[45,4],[45,6],[45,2],[45,3],[45,3],[45,3],[45,3],[45,3],[45,6],[45,6],[45,5],[45,5],[45,6],[45,5],[45,3],[45,3],[45,3],[45,3],[45,3],[45,2],[45,3],[45,2],[45,3],[46,1],[46,3],[46,2],[46,2],[46,2],[46,2],[46,2],[46,2],[46,2],[46,2],[46,3],[46,4],[46,5],[46,4],[46,4],[46,4],[46,6],[46,6],[46,2],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,4],[46,3],[46,6],[46,6],[46,5],[46,5],[46,6],[46,6],[46,6],[46,6],[46,5],[46,4],[46,5],[46,5],[46,5],[46,5],[46,4],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,2],[46,3],[46,2],[46,3],[46,2],[46,3],[46,2],[46,3],[46,3],[46,4],[46,3],[46,3],[46,3],[315,1],[315,3],[324,1],[324,3],[324,3],[324,5],[324,3],[324,5],[324,4],[324,3],[324,2],[324,2],[324,4],[325,1],[325,3],[157,1],[157,3],[164,1],[326,1],[326,2],[326,2],[159,1],[163,1],[328,1],[328,1],[329,1],[76,1],[76,1],[332,1],[332,2],[332,3],[332,2],[333,2],[333,3],[333,4],[330,1],[330,1],[330,1],[331,1],[331,1],[334,1],[334,1],[313,0],[313,1],[31,1],[32,1],[335,1],[335,1],[336,1],[336,1],[337,2],[338,2],[338,2],[56,2],[56,2],[60,2],[60,2],[60,2],[339,1],[341,1],[340,1],[342,1],[343,0],[343,2],[344,2],[344,2],[345,0],[346,0],[314,3],[314,4],[319,3],[319,3],[21,2],[25,3],[347,1],[348,1],[349,1],[350,1],[351,1],[352,1],[353,1],[354,1],[355,1],[356,1],[357,1],[358,1],[359,1],[360,1],[102,0],[102,1],[102,1],[102,2],[102,2],[104,1],[104,1],[104,2],[104,2],[104,2],[169,4],[170,4],[170,4],[170,5],[170,7],[361,0],[361,1],[365,3],[363,2],[363,3],[363,3],[362,0],[362,2],[364,1],[364,3],[364,2],[366,0],[366,1],[368,5],[368,5],[367,2],[367,6],[367,5],[367,5],[367,5],[367,4],[370,0],[376,0],[377,3],[380,5],[380,4],[380,3],[380,3],[380,2],[369,1],[369,1],[371,0],[371,2],[371,2],[374,2],[374,2],[372,0],[372,3],[372,3],[375,2],[375,3],[375,3],[381,1],[381,1],[320,3],[320,3],[320,3],[317,2],[317,2],[317,2],[321,2],[321,2],[321,2],[321,2],[321,2],[321,2],[318,2],[318,4],[322,2],[322,4],[322,4],[322,3],[322,4],[322,3],[322,4],[322,4],[322,3],[322,4],[322,3],[323,1],[323,1],[382,1],[382,2],[383,1],[383,2],[383,3],[383,3],[383,2],[384,4],[385,2],[385,3],[385,4],[385,4],[385,3],[385,3],[385,4],[385,2],[385,3],[385,2],[385,3],[385,3],[385,4],[385,3],[385,4],[385,4],[385,5],[385,4],[385,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 2: case 175:
this.$ = $$[$0-2];
break;
case 3: case 173: case 289: case 292: case 454: case 457: case 543: case 596: case 771:
this.$ = $$[$0-1];
break;
case 4:

     parser.addCommonTableExpressions($$[$0-3]);
   
break;
case 5: case 6: case 17:

     parser.addCommonTableExpressions($$[$0-2]);
   
break;
case 12: case 28: case 52: case 128: case 132: case 170: case 180: case 207: case 696: case 698: case 753: case 808: case 883:
this.$ = $$[$0];
break;
case 14:
this.$ = [$$[$0]];
break;
case 15:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 19:

     parser.addCommonTableExpressions($$[$0-4]);
   
break;
case 20:

     parser.addCteAliasLocation(_$[$0-4], $$[$0-4]);
     $$[$0-1].alias = $$[$0-4];
     this.$ = $$[$0-1];
   
break;
case 21:

     parser.suggestKeywords(['AS']);
   
break;
case 22: case 327: case 774:

     parser.suggestKeywords(['SELECT']);
   
break;
case 24:

     this.$ = { tableReferenceList : $$[$0] }
   
break;
case 25: case 33:

       parser.suggestTables();
       parser.suggestDatabases({ appendDot: true });
   
break;
case 36:

     this.$ = { valueExpression: $$[$0] };
   
break;
case 37: case 139:

     parser.suggestSelectListAliases();
   
break;
case 38:

     parser.valueExpressionSuggest();
     parser.suggestSelectListAliases();
     parser.suggestGroupBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 39:

     parser.suggestKeywords(['BY']);
     parser.suggestGroupBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 49: case 511: case 514: case 515: case 540: case 541: case 562: case 565:

     parser.suggestColumns();
   
break;
case 54: case 55: case 61: case 62: case 539: case 767: case 810:

     parser.valueExpressionSuggest();
   
break;
case 66:

     parser.valueExpressionSuggest();
     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 67:

     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 71:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-2];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
        parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 72:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-3];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
       parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 73:
this.$ = { joinType: $$[$0] };
break;
case 74:
this.$ = { joinType: $$[$0-1] };
break;
case 75:

     if ($$[$0-2].suggestKeywords) {
       parser.suggestKeywords($$[$0-2].suggestKeywords);
     }
   
break;
case 76:

     if ($$[$0].suggestKeywords) {
       parser.suggestKeywords($$[$0].suggestKeywords);
     }
   
break;
case 79:

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         parser.suggestJoins({
           prependJoin: false,
           joinType: $$[$0-2],
           tables: tables
         })
       }
     }
     parser.suggestTables();
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 84:
this.$ = 'CROSS JOIN';
break;
case 85:
this.$ = 'FULL JOIN';
break;
case 86:
this.$ = 'FULL OUTER JOIN';
break;
case 87:
this.$ = 'INNER JOIN';
break;
case 88:
this.$ = 'JOIN';
break;
case 89:
this.$ = 'LEFT INNER JOIN';
break;
case 90:
this.$ = 'LEFT JOIN';
break;
case 91:
this.$ = 'LEFT OUTER JOIN';
break;
case 92:
this.$ = 'LEFT SEMI JOIN';
break;
case 93:
this.$ = 'OUTER JOIN';
break;
case 94: case 96:
this.$ = 'RIGHT OUTER JOIN';
break;
case 95:
this.$ = 'RIGHT JOIN';
break;
case 97:
this.$ = 'RIGHT SEMI JOIN';
break;
case 98:
this.$ = 'SEMI JOIN';
break;
case 99: case 101: case 102: case 104: case 105: case 106: case 107: case 109: case 110: case 111: case 112:
this.$ = { suggestKeywords: ['JOIN'] };
break;
case 100: case 103: case 108:
this.$ = { suggestKeywords: ['OUTER'] };
break;
case 113:
this.$ = { noJoinCondition: true, suggestKeywords: ['ON'] };
break;
case 114:
this.$ = { valueExpression: $$[$0] };
break;
case 118:

     parser.valueExpressionSuggest();
     parser.suggestJoinConditions({ prependOn: false });
   
break;
case 125:

     parser.suggestKeywords([{ value: '10', weight: 10000 }, { value: '100', weight: 10000 }, { value: '1000', weight: 10000 }, { value: '5000', weight: 10000 }, { value: '10000', weight: 10000 }])
   
break;
case 129:

     if ($$[$0].emptyOrderBy) {
       parser.suggestOrderBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 130:

     parser.suggestKeywords(['BY']);
     parser.suggestOrderBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 134:

     this.$ = { emptyOrderBy: false }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 135: case 136: case 137:
this.$ = { emptyOrderBy: false };
break;
case 138:
this.$ = parser.mergeSuggestKeywords($$[$0]);
break;
case 140:

     this.$ = { emptyOrderBy: true }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 141:
this.$ = { suggestKeywords: ['ASC', 'DESC'] };;
break;
case 144:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     this.$ = { selectList: $$[$0] };
   
break;
case 145:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     this.$ = { selectList: $$[$0-1], tableExpression: $$[$0] }
   
break;
case 146:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     if ($$[$0].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-1]) {
         keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
       }
       parser.suggestKeywords(keywords);
     } else {
       parser.checkForSelectListKeywords($$[$0]);
     }
     if ($$[$0].suggestFunctions) {
       parser.suggestFunctions();
     }
     if ($$[$0].suggestColumns) {
       parser.suggestColumns({ identifierChain: [], source: 'select' });
     }
     if ($$[$0].suggestTables) {
       parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     }
     if ($$[$0].suggestDatabases) {
       parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
     }
     if ($$[$0].suggestAggregateFunctions && (!$$[$0-1] || $$[$0-1] === 'ALL')) {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
   
break;
case 147:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-1] || $$[$0-1] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-1]) {
       keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 148:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
   
break;
case 149:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.selectListNoTableSuggest($$[$0-1], $$[$0-2]);
     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'select';
     }
   
break;
case 150:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2] || $$[$0-2] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-2]) {
       keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 151:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]), _$[$0-2]);
     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 152:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]), _$[$0-3]);
     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 153:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.checkForSelectListKeywords($$[$0-1]);
     var keywords = ['FROM'];
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.suggestTables({ prependFrom: true });
     parser.suggestDatabases({ prependFrom: true, appendDot: true });
   
break;
case 157: case 158:

     parser.addClauseLocation('whereClause', _$[$0-1], $$[$0].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0].limitClausePreceding || _$[$0-1], $$[$0].limitClauseLocation);
   
break;
case 159:

     var keywords = [];

     parser.addClauseLocation('whereClause', _$[$0-3], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-2].limitClausePreceding || _$[$0-3], $$[$0-2].limitClauseLocation);

     if ($$[$0-3]) {
       if (typeof $$[$0-3].tableReferenceList.hasJoinCondition !== 'undefined' && !$$[$0-3].tableReferenceList.hasJoinCondition) {
         keywords.push({ value: 'ON', weight: 3 });
       }
       if ($$[$0-3].suggestKeywords) {
         keywords = parser.createWeightedKeywords($$[$0-3].suggestKeywords, 3);
       }
       if ($$[$0-3].tableReferenceList.suggestJoinConditions) {
         parser.suggestJoinConditions($$[$0-3].tableReferenceList.suggestJoinConditions);
       }
       if ($$[$0-3].tableReferenceList.suggestJoins) {
         parser.suggestJoins($$[$0-3].tableReferenceList.suggestJoins);
       }
       if ($$[$0-3].tableReferenceList.suggestKeywords) {
         keywords = keywords.concat(parser.createWeightedKeywords($$[$0-3].tableReferenceList.suggestKeywords, 3));
       }

       // Lower the weights for 'TABLESAMPLE'
       keywords.forEach(function (keyword) {
         if (keyword.value === 'TABLESAMPLE') {
           keyword.weight = 1.1;
         }
       });

       if ($$[$0-3].tableReferenceList.types) {
         var veKeywords = parser.getValueExpressionKeywords($$[$0-3].tableReferenceList);
         keywords = keywords.concat(veKeywords.suggestKeywords);
         if (veKeywords.suggestColRefKeywords) {
           parser.suggestColRefKeywords(veKeywords.suggestColRefKeywords);
           parser.addColRefIfExists($$[$0-3].tableReferenceList);
         }
       }
     }

     if ($$[$0-1].empty && $$[$0] && $$[$0].joinType.toUpperCase() === 'JOIN') {
       keywords = keywords.concat(['FULL', 'FULL OUTER', 'INNER', 'LEFT', 'LEFT OUTER', 'RIGHT', 'RIGHT OUTER']);
       parser.suggestKeywords(keywords);
       return;
     }

     if ($$[$0-1].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].suggestFilters) {
       parser.suggestFilters($$[$0-1].suggestFilters);
     }
     if ($$[$0-1].suggestGroupBys) {
       parser.suggestGroupBys($$[$0-1].suggestGroupBys);
     }
     if ($$[$0-1].suggestOrderBys) {
       parser.suggestOrderBys($$[$0-1].suggestOrderBys);
     }

     if ($$[$0-1].empty) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }

     keywords = keywords.concat([
       { value: 'FULL JOIN', weight: 1 },
       { value: 'FULL OUTER JOIN', weight: 1 },
       { value: 'INNER JOIN', weight: 1 },
       { value: 'JOIN', weight: 1 },
       { value: 'LEFT JOIN', weight: 1 },
       { value: 'LEFT OUTER JOIN', weight: 1 },
       { value: 'RIGHT JOIN', weight: 1 },
       { value: 'RIGHT OUTER JOIN', weight: 1 }
     ]);
     parser.suggestKeywords(keywords);
  
break;
case 160:

     // A couple of things are going on here:
     // - If there are no SelectConditions (WHERE, GROUP BY, etc.) we should suggest complete join options
     // - If there's an OptionalJoin at the end, i.e. 'SELECT * FROM foo | JOIN ...' we should suggest
     //   different join types
     // - The FromClause could end with a valueExpression, in which case we should suggest keywords like '='
     //   or 'AND' based on type

     if (!$$[$0-1]) {
       parser.addClauseLocation('whereClause', _$[$0-2]);
       parser.addClauseLocation('limitClause', _$[$0-2]);
       return;
     }
     parser.addClauseLocation('whereClause', _$[$0-2], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-1].limitClausePreceding || _$[$0-2], $$[$0-1].limitClauseLocation);
     var keywords = [];

     if ($$[$0-1].suggestColRefKeywords) {
       parser.suggestColRefKeywords($$[$0-1].suggestColRefKeywords);
       parser.addColRefIfExists($$[$0-1]);
     }

     if ($$[$0-1].suggestKeywords && $$[$0-1].suggestKeywords.length) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].cursorAtEnd) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 161:
this.$ = [ $$[$0] ];
break;
case 162:

     $$[$0-2].push($$[$0]);
   
break;
case 164: case 165:

     this.$ = { cursorAtStart : true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 167:

     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 168:

     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 169:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestTables: true, suggestDatabases: true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 171: case 172: case 174:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true,  };
   
break;
case 176:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
       this.$ = { valueExpression: $$[$0-1], alias: $$[$0].alias };
       if (!parser.yy.selectListAliases) {
         parser.yy.selectListAliases = [];
       }
       parser.yy.selectListAliases.push($$[$0-1].function && $$[$0-1].types && $$[$0-1].types.length && $$[$0-1].types[0] === 'UDFREF' ? { name: $$[$0].alias, udfRef: $$[$0-1].function, types: $$[$0-1].types } : { name: $$[$0].alias, types: $$[$0-1].types || ['T'] });
     } else {
       this.$ = { valueExpression: $$[$0-1] }
     }
   
break;
case 177:

     parser.addAsteriskLocation(_$[$0], [{ asterisk: true }]);
     this.$ = { asterisk: true }
   
break;
case 178:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
     }
   
break;
case 179:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.addColumnAliasLocation(_$[$0], $$[$0], _$[$0-2]);
     this.$ = { suggestAggregateFunctions: true };
   
break;
case 181:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'WHERE', weight: 7 }, { value: 'GROUP BY', weight: 6 }, { value: 'HAVING', weight: 5 }, { value: 'ORDER BY', weight: 4 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true, true]);

     if (keywords.length > 0) {
       this.$ = { suggestKeywords: keywords, empty: !$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0] };
     } else {
       this.$ = {};
     }

     this.$.whereClauseLocation = $$[$0-4] ? _$[$0-4] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;

     if (!$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestFilters = { prefix: 'WHERE', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestGroupBys = { prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-1] && !$$[$0]) {
       this.$.suggestOrderBys = { prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
   
break;
case 182:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'where';
     }
   
break;
case 183:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'group by';
     }
   
break;
case 185:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'order by';
     }
   
break;
case 187:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'GROUP BY', weight: 8 }, { value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true]);
     if ($$[$0-5].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-5].suggestKeywords, 1));
     }
     this.$ = parser.getValueExpressionKeywords($$[$0-5], keywords);
     this.$.cursorAtEnd = !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if ($$[$0-5].columnReference) {
       this.$.columnReference = $$[$0-5].columnReference;
     }
     if (!$$[$0-3]) {
       parser.suggestGroupBys({ prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 188:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true]);
     if ($$[$0-4].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-4].suggestKeywords, 8));
     }
     if ($$[$0-4].valueExpression) {
       this.$ = parser.getValueExpressionKeywords($$[$0-4].valueExpression, keywords);
       if ($$[$0-4].valueExpression.columnReference) {
         this.$.columnReference = $$[$0-4].valueExpression.columnReference;
       }
     } else {
       this.$ = { suggestKeywords: keywords };
     }
     this.$.cursorAtEnd = !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 189:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-1], $$[$0]],
       [{ value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true]);
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0-1] && !$$[$0] };
     if (!$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-3], _$[$0-3]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 190:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0]],
       [{ value: 'LIMIT', weight: 3 }],
       [true]);
     if ($$[$0-2].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-2].suggestKeywords, 4));
     }
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0] };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 191:

     this.$ = { suggestKeywords: [], cursorAtEnd: true };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = _$[$0-1];
   
break;
case 202:

     parser.suggestKeywords(['ALL', 'DISTINCT', 'SELECT']);
   
break;
case 203:

     parser.suggestKeywords(['ALL', 'DISTINCT']);
   
break;
case 208:

     if ($$[$0].suggestFilters) {
       parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 209:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS', 'NOT EXISTS']);
     parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 212:

     if (!$$[$0]) {
       $$[$0-1].suggestKeywords = ['OVER'];
     }
   
break;
case 219:

     parser.suggestKeywords(['OVER']);
   
break;
case 228:

     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 229: case 247:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 230:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       if ($$[$0-4].toLowerCase() === 'group_concat') {
         keywords.push('ALL');
       } else {
         keywords.push('DISTINCT');
       }
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 231: case 245:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 232:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords(true);
       if (!$$[$0-2]) {
         if ($$[$0-4].toLowerCase() === 'group_concat') {
           keywords.push('ALL');
         } else {
           keywords.push('DISTINCT');
         }
       }
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
       parser.suggestKeywords(keywords);
     }
     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], $$[$0-1].activePosition);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 241:

     parser.addFunctionArgumentLocations($$[$0-3], [{
       expression: { text: $$[$0-1] },
       location: _$[$0-1]
     }]);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] }
   
break;
case 242: case 248:

     this.$ = { function: $$[$0-2], types: ['UDFREF'] }
   
break;
case 243:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] }
   
break;
case 244:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 246:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-2]) {
         keywords.push('DISTINCT');
       }
       parser.suggestKeywords(keywords);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 249:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 250:

     parser.suggestValueExpressionKeywords($$[$0-2]);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 251:

     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 252:

    this.$ = { function: $$[$0-2], types: ['UDFREF'] }
  
break;
case 253:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     this.$ = {
       function: $$[$0-3],
       expression: $$[$0-1].expressions[$$[$0-1].expressions.length - 1].expression,
       types: ['UDFREF']
     }
   
break;
case 254:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-3], 1);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 255:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-2].expressions);
     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 256:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     parser.applyArgumentTypesToSuggestions($$[$0-3], $$[$0-1].activePosition);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 261:

     var expression = $$[$0-3];
     parser.extractExpressionText(expression, $$[$0-3], $$[$0-2], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-5], [{
       expression: expression,
       location: {
         first_line: _$[$0-3].first_line,
         last_line: _$[$0-1].last_line,
         first_column: _$[$0-3].first_column,
         last_column: _$[$0-1].last_column
       }
     }]);
     this.$ = { types: [ $$[$0-1].toUpperCase() ] }
   
break;
case 262: case 267: case 268: case 702:
this.$ = { types: [ 'T' ] };
break;
case 263:

     parser.valueExpressionSuggest();
     this.$ = { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 264: case 265:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ] };
   
break;
case 266:
this.$ = { types: [ $$[$0-1].toUpperCase() ] };
break;
case 269:

     parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'AS', weight: 2 }]);
     this.$ =  { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 270:

     parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'AS', weight: 2 }]);
     this.$ = { types: [ 'T' ] };
   
break;
case 271: case 272:

     parser.suggestKeywords(parser.getTypeKeywords());
     this.$ = { types: [ 'T' ] };
   
break;
case 273:

     // We need to handle arbitrary UDFs here instead of inside UserDefinedFunction or there will be a conflict
     // with columnReference for functions like: db.udf(foo)
     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     if ($$[$0-1].lastLoc && $$[$0-1].lastLoc.location) {
       $$[$0-1].lastLoc.type = 'function';
       $$[$0-1].lastLoc.function = fn;
       $$[$0-1].lastLoc.location = {
         first_line: $$[$0-1].lastLoc.location.first_line,
         last_line: $$[$0-1].lastLoc.location.last_line,
         first_column: $$[$0-1].lastLoc.location.first_column,
         last_column: $$[$0-1].lastLoc.location.last_column - 1
       }
       if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
          $$[$0-1].firstLoc.type = 'database';
       } else {
         delete $$[$0-1].lastLoc.identifierChain;
       }
     }
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: fn, expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: fn, types: ['UDFREF'] }
     }
   
break;
case 274:

    parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
    if ($$[$0].expressions && $$[$0].expressions.length) {
      this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
    } else {
      this.$ = { function: $$[$0-1], types: ['UDFREF'] }
    }
  
break;
case 277:
this.$ = { types: ['COLREF'], columnReference: $$[$0].chain };
break;
case 278:
this.$ = { types: [ 'NULL' ], text: $$[$0] };
break;
case 279:

     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     $$[$0-1].lastLoc.type = 'function';
     $$[$0-1].lastLoc.function = fn;
     $$[$0-1].lastLoc.location = {
       first_line: $$[$0-1].lastLoc.location.first_line,
       last_line: $$[$0-1].lastLoc.location.last_line,
       first_column: $$[$0-1].lastLoc.location.first_column,
       last_column: $$[$0-1].lastLoc.location.last_column - 1
     }
     if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
        $$[$0-1].firstLoc.type = 'database';
     } else {
       delete $$[$0-1].lastLoc.identifierChain;
     }
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions(fn, $$[$0].activePosition);
     }
     this.$ = { function: fn, types: ['UDFREF'] };
   
break;
case 280: case 286: case 287:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions($$[$0-1], $$[$0].activePosition);
     }
     this.$ = { function: $$[$0-1], types: ['UDFREF'] };
   
break;
case 283:

     if ($$[$0].suggestKeywords) {
       this.$ = { types: ['COLREF'], columnReference: $$[$0], suggestKeywords: $$[$0].suggestKeywords };
     } else {
       this.$ = { types: ['COLREF'], columnReference: $$[$0] };
     }
   
break;
case 284: case 285:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: $$[$0-1], types: ['UDFREF'] }
     }
   
break;
case 290:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }]
     }
   
break;
case 291:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = $$[$0-3];
   
break;
case 293: case 295:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0], location: _$[$0] }]
     }
   
break;
case 294: case 296:

     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: $$[$0], location: _$[$0] }])
     }
   
break;
case 297:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0-2], location: _$[$0-2] }].concat($$[$0].expressions)
     }
   
break;
case 298:

     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: $$[$0-2], location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 299:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: { text: '' }, location: _$[$0] }])
     }
   
break;
case 300:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: { text: '' }, location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 301:

     parser.suggestValueExpressionKeywords($$[$0-3].expressions[$$[$0-3].expressions.length - 1].expression);
     this.$ = {
       activePosition: $$[$0-3].activePosition,
       expressions: $$[$0-3].expressions.concat($$[$0].expressions)
     }
   
break;
case 302:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 303:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 304:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 305:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-3] }, { expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 313: case 314:

     return parser.yy.result;
   
break;
case 315:

     parser.prepareNewStatement();
   
break;
case 317: case 319: case 321:

     parser.addStatementLocation(_$[$0]);
   
break;
case 320: case 322:

     parser.addStatementLocation(_$[$0-3]);
   
break;
case 326:

     parser.suggestDdlAndDmlKeywords();
   
break;
case 455: case 458: case 544:
this.$ = '';
break;
case 470: case 473:

     parser.yy.correlatedSubQuery = false;
   
break;
case 471: case 475:

     parser.suggestKeywords(['EXISTS']);
   
break;
case 474:

     parser.suggestKeywords(['NOT EXISTS']);
   
break;
case 485: case 487: case 488: case 490:

     parser.suggestKeywords(['<', '<=', '<>', '=', '>', '>=']);
   
break;
case 486: case 489:

     parser.suggestKeywords(['VALUES']);
   
break;
case 519: case 545:

     parser.addTableLocation(_$[$0], [ { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0] } ] };
   
break;
case 520: case 546:

     parser.addDatabaseLocation(_$[$0-2], [ { name: $$[$0-2] } ]);
     parser.addTableLocation(_$[$0], [ { name: $$[$0-2] }, { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0-2] }, { name: $$[$0] } ] };
   
break;
case 521:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 522: case 527:

     parser.suggestDatabases();
     this.$ = { identifierChain: [{ name: $$[$0-2] }] };
   
break;
case 523: case 548:

     parser.suggestTablesOrColumns($$[$0-2]);
   
break;
case 524:
this.$ = [{ name: $$[$0] }];
break;
case 525:
this.$ = [{ name: $$[$0-2] }, { name: $$[$0-1] }];
break;
case 526:

     parser.suggestDatabases({ appendDot: true });
   
break;
case 530:

     parser.suggestDatabases();
   
break;
case 547:

     parser.suggestTables();
     parser.suggestDatabases({ prependDot: true });
   
break;
case 550:
this.$ = { identifierChain: $$[$0-1].identifierChain, alias: $$[$0] };
break;
case 553:

     parser.yy.locations[parser.yy.locations.length - 1].type = 'column';
   
break;
case 554: case 719:

     parser.addAsteriskLocation(_$[$0], $$[$0-2].concat({ asterisk: true }));
   
break;
case 556:

     this.$ = [ $$[$0].identifier ];
     parser.yy.firstChainLocation = parser.addUnknownLocation($$[$0].location, [ $$[$0].identifier ]);
   
break;
case 557:

     if (parser.yy.firstChainLocation) {
       parser.yy.firstChainLocation.firstInChain = true;
       delete parser.yy.firstChainLocation;
     }
     $$[$0-2].push($$[$0].identifier);
     parser.addUnknownLocation($$[$0].location, $$[$0-2].concat());
   
break;
case 558:

     parser.suggestColumns({
       identifierChain: $$[$0-2]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 559:

     parser.suggestColumns({
       identifierChain: $$[$0-4]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 560:
this.$ = [ $$[$0].identifier ];
break;
case 561:

     $$[$0-2].push($$[$0].identifier);
   
break;
case 563:

     parser.suggestColumns({ identifierChain: $$[$0-2] });
   
break;
case 564:

     parser.suggestColumns({ identifierChain: $$[$0-4] });
   
break;
case 566:
this.$ = { identifier: { name: $$[$0] }, location: _$[$0] };
break;
case 587: case 588:

     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 589: case 614:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 590:

     // verifyType($$[$0], 'NUMBER');
     this.$ = $$[$0];
     $$[$0].types = ['NUMBER'];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 591: case 592: case 593:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 594:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 595:

     this.$ = { types: [ 'BOOLEAN' ] };
     // clear correlated flag after completed sub-query (set by lexer)
     parser.yy.correlatedSubQuery = false;
   
break;
case 597: case 598: case 599: case 600:

     parser.addColRefToVariableIfExists($$[$0-2], $$[$0]);
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 601: case 602: case 603: case 604: case 634: case 692: case 693:
this.$ = { types: [ 'BOOLEAN' ] };
break;
case 605:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 606:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 607: case 608:

     // verifyType($$[$0-2], 'BOOLEAN');
     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 609: case 610: case 611:

     // verifyType($$[$0-2], 'NUMBER');
     // verifyType($$[$0], 'NUMBER');
     this.$ = { types: [ 'NUMBER' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 612:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 613:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 615:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 617:

     parser.suggestKeywords(['BETWEEN', 'EXISTS', 'IN', 'LIKE', 'REGEXP', 'RLIKE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 618: case 620:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
break;
case 619:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 621:

     parser.suggestFunctions({ types: [ 'BOOLEAN' ] });
     parser.suggestColumns({ types: [ 'BOOLEAN' ] });
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 622:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0].suggestFilters };
break;
case 623:

     parser.suggestFunctions();
     parser.suggestColumns();
     this.$ = { types: [ 'T' ] };
   
break;
case 624:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 625:

     parser.suggestFunctions({ types: [ 'NUMBER' ] });
     parser.suggestColumns({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ] };
   
break;
case 626:

     parser.suggestKeywords(['FALSE', 'NOT NULL', 'NOT TRUE', 'NOT FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 627:

     parser.suggestKeywords(['FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 628:

     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 629: case 630: case 631:

     parser.suggestKeywords(['NOT']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 632:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-3] ? 'IS NOT DISTINCT FROM' : 'IS DISTINCT FROM');
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 633:

     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 635:

     this.$ = $$[$0-1];
   
break;
case 636:

     parser.valueExpressionSuggest();
     this.$ = { types: ['T'], typeSet: true };
   
break;
case 637:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 638: case 639: case 640:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 641: case 642: case 643: case 644:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0]);
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 645: case 647:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 646:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ] , typeSet: true, endsWithLessThanOrEqual: true };
   
break;
case 648:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, endsWithLessThanOrEqual: $$[$0-1] === '<='  };
   
break;
case 649: case 650: case 651: case 652:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 653:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-3]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 654:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 655: case 656:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
break;
case 657: case 658:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
break;
case 659:

     if ($$[$0-2].types[0] === $$[$0].types[0] && !$$[$0-5].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
   
break;
case 660:

     if ($$[$0-5].types[0] === $$[$0].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 661:

     if ($$[$0-5].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 662:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 663: case 669:

     parser.suggestValueExpressionKeywords($$[$0-1], ['AND']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 664:

     parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 665:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-4].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
   
break;
case 666:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 667:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 668:

     parser.valueExpressionSuggest($$[$0-4], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-4]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 670:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 671: case 673: case 675: case 677:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, suggestFilters: true };
   
break;
case 672: case 676:

     parser.addColRefIfExists($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 674: case 678:

     parser.addColRefIfExists($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 679: case 680:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 681: case 682: case 683:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 684: case 685: case 686:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 687: case 688: case 689:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 690:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 691:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
break;
case 694:

     parser.valueExpressionSuggest(undefined, $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 695:

     parser.valueExpressionSuggest(undefined, $$[$0-1] + ' ' + $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 697:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 699:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 700:

      this.$ = $$[$0];
      this.$.suggestFilters = $$[$0-1].suggestFilters;
    
break;
case 701:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 703: case 705:

     $$[$0].position = 1;
   
break;
case 704:

     $$[$0].position = $$[$0-2].position + 1;
     this.$ = $$[$0];
   
break;
case 706:

     $$[$0-2].position += 1;
   
break;
case 707:

     $$[$0-2].position = 1;
   
break;
case 708:

     $$[$0-4].position += 1;
   
break;
case 709:

     parser.valueExpressionSuggest();
     $$[$0-2].position += 1;
   
break;
case 710:

     parser.valueExpressionSuggest();
     $$[$0-4].position += 1;
   
break;
case 711:

     parser.suggestValueExpressionKeywords($$[$0-3]);
   
break;
case 712: case 713:

     parser.valueExpressionSuggest();
     this.$ = { cursorAtStart : true, position: 1 };
   
break;
case 714: case 715:

     parser.valueExpressionSuggest();
     this.$ = { position: 2 };
   
break;
case 718:

     var lastLoc = parser.yy.locations[parser.yy.locations.length - 1];
     if (lastLoc.type !== 'variable') {
       lastLoc.type = 'column';
     }
     // used for function references with db prefix
     var firstLoc = parser.yy.locations[parser.yy.locations.length - $$[$0].length];
     this.$ = { chain: $$[$0], firstLoc: firstLoc, lastLoc: lastLoc }
   
break;
case 725:

     parser.suggestValues($$[$0]);
   
break;
case 726:
this.$ = { types: [ 'NUMBER' ], text: $$[$0] };
break;
case 732: case 734: case 735:
this.$ = $$[$0-1] + $$[$0];
break;
case 733: case 736:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 737:
this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 738:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: "'" + $$[$0] + "'" }
     } else {
       this.$ = { types: [ 'STRING' ] }
     }
   
break;
case 739:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: '"' + $$[$0] + '"' }
     } else {
       this.$ = { types: [ 'STRING' ], text: '"' + $$[$0] + '"' }
     }
   
break;
case 740:
this.$ = { types: [ 'BOOLEAN' ], text: $$[$0] };
break;
case 741:

    this.$ = { partialQuote: '\'', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 742:

    this.$ = { partialQuote: '"', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 749:

     this.$ = $$[$0];

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         this.$.suggestJoins = {
           prependJoin: true,
           tables: tables
         };
       }
      }
   
break;
case 756:

     this.$ = {
       primary: $$[$0-1]
     }
     if ($$[$0-1].identifierChain) {
       if ($$[$0]) {
         $$[$0-1].alias = $$[$0].alias
         parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
       }
       parser.addTablePrimary($$[$0-1]);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     } else if ($$[$0].suggestKeywords) {
       keywords = $$[$0].suggestKeywords;
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 757:

     this.$ = {
       primary: $$[$0-1]
     };

     if ($$[$0]) {
       this.$.primary.alias = $$[$0].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 758:

     if ($$[$0]) {
       parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }
   
break;
case 759:

     if ($$[$0]) {
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias);
     }
   
break;
case 769:

     parser.pushQueryState();
   
break;
case 770:

     parser.popQueryState();
   
break;
case 772:

     if ($$[$0-1]) {
       $$[$0-2].alias = $$[$0-1].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0-1].alias });
       parser.addSubqueryAliasLocation($$[$0-1].location, $$[$0-1].alias, $$[$0-2].identifierChain);
     }
     this.$ = $$[$0-2];
   
break;
case 775:

     var subQuery = parser.getSubQuery($$[$0]);
     subQuery.columns.forEach(function (column) {
       parser.expandIdentifierChain({ wrapper: column });
       delete column.linked;
     });
     parser.popQueryState(subQuery);
     this.$ = subQuery;
   
break;
case 792: case 793: case 794: case 795:
this.$ = { alias: $$[$0], location: _$[$0] };
break;
case 802: case 803:

     if (parser.yy.result.suggestFunctions) {
       parser.suggestAggregateFunctions();
     }
   
break;
case 804:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords([{ value: 'PARTITION BY', weight: 2 }, { value: 'ORDER BY', weight: 1 }]);
     } else if (!$$[$0-2]) {
       parser.suggestKeywords(['PARTITION BY']);
     }
   
break;
case 805:

      if (!$$[$0-1]) {
        parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ORDER BY', weight: 2 }]);
      } else {
        parser.suggestValueExpressionKeywords($$[$0-3]);
      }
    
break;
case 809:

     parser.suggestKeywords(['BY']);
   
break;
case 814:

      // Only allowed in last order by
      delete parser.yy.result.suggestAnalyticFunctions;
    
break;
case 815:

      var keywords = [];
      if ($$[$0-2].suggestKeywords) {
        keywords = parser.createWeightedKeywords($$[$0-2].suggestKeywords, 2);
      }
      if (!$$[$0]) {
        keywords = keywords.concat([{ value: 'RANGE BETWEEN', weight: 1 }, { value: 'ROWS BETWEEN', weight: 1 }]);
      }
      parser.suggestKeywords(keywords);
    
break;
case 821:

     parser.suggestKeywords(['BETWEEN']);
   
break;
case 822:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED PRECEDING']);
     } else if (!$$[$0-1]) {
       parser.suggestKeywords(['AND']);
     }
   
break;
case 827:

    lexer.popState();
  
break;
case 828:

    lexer.begin('hdfs');
  
break;
case 830:

      parser.suggestHdfs({ path: $$[$0-3] });
    
break;
case 831:

     parser.suggestHdfs({ path: $$[$0-2] });
   
break;
case 832:

      parser.suggestHdfs({ path: $$[$0-1] });
    
break;
case 833:

     parser.suggestHdfs({ path: '' });
   
break;
case 834:

      parser.suggestHdfs({ path: '' });
    
break;
case 840:

     parser.suggestKeywords(['PRECEDING']);
   
break;
case 841: case 846:

     parser.suggestKeywords(['ROW']);
   
break;
case 845:

     parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED FOLLOWING']);
   
break;
case 847:

     parser.suggestKeywords(['FOLLOWING']);
   
break;
case 851:
this.$ = { inValueEdit: true };
break;
case 852:
this.$ = { inValueEdit: true, cursorAtStart: true };
break;
case 853: case 854: case 855:

     this.$ = { suggestKeywords: ['NOT'] }
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 859: case 860: case 861:

     parser.suggestFunctions({ types: [ 'STRING' ] });
     parser.suggestColumns({ types: [ 'STRING' ] });
     this.$ = { types: ['BOOLEAN'] }
   
break;
case 862:

     this.$ = parser.findCaseType($$[$0-1])
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 863:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 864:
this.$ = parser.findCaseType($$[$0-1]);
break;
case 865:

     parser.suggestValueExpressionKeywords($$[$0-1], ['END']);
     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 866:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 867:
this.$ = parser.findCaseType($$[$0-2]);
break;
case 868:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 869:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-2]);
   
break;
case 870:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     this.$.suggestFilters = $$[$0-1].suggestFilters
   
break;
case 871:

     parser.valueExpressionSuggest();
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 872:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 873:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = $$[$0-1];
   
break;
case 874:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ] };
   
break;
case 877:

     this.$ = { caseTypes: [ $$[$0] ], lastType: $$[$0] }
     parser.extractExpressionText(this.$, $$[$0]);
   
break;
case 878:

     $$[$0-1].caseTypes.push($$[$0]);
     this.$ = { caseTypes: $$[$0-1].caseTypes, lastType: $$[$0] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 882:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
   
break;
case 884:

     this.$ = $$[$0]
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 885:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0].suggestFilters };
break;
case 886:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0-1].suggestFilters };
break;
case 887:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0-2].suggestFilters };
break;
case 888: case 889:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0].suggestFilters };
break;
case 890:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 891:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [$$[$0]] };
   
break;
case 892:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 893:

      parser.valueExpressionSuggest();
      parser.suggestKeywords(['WHEN']);
      this.$ = { caseTypes: [{ types: ['T'] }] };
    
break;
case 894: case 896:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 895:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 897:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [$$[$0]], suggestFilters: true };
   
break;
case 898:

     parser.suggestValueExpressionKeywords($$[$0-1], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 899:

     parser.suggestValueExpressionKeywords($$[$0-2], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 900: case 901: case 902: case 903:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
}
},
table: [o($V0,$V1,{171:1,113:2}),{1:[3]},o($V2,$V3,{172:3,176:4,3:7,4:8,5:9,13:$V4,90:$V5,179:$V6,180:$V7}),{173:[1,12],177:[1,13]},o($V2,[2,317]),o($V2,[2,323]),o($V2,[2,324]),o($V2,[2,325]),{5:14,7:[1,15],90:$V5},o($V8,$V9,{6:16,108:17,110:18,112:$Va}),{14:20,16:21,19:22,77:$Vb,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,201:$Vg},o([7,77,103,138,139,140,141,142,143,144,145,146,147,148,150,151,152,153,154,160,185,186,187,188,190,191,192,198,201,205,212,215,216,225,237,244,245,246],$Vh,{91:31,96:$Vi,97:$Vj}),{1:[2,312]},o($V0,$V1,{113:34}),o($V8,$V9,{108:17,110:18,6:35,112:$Va}),{3:36,4:8,5:9,13:$V4,90:$V5},o($V8,[2,3]),o($V8,[2,193],{110:37,112:$Va}),o($Vk,[2,195]),o([90,96,97],$V1,{113:38}),o([7,90],[2,12],{17:[1,39]}),o($Vl,[2,14]),{20:[1,40]},o($Vm,[2,542]),{201:[1,42],255:[1,41]},o($Vm,[2,335]),o($Vm,[2,336]),o($Vm,[2,337]),o($Vm,[2,332]),o($Vm,[2,333]),o($Vm,[2,334]),{7:$Vn,19:77,45:45,76:75,77:$Vb,92:43,100:44,103:$Vo,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},o($VT,[2,155]),o($VT,[2,156]),o($V2,$V3,{176:4,3:7,4:8,5:9,172:101,13:$V4,90:$V5,179:$V6,180:$V7}),o($V8,[2,1]),{8:[1,102]},o($Vk,[2,196]),{90:$Vh,91:103,96:$Vi,97:$Vj},{16:104,19:22,77:$Vb,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,201:$Vg},{7:[1,105]},{201:[1,106]},o($Vm,[2,544]),o($Vk,[2,144],{93:107,26:109,17:[1,108],27:[1,110]}),o($VU,[2,161]),o($VU,$VV,{166:23,184:27,102:111,317:125,19:126,260:127,254:132,258:133,20:$VW,77:$Vb,103:$VX,185:$Vc,186:$Vd,187:$Ve,188:$Vf,191:$VY,193:$VZ,194:$V_,195:$V$,199:$V01,200:$V11,201:$Vg,202:$V21,207:$V31,212:$VL,220:$V41,223:$V51,224:$V61,225:$V71,226:$V81,231:$V91,232:$Va1,237:$VP}),o($VU,[2,177]),o($Vb1,[2,586]),{7:$Vn,19:77,45:134,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},{7:$Vn,19:77,45:135,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},{7:$Vn,19:77,45:136,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},{7:$Vn,19:77,45:137,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},{7:$Vc1,314:138},{7:$Vn,19:77,45:140,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},{7:$Vn,19:77,45:142,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,249:$Vd1,254:83,258:84,293:69,306:60,318:141,328:68,330:76,332:81,333:82,334:85,382:143,384:144},o($Vb1,[2,277],{158:146,7:$Ve1}),{7:$Ve1,158:148},o($Vb1,[2,275]),o($Vb1,[2,276]),o($Vb1,[2,278]),o($Vf1,[2,718],{192:[1,149]}),{7:[2,257]},{7:[2,258]},{7:[2,259]},{7:[2,260]},o($Vb1,[2,306],{119:150,121:151,168:$Vg1}),{121:153,168:$Vg1},o($Vb1,[2,214]),o($Vb1,[2,724]),o($Vh1,[2,556]),o($Vi1,[2,222]),o($Vi1,[2,223]),o($Vi1,[2,224]),{7:[1,154]},{7:[1,155]},o($Vb1,[2,726]),o($Vb1,[2,727]),o($Vh1,[2,566]),{7:[1,156]},{7:[1,157]},{7:[1,158]},o($Vb1,[2,729]),o($Vb1,[2,730]),o($Vb1,[2,738]),o($Vb1,[2,739]),o($Vb1,[2,740]),{7:[2,233]},{7:[2,234]},{7:[2,235]},{7:[2,236]},{7:[2,237]},{7:[2,238]},{7:[2,239]},{7:[2,240]},o($Vb1,[2,731],{192:[1,159]}),{245:[1,160],246:[1,161]},{245:[1,162]},{237:[1,164],255:[1,163]},{212:[1,166],255:[1,165]},o($Vb1,[2,743]),o($Vb1,[2,744]),o($V2,[2,318]),o($V8,$V9,{108:17,110:18,6:167,112:$Va}),{5:168,90:$V5},o($Vl,[2,15]),o($Vj1,$Vk1,{21:169,345:170}),o($Vm,[2,543]),o($Vk,[2,145]),{7:$Vn,19:77,45:45,76:75,77:$Vb,100:171,103:$Vo,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},o($Vl1,[2,205],{98:172,105:173,107:174,114:[1,175]}),{7:$Vc1,19:185,28:176,31:177,56:179,77:$Vb,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,201:$Vg,296:183,314:184,335:178,337:180,339:181,340:182},o($VU,[2,176]),o($Vm1,[2,745],{313:186,225:[1,187]}),{7:$Vn,19:77,45:188,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},{7:$Vn,19:77,45:189,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},{7:$Vn,19:77,45:190,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},{7:$Vn,19:77,45:191,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},{202:[1,193],220:[1,192],224:$V61,231:$V91,232:$Va1,317:194},{7:[1,195]},{7:$Vn,19:77,45:196,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},{7:$Vn,19:77,45:197,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},{7:$Vn,19:77,45:198,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},{7:$Vn,19:77,45:199,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},{7:$Vn,19:77,45:200,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},{7:$Vn,19:77,45:201,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},o($Vb1,[2,612]),o($Vn1,[2,792]),o($Vn1,[2,793]),{19:202,77:$Vb,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,201:$Vg,212:$VL,237:$VP,254:132,258:133,260:203},{7:$Vn,19:77,45:204,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},{7:$Vn,19:77,45:205,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},{7:$Vn,19:77,45:206,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},o($Vn1,[2,460]),o($Vn1,[2,461]),o($Vo1,[2,587],{317:125,103:$VX,191:$VY,193:$VZ,194:$V_,195:$V$,200:$V11,207:$V31,220:$V41,223:$V51,224:$V61,231:$V91,232:$Va1}),o($Vo1,[2,588],{317:125,103:$VX,191:$VY,193:$VZ,194:$V_,195:$V$,200:$V11,207:$V31,220:$V41,223:$V51,224:$V61,231:$V91,232:$Va1}),o($Vo1,[2,589],{317:125,103:$VX,191:$VY,193:$VZ,194:$V_,195:$V$,200:$V11,207:$V31,220:$V41,223:$V51,224:$V61,231:$V91,232:$Va1}),o($Vp1,[2,590],{317:125}),o($Vb1,[2,595]),o($Vj1,$Vk1,{345:170,314:184,21:207,340:208,7:$Vc1}),{8:[1,209],103:$VX,191:$VY,193:$VZ,194:$V_,195:$V$,199:$V01,200:$V11,202:$V21,207:$V31,220:$V41,223:$V51,224:$V61,225:$V71,226:$V81,231:$V91,232:$Va1,317:125},o($Vb1,[2,614]),{103:$VX,191:$VY,193:$VZ,194:$V_,195:$V$,199:$V01,200:$V11,202:$V21,207:$V31,220:$V41,223:$V51,224:$V61,225:$V71,226:$V81,231:$V91,232:$Va1,249:$Vd1,317:125,318:210,382:143,384:144},{213:[1,212],214:[1,211],249:$Vd1,384:213},o($Vq1,[2,877]),{7:$Vn,19:77,45:214,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},o($Vb1,[2,273]),{7:$Vn,8:[1,215],19:77,45:217,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,136:216,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},o($Vb1,[2,274]),{19:77,77:$Vb,103:[1,218],166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,201:$Vg,293:219},o($Vb1,[2,212]),o($Vb1,[2,307]),{7:[1,222],19:220,77:$Vb,166:23,169:221,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,201:$Vg},o($Vb1,[2,213]),{7:$Vn,8:[1,223],19:77,45:217,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,136:224,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},{7:$Vn,8:[1,226],19:77,45:225,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},o([7,8,77,138,139,140,141,142,143,144,145,146,147,148,150,151,152,153,154,160,185,186,187,188,190,191,192,198,201,205,212,215,216,225,237,244,245,246],$Vh,{91:227,96:$Vi,97:$Vj}),o($Vr1,$Vh,{91:230,8:[1,229],96:$Vi,97:$Vj,103:[1,228]}),o($Vr1,$Vh,{91:231,8:[1,232],96:$Vi,97:$Vj}),o($Vb1,[2,732],{245:[1,233],246:[1,234]}),o($Vb1,[2,734]),{245:[1,235]},o($Vb1,[2,735]),{237:[1,236]},o($Vs1,[2,455]),{212:[1,237]},o($Vs1,[2,458]),o($V8,[2,2]),o($Vk,[2,201]),{8:[1,238]},{3:246,4:8,5:9,13:$V4,90:$V5,347:239,349:240,351:241,353:242,355:243,357:244,359:245},o($VU,[2,162]),o($Vk,[2,157]),o($Vt1,[2,34],{33:247,34:248,35:[1,249]}),o($Vl1,[2,206]),{7:$Vn,19:77,45:251,76:75,77:$Vb,115:250,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},o([8,35,50,75,81,112,114,173,177],[2,24],{17:[1,252]}),o($Vu1,[2,27]),o($Vu1,[2,747]),o($Vu1,[2,749],{53:253,55:254,63:$Vv1,64:$Vw1,65:$Vx1,66:$Vy1,67:$Vz1,68:$VA1,69:$VB1,70:$VC1}),o($Vu1,[2,750]),o($VD1,$VV,{166:23,184:27,19:126,260:127,254:132,258:133,102:263,20:$VW,77:$Vb,185:$Vc,186:$Vd,187:$Ve,188:$Vf,201:$Vg,212:$VL,237:$VP}),o($VD1,$VV,{166:23,184:27,19:126,260:127,254:132,258:133,102:264,20:$VW,77:$Vb,185:$Vc,186:$Vd,187:$Ve,188:$Vf,201:$Vg,212:$VL,237:$VP}),o($VE1,[2,761]),o($VE1,[2,763]),o($VE1,[2,519],{192:[1,265]}),{97:[1,269],160:[1,266],216:[1,268],244:[1,267]},o($Vm1,[2,746]),o($VF1,[2,597],{317:125,103:$VX,191:$VY,200:$V11,220:$V41,223:$V51,224:$V61,231:$V91,232:$Va1}),o($VF1,[2,598],{317:125,103:$VX,191:$VY,200:$V11,220:$V41,223:$V51,224:$V61,231:$V91,232:$Va1}),o($VF1,[2,599],{317:125,103:$VX,191:$VY,200:$V11,220:$V41,223:$V51,224:$V61,231:$V91,232:$Va1}),o($VF1,[2,600],{317:125,103:$VX,191:$VY,200:$V11,220:$V41,223:$V51,224:$V61,231:$V91,232:$Va1}),{7:[1,270]},{7:$Vn,19:77,45:271,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},o($Vb1,[2,613]),o($Vj1,$Vk1,{166:23,184:27,156:47,157:55,149:56,117:57,159:58,306:60,118:65,120:66,122:67,328:68,293:69,129:70,130:71,131:72,76:75,330:76,19:77,135:78,332:81,333:82,254:83,258:84,334:85,345:170,21:272,315:273,45:274,7:$Vn,77:$Vb,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,160:$VF,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS}),{103:$VX,191:$VY,193:$VZ,194:$V_,195:$V$,199:$V01,200:$V11,202:$V21,207:$V31,220:$V41,223:$V51,224:$V61,225:$V71,226:$V81,231:$V91,232:$Va1,316:[1,275],317:125},o($VG1,[2,607],{317:125,103:$VX,191:$VY,193:$VZ,194:$V_,195:$V$,200:$V11,202:$V21,207:$V31,220:$V41,223:$V51,224:$V61,225:$V71,231:$V91,232:$Va1}),o($VG1,[2,608],{317:125,103:$VX,191:$VY,193:$VZ,194:$V_,195:$V$,200:$V11,202:$V21,207:$V31,220:$V41,223:$V51,224:$V61,225:$V71,231:$V91,232:$Va1}),o($Vp1,[2,609],{317:125,220:$V41,223:$V51,224:$V61,231:$V91,232:$Va1}),o($Vp1,[2,610],{317:125,220:$V41,223:$V51,224:$V61,231:$V91,232:$Va1}),o($Vp1,[2,611],{317:125,220:$V41,223:$V51,224:$V61,231:$V91,232:$Va1}),o($Vn1,[2,794]),o($Vn1,[2,795]),o($Vp1,[2,853],{317:125}),o($Vp1,[2,854],{317:125}),o($Vp1,[2,855],{317:125}),{8:[1,276]},{8:$VV,19:126,20:$VW,77:$Vb,102:277,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,201:$Vg,212:$VL,237:$VP,254:132,258:133,260:127},o($Vb1,[2,596]),o($Vb1,[2,615]),o($Vb1,[2,862]),{7:$Vn,19:77,45:278,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},o($Vq1,[2,878]),{103:$VX,191:$VY,193:$VZ,194:$V_,195:$V$,199:$V01,200:$V11,202:$V21,207:$V31,220:$V41,223:$V51,224:$V61,225:$V71,226:$V81,231:$V91,232:$Va1,241:[1,279],317:125},o($Vb1,[2,288]),{8:[1,280],17:$VH1},o($VI1,[2,293],{317:125,103:$VX,191:$VY,193:$VZ,194:$V_,195:$V$,199:$V01,200:$V11,202:$V21,207:$V31,220:$V41,223:$V51,224:$V61,225:$V71,226:$V81,231:$V91,232:$Va1}),o($Vf1,[2,719]),o($Vh1,[2,557]),o($Vb1,[2,309]),o($Vb1,[2,310]),o($VJ1,[2,806],{361:282,365:283,227:[1,284]}),{168:[2,252]},{8:[1,285],17:$VH1},{20:[1,286],103:$VX,191:$VY,193:$VZ,194:$V_,195:$V$,199:$V01,200:$V11,202:$V21,207:$V31,220:$V41,223:$V51,224:$V61,225:$V71,226:$V81,231:$V91,232:$Va1,317:125},o($Vb1,[2,262]),{7:$Vn,8:[1,287],19:77,45:217,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,136:288,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},{8:[1,289]},o($Vi1,[2,242]),{7:$Vn,19:77,45:217,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,136:290,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},{7:$Vn,19:77,45:291,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},o($Vi1,[2,248]),o($Vb1,[2,733]),{245:[1,292]},o($Vb1,[2,736]),o($Vs1,[2,454]),o($Vs1,[2,457]),o($Vl,[2,20]),{8:[2,775]},{8:[2,777]},{8:[2,779]},{8:[2,781]},{8:[2,783]},{8:[2,785]},{8:[2,787]},{8:[2,789]},o($VK1,[2,63],{48:293,49:294,50:[1,295]}),o($Vt1,[2,35]),{36:[1,296]},o($Vl1,[2,207]),o($Vl1,[2,210],{317:125,103:$VX,191:$VY,193:$VZ,194:$V_,195:$V$,199:$V01,200:$V11,202:$V21,207:$V31,220:$V41,223:$V51,224:$V61,225:$V71,226:$V81,231:$V91,232:$Va1}),{7:$Vc1,19:185,31:297,56:179,77:$Vb,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,201:$Vg,296:183,314:184,335:178,337:180,339:181,340:182},o($Vu1,[2,753],{55:298,63:$Vv1,64:$Vw1,65:$Vx1,66:$Vy1,67:$Vz1,68:$VA1,69:$VB1,70:$VC1}),{7:$Vc1,19:185,56:299,77:$Vb,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,201:$Vg,296:183,314:184,339:181,340:182},{64:[1,300]},{64:[1,301],66:[1,302]},{64:[1,303]},o($VL1,[2,88]),{64:[1,305],66:[1,306],67:[1,304],69:[1,307]},{64:[1,308]},{64:[1,310],66:[1,311],67:[1,309],69:[1,312]},{64:[1,313]},o($VD1,[2,756]),o($VD1,[2,757]),{19:314,77:$Vb,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,201:$Vg},o($Vb1,[2,591]),o($Vb1,[2,592]),o($Vb1,[2,593]),{27:[1,315]},o($Vj1,$Vk1,{166:23,184:27,156:47,157:55,149:56,117:57,159:58,306:60,118:65,120:66,122:67,328:68,293:69,129:70,130:71,131:72,76:75,330:76,19:77,135:78,332:81,333:82,254:83,258:84,334:85,345:170,45:274,21:316,315:317,7:$Vn,77:$Vb,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,160:$VF,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS}),{103:$VX,191:$VY,193:$VZ,194:$V_,195:$V$,199:$V01,200:$V11,202:$V21,207:$V31,220:$V41,223:$V51,224:$V61,225:$V71,226:$V81,231:$V91,232:$Va1,316:[1,318],317:125},{8:[1,319]},{8:[1,320],17:$VM1},o($VN1,[2,703],{317:125,103:$VX,191:$VY,193:$VZ,194:$V_,195:$V$,199:$V01,200:$V11,202:$V21,207:$V31,220:$V41,223:$V51,224:$V61,225:$V71,226:$V81,231:$V91,232:$Va1}),{7:$Vn,19:77,45:322,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},o($Vs1,[2,771]),{8:[1,323]},{103:$VX,191:$VY,193:$VZ,194:$V_,195:$V$,199:$V01,200:$V11,202:$V21,207:$V31,214:[1,324],220:$V41,223:$V51,224:$V61,225:$V71,226:$V81,231:$V91,232:$Va1,317:125},{7:$Vn,19:77,45:325,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},o($Vb1,[2,289]),{7:$Vn,19:77,45:326,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},{8:[2,812],80:328,81:$VO1,362:327},o($VJ1,[2,807]),{36:[1,330]},{168:[2,253]},{155:331,203:[1,332],204:[1,333],206:[1,334],210:[1,335],211:[1,336],217:[1,337],221:[1,338],238:[1,339],239:[1,340],242:[1,341],243:[1,342],248:[1,343]},o($Vi1,[2,228]),{8:[1,344],17:$VH1},o($Vi1,[2,241]),{8:[1,345],17:$VH1},{8:[1,346],103:$VX,191:$VY,193:$VZ,194:$V_,195:$V$,199:$V01,200:$V11,202:$V21,207:$V31,220:$V41,223:$V51,224:$V61,225:$V71,226:$V81,231:$V91,232:$Va1,317:125},o($Vb1,[2,737]),o($VP1,[2,126],{79:347,80:348,81:$VO1}),o($VK1,[2,64]),{7:$Vn,19:77,45:349,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},{7:$Vn,19:77,37:350,45:351,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},o($Vu1,[2,28]),{7:$Vc1,19:185,56:352,77:$Vb,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,201:$Vg,296:183,314:184,339:181,340:182},o($VQ1,$VR1,{57:353,71:$VS1}),o($VL1,[2,84]),o($VL1,[2,85]),{64:[1,355]},o($VL1,[2,87]),{64:[1,356]},o($VL1,[2,90]),{64:[1,357]},{64:[1,358]},o($VL1,[2,93]),{64:[1,359]},o($VL1,[2,95]),{64:[1,360]},{64:[1,361]},o($VL1,[2,98]),o($VE1,[2,520]),{7:$Vn,19:77,45:362,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},{8:[1,363]},{8:[1,364],17:$VM1},{7:$Vn,19:77,45:365,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},o($Vb1,[2,603]),o($Vb1,[2,604]),{7:$Vn,19:77,45:366,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},o([8,17,20,27,35,50,63,64,65,66,67,68,69,70,75,77,81,88,89,112,114,173,177,185,186,187,188,199,201,202,212,213,214,226,230,234,237,241,249,316],[2,606],{317:125,103:$VX,191:$VY,193:$VZ,194:$V_,195:$V$,200:$V11,207:$V31,220:$V41,223:$V51,224:$V61,225:$V71,231:$V91,232:$Va1}),o($Vs1,[2,772]),o($Vb1,[2,863]),o($Vq1,[2,884],{317:125,103:$VX,191:$VY,193:$VZ,194:$V_,195:$V$,199:$V01,200:$V11,202:$V21,207:$V31,220:$V41,223:$V51,224:$V61,225:$V71,226:$V81,231:$V91,232:$Va1}),o($VI1,[2,294],{317:125,103:$VX,191:$VY,193:$VZ,194:$V_,195:$V$,199:$V01,200:$V11,202:$V21,207:$V31,220:$V41,223:$V51,224:$V61,225:$V71,226:$V81,231:$V91,232:$Va1}),{8:[1,367]},{8:[2,817],230:[1,372],234:[1,371],366:368,368:369,369:370},{36:[1,373]},{7:$Vn,19:77,45:274,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,315:374,328:68,330:76,332:81,333:82,334:85},{8:[1,375]},{8:[2,569]},{8:[2,570]},{7:$VT1,8:$VU1,311:376},{7:[1,379],8:[2,583],312:378},{8:[2,573]},{8:[2,574]},{8:[2,575]},{8:[2,576]},{8:[2,577]},{8:[2,578]},{8:[2,579]},{7:$VT1,8:$VU1,311:380},o($Vi1,[2,229]),o($Vi1,[2,243]),o($Vi1,[2,247]),o($Vk,[2,119],{73:381,74:382,75:[1,383]}),o($VP1,[2,127]),o($VK1,[2,65],{317:125,103:$VX,191:$VY,193:$VZ,194:$V_,195:$V$,199:$V01,200:$V11,202:$V21,207:$V31,220:$V41,223:$V51,224:$V61,225:$V71,226:$V81,231:$V91,232:$Va1}),o($Vt1,[2,36],{17:[1,384]}),o($VV1,[2,51],{317:125,103:$VX,191:$VY,193:$VZ,194:$V_,195:$V$,199:$V01,200:$V11,202:$V21,207:$V31,220:$V41,223:$V51,224:$V61,225:$V71,226:$V81,231:$V91,232:$Va1}),o($VQ1,$VR1,{57:385,71:$VS1}),o($VQ1,[2,71]),{7:$Vn,19:77,45:386,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},o($VL1,[2,86]),o($VL1,[2,89]),o($VL1,[2,91]),o($VL1,[2,92]),o($VL1,[2,94]),o($VL1,[2,96]),o($VL1,[2,97]),o($Vp1,[2,594],{317:125}),o($Vb1,[2,601]),o($Vb1,[2,602]),o($Vo1,[2,605],{317:125,103:$VX,191:$VY,193:$VZ,194:$V_,195:$V$,200:$V11,207:$V31,220:$V41,223:$V51,224:$V61,231:$V91,232:$Va1}),o($VN1,[2,704],{317:125,103:$VX,191:$VY,193:$VZ,194:$V_,195:$V$,199:$V01,200:$V11,202:$V21,207:$V31,220:$V41,223:$V51,224:$V61,225:$V71,226:$V81,231:$V91,232:$Va1}),o($Vb1,[2,801]),{8:[2,813]},{8:[2,818]},{202:[1,387],373:[1,388]},o($VW1,[2,835]),o($VW1,[2,836]),{7:$Vn,19:77,45:391,76:75,77:$Vb,82:389,85:390,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},o($VJ1,[2,808],{17:$VM1}),o($Vb1,[2,261]),{8:[2,571]},{245:[1,392]},{8:[2,572]},{245:[1,393]},{8:[2,580]},o($Vk,[2,181]),o($Vk,[2,120]),{76:394,77:[1,395],192:$VI,245:$VR,246:$VS,332:81,333:82},{7:$Vn,19:77,45:396,76:75,77:$Vb,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},o($VQ1,[2,72]),o($VQ1,[2,114],{317:125,103:$VX,191:$VY,193:$VZ,194:$V_,195:$V$,199:$V01,200:$V11,202:$V21,207:$V31,220:$V41,223:$V51,224:$V61,225:$V71,226:$V81,231:$V91,232:$Va1}),o($VX1,$VY1,{370:397}),o($VX1,$VY1,{370:398}),o([8,75,112,173,177,230,234],[2,128],{17:[1,399]}),o($VZ1,[2,131]),o($VZ1,[2,141],{317:125,87:400,88:[1,401],89:[1,402],103:$VX,191:$VY,193:$VZ,194:$V_,195:$V$,199:$V01,200:$V11,202:$V21,207:$V31,220:$V41,223:$V51,224:$V61,225:$V71,226:$V81,231:$V91,232:$Va1}),{8:[1,403]},{8:[1,404],17:[1,405]},o($Vk,[2,121],{17:[1,406]}),o($Vk,[2,123],{17:[1,407]}),o($VV1,[2,52],{317:125,103:$VX,191:$VY,193:$VZ,194:$V_,195:$V$,199:$V01,200:$V11,202:$V21,207:$V31,220:$V41,223:$V51,224:$V61,225:$V71,226:$V81,231:$V91,232:$Va1}),o($V_1,$V$1,{371:408,381:409,208:$V02,245:$V12,373:$V22}),o($V_1,$V$1,{381:409,371:413,208:$V02,245:$V12,373:$V22}),{7:$Vn,19:77,45:391,76:75,77:$Vb,85:414,117:57,118:65,120:66,122:67,129:70,130:71,131:72,135:78,138:$Vp,139:$Vq,140:$Vr,141:$Vs,142:$Vt,143:$Vu,144:$Vv,145:$Vw,146:$Vx,147:$Vy,148:$Vz,149:56,150:$VA,151:$VB,152:$VC,153:$VD,154:$VE,156:47,157:55,159:58,160:$VF,166:23,184:27,185:$Vc,186:$Vd,187:$Ve,188:$Vf,190:$VG,191:$VH,192:$VI,198:$VJ,201:$Vg,205:$VK,212:$VL,215:$VM,216:$VN,225:$VO,237:$VP,244:$VQ,245:$VR,246:$VS,254:83,258:84,293:69,306:60,328:68,330:76,332:81,333:82,334:85},o($VZ1,[2,138]),o($VZ1,[2,142]),o($VZ1,[2,143]),{8:[2,582]},{8:[2,584]},{245:[1,415]},{76:416,192:$VI,245:$VR,246:$VS,332:81,333:82},{77:[1,417]},{8:$V32,199:$V42,372:418},{228:[1,420]},{233:[1,421]},o($V52,[2,848]),o($V52,[2,849]),{8:$V32,199:$V42,372:422},o($VZ1,[2,132]),{8:[1,423]},o($Vk,[2,122]),o($Vk,[2,124]),{8:[2,819]},{208:[1,424],245:$V12,373:$V22,381:425},o($V_1,[2,838]),o($V_1,[2,839]),{8:[2,820]},{8:[2,585]},{233:[1,426]},{218:[1,427]},{8:[2,843]},{8:[2,844]}],
defaultActions: {12:[2,312],61:[2,257],62:[2,258],63:[2,259],64:[2,260],86:[2,233],87:[2,234],88:[2,235],89:[2,236],90:[2,237],91:[2,238],92:[2,239],93:[2,240],223:[2,252],239:[2,775],240:[2,777],241:[2,779],242:[2,781],243:[2,783],244:[2,785],245:[2,787],246:[2,789],285:[2,253],332:[2,569],333:[2,570],336:[2,573],337:[2,574],338:[2,575],339:[2,576],340:[2,577],341:[2,578],342:[2,579],368:[2,813],369:[2,818],376:[2,571],378:[2,572],380:[2,580],403:[2,582],404:[2,584],418:[2,819],422:[2,820],423:[2,585],426:[2,843],427:[2,844]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: lexer.yylloc,
                    ruleId: stack.slice(stack.length - 2, stack.length).join('_'),
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


SqlParseSupport.initSyntaxParser(parser);/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true,"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* skip whitespace */ 
break;
case 1: /* skip comments */ 
break;
case 2: /* skip comments */ 
break;
case 3: parser.yy.partialCursor = false; parser.yy.cursorFound = yy_.yylloc; return 22; 
break;
case 4: parser.yy.partialCursor = true; parser.yy.cursorFound = yy_.yylloc; return 251; 
break;
case 5: return 96; 
break;
case 6: return 199; 
break;
case 7: return 150; 
break;
case 8: return 20; 
break;
case 9: return 'AUTHORIZATION'; 
break;
case 10: this.begin('between'); return 202; 
break;
case 11: return 203; 
break;
case 12: return 'BINARY'; 
break;
case 13: return 204; 
break;
case 14: return 36; 
break;
case 15: return 'CACHE'; 
break;
case 16: return 205; 
break;
case 17: return 206; 
break;
case 18: return 'COLUMN'; 
break;
case 19: return 'CONF'; 
break;
case 20: return 'CONSTRAINT'; 
break;
case 21: parser.determineCase(yy_.yytext); return 'CREATE'; 
break;
case 22: return 63; 
break;
case 23: return 'CUBE'; 
break;
case 24: return 208; 
break;
case 25: return 209; 
break;
case 26: return 'DATE'; 
break;
case 27: return 210; 
break;
case 28: parser.determineCase(yy_.yytext); return 'DELETE'; 
break;
case 29: parser.determineCase(yy_.yytext); return 'DESCRIBE'; 
break;
case 30: return 97; 
break;
case 31: return 200; 
break;
case 32: return 211; 
break;
case 33: return 213; 
break;
case 34: return 214; 
break;
case 35: parser.yy.correlatedSubQuery = true; return 215; 
break;
case 36: return 'EXTENDED'; 
break;
case 37: return 'EXTERNAL'; 
break;
case 38: return 216; 
break;
case 39: return 217; 
break;
case 40: return 218; 
break;
case 41: return 'FOR'; 
break;
case 42: return 'FOREIGN'; 
break;
case 43: parser.determineCase(yy_.yytext); return 27; 
break;
case 44: return 65; 
break;
case 45: return 'FUNCTION'; 
break;
case 46: return 'GRANT'; 
break;
case 47: return 35; 
break;
case 48: return 'GROUPING'; 
break;
case 49: return 50; 
break;
case 50: return 151; 
break;
case 51: parser.determineCase(yy_.yytext); return 'IMPORT'; 
break;
case 52: return 220; 
break;
case 53: return 67; 
break;
case 54: parser.determineCase(yy_.yytext); return 'INSERT'; 
break;
case 55: return 221; 
break;
case 56: return 'INTEGER'; 
break;
case 57: return 222; 
break;
case 58: return 223; 
break;
case 59: return 64; 
break;
case 60: return 'LATERAL'; 
break;
case 61: return 68; 
break;
case 62: return 224; 
break;
case 63: return 75; 
break;
case 64: return 'LOCAL'; 
break;
case 65: return 'MACRO'; 
break;
case 66: return 152; 
break;
case 67: return 'NONE'; 
break;
case 68: return 225; 
break;
case 69: return 160; 
break;
case 70: return 'NULLS'; 
break;
case 71: return 'OF'; 
break;
case 72: return 71; 
break;
case 73: return 226; 
break;
case 74: return 81; 
break;
case 75: return 'OUT'; 
break;
case 76: return 66; 
break;
case 77: return 227; 
break;
case 78: return 228; 
break;
case 79: return 'PRECISION'; 
break;
case 80: return 'PRIMARY'; 
break;
case 81: return 230; 
break;
case 82: return 'REFERENCES'; 
break;
case 83: return 231; 
break;
case 84: return 'REVOKE'; 
break;
case 85: return 70; 
break;
case 86: return 232; 
break;
case 87: return 'ROLLUP'; 
break;
case 88: return 233; 
break;
case 89: return 234; 
break;
case 90: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SELECT', yy_.yylloc); return 90; 
break;
case 91: return 69; 
break;
case 92: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SET', yy_.yylloc); return 236; 
break;
case 93: return 238; 
break;
case 94: return 'SYNC'; 
break;
case 95: return 240; 
break;
case 96: return 241; 
break;
case 97: return 242; 
break;
case 98: return 'TO'; 
break;
case 99: return 244; 
break;
case 100: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('TRUNCATE', yy_.yylloc, yy.lexer.upcomingInput()); return 153; 
break;
case 101: return 373; 
break;
case 102: return 112; 
break;
case 103: parser.determineCase(yy_.yytext); return 'UPDATE'; 
break;
case 104: return 'USER'; 
break;
case 105: return 'USING'; 
break;
case 106: return 'UTC_TIMESTAMP'; 
break;
case 107: return 247; 
break;
case 108: return 248; 
break;
case 109: return 'VIEWS'; 
break;
case 110: return 249; 
break;
case 111: return 114; 
break;
case 112: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('WITH', yy_.yylloc); return 13; 
break;
case 113: parser.determineCase(yy_.yytext); return 'ABORT'; 
break;
case 114: return 'ADD'; 
break;
case 115: return 'ADMIN'; 
break;
case 116: return 'AFTER'; 
break;
case 117: parser.determineCase(yy_.yytext); return 'ANALYZE'; 
break;
case 118: return 'ARCHIVE'; 
break;
case 119: return 88; 
break;
case 120: return 'AST'; 
break;
case 121: return 'AT'; 
break;
case 122: return 'AVRO'; 
break;
case 123: return 'BUCKET'; 
break;
case 124: return 'BUCKETS'; 
break;
case 125: return 267; 
break;
case 126: return 'CBO'; 
break;
case 127: return 'CHANGE'; 
break;
case 128: return 'CHECK'; 
break;
case 129: return 'CLUSTER'; 
break;
case 130: return 'CLUSTERED'; 
break;
case 131: return 'COLLECTION'; 
break;
case 132: return 'COLUMNS'; 
break;
case 133: return 'COMMENT'; 
break;
case 134: return 'COMPACT'; 
break;
case 135: return 'COMPACTIONS'; 
break;
case 136: return 'COMPUTE'; 
break;
case 137: return 'CONCATENATE'; 
break;
case 138: return 'COST'; 
break;
case 139: return 'CRON'; 
break;
case 140: return 'CURRENT_DATE'; 
break;
case 141: return 'CURRENT_TIMESTAMP'; 
break;
case 142: return 'CURRENT_USER'; 
break;
case 143: return 'DATA'; 
break;
case 144: return 'DATABASES'; 
break;
case 145: return 'DAY'; 
break;
case 146: return 'DAYOFWEEK'; 
break;
case 147: return 'DBPROPERTIES'; 
break;
case 148: return 'DEFAULT'; 
break;
case 149: return 'DEFERRED'; 
break;
case 150: return 'DEFINED'; 
break;
case 151: return 'DELIMITED'; 
break;
case 152: return 'DEPENDENCY'; 
break;
case 153: return 89; 
break;
case 154: return 'DETAIL'; 
break;
case 155: this.begin('hdfs'); return 'DIRECTORY'; 
break;
case 156: return 'DISABLE'; 
break;
case 157: return 'DISABLED'; 
break;
case 158: return 'DISTRIBUTE'; 
break;
case 159: return 'DISTRIBUTED'; 
break;
case 160: return 'DOUBLE_PRECISION'; 
break;
case 161: return 'ENABLE'; 
break;
case 162: return 'ENABLED'; 
break;
case 163: return 'ESCAPED'; 
break;
case 164: return 'EVERY'; 
break;
case 165: return 'EXCHANGE'; 
break;
case 166: return 'EXECUTE'; 
break;
case 167: return 'EXECUTED'; 
break;
case 168: parser.determineCase(yy_.yytext); return 'EXPLAIN'; 
break;
case 169: parser.determineCase(yy_.yytext); return 'EXPORT'; 
break;
case 170: return 'EXPRESSION'; 
break;
case 171: return 'FIELDS'; 
break;
case 172: return 'FILE'; 
break;
case 173: return 'FILEFORMAT'; 
break;
case 174: return 'FIRST'; 
break;
case 175: return 'FORMAT'; 
break;
case 176: return 'FORMATTED'; 
break;
case 177: return 'FUNCTIONS'; 
break;
case 178: return 'HOUR'; 
break;
case 179: return 'IDXPROPERTIES'; 
break;
case 180: return 'INDEX'; 
break;
case 181: return 'INDEXES'; 
break;
case 182: this.begin('hdfs'); return 'INPATH'; 
break;
case 183: return 'INPUTFORMAT'; 
break;
case 184: return 'ITEMS'; 
break;
case 185: return 'JAR'; 
break;
case 186: return 'JOINCOST'; 
break;
case 187: return 'JSONFILE'; 
break;
case 188: return 'KEY'; 
break;
case 189: return 'KEYS'; 
break;
case 190: return 'LAST'; 
break;
case 191: return 'LINES'; 
break;
case 192: return 'LITERAL'; 
break;
case 193: parser.determineCase(yy_.yytext); return 'LOAD'; 
break;
case 194: this.begin('hdfs'); return 'LOCATION'; 
break;
case 195: return 'LOCK'; 
break;
case 196: return 'LOCKS'; 
break;
case 197: this.begin('hdfs'); return 'MANAGEDLOCATION'; 
break;
case 198: return 'MATCHED'; 
break;
case 199: return 'MATERIALIZED'; 
break;
case 200: return 'MERGE'; 
break;
case 201: return 'METADATA'; 
break;
case 202: return 'MINUTE'; 
break;
case 203: return 'MONTH'; 
break;
case 204: return 'MSCK'; 
break;
case 205: return 'NO_DROP'; 
break;
case 206: return 'NORELY'; 
break;
case 207: return 'NOSCAN'; 
break;
case 208: return 'NOVALIDATE'; 
break;
case 209: return 'OFFLINE'; 
break;
case 210: return 'OFFSET'; 
break;
case 211: return 'ONLY'; 
break;
case 212: return 'OPERATOR'; 
break;
case 213: return 186; 
break;
case 214: return 'ORC'; 
break;
case 215: return 'OUTPUTFORMAT'; 
break;
case 216: return 168; 
break;
case 217: return 'OVERWRITE'; 
break;
case 218: this.begin('hdfs'); return 'OVERWRITE_DIRECTORY'; 
break;
case 219: return 'OWNER'; 
break;
case 220: return 'PARQUET'; 
break;
case 221: return 'PARTITIONED'; 
break;
case 222: return 'PARTITIONS'; 
break;
case 223: return 'PERCENT'; 
break;
case 224: return 'PRIVILEGES'; 
break;
case 225: return 229; 
break;
case 226: return 'QUARTER'; 
break;
case 227: return 'QUERY'; 
break;
case 228: return 'RCFILE'; 
break;
case 229: return 'REBUILD'; 
break;
case 230: return 'RECOVER'; 
break;
case 231: parser.determineCase(yy_.yytext); return 'RELOAD'; 
break;
case 232: return 'RELY'; 
break;
case 233: return 'RENAME'; 
break;
case 234: return 'REPAIR'; 
break;
case 235: return 'REPLACE'; 
break;
case 236: return 'REPLICATION'; 
break;
case 237: return 'RESTRICT'; 
break;
case 238: return 'REWRITE'; 
break;
case 239: return 185; 
break;
case 240: return 'ROLES'; 
break;
case 241: return 'SCHEDULED'; 
break;
case 242: return 235; 
break;
case 243: return 'SCHEMAS'; 
break;
case 244: return 'SECOND'; 
break;
case 245: return 'SEQUENCEFILE'; 
break;
case 246: return 'SERDE'; 
break;
case 247: return 'SERDEPROPERTIES'; 
break;
case 248: return 'SETS'; 
break;
case 249: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SHOW', yy_.yylloc); return 'SHOW'; 
break;
case 250: return 'SHOW_DATABASE'; 
break;
case 251: return 'SKEWED_LOCATION'; 
break;
case 252: return 'SKEWED'; 
break;
case 253: return 'SORT'; 
break;
case 254: return 'SORTED'; 
break;
case 255: return 'STATISTICS'; 
break;
case 256: return 'STORED'; 
break;
case 257: return 'STORED_AS_DIRECTORIES'; 
break;
case 258: return 239; 
break;
case 259: return 187; 
break;
case 260: return 'SUMMARY'; 
break;
case 261: return 'TABLES'; 
break;
case 262: return 'TABLESAMPLE'; 
break;
case 263: return 'TBLPROPERTIES'; 
break;
case 264: return 'TEMPORARY'; 
break;
case 265: return 'TERMINATED'; 
break;
case 266: return 'TEXTFILE'; 
break;
case 267: return 243; 
break;
case 268: return 'TOUCH'; 
break;
case 269: return 'TRANSACTIONAL'; 
break;
case 270: return 'TRANSACTIONS'; 
break;
case 271: return 'UNARCHIVE'; 
break;
case 272: return 'UNIONTYPE'; 
break;
case 273: return 'UNIQUE'; 
break;
case 274: return 'UNSET'; 
break;
case 275: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('USE', yy_.yylloc); return 'USE'; 
break;
case 276: return 'VECTORIZATION'; 
break;
case 277: return 'VIEW'; 
break;
case 278: return 'WAIT'; 
break;
case 279: return 'WEEK'; 
break;
case 280: return 'WINDOW'; 
break;
case 281: return 'YEAR'; 
break;
case 282: return 192; 
break;
case 283: return 196; 
break;
case 284: return 197; 
break;
case 285: this.popState(); return 316; 
break;
case 286: yy.lexer.unput('('); yy_.yytext = 'avg'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 138; 
break;
case 287: yy.lexer.unput('('); yy_.yytext = 'cast'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 154; 
break;
case 288: yy.lexer.unput('('); yy_.yytext = 'collect_list'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'COLLECT_LIST'; 
break;
case 289: yy.lexer.unput('('); yy_.yytext = 'collect_set'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'COLLECT_SET'; 
break;
case 290: yy.lexer.unput('('); yy_.yytext = 'corr'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'CORR'; 
break;
case 291: yy.lexer.unput('('); yy_.yytext = 'count'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 146; 
break;
case 292: yy.lexer.unput('('); yy_.yytext = 'covar_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'COVAR_POP'; 
break;
case 293: yy.lexer.unput('('); yy_.yytext = 'covar_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'COVAR_SAMP'; 
break;
case 294: yy.lexer.unput('('); yy_.yytext = 'extract'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'EXTRACT'; 
break;
case 295: yy.lexer.unput('('); yy_.yytext = 'histogram_numeric'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'HISTOGRAM_NUMERIC'; 
break;
case 296: yy.lexer.unput('('); yy_.yytext = 'max'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 139; 
break;
case 297: yy.lexer.unput('('); yy_.yytext = 'min'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 140; 
break;
case 298: yy.lexer.unput('('); yy_.yytext = 'ntile'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'NTILE'; 
break;
case 299: yy.lexer.unput('('); yy_.yytext = 'percentile'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'PERCENTILE'; 
break;
case 300: yy.lexer.unput('('); yy_.yytext = 'percentile_approx'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 'PERCENTILE_APPROX'; 
break;
case 301: yy.lexer.unput('('); yy_.yytext = 'stddev_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 141; 
break;
case 302: yy.lexer.unput('('); yy_.yytext = 'stddev_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 142; 
break;
case 303: yy.lexer.unput('('); yy_.yytext = 'sum'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 147; 
break;
case 304: yy.lexer.unput('('); yy_.yytext = 'var_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 143; 
break;
case 305: yy.lexer.unput('('); yy_.yytext = 'var_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 144; 
break;
case 306: yy.lexer.unput('('); yy_.yytext = 'variance'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 145; 
break;
case 307: yy.lexer.unput('('); yy_.yytext = 'cume_dist'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 148; 
break;
case 308: yy.lexer.unput('('); yy_.yytext = 'cume_dist'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 148; 
break;
case 309: yy.lexer.unput('('); yy_.yytext = 'dense_rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 148; 
break;
case 310: yy.lexer.unput('('); yy_.yytext = 'first_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 148; 
break;
case 311: yy.lexer.unput('('); yy_.yytext = 'lag'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 148; 
break;
case 312: yy.lexer.unput('('); yy_.yytext = 'last_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 148; 
break;
case 313: yy.lexer.unput('('); yy_.yytext = 'lead'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 148; 
break;
case 314: yy.lexer.unput('('); yy_.yytext = 'percent_rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 148; 
break;
case 315: yy.lexer.unput('('); yy_.yytext = 'rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 148; 
break;
case 316: yy.lexer.unput('('); yy_.yytext = 'row_number'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 148; 
break;
case 317: return 245; 
break;
case 318: return 245; 
break;
case 319: return 246; 
break;
case 320: return 188; 
break;
case 321: parser.yy.cursorFound = true; return 22; 
break;
case 322: parser.yy.cursorFound = true; return 251; 
break;
case 323: return 219; 
break;
case 324: parser.addFileLocation(yy_.yylloc, yy_.yytext); return 378; 
break;
case 325: this.popState(); return 379; 
break;
case 326: return 173; 
break;
case 327: return 199; 
break;
case 328: return 226; 
break;
case 329: return 194; 
break;
case 330: return 193; 
break;
case 331: return 195; 
break;
case 332: return 207; 
break;
case 333: return 207; 
break;
case 334: return 207; 
break;
case 335: return 207; 
break;
case 336: return 207; 
break;
case 337: return 191; 
break;
case 338: return 103; 
break;
case 339: return 200; 
break;
case 340: return 200; 
break;
case 341: return 200; 
break;
case 342: return 200; 
break;
case 343: return 200; 
break;
case 344: return 200; 
break;
case 345: return 17; 
break;
case 346: return 192; 
break;
case 347: return ':'; 
break;
case 348: return 177; 
break;
case 349: return 198; 
break;
case 350: return 190; 
break;
case 351: return 7; 
break;
case 352: return 8; 
break;
case 353: return 196; 
break;
case 354: return 197; 
break;
case 355: return 77; 
break;
case 356: this.begin('backtickedValue'); return 201; 
break;
case 357:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '`')) {
                                               return 257;
                                             }
                                             return 255;
                                           
break;
case 358: this.popState(); return 201; 
break;
case 359: this.begin('singleQuotedValue'); return 237; 
break;
case 360:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '\'')) {
                                               return 257;
                                             }
                                             return 255;
                                           
break;
case 361: this.popState(); return 237; 
break;
case 362: this.begin('doubleQuotedValue'); return 212; 
break;
case 363:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '"')) {
                                               return 257;
                                             }
                                             return 255;
                                           
break;
case 364: this.popState(); return 212; 
break;
case 365: return 173; 
break;
case 366: /* To prevent console logging of unknown chars */ 
break;
case 367: 
break;
case 368: 
break;
case 369: 
break;
case 370: 
break;
case 371: 
break;
case 372:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s)/i,/^(?:--.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:ALL)/i,/^(?:AND)/i,/^(?:ARRAY)/i,/^(?:AS)/i,/^(?:AUTHORIZATION)/i,/^(?:BETWEEN)/i,/^(?:BIGINT)/i,/^(?:BINARY)/i,/^(?:BOOLEAN)/i,/^(?:BY)/i,/^(?:CACHE)/i,/^(?:CASE)/i,/^(?:CHAR)/i,/^(?:COLUMN)/i,/^(?:CONF)/i,/^(?:CONSTRAINT)/i,/^(?:CREATE)/i,/^(?:CROSS)/i,/^(?:CUBE)/i,/^(?:CURRENT)/i,/^(?:DATABASE)/i,/^(?:DATE)/i,/^(?:DECIMAL)/i,/^(?:DELETE)/i,/^(?:DESCRIBE)/i,/^(?:DISTINCT)/i,/^(?:DIV)/i,/^(?:DOUBLE)/i,/^(?:ELSE)/i,/^(?:END)/i,/^(?:EXISTS)/i,/^(?:EXTENDED)/i,/^(?:EXTERNAL)/i,/^(?:FALSE)/i,/^(?:FLOAT)/i,/^(?:FOLLOWING)/i,/^(?:FOR)/i,/^(?:FOREIGN)/i,/^(?:FROM)/i,/^(?:FULL)/i,/^(?:FUNCTION)/i,/^(?:GRANT)/i,/^(?:GROUP)/i,/^(?:GROUPING)/i,/^(?:HAVING)/i,/^(?:IF)/i,/^(?:IMPORT)/i,/^(?:IN)/i,/^(?:INNER)/i,/^(?:INSERT)/i,/^(?:INT)/i,/^(?:INTEGER)/i,/^(?:INTO)/i,/^(?:IS)/i,/^(?:JOIN)/i,/^(?:LATERAL)/i,/^(?:LEFT)/i,/^(?:LIKE)/i,/^(?:LIMIT)/i,/^(?:LOCAL)/i,/^(?:MACRO)/i,/^(?:MAP)/i,/^(?:NONE)/i,/^(?:NOT)/i,/^(?:NULL)/i,/^(?:NULLS)/i,/^(?:OF)/i,/^(?:ON)/i,/^(?:OR)/i,/^(?:ORDER)/i,/^(?:OUT)/i,/^(?:OUTER)/i,/^(?:PARTITION)/i,/^(?:PRECEDING)/i,/^(?:PRECISION)/i,/^(?:PRIMARY)/i,/^(?:RANGE)/i,/^(?:REFERENCES)/i,/^(?:REGEXP)/i,/^(?:REVOKE)/i,/^(?:RIGHT)/i,/^(?:RLIKE)/i,/^(?:ROLLUP)/i,/^(?:ROW)/i,/^(?:ROWS)/i,/^(?:SELECT)/i,/^(?:SEMI)/i,/^(?:SET)/i,/^(?:SMALLINT)/i,/^(?:SYNC)/i,/^(?:TABLE)/i,/^(?:THEN)/i,/^(?:TIMESTAMP)/i,/^(?:TO)/i,/^(?:TRUE)/i,/^(?:TRUNCATE)/i,/^(?:UNBOUNDED)/i,/^(?:UNION)/i,/^(?:UPDATE)/i,/^(?:USER)/i,/^(?:USING)/i,/^(?:UTC_TIMESTAMP)/i,/^(?:VALUES)/i,/^(?:VARCHAR)/i,/^(?:VIEWS)/i,/^(?:WHEN)/i,/^(?:WHERE)/i,/^(?:WITH)/i,/^(?:ABORT)/i,/^(?:ADD)/i,/^(?:ADMIN)/i,/^(?:AFTER)/i,/^(?:ANALYZE)/i,/^(?:ARCHIVE)/i,/^(?:ASC)/i,/^(?:AST)/i,/^(?:AT)/i,/^(?:AVRO)/i,/^(?:BUCKET)/i,/^(?:BUCKETS)/i,/^(?:CASCADE)/i,/^(?:CBO)/i,/^(?:CHANGE)/i,/^(?:CHECK)/i,/^(?:CLUSTER)/i,/^(?:CLUSTERED)/i,/^(?:COLLECTION)/i,/^(?:COLUMNS)/i,/^(?:COMMENT)/i,/^(?:COMPACT)/i,/^(?:COMPACTIONS)/i,/^(?:COMPUTE)/i,/^(?:CONCATENATE)/i,/^(?:COST)/i,/^(?:CRON)/i,/^(?:CURRENT_DATE)/i,/^(?:CURRENT_TIMESTAMP)/i,/^(?:CURRENT_USER)/i,/^(?:DATA)/i,/^(?:DATABASES)/i,/^(?:DAY)/i,/^(?:DAYOFWEEK)/i,/^(?:DBPROPERTIES)/i,/^(?:DEFAULT)/i,/^(?:DEFERRED)/i,/^(?:DEFINED)/i,/^(?:DELIMITED)/i,/^(?:DEPENDENCY)/i,/^(?:DESC)/i,/^(?:DETAIL)/i,/^(?:DIRECTORY)/i,/^(?:DISABLE)/i,/^(?:DISABLED)/i,/^(?:DISTRIBUTE)/i,/^(?:DISTRIBUTED)/i,/^(?:DOUBLE\s+PRECISION)/i,/^(?:ENABLE)/i,/^(?:ENABLED)/i,/^(?:ESCAPED)/i,/^(?:EVERY)/i,/^(?:EXCHANGE)/i,/^(?:EXECUTE)/i,/^(?:EXECUTED)/i,/^(?:EXPLAIN)/i,/^(?:EXPORT)/i,/^(?:EXPRESSION)/i,/^(?:FIELDS)/i,/^(?:FILE)/i,/^(?:FILEFORMAT)/i,/^(?:FIRST)/i,/^(?:FORMAT)/i,/^(?:FORMATTED)/i,/^(?:FUNCTIONS)/i,/^(?:HOUR)/i,/^(?:IDXPROPERTIES)/i,/^(?:INDEX)/i,/^(?:INDEXES)/i,/^(?:INPATH)/i,/^(?:INPUTFORMAT)/i,/^(?:ITEMS)/i,/^(?:JAR)/i,/^(?:JOINCOST)/i,/^(?:JSONFILE)/i,/^(?:KEY)/i,/^(?:KEYS)/i,/^(?:LAST)/i,/^(?:LINES)/i,/^(?:LITERAL)/i,/^(?:LOAD)/i,/^(?:LOCATION)/i,/^(?:LOCK)/i,/^(?:LOCKS)/i,/^(?:MANAGEDLOCATION)/i,/^(?:MATCHED)/i,/^(?:MATERIALIZED)/i,/^(?:MERGE)/i,/^(?:METADATA)/i,/^(?:MINUTE)/i,/^(?:MONTH)/i,/^(?:MSCK)/i,/^(?:NO_DROP)/i,/^(?:NORELY)/i,/^(?:NOSCAN)/i,/^(?:NOVALIDATE)/i,/^(?:OFFLINE)/i,/^(?:OFFSET)/i,/^(?:ONLY)/i,/^(?:OPERATOR)/i,/^(?:OPTION)/i,/^(?:ORC)/i,/^(?:OUTPUTFORMAT)/i,/^(?:OVER)/i,/^(?:OVERWRITE)/i,/^(?:OVERWRITE\s+DIRECTORY)/i,/^(?:OWNER)/i,/^(?:PARQUET)/i,/^(?:PARTITIONED)/i,/^(?:PARTITIONS)/i,/^(?:PERCENT)/i,/^(?:PRIVILEGES)/i,/^(?:PURGE)/i,/^(?:QUARTER)/i,/^(?:QUERY)/i,/^(?:RCFILE)/i,/^(?:REBUILD)/i,/^(?:RECOVER)/i,/^(?:RELOAD)/i,/^(?:RELY)/i,/^(?:RENAME)/i,/^(?:REPAIR)/i,/^(?:REPLACE)/i,/^(?:REPLICATION)/i,/^(?:RESTRICT)/i,/^(?:REWRITE)/i,/^(?:ROLE)/i,/^(?:ROLES)/i,/^(?:SCHEDULED)/i,/^(?:SCHEMA)/i,/^(?:SCHEMAS)/i,/^(?:SECOND)/i,/^(?:SEQUENCEFILE)/i,/^(?:SERDE)/i,/^(?:SERDEPROPERTIES)/i,/^(?:SETS)/i,/^(?:SHOW)/i,/^(?:SHOW_DATABASE)/i,/^(?:SKEWED LOCATION)/i,/^(?:SKEWED)/i,/^(?:SORT)/i,/^(?:SORTED)/i,/^(?:STATISTICS)/i,/^(?:STORED)/i,/^(?:STORED\s+AS\s+DIRECTORIES)/i,/^(?:STRING)/i,/^(?:STRUCT)/i,/^(?:SUMMARY)/i,/^(?:TABLES)/i,/^(?:TABLESAMPLE)/i,/^(?:TBLPROPERTIES)/i,/^(?:TEMPORARY)/i,/^(?:TERMINATED)/i,/^(?:TEXTFILE)/i,/^(?:TINYINT)/i,/^(?:TOUCH)/i,/^(?:TRANSACTIONAL)/i,/^(?:TRANSACTIONS)/i,/^(?:UNARCHIVE)/i,/^(?:UNIONTYPE)/i,/^(?:UNIQUE)/i,/^(?:UNSET)/i,/^(?:USE)/i,/^(?:VECTORIZATION)/i,/^(?:VIEW)/i,/^(?:WAIT)/i,/^(?:WEEK)/i,/^(?:WINDOW)/i,/^(?:YEAR)/i,/^(?:\.)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:AND)/i,/^(?:AVG\s*\()/i,/^(?:CAST\s*\()/i,/^(?:COLLECT_LIST\s*\()/i,/^(?:COLLECT_SET\s*\()/i,/^(?:CORR\s*\()/i,/^(?:COUNT\s*\()/i,/^(?:COVAR_POP\s*\()/i,/^(?:COVAR_SAMP\s*\()/i,/^(?:EXTRACT\s*\()/i,/^(?:HISTOGRAM_NUMERIC\s*\()/i,/^(?:MAX\s*\()/i,/^(?:MIN\s*\()/i,/^(?:NTILE\s*\()/i,/^(?:PERCENTILE\s*\()/i,/^(?:PERCENTILE_APPROX\s*\()/i,/^(?:STDDEV_POP\s*\()/i,/^(?:STDDEV_SAMP\s*\()/i,/^(?:SUM\s*\()/i,/^(?:VAR_POP\s*\()/i,/^(?:VAR_SAMP\s*\()/i,/^(?:VARIANCE\s*\()/i,/^(?:CUME_DIST\s*\()/i,/^(?:CUME_DIST\s*\()/i,/^(?:DENSE_RANK\s*\()/i,/^(?:FIRST_VALUE\s*\()/i,/^(?:LAG\s*\()/i,/^(?:LAST_VALUE\s*\()/i,/^(?:LEAD\s*\()/i,/^(?:PERCENT_RANK\s*\()/i,/^(?:RANK\s*\()/i,/^(?:ROW_NUMBER\s*\()/i,/^(?:[0-9]+)/i,/^(?:[0-9]+(?:[YSL]|BD)?)/i,/^(?:[0-9]+E)/i,/^(?:[A-Za-z0-9_]+)/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:\s+['"])/i,/^(?:[^'"\u2020\u2021]+)/i,/^(?:['"])/i,/^(?:$)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<>)/i,/^(?:<=>)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\+)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\|)/i,/^(?:\^)/i,/^(?:&)/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:;)/i,/^(?:~)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\$\{[^}]*\})/i,/^(?:`)/i,/^(?:[^`]+)/i,/^(?:`)/i,/^(?:')/i,/^(?:(?:\\\\|\\[']|[^'])+)/i,/^(?:')/i,/^(?:")/i,/^(?:(?:\\\\|\\["]|[^"])+)/i,/^(?:")/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"hdfs":{"rules":[321,322,323,324,325,326,368],"inclusive":false},"doubleQuotedValue":{"rules":[363,364,371],"inclusive":false},"singleQuotedValue":{"rules":[360,361,370],"inclusive":false},"backtickedValue":{"rules":[357,358,369],"inclusive":false},"between":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,359,362,365,366,367,372],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,359,362,365,366,372],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
export default dasksqlSyntaxParser;
