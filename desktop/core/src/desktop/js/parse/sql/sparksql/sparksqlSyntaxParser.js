// Licensed to Cloudera, Inc. under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  Cloudera, Inc. licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import SqlParseSupport from 'parse/sql/sparksql/sqlParseSupport';

var sparksqlSyntaxParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[4,83,211,289,293,295],$V1=[2,516],$V2=[289,293],$V3=[2,517],$V4=[1,13],$V5=[1,14],$V6=[1,15],$V7=[1,6],$V8=[12,289,293],$V9=[2,393],$Va=[1,23],$Vb=[1,40],$Vc=[1,36],$Vd=[1,38],$Ve=[1,39],$Vf=[1,35],$Vg=[1,34],$Vh=[2,355],$Vi=[1,42],$Vj=[1,43],$Vk=[12,233,289,293],$Vl=[124,198,299,300,301,311],$Vm=[10,14,211],$Vn=[4,10,12,14,16,33,55,56,57,60,71,75,86,88,93,105,118,119,120,123,124,130,148,156,171,184,185,186,187,188,189,190,191,192,196,198,202,209,210,224,233,235,289,293,299,300,301,304,305,309,310,311,312,313,314,316,317,319,320,321,322,323,326,329,330,332,333,334,335,337,338,339,341,342,343,344,345,346,347,352,353,412],$Vo=[1,67],$Vp=[1,62],$Vq=[1,73],$Vr=[1,75],$Vs=[1,77],$Vt=[1,60],$Vu=[1,100],$Vv=[1,101],$Vw=[1,102],$Vx=[1,103],$Vy=[1,104],$Vz=[1,105],$VA=[1,106],$VB=[1,107],$VC=[1,93],$VD=[1,94],$VE=[1,87],$VF=[1,76],$VG=[1,78],$VH=[1,88],$VI=[1,63],$VJ=[1,65],$VK=[1,109],$VL=[1,64],$VM=[1,68],$VN=[1,112],$VO=[1,66],$VP=[1,114],$VQ=[1,111],$VR=[1,113],$VS=[1,108],$VT=[1,110],$VU=[10,12,105,106,118,123,124,198,211,224,259,260,261,262,263,264,265,266,267,268,269,271,272,273,299,300,301,303,304,305,308,311,315,321,324,325,342,348,349,350],$VV=[1,136],$VW=[1,134],$VX=[4,12,14,33,55,57,60,71,75,86,88,93,124,156,171,184,185,186,187,188,189,190,191,192,196,198,202,233,235,289,293,299,300,301,311,321,335,342],$VY=[12,14,148,233,289,293],$VZ=[2,994],$V_=[1,152],$V$=[1,167],$V01=[1,156],$V11=[1,153],$V21=[1,154],$V31=[1,162],$V41=[1,161],$V51=[1,160],$V61=[1,163],$V71=[1,158],$V81=[1,155],$V91=[1,157],$Va1=[1,151],$Vb1=[1,168],$Vc1=[1,159],$Vd1=[1,170],$Ve1=[1,169],$Vf1=[12,14,16,93,105,119,120,124,148,156,171,184,185,186,187,188,189,190,191,196,198,202,209,210,224,233,235,289,293,299,300,301,304,309,310,311,312,317,321,322,323,329,332,333,334,337,338,339,341,342,345,353,412],$Vg1=[1,178],$Vh1=[1,184],$Vi1=[1,186],$Vj1=[10,12,14,16,93,105,119,120,124,148,156,171,184,185,186,187,188,189,190,191,196,198,202,209,210,224,233,235,289,293,299,300,301,304,309,310,311,312,317,321,322,323,329,332,333,334,337,338,339,341,342,345,353,412],$Vk1=[1,191],$Vl1=[10,12,14,16,93,105,119,120,124,148,156,171,184,185,186,187,188,189,190,191,196,198,202,209,210,224,233,235,289,293,299,300,301,304,305,309,310,311,312,317,321,322,323,329,332,333,334,337,338,339,341,342,345,353,412],$Vm1=[12,14,16,93,105,119,120,124,148,156,171,184,185,186,187,188,189,190,191,196,198,202,209,210,224,233,235,284,289,293,299,300,301,304,309,310,311,312,317,321,322,323,329,332,333,334,337,338,339,341,342,345,353,412],$Vn1=[62,124,198,299,300,301,311],$Vo1=[1,228],$Vp1=[2,670],$Vq1=[1,231],$Vr1=[1,230],$Vs1=[1,232],$Vt1=[1,233],$Vu1=[1,234],$Vv1=[83,211],$Vw1=[2,972],$Vx1=[12,156,171,196,202,233,289,293],$Vy1=[106,218,325,348],$Vz1=[12,14,148,156,171,184,185,186,187,188,189,190,191,192,196,202,233,235,289,293],$VA1=[12,14,16,83,148,156,171,184,185,186,187,188,189,190,191,192,196,202,233,235,289,293],$VB1=[12,14,93,105,124,148,156,171,184,185,186,187,188,189,190,191,196,198,202,209,210,233,235,289,293,299,300,301,309,311,312,321,322,323,334,337,341,342,345,353,412],$VC1=[12,14,16,93,105,119,120,124,148,156,171,184,185,186,187,188,189,190,191,196,198,202,209,210,224,233,235,289,293,299,300,301,304,309,310,311,312,317,321,322,323,334,337,341,342,345,353,412],$VD1=[322,323,353],$VE1=[10,105,106,118,123,124,198,259,260,261,262,263,264,265,266,267,268,269,271,272,273,299,300,301,303,304,305,308,311,315,321,324,325,342,348,349,350],$VF1=[12,14,16,83,93,105,119,120,124,148,156,171,184,185,186,187,188,189,190,191,192,196,198,202,209,210,224,233,235,289,293,299,300,301,304,309,310,311,312,317,321,322,323,329,332,333,334,337,338,339,341,342,345,353,412],$VG1=[1,308],$VH1=[1,316],$VI1=[12,171,196,202,233,289,293],$VJ1=[12,14,156,171,196,202,233,235,289,293],$VK1=[1,357],$VL1=[1,360],$VM1=[1,358],$VN1=[1,362],$VO1=[1,359],$VP1=[1,361],$VQ1=[1,364],$VR1=[1,363],$VS1=[12,14,156,171,184,185,186,187,188,189,190,191,192,196,202,233,235,289,293],$VT1=[12,14,93,124,156,171,184,185,186,187,188,189,190,191,192,196,198,202,233,235,289,293,299,300,301,311,321,342],$VU1=[12,14,16,93,105,119,120,124,148,156,171,184,185,186,187,188,189,190,191,196,198,202,209,210,233,235,289,293,299,300,301,309,311,312,317,321,322,323,334,337,341,342,345,353,412],$VV1=[12,14,93,124,148,156,171,184,185,186,187,188,189,190,191,196,198,202,209,210,233,235,289,293,299,300,301,309,311,321,322,323,334,337,341,342,345,353,412],$VW1=[1,382],$VX1=[12,14],$VY1=[12,202],$VZ1=[1,417],$V_1=[1,418],$V$1=[1,419],$V02=[1,405],$V12=[1,406],$V22=[1,407],$V32=[1,408],$V42=[1,409],$V52=[1,410],$V62=[1,411],$V72=[1,412],$V82=[1,413],$V92=[1,414],$Va2=[1,415],$Vb2=[1,416],$Vc2=[12,196,202,233,289,293],$Vd2=[10,124,198,299,300,301,311],$Ve2=[1,466],$Vf2=[12,14,202],$Vg2=[12,14,16,93,105,119,120,124,148,156,171,184,185,186,187,188,189,190,191,192,196,198,202,209,210,224,233,235,289,293,299,300,301,304,309,310,311,312,317,321,322,323,329,332,333,334,337,338,339,341,342,345,353,412],$Vh2=[1,474],$Vi2=[2,142],$Vj2=[1,486],$Vk2=[1,487],$Vl2=[1,488],$Vm2=[12,14,105,106,107,120,131,289,293],$Vn2=[2,784],$Vo2=[1,490],$Vp2=[12,335],$Vq2=[12,196,233,289,293],$Vr2=[12,14,156,171,184,185,186,187,188,189,190,191,196,202,233,235,289,293],$Vs2=[2,314],$Vt2=[1,517],$Vu2=[12,14,105,106,107,289,293],$Vv2=[12,14,171,196,202,233,289,293],$Vw2=[312,469],$Vx2=[14,120],$Vy2=[12,309,318,349,469],$Vz2=[2,1030],$VA2=[12,14,196,233,289,293,337,341],$VB2=[12,309],$VC2=[2,1040],$VD2=[1,596],$VE2=[1,597],$VF2=[1,598],$VG2=[2,1045],$VH2=[1,607],$VI2=[327,336];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"DataDefinition_EDIT":3,"ALTER":4,"CURSOR":5,"AlterDatabase_EDIT":6,"AlterTable_EDIT":7,"AlterView_EDIT":8,"ParenthesizedPropertyAssignmentList":9,"(":10,"PropertyAssignmentList":11,")":12,"PropertyAssignment":13,",":14,"QuotedValue":15,"=":16,"UnsignedValueSpecification":17,"ParenthesizedPropertyList":18,"PropertyList":19,"FileFormat":20,"CSV":21,"ORC":22,"PARQUET":23,"JSON":24,"DataDefinition":25,"AlterDatabase":26,"AlterTable":27,"AlterView":28,"DatabaseNamespaceOrSchema":29,"RegularOrBacktickedIdentifier":30,"AlterDatabaseSetOperations":31,"AlterDatabaseSetOperations_EDIT":32,"SET":33,"DbPropertiesOrProperties":34,"LOCATION":35,"DATABASE":36,"NAMESPACE":37,"SCHEMA":38,"DBPROPERTIES":39,"PROPERTIES":40,"TABLE":41,"SchemaQualifiedTableIdentifier":42,"AlterTableOperations":43,"OptionalAlterTableOperations":44,"SchemaQualifiedTableIdentifier_EDIT":45,"AlterTableOperations_EDIT":46,"AlterAddOperations":47,"AlterOrChange":48,"OptionalColumn":49,"ColumnIdentifier":50,"ColumnDataType":51,"OptionalColumnOptions":52,"AlterDropOperations":53,"PartitionSpec":54,"RENAME":55,"TO":56,"REPLACE":57,"COLUMNS":58,"ParenthesizedColumnSpecificationList":59,"RECOVER":60,"PARTITIONS":61,"COLUMN":62,"AlterSetOperations":63,"AlterSetTblPropertiesOperations":64,"AlterAddOperations_EDIT":65,"ColumnDataType_EDIT":66,"AlterDropOperations_EDIT":67,"ParenthesizedColumnSpecificationList_EDIT":68,"AlterSetOperations_EDIT":69,"AlterSetTblPropertiesOperations_EDIT":70,"ADD":71,"OptionalIfNotExists":72,"ParenthesizedPartitionList":73,"IfNotExists_EDIT":74,"DROP":75,"OptionalIfExists":76,"OptionalPurge":77,"ParenthesizedColumnIdentifierList":78,"IfExists_EDIT":79,"ParenthesizedColumnIdentifierList_EDIT":80,"FILEFORMAT":81,"SERDE":82,"WITH":83,"SERDEPROPERTIES":84,"TBLPROPERTIES":85,"UNSET":86,"PURGE":87,"CHANGE":88,"VIEW":89,"AlterViewOperations":90,"OptionalAlterViewOperations":91,"AlterViewOperations_EDIT":92,"AS":93,"QuerySpecification":94,"QuerySpecification_EDIT":95,"ColumnSpecificationList":96,"ColumnSpecificationList_EDIT":97,"RightParenthesisOrError":98,"ColumnSpecification":99,"ColumnSpecification_EDIT":100,"ColumnOptions_EDIT":101,"ColumnOptions":102,"ColumnOption":103,"ColumnOption_EDIT":104,"NOT":105,"NULL":106,"Comment":107,"PrimitiveType":108,"ArrayType":109,"MapType":110,"StructType":111,"ArrayType_INVALID":112,"MapType_INVALID":113,"StructType_INVALID":114,"ArrayType_EDIT":115,"MapType_EDIT":116,"StructType_EDIT":117,"ARRAY":118,"<":119,">":120,"AnyCursor":121,"GreaterThanOrError":122,"MAP":123,"STRUCT":124,"StructDefinitionList":125,"StructDefinitionList_EDIT":126,"StructDefinition":127,"StructDefinition_EDIT":128,"Commas":129,":":130,"OptionalComment":131,"ColumnIdentifierList":132,"ColumnIdentifierList_EDIT":133,"PartitionList":134,"CommonTableExpression":135,"SelectStatement":136,"OptionalUnions":137,"SelectStatement_EDIT":138,"OptionalUnions_EDIT":139,"CommonTableExpression_EDIT":140,"WithQueries":141,"WithQueries_EDIT":142,"WithQuery":143,"WithQuery_EDIT":144,"TableSubQueryInner":145,"TableSubQueryInner_EDIT":146,"FromClause":147,"FROM":148,"TableReferenceList":149,"FromClause_EDIT":150,"TableReferenceList_EDIT":151,"TableReference":152,"TableReference_EDIT":153,"OptionalGroupByClause":154,"GroupByClause":155,"GROUP":156,"BY":157,"GroupByColumnList":158,"GroupByClause_EDIT":159,"GroupByColumnList_EDIT":160,"ColumnGroupingSets":161,"ColumnReference":162,"ColumnGroupingSets_EDIT":163,"ColumnGroupingSet_EDIT":164,"ColumnReference_EDIT":165,"ValueExpression":166,"ValueExpression_EDIT":167,"GroupByColumnListPartTwo_EDIT":168,"OptionalHavingClause":169,"HavingClause":170,"HAVING":171,"HavingClause_EDIT":172,"OptionalJoins":173,"Joins":174,"Joins_INVALID":175,"JoinType":176,"TablePrimary":177,"OptionalJoinCondition":178,"Join_EDIT":179,"JoinType_EDIT":180,"TablePrimary_EDIT":181,"JoinCondition_EDIT":182,"Joins_EDIT":183,"CROSS":184,"JOIN":185,"FULL":186,"OUTER":187,"INNER":188,"LEFT":189,"SEMI":190,"RIGHT":191,"ON":192,"UsingColList":193,"OptionalLimitClause":194,"LimitClause":195,"LIMIT":196,"UnsignedNumericLiteral":197,"VARIABLE_REFERENCE":198,"LimitClause_EDIT":199,"OptionalOrderByClause":200,"OrderByClause":201,"ORDER":202,"OrderByColumnList":203,"OrderByClause_EDIT":204,"OrderByColumnList_EDIT":205,"OrderByIdentifier":206,"OrderByIdentifier_EDIT":207,"OptionalAscOrDesc":208,"ASC":209,"DESC":210,"SELECT":211,"OptionalAllOrDistinct":212,"SelectList":213,"TableExpression":214,"SelectList_EDIT":215,"TableExpression_EDIT":216,"ALL":217,"DISTINCT":218,"OptionalSelectConditions":219,"OptionalSelectConditions_EDIT":220,"SelectSpecification":221,"SelectSpecification_EDIT":222,"OptionalCorrelationName":223,"*":224,"OptionalCorrelationName_EDIT":225,"OptionalWhereClause":226,"WhereClause_EDIT":227,"WhereClause":228,"Unions":229,"Unions_EDIT":230,"UnionClause":231,"UnionClause_EDIT":232,"UNION":233,"NewStatement":234,"WHERE":235,"SearchCondition":236,"SearchCondition_EDIT":237,"UserDefinedFunction":238,"AggregateFunction":239,"OptionalOverClause":240,"AnalyticFunction":241,"OverClause":242,"CastFunction":243,"UserDefinedFunction_EDIT":244,"AggregateFunction_EDIT":245,"OptionalOverClause_EDIT":246,"AnalyticFunction_EDIT":247,"OverClause_EDIT":248,"CastFunction_EDIT":249,"OtherAggregateFunction":250,"CountFunction":251,"SumFunction":252,"OtherAggregateFunction_EDIT":253,"CountFunction_EDIT":254,"SumFunction_EDIT":255,"OtherAggregateFunction_Type":256,"UdfArgumentList":257,"UdfArgumentList_EDIT":258,"AVG":259,"MAX":260,"MIN":261,"STDDEV_POP":262,"STDDEV_SAMP":263,"VAR_POP":264,"VAR_SAMP":265,"VARIANCE":266,"COUNT":267,"SUM":268,"ANALYTIC":269,"ArbitraryFunctionName":270,"IF":271,"TRUNCATE":272,"CAST":273,"NonParenthesizedValueExpressionPrimary":274,"ColumnOrArbitraryFunctionRef":275,"ArbitraryFunctionRightPart":276,"NonParenthesizedValueExpressionPrimary_EDIT":277,"ArbitraryFunctionRightPart_EDIT":278,"UnsignedValueSpecification_EDIT":279,"ColumnOrArbitraryFunctionRef_EDIT":280,"ArbitraryFunction":281,"RegularIdentifier":282,"ArbitraryFunction_EDIT":283,"OVER":284,"WindowExpression":285,"WindowExpression_EDIT":286,"SqlSyntax":287,"SqlStatements":288,"EOF":289,"SqlAutocomplete":290,"SqlStatements_EDIT":291,"SqlStatement":292,";":293,"SqlStatement_EDIT":294,"DataManipulation":295,"DataManipulation_EDIT":296,"SetSpecification_EDIT":297,"NonReservedKeyword":298,"ROLE":299,"OPTION":300,"REGULAR_IDENTIFIER":301,"NonStartingToken":302,"!":303,"-":304,".":305,"[":306,"]":307,"~":308,"AND":309,"ARITHMETIC_OPERATOR":310,"BACKTICK":311,"BETWEEN":312,"BIGINT":313,"BOOLEAN":314,"CASE":315,"CHAR":316,"COMPARISON_OPERATOR":317,"CURRENT":318,"DECIMAL":319,"DOUBLE":320,"DOUBLE_QUOTE":321,"ELSE":322,"END":323,"EXISTS":324,"FALSE":325,"FLOAT":326,"FOLLOWING":327,"HDFS_START_QUOTE":328,"IN":329,"INT":330,"INTO":331,"IS":332,"LIKE":333,"OR":334,"PARTITION":335,"PRECEDING":336,"RANGE":337,"REGEXP":338,"RLIKE":339,"ROW":340,"ROWS":341,"SINGLE_QUOTE":342,"SMALLINT":343,"STRING":344,"THEN":345,"TIMESTAMP":346,"TINYINT":347,"TRUE":348,"UNSIGNED_INTEGER":349,"UNSIGNED_INTEGER_E":350,"VALUES":351,"VARCHAR":352,"WHEN":353,"PARTIAL_CURSOR":354,"FromOrIn":355,"DatabaseOrSchema":356,"SingleQuotedValue":357,"VALUE":358,"SingleQuotedValue_EDIT":359,"PARTIAL_VALUE":360,"DoubleQuotedValue":361,"DoubleQuotedValue_EDIT":362,"QuotedValue_EDIT":363,"OptionalFromDatabase":364,"DatabaseIdentifier":365,"OptionalFromDatabase_EDIT":366,"DatabaseIdentifier_EDIT":367,"OptionalCascade":368,"CASCADE":369,"OptionalIfExists_EDIT":370,"OptionalIfNotExists_EDIT":371,"OptionalInDatabase":372,"OptionalPartitionSpec":373,"OptionalPartitionSpec_EDIT":374,"PartitionSpec_EDIT":375,"PartitionSpecList":376,"PartitionSpecList_EDIT":377,"RangePartitionSpec":378,"RangePartitionComparisonOperator":379,"RangePartitionSpec_EDIT":380,"ConfigurationName":381,"PartialBacktickedOrAnyCursor":382,"PartialBacktickedIdentifier":383,"PartialBacktickedOrCursor":384,"PartialBacktickedOrPartialCursor":385,"OptionalParenthesizedColumnList":386,"ParenthesizedColumnList":387,"OptionalParenthesizedColumnList_EDIT":388,"ParenthesizedColumnList_EDIT":389,"ColumnList":390,"ColumnList_EDIT":391,"ParenthesizedSimpleValueList":392,"SimpleValueList":393,"SchemaQualifiedIdentifier":394,"SchemaQualifiedIdentifier_EDIT":395,"PartitionExpression":396,"PartitionExpression_EDIT":397,"RegularOrBackTickedSchemaQualifiedName":398,"RegularOrBackTickedSchemaQualifiedName_EDIT":399,"LocalOrSchemaQualifiedName":400,"LocalOrSchemaQualifiedName_EDIT":401,"BasicIdentifierChain":402,"BasicIdentifierChain_EDIT":403,"DerivedColumnChain":404,"DerivedColumnChain_EDIT":405,"PartialBacktickedIdentifierOrPartialCursor":406,"OptionalTypeLength":407,"OptionalTypePrecision":408,"OptionalNot":409,"TableSubQuery":410,"ValueExpressionList":411,"BETWEEN_AND":412,"LikeRightPart":413,"CaseRightPart":414,"TableSubQuery_EDIT":415,"ValueExpressionInSecondPart_EDIT":416,"LikeRightPart_EDIT":417,"CaseRightPart_EDIT":418,"EndOrError":419,"ValueExpressionList_EDIT":420,"InValueList":421,"SignedInteger":422,"+":423,"UnsignedLiteral":424,"UnsignedLiteral_EDIT":425,"GeneralLiteral":426,"GeneralLiteral_EDIT":427,"ExactNumericLiteral":428,"ApproximateNumericLiteral":429,"TruthValue":430,"TablePrimaryOrJoinedTable":431,"TablePrimaryOrJoinedTable_EDIT":432,"JoinedTable":433,"JoinedTable_EDIT":434,"TableOrQueryName":435,"DerivedTable":436,"TableOrQueryName_EDIT":437,"DerivedTable_EDIT":438,"OptionalOnColumn":439,"OptionalOnColumn_EDIT":440,"PushQueryState":441,"PopQueryState":442,"SubQuery":443,"SubQuery_EDIT":444,"QueryExpression":445,"QueryExpression_EDIT":446,"QueryExpressionBody":447,"QueryExpressionBody_EDIT":448,"NonJoinQueryExpression":449,"NonJoinQueryExpression_EDIT":450,"NonJoinQueryTerm":451,"NonJoinQueryTerm_EDIT":452,"NonJoinQueryPrimary":453,"NonJoinQueryPrimary_EDIT":454,"SimpleTable":455,"SimpleTable_EDIT":456,"OptionalPartitionBy":457,"OptionalOrderByAndWindow":458,"PartitionBy_EDIT":459,"OptionalOrderByAndWindow_EDIT":460,"PartitionBy":461,"OptionalWindowSpec":462,"WindowSpec_EDIT":463,"WindowSpec":464,"RowsOrRange":465,"PopLexerState":466,"OptionalCurrentOrPreceding":467,"OptionalAndFollowing":468,"UNBOUNDED":469,"OptionalCurrentOrPreceding_EDIT":470,"OptionalAndFollowing_EDIT":471,"PushHdfsLexerState":472,"HdfsPath":473,"HDFS_PATH":474,"HDFS_END_QUOTE":475,"HdfsPath_EDIT":476,"IntegerOrUnbounded":477,"CaseWhenThenList":478,"CaseWhenThenList_EDIT":479,"CaseWhenThenListPartTwo":480,"CaseWhenThenListPartTwo_EDIT":481,"$accept":0,"$end":1},
terminals_: {2:"error",4:"ALTER",5:"CURSOR",10:"(",12:")",14:",",16:"=",21:"CSV",22:"ORC",23:"PARQUET",24:"JSON",33:"SET",35:"LOCATION",36:"DATABASE",37:"NAMESPACE",38:"SCHEMA",39:"DBPROPERTIES",40:"PROPERTIES",41:"TABLE",55:"RENAME",56:"TO",57:"REPLACE",58:"COLUMNS",60:"RECOVER",61:"PARTITIONS",62:"COLUMN",71:"ADD",75:"DROP",81:"FILEFORMAT",82:"SERDE",83:"WITH",84:"SERDEPROPERTIES",85:"TBLPROPERTIES",86:"UNSET",87:"PURGE",88:"CHANGE",89:"VIEW",93:"AS",105:"NOT",106:"NULL",107:"Comment",118:"ARRAY",119:"<",120:">",122:"GreaterThanOrError",123:"MAP",124:"STRUCT",130:":",131:"OptionalComment",148:"FROM",156:"GROUP",157:"BY",171:"HAVING",184:"CROSS",185:"JOIN",186:"FULL",187:"OUTER",188:"INNER",189:"LEFT",190:"SEMI",191:"RIGHT",192:"ON",196:"LIMIT",198:"VARIABLE_REFERENCE",202:"ORDER",209:"ASC",210:"DESC",211:"SELECT",217:"ALL",218:"DISTINCT",224:"*",233:"UNION",235:"WHERE",259:"AVG",260:"MAX",261:"MIN",262:"STDDEV_POP",263:"STDDEV_SAMP",264:"VAR_POP",265:"VAR_SAMP",266:"VARIANCE",267:"COUNT",268:"SUM",269:"ANALYTIC",271:"IF",272:"TRUNCATE",273:"CAST",284:"OVER",289:"EOF",293:";",295:"DataManipulation",296:"DataManipulation_EDIT",297:"SetSpecification_EDIT",299:"ROLE",300:"OPTION",301:"REGULAR_IDENTIFIER",303:"!",304:"-",305:".",306:"[",307:"]",308:"~",309:"AND",310:"ARITHMETIC_OPERATOR",311:"BACKTICK",312:"BETWEEN",313:"BIGINT",314:"BOOLEAN",315:"CASE",316:"CHAR",317:"COMPARISON_OPERATOR",318:"CURRENT",319:"DECIMAL",320:"DOUBLE",321:"DOUBLE_QUOTE",322:"ELSE",323:"END",324:"EXISTS",325:"FALSE",326:"FLOAT",327:"FOLLOWING",328:"HDFS_START_QUOTE",329:"IN",330:"INT",331:"INTO",332:"IS",333:"LIKE",334:"OR",335:"PARTITION",336:"PRECEDING",337:"RANGE",338:"REGEXP",339:"RLIKE",340:"ROW",341:"ROWS",342:"SINGLE_QUOTE",343:"SMALLINT",344:"STRING",345:"THEN",346:"TIMESTAMP",347:"TINYINT",348:"TRUE",349:"UNSIGNED_INTEGER",350:"UNSIGNED_INTEGER_E",351:"VALUES",352:"VARCHAR",353:"WHEN",354:"PARTIAL_CURSOR",358:"VALUE",360:"PARTIAL_VALUE",369:"CASCADE",412:"BETWEEN_AND",423:"+",469:"UNBOUNDED",474:"HDFS_PATH",475:"HDFS_END_QUOTE"},
productions_: [0,[3,2],[3,1],[3,1],[3,1],[9,3],[11,1],[11,3],[13,3],[18,3],[19,1],[19,3],[20,1],[20,1],[20,1],[20,1],[25,1],[25,1],[25,1],[26,4],[6,3],[6,4],[6,4],[6,4],[31,3],[31,3],[32,2],[29,1],[29,1],[29,1],[34,1],[34,1],[27,4],[7,4],[7,4],[7,5],[7,4],[44,0],[44,1],[43,1],[43,5],[43,1],[43,4],[43,4],[43,2],[43,5],[43,3],[43,3],[43,1],[43,2],[43,1],[46,1],[46,3],[46,5],[46,6],[46,5],[46,5],[46,1],[46,2],[46,3],[46,4],[46,3],[46,4],[46,2],[46,2],[46,3],[46,4],[46,2],[46,3],[46,1],[46,2],[46,1],[47,3],[47,3],[65,3],[65,2],[65,4],[65,3],[65,3],[53,4],[53,3],[53,3],[67,3],[67,2],[67,5],[67,4],[67,5],[67,3],[67,3],[63,3],[63,3],[63,3],[63,6],[63,3],[69,2],[69,3],[69,4],[69,5],[64,3],[64,4],[70,2],[70,4],[70,3],[70,5],[70,4],[49,0],[49,1],[77,0],[77,1],[48,1],[48,1],[28,4],[8,4],[8,4],[8,5],[8,4],[91,0],[91,1],[90,1],[90,2],[90,3],[92,1],[92,2],[92,2],[92,2],[92,2],[59,3],[68,3],[96,1],[96,3],[97,1],[97,3],[97,3],[97,5],[97,2],[97,4],[97,4],[97,6],[99,3],[100,3],[100,3],[100,3],[52,0],[52,1],[102,1],[102,2],[101,1],[101,2],[101,2],[101,3],[103,2],[103,1],[103,1],[104,2],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[66,1],[66,1],[66,1],[109,4],[112,3],[115,4],[115,4],[110,6],[113,3],[116,6],[116,4],[116,6],[116,5],[111,4],[114,3],[117,4],[125,1],[125,3],[126,1],[126,2],[126,3],[126,3],[126,5],[127,4],[128,5],[128,4],[128,4],[128,4],[128,3],[128,3],[78,3],[80,3],[132,1],[132,3],[133,1],[133,3],[133,3],[133,5],[73,3],[134,1],[134,2],[94,3],[94,5],[94,2],[95,4],[95,3],[95,3],[95,1],[95,4],[95,3],[95,2],[95,2],[135,2],[140,2],[141,1],[141,3],[142,1],[142,3],[142,3],[142,5],[143,5],[144,2],[144,5],[144,5],[147,2],[150,2],[150,2],[149,1],[149,3],[151,1],[151,3],[151,3],[151,5],[151,3],[154,0],[154,1],[155,3],[159,3],[159,3],[159,2],[161,0],[161,1],[161,3],[161,3],[163,1],[163,3],[163,3],[163,5],[163,3],[164,1],[164,1],[158,1],[158,3],[160,1],[160,2],[160,3],[160,3],[160,3],[160,4],[160,5],[168,1],[168,2],[168,1],[169,0],[169,1],[170,2],[172,2],[172,2],[173,0],[173,1],[173,1],[174,3],[174,4],[175,1],[175,2],[179,3],[179,1],[179,3],[179,3],[179,3],[183,1],[183,2],[183,2],[183,3],[176,2],[176,2],[176,3],[176,2],[176,1],[176,3],[176,2],[176,3],[176,3],[176,2],[176,3],[176,2],[176,3],[176,3],[176,2],[180,2],[180,3],[180,3],[180,2],[180,3],[180,3],[180,3],[180,3],[180,2],[180,3],[180,3],[180,3],[180,3],[180,2],[178,0],[178,2],[193,1],[193,3],[182,2],[182,2],[194,0],[194,1],[195,2],[195,4],[195,2],[195,4],[199,2],[200,0],[200,1],[201,3],[204,3],[204,2],[203,1],[203,3],[205,1],[205,2],[205,3],[205,4],[205,5],[206,2],[207,2],[207,2],[208,0],[208,1],[208,1],[136,3],[136,4],[138,3],[138,3],[138,4],[138,4],[138,4],[138,5],[138,6],[138,4],[212,0],[212,1],[212,1],[214,2],[216,2],[216,4],[216,3],[213,1],[213,3],[215,1],[215,2],[215,3],[215,3],[215,3],[215,4],[215,3],[215,3],[215,4],[215,4],[215,4],[215,5],[215,5],[221,2],[221,1],[222,2],[222,3],[222,2],[219,5],[220,5],[220,5],[220,5],[220,5],[220,5],[220,6],[220,6],[220,6],[220,6],[220,6],[137,0],[137,1],[139,1],[229,1],[229,2],[230,1],[230,2],[230,2],[230,3],[231,4],[232,3],[232,4],[232,4],[226,0],[226,1],[228,2],[227,2],[227,2],[236,1],[237,1],[238,2],[238,2],[238,1],[244,1],[244,2],[244,1],[244,2],[244,2],[244,2],[244,1],[239,1],[239,1],[239,1],[245,1],[245,1],[245,1],[250,4],[250,5],[253,5],[253,6],[253,5],[256,1],[256,1],[256,1],[256,1],[256,1],[256,1],[256,1],[256,1],[251,4],[251,3],[251,5],[254,5],[254,6],[254,5],[252,5],[252,3],[255,5],[255,6],[255,5],[241,3],[241,4],[247,4],[247,5],[247,4],[270,1],[270,1],[270,1],[270,1],[243,6],[243,3],[249,6],[249,5],[249,4],[249,6],[249,5],[249,4],[249,6],[249,5],[249,6],[249,5],[274,2],[274,2],[274,1],[274,1],[274,1],[274,1],[277,2],[277,2],[277,1],[277,1],[277,1],[281,2],[281,2],[283,2],[283,2],[276,2],[276,3],[278,3],[278,4],[278,3],[257,1],[257,3],[258,1],[258,3],[258,3],[258,5],[258,3],[258,5],[258,4],[258,3],[258,2],[258,2],[258,4],[240,0],[240,1],[246,1],[242,2],[242,2],[248,2],[287,3],[290,3],[290,3],[234,0],[288,0],[288,1],[288,4],[291,1],[291,4],[291,4],[291,7],[292,1],[292,1],[292,1],[294,1],[294,2],[294,1],[294,1],[294,1],[294,1],[298,1],[298,1],[298,1],[282,1],[282,1],[282,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[302,1],[129,1],[129,2],[121,1],[121,1],[355,1],[355,1],[356,1],[356,1],[357,3],[357,2],[359,2],[361,3],[361,2],[362,2],[15,1],[15,1],[363,1],[363,1],[364,0],[364,2],[366,2],[368,0],[368,1],[76,0],[76,2],[79,1],[370,2],[72,0],[72,3],[74,1],[371,2],[371,3],[372,0],[372,2],[372,2],[373,0],[373,1],[374,1],[54,4],[375,4],[378,5],[380,2],[380,3],[380,4],[380,5],[380,5],[380,5],[379,1],[379,1],[379,1],[379,1],[381,1],[381,1],[382,1],[382,1],[384,1],[384,1],[385,1],[385,1],[383,2],[98,1],[98,1],[386,0],[386,1],[388,1],[387,3],[389,3],[389,3],[390,1],[390,3],[391,3],[391,5],[392,3],[393,1],[393,3],[42,1],[42,3],[45,1],[45,3],[45,3],[394,1],[394,3],[395,1],[395,3],[395,3],[365,1],[367,1],[376,1],[376,3],[377,1],[377,3],[377,3],[377,5],[396,3],[397,3],[397,3],[397,3],[397,1],[30,1],[30,3],[30,2],[398,1],[398,3],[399,1],[399,3],[400,1],[400,2],[401,1],[401,2],[162,1],[162,3],[165,1],[402,1],[402,3],[403,3],[403,5],[404,1],[404,3],[405,1],[405,3],[405,5],[405,3],[50,1],[406,1],[406,1],[108,1],[108,1],[108,2],[108,2],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,2],[407,0],[407,3],[408,0],[408,3],[408,5],[166,1],[166,2],[166,2],[166,2],[166,2],[166,4],[166,4],[166,4],[166,6],[166,2],[166,3],[166,3],[166,3],[166,3],[166,3],[166,6],[166,6],[166,5],[166,5],[166,6],[166,5],[166,3],[166,3],[166,3],[166,3],[166,3],[166,2],[166,3],[166,2],[166,3],[167,1],[167,3],[167,2],[167,2],[167,2],[167,2],[167,2],[167,2],[167,2],[167,2],[167,3],[167,4],[167,5],[167,4],[167,4],[167,4],[167,6],[167,6],[167,2],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,4],[167,3],[167,6],[167,6],[167,5],[167,5],[167,6],[167,6],[167,6],[167,6],[167,5],[167,4],[167,5],[167,5],[167,5],[167,5],[167,4],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,3],[167,2],[167,3],[167,2],[167,3],[167,2],[167,3],[167,2],[167,3],[167,3],[167,4],[167,3],[167,3],[167,3],[411,1],[411,3],[420,1],[420,3],[420,3],[420,5],[420,3],[420,5],[420,4],[420,3],[420,2],[420,2],[420,4],[421,1],[421,3],[275,1],[275,3],[280,1],[422,1],[422,2],[422,2],[17,1],[279,1],[424,1],[424,1],[425,1],[197,1],[197,1],[428,1],[428,2],[428,3],[428,2],[429,2],[429,3],[429,4],[426,1],[426,1],[426,1],[427,1],[427,1],[430,1],[430,1],[409,0],[409,1],[152,1],[153,1],[431,1],[431,1],[432,1],[432,1],[433,2],[434,2],[434,2],[177,2],[177,2],[181,2],[181,2],[181,2],[435,1],[437,1],[436,1],[438,1],[439,0],[439,2],[440,2],[440,2],[441,0],[442,0],[410,3],[410,4],[415,3],[415,3],[145,2],[146,3],[443,1],[444,1],[445,1],[446,1],[447,1],[448,1],[449,1],[450,1],[451,1],[452,1],[453,1],[454,1],[455,1],[456,1],[223,0],[223,1],[223,1],[223,2],[223,2],[225,1],[225,1],[225,2],[225,2],[225,2],[285,4],[286,4],[286,4],[286,5],[286,7],[457,0],[457,1],[461,3],[459,2],[459,3],[459,3],[458,0],[458,2],[460,1],[460,3],[460,2],[462,0],[462,1],[464,5],[464,5],[463,2],[463,6],[463,5],[463,5],[463,5],[463,4],[466,0],[472,0],[473,3],[476,5],[476,4],[476,3],[476,3],[476,2],[465,1],[465,1],[467,0],[467,2],[467,2],[470,2],[470,2],[468,0],[468,3],[468,3],[471,2],[471,3],[471,3],[477,1],[477,1],[416,3],[416,3],[416,3],[413,2],[413,2],[413,2],[417,2],[417,2],[417,2],[417,2],[417,2],[417,2],[414,2],[414,4],[418,2],[418,4],[418,4],[418,3],[418,4],[418,3],[418,4],[418,4],[418,3],[418,4],[418,3],[419,1],[419,1],[478,1],[478,2],[479,1],[479,2],[479,3],[479,3],[479,2],[480,4],[481,2],[481,3],[481,4],[481,4],[481,3],[481,3],[481,4],[481,2],[481,3],[481,2],[481,3],[481,3],[481,4],[481,3],[481,4],[481,4],[481,5],[481,4],[481,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

     parser.suggestKeywords(['DATABASE', 'NAMESPACE', 'SCHEMA', 'TABLE', 'VIEW']);
   
break;
case 19:

     parser.addDatabaseLocation(_$[$0-1], [ { name: $$[$0-1] } ]);
   
break;
case 20: case 21: case 733:

     parser.suggestDatabases();
   
break;
case 22:

     parser.addDatabaseLocation(_$[$0-1], [ { name: $$[$0-1] } ]);
     parser.suggestKeywords(['SET DBPROPERTIES', 'SET LOCATION', 'SET PROPERTIES']);
   
break;
case 23:

      parser.addDatabaseLocation(_$[$0-1], [ { name: $$[$0-1] } ]);
    
break;
case 26:

     parser.suggestKeywords(['DBPROPERTIES', 'LOCATION', 'PROPERTIES']);
   
break;
case 32: case 36: case 111: case 115:

     parser.addTablePrimary($$[$0-1]);
   
break;
case 33: case 724:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 35:

     parser.addTablePrimary($$[$0-2]);
     if (!$$[$0]) {
       parser.suggestKeywords([ 'ADD', 'ADD COLUMNS', 'ADD IF NOT EXISTS', 'ALTER', 'ALTER COLUMN', 'CHANGE',
         'CHANGE COLUMN', 'DROP', 'DROP COLUMN', 'DROP COLUMNS', 'DROP IF EXISTS', 'PARTITION', 'RECOVER PARTITIONS',
         'RENAME COLUMN', 'RENAME TO', 'REPLACE COLUMNS', 'SET', 'SET FILEFORMAT', 'SET LOCATION', 'SET SERDE',
         'SET SERDEPROPERTIES', 'SET TBLPROPERTIES', 'UNSET TBLPROPERTIES']);
     }
   
break;
case 52:

     if (!$$[$0-1]) {
        parser.suggestKeywords(['COLUMN']);
     }
     parser.suggestColumns();
   
break;
case 53: case 171:

     parser.suggestKeywords(parser.getTypeKeywords());
   
break;
case 54:

     // TODO: Suggest column options
   
break;
case 56:

     if (!$$[$0-3]) {
        parser.suggestKeywords(['COLUMN']);
     }
     parser.suggestColumns();
   
break;
case 58:

     parser.suggestKeywords([
       'REPLACE COLUMNS', 'RENAME TO', 'SET', 'SET FILEFORMAT', 'SET LOCATION', 'SET SERDE', 'SET SERDEPROPERTIES']);
   
break;
case 59: case 66: case 125:

     parser.suggestKeywords(['TO']);
   
break;
case 60:

     parser.suggestKeywords(['PARTITION']);
   
break;
case 61: case 67:

     parser.suggestKeywords(['COLUMNS']);
   
break;
case 63:

     parser.suggestKeywords(['PARTITIONS']);
   
break;
case 64:

     parser.suggestKeywords(['COLUMN', 'TO']);
   
break;
case 65: case 87: case 195: case 196: case 197: case 198: case 250: case 714: case 717: case 718: case 743: case 744: case 765: case 768:

     parser.suggestColumns();
   
break;
case 74:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['COLUMNS', 'IF NOT EXISTS']);
     }
   
break;
case 76:

     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 82:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['COLUMN', 'COLUMNS', 'IF EXISTS', 'PARTITION'])
     } else {
       parser.suggestKeywords(['PARTITION']);
     }
   
break;
case 84:

     if (!$$[$0-3]) {
       parser.suggestKeywords(['IF EXISTS'])
     }
   
break;
case 86:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['PURGE'])
     }
   
break;
case 94:

     parser.suggestKeywords(['FILEFORMAT', 'LOCATION', 'SERDE', 'SERDEPROPERTIES', 'TBLPROPERTIES']);
   
break;
case 95:

     parser.suggestFileFormats();
   
break;
case 96:

     parser.suggestKeywords(['WITH SERDEPROPERTIES']);
   
break;
case 97:

     parser.suggestKeywords(['SERDEPROPERTIES']);
   
break;
case 100: case 122:

     parser.suggestKeywords(['TBLPROPERTIES']);
   
break;
case 101:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 103:

     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 112:

     parser.suggestTables({ onlyViews: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 113:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyViews = true;
     }
   
break;
case 114:

     parser.addTablePrimary($$[$0-2]);
     if (!$$[$0]) {
       parser.suggestKeywords(['AS SELECT', 'RENAME TO', 'SET TBLPROPERTIES', 'UNSET TBLPROPERTIES']);
     }
   
break;
case 123: case 223: case 528: case 977:

     parser.suggestKeywords(['SELECT']);
   
break;
case 126: case 204: case 374: case 490: case 493: case 655: case 658: case 746: case 799: case 974:
this.$ = $$[$0-1];
break;
case 128: case 215:
this.$ = [$$[$0]];
break;
case 129:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 134: case 136:

     parser.checkForKeywords($$[$0-1]);
   
break;
case 135: case 137:

     parser.checkForKeywords($$[$0-3]);
   
break;
case 138:

     this.$ = $$[$0-2];
     this.$.type = $$[$0-1];
     var keywords = [];
     if (!$$[$0]['comment']) {
       keywords.push('COMMENT');
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 139: case 166: case 172: case 173: case 186: case 189:

     parser.suggestKeywords(parser.getColumnDataTypeKeywords());
   
break;
case 142:
this.$ = {};
break;
case 144:

     this.$ = {};
     this.$[$$[$0]] = true;
   
break;
case 145:

     $$[$0-1][$$[$0]] = true;
   
break;
case 150: case 151:
this.$ = 'null';
break;
case 152:
this.$ = 'comment';
break;
case 153:

     parser.suggestKeywords(['NULL']);
   
break;
case 185: case 188:

     parser.suggestKeywords(['COMMENT']);
   
break;
case 203: case 376:
this.$ = $$[$0-2];
break;
case 205:

     parser.addCommonTableExpressions($$[$0-3]);
   
break;
case 206: case 207: case 218:

     parser.addCommonTableExpressions($$[$0-2]);
   
break;
case 213: case 229: case 253: case 329: case 333: case 371: case 381: case 408: case 899: case 901: case 956: case 1011: case 1086:
this.$ = $$[$0];
break;
case 216:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 220:

     parser.addCommonTableExpressions($$[$0-4]);
   
break;
case 221:

     parser.addCteAliasLocation(_$[$0-4], $$[$0-4]);
     $$[$0-1].alias = $$[$0-4];
     this.$ = $$[$0-1];
   
break;
case 222:

     parser.suggestKeywords(['AS']);
   
break;
case 225:

     this.$ = { tableReferenceList : $$[$0] }
   
break;
case 226: case 234:

       parser.suggestTables();
       parser.suggestDatabases({ appendDot: true });
   
break;
case 237:

     this.$ = { valueExpression: $$[$0] };
   
break;
case 238: case 340:

     parser.suggestSelectListAliases();
   
break;
case 239:

     parser.valueExpressionSuggest();
     parser.suggestSelectListAliases();
     parser.suggestGroupBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 240:

     parser.suggestKeywords(['BY']);
     parser.suggestGroupBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 255: case 256: case 262: case 263: case 742: case 970: case 1013:

     parser.valueExpressionSuggest();
   
break;
case 267:

     parser.valueExpressionSuggest();
     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 268:

     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 272:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-2];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
        parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 273:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-3];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
       parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 274:
this.$ = { joinType: $$[$0] };
break;
case 275:
this.$ = { joinType: $$[$0-1] };
break;
case 276:

     if ($$[$0-2].suggestKeywords) {
       parser.suggestKeywords($$[$0-2].suggestKeywords);
     }
   
break;
case 277:

     if ($$[$0].suggestKeywords) {
       parser.suggestKeywords($$[$0].suggestKeywords);
     }
   
break;
case 280:

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         parser.suggestJoins({
           prependJoin: false,
           joinType: $$[$0-2],
           tables: tables
         })
       }
     }
     parser.suggestTables();
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 285:
this.$ = 'CROSS JOIN';
break;
case 286:
this.$ = 'FULL JOIN';
break;
case 287:
this.$ = 'FULL OUTER JOIN';
break;
case 288:
this.$ = 'INNER JOIN';
break;
case 289:
this.$ = 'JOIN';
break;
case 290:
this.$ = 'LEFT INNER JOIN';
break;
case 291:
this.$ = 'LEFT JOIN';
break;
case 292:
this.$ = 'LEFT OUTER JOIN';
break;
case 293:
this.$ = 'LEFT SEMI JOIN';
break;
case 294:
this.$ = 'OUTER JOIN';
break;
case 295: case 297:
this.$ = 'RIGHT OUTER JOIN';
break;
case 296:
this.$ = 'RIGHT JOIN';
break;
case 298:
this.$ = 'RIGHT SEMI JOIN';
break;
case 299:
this.$ = 'SEMI JOIN';
break;
case 300: case 302: case 303: case 305: case 306: case 307: case 308: case 310: case 311: case 312: case 313:
this.$ = { suggestKeywords: ['JOIN'] };
break;
case 301: case 304: case 309:
this.$ = { suggestKeywords: ['OUTER'] };
break;
case 314:
this.$ = { noJoinCondition: true, suggestKeywords: ['ON'] };
break;
case 315:
this.$ = { valueExpression: $$[$0] };
break;
case 319:

     parser.valueExpressionSuggest();
     parser.suggestJoinConditions({ prependOn: false });
   
break;
case 326:

     parser.suggestKeywords([{ value: '10', weight: 10000 }, { value: '100', weight: 10000 }, { value: '1000', weight: 10000 }, { value: '5000', weight: 10000 }, { value: '10000', weight: 10000 }])
   
break;
case 330:

     if ($$[$0].emptyOrderBy) {
       parser.suggestOrderBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 331:

     parser.suggestKeywords(['BY']);
     parser.suggestOrderBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 335:

     this.$ = { emptyOrderBy: false }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 336: case 337: case 338:
this.$ = { emptyOrderBy: false };
break;
case 339:
this.$ = parser.mergeSuggestKeywords($$[$0]);
break;
case 341:

     this.$ = { emptyOrderBy: true }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 342:
this.$ = { suggestKeywords: ['ASC', 'DESC'] };;
break;
case 345:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     this.$ = { selectList: $$[$0] };
   
break;
case 346:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     this.$ = { selectList: $$[$0-1], tableExpression: $$[$0] }
   
break;
case 347:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     if ($$[$0].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-1]) {
         keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
       }
       parser.suggestKeywords(keywords);
     } else {
       parser.checkForSelectListKeywords($$[$0]);
     }
     if ($$[$0].suggestFunctions) {
       parser.suggestFunctions();
     }
     if ($$[$0].suggestColumns) {
       parser.suggestColumns({ identifierChain: [], source: 'select' });
     }
     if ($$[$0].suggestTables) {
       parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     }
     if ($$[$0].suggestDatabases) {
       parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
     }
     if ($$[$0].suggestAggregateFunctions && (!$$[$0-1] || $$[$0-1] === 'ALL')) {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
   
break;
case 348:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-1] || $$[$0-1] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-1]) {
       keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 349:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
   
break;
case 350:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.selectListNoTableSuggest($$[$0-1], $$[$0-2]);
     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'select';
     }
   
break;
case 351:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2] || $$[$0-2] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-2]) {
       keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 352:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]), _$[$0-2]);
     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 353:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]), _$[$0-3]);
     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 354:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.checkForSelectListKeywords($$[$0-1]);
     var keywords = ['FROM'];
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.suggestTables({ prependFrom: true });
     parser.suggestDatabases({ prependFrom: true, appendDot: true });
   
break;
case 358: case 359:

     parser.addClauseLocation('whereClause', _$[$0-1], $$[$0].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0].limitClausePreceding || _$[$0-1], $$[$0].limitClauseLocation);
   
break;
case 360:

     var keywords = [];

     parser.addClauseLocation('whereClause', _$[$0-3], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-2].limitClausePreceding || _$[$0-3], $$[$0-2].limitClauseLocation);

     if ($$[$0-3]) {
       if (typeof $$[$0-3].tableReferenceList.hasJoinCondition !== 'undefined' && !$$[$0-3].tableReferenceList.hasJoinCondition) {
         keywords.push({ value: 'ON', weight: 3 });
       }
       if ($$[$0-3].suggestKeywords) {
         keywords = parser.createWeightedKeywords($$[$0-3].suggestKeywords, 3);
       }
       if ($$[$0-3].tableReferenceList.suggestJoinConditions) {
         parser.suggestJoinConditions($$[$0-3].tableReferenceList.suggestJoinConditions);
       }
       if ($$[$0-3].tableReferenceList.suggestJoins) {
         parser.suggestJoins($$[$0-3].tableReferenceList.suggestJoins);
       }
       if ($$[$0-3].tableReferenceList.suggestKeywords) {
         keywords = keywords.concat(parser.createWeightedKeywords($$[$0-3].tableReferenceList.suggestKeywords, 3));
       }

       // Lower the weights for 'TABLESAMPLE'
       keywords.forEach(function (keyword) {
         if (keyword.value === 'TABLESAMPLE') {
           keyword.weight = 1.1;
         }
       });

       if ($$[$0-3].tableReferenceList.types) {
         var veKeywords = parser.getValueExpressionKeywords($$[$0-3].tableReferenceList);
         keywords = keywords.concat(veKeywords.suggestKeywords);
         if (veKeywords.suggestColRefKeywords) {
           parser.suggestColRefKeywords(veKeywords.suggestColRefKeywords);
           parser.addColRefIfExists($$[$0-3].tableReferenceList);
         }
       }
     }

     if ($$[$0-1].empty && $$[$0] && $$[$0].joinType.toUpperCase() === 'JOIN') {
       keywords = keywords.concat(['FULL', 'FULL OUTER', 'INNER', 'LEFT', 'LEFT OUTER', 'RIGHT', 'RIGHT OUTER']);
       parser.suggestKeywords(keywords);
       return;
     }

     if ($$[$0-1].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].suggestFilters) {
       parser.suggestFilters($$[$0-1].suggestFilters);
     }
     if ($$[$0-1].suggestGroupBys) {
       parser.suggestGroupBys($$[$0-1].suggestGroupBys);
     }
     if ($$[$0-1].suggestOrderBys) {
       parser.suggestOrderBys($$[$0-1].suggestOrderBys);
     }

     if ($$[$0-1].empty) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }

     keywords = keywords.concat([
       { value: 'FULL JOIN', weight: 1 },
       { value: 'FULL OUTER JOIN', weight: 1 },
       { value: 'INNER JOIN', weight: 1 },
       { value: 'JOIN', weight: 1 },
       { value: 'LEFT JOIN', weight: 1 },
       { value: 'LEFT OUTER JOIN', weight: 1 },
       { value: 'RIGHT JOIN', weight: 1 },
       { value: 'RIGHT OUTER JOIN', weight: 1 }
     ]);
     parser.suggestKeywords(keywords);
  
break;
case 361:

     // A couple of things are going on here:
     // - If there are no SelectConditions (WHERE, GROUP BY, etc.) we should suggest complete join options
     // - If there's an OptionalJoin at the end, i.e. 'SELECT * FROM foo | JOIN ...' we should suggest
     //   different join types
     // - The FromClause could end with a valueExpression, in which case we should suggest keywords like '='
     //   or 'AND' based on type

     if (!$$[$0-1]) {
       parser.addClauseLocation('whereClause', _$[$0-2]);
       parser.addClauseLocation('limitClause', _$[$0-2]);
       return;
     }
     parser.addClauseLocation('whereClause', _$[$0-2], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-1].limitClausePreceding || _$[$0-2], $$[$0-1].limitClauseLocation);
     var keywords = [];

     if ($$[$0-1].suggestColRefKeywords) {
       parser.suggestColRefKeywords($$[$0-1].suggestColRefKeywords);
       parser.addColRefIfExists($$[$0-1]);
     }

     if ($$[$0-1].suggestKeywords && $$[$0-1].suggestKeywords.length) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].cursorAtEnd) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 362:
this.$ = [ $$[$0] ];
break;
case 363:

     $$[$0-2].push($$[$0]);
   
break;
case 365: case 366:

     this.$ = { cursorAtStart : true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 368:

     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 369:

     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 370:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestTables: true, suggestDatabases: true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 372: case 373: case 375:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true,  };
   
break;
case 377:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
       this.$ = { valueExpression: $$[$0-1], alias: $$[$0].alias };
       if (!parser.yy.selectListAliases) {
         parser.yy.selectListAliases = [];
       }
       parser.yy.selectListAliases.push($$[$0-1].function && $$[$0-1].types && $$[$0-1].types.length && $$[$0-1].types[0] === 'UDFREF' ? { name: $$[$0].alias, udfRef: $$[$0-1].function, types: $$[$0-1].types } : { name: $$[$0].alias, types: $$[$0-1].types || ['T'] });
     } else {
       this.$ = { valueExpression: $$[$0-1] }
     }
   
break;
case 378:

     parser.addAsteriskLocation(_$[$0], [{ asterisk: true }]);
     this.$ = { asterisk: true }
   
break;
case 379:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
     }
   
break;
case 380:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.addColumnAliasLocation(_$[$0], $$[$0], _$[$0-2]);
     this.$ = { suggestAggregateFunctions: true };
   
break;
case 382:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'WHERE', weight: 7 }, { value: 'GROUP BY', weight: 6 }, { value: 'HAVING', weight: 5 }, { value: 'ORDER BY', weight: 4 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true, true]);

     if (keywords.length > 0) {
       this.$ = { suggestKeywords: keywords, empty: !$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0] };
     } else {
       this.$ = {};
     }

     this.$.whereClauseLocation = $$[$0-4] ? _$[$0-4] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;

     if (!$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestFilters = { prefix: 'WHERE', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestGroupBys = { prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-1] && !$$[$0]) {
       this.$.suggestOrderBys = { prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
   
break;
case 383:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'where';
     }
   
break;
case 384:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'group by';
     }
   
break;
case 386:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'order by';
     }
   
break;
case 388:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'GROUP BY', weight: 8 }, { value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true]);
     if ($$[$0-5].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-5].suggestKeywords, 1));
     }
     this.$ = parser.getValueExpressionKeywords($$[$0-5], keywords);
     this.$.cursorAtEnd = !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if ($$[$0-5].columnReference) {
       this.$.columnReference = $$[$0-5].columnReference;
     }
     if (!$$[$0-3]) {
       parser.suggestGroupBys({ prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 389:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true]);
     if ($$[$0-4].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-4].suggestKeywords, 8));
     }
     if ($$[$0-4].valueExpression) {
       this.$ = parser.getValueExpressionKeywords($$[$0-4].valueExpression, keywords);
       if ($$[$0-4].valueExpression.columnReference) {
         this.$.columnReference = $$[$0-4].valueExpression.columnReference;
       }
     } else {
       this.$ = { suggestKeywords: keywords };
     }
     this.$.cursorAtEnd = !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 390:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-1], $$[$0]],
       [{ value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true]);
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0-1] && !$$[$0] };
     if (!$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-3], _$[$0-3]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 391:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0]],
       [{ value: 'LIMIT', weight: 3 }],
       [true]);
     if ($$[$0-2].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-2].suggestKeywords, 4));
     }
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0] };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 392:

     this.$ = { suggestKeywords: [], cursorAtEnd: true };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = _$[$0-1];
   
break;
case 403:

     parser.suggestKeywords(['ALL', 'DISTINCT', 'SELECT']);
   
break;
case 404:

     parser.suggestKeywords(['ALL', 'DISTINCT']);
   
break;
case 409:

     if ($$[$0].suggestFilters) {
       parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 410:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS', 'NOT EXISTS']);
     parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 413:

     if (!$$[$0]) {
       $$[$0-1].suggestKeywords = ['OVER'];
     }
   
break;
case 420:

     parser.suggestKeywords(['OVER']);
   
break;
case 429:

     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 430: case 448:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 431:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       if ($$[$0-4].toLowerCase() === 'group_concat') {
         keywords.push('ALL');
       } else {
         keywords.push('DISTINCT');
       }
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 432: case 446:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 433:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords(true);
       if (!$$[$0-2]) {
         if ($$[$0-4].toLowerCase() === 'group_concat') {
           keywords.push('ALL');
         } else {
           keywords.push('DISTINCT');
         }
       }
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
       parser.suggestKeywords(keywords);
     }
     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], $$[$0-1].activePosition);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 442:

     parser.addFunctionArgumentLocations($$[$0-3], [{
       expression: { text: $$[$0-1] },
       location: _$[$0-1]
     }]);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] }
   
break;
case 443: case 449:

     this.$ = { function: $$[$0-2], types: ['UDFREF'] }
   
break;
case 444:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] }
   
break;
case 445:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 447:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-2]) {
         keywords.push('DISTINCT');
       }
       parser.suggestKeywords(keywords);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 450:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 451:

     parser.suggestValueExpressionKeywords($$[$0-2]);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 452:

     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 453:

    this.$ = { function: $$[$0-2], types: ['UDFREF'] }
  
break;
case 454:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     this.$ = {
       function: $$[$0-3],
       expression: $$[$0-1].expressions[$$[$0-1].expressions.length - 1].expression,
       types: ['UDFREF']
     }
   
break;
case 455:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-3], 1);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 456:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-2].expressions);
     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 457:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     parser.applyArgumentTypesToSuggestions($$[$0-3], $$[$0-1].activePosition);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 462:

     var expression = $$[$0-3];
     parser.extractExpressionText(expression, $$[$0-3], $$[$0-2], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-5], [{
       expression: expression,
       location: {
         first_line: _$[$0-3].first_line,
         last_line: _$[$0-1].last_line,
         first_column: _$[$0-3].first_column,
         last_column: _$[$0-1].last_column
       }
     }]);
     this.$ = { types: [ $$[$0-1].toUpperCase() ] }
   
break;
case 463: case 468: case 469: case 905:
this.$ = { types: [ 'T' ] };
break;
case 464:

     parser.valueExpressionSuggest();
     this.$ = { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 465: case 466:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ] };
   
break;
case 467:
this.$ = { types: [ $$[$0-1].toUpperCase() ] };
break;
case 470:

     parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'AS', weight: 2 }]);
     this.$ =  { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 471:

     parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'AS', weight: 2 }]);
     this.$ = { types: [ 'T' ] };
   
break;
case 472: case 473:

     parser.suggestKeywords(parser.getTypeKeywords());
     this.$ = { types: [ 'T' ] };
   
break;
case 474:

     // We need to handle arbitrary UDFs here instead of inside UserDefinedFunction or there will be a conflict
     // with columnReference for functions like: db.udf(foo)
     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     if ($$[$0-1].lastLoc && $$[$0-1].lastLoc.location) {
       $$[$0-1].lastLoc.type = 'function';
       $$[$0-1].lastLoc.function = fn;
       $$[$0-1].lastLoc.location = {
         first_line: $$[$0-1].lastLoc.location.first_line,
         last_line: $$[$0-1].lastLoc.location.last_line,
         first_column: $$[$0-1].lastLoc.location.first_column,
         last_column: $$[$0-1].lastLoc.location.last_column - 1
       }
       if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
          $$[$0-1].firstLoc.type = 'database';
       } else {
         delete $$[$0-1].lastLoc.identifierChain;
       }
     }
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: fn, expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: fn, types: ['UDFREF'] }
     }
   
break;
case 475:

    parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
    if ($$[$0].expressions && $$[$0].expressions.length) {
      this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
    } else {
      this.$ = { function: $$[$0-1], types: ['UDFREF'] }
    }
  
break;
case 478:
this.$ = { types: ['COLREF'], columnReference: $$[$0].chain };
break;
case 479:
this.$ = { types: [ 'NULL' ], text: $$[$0] };
break;
case 480:

     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     $$[$0-1].lastLoc.type = 'function';
     $$[$0-1].lastLoc.function = fn;
     $$[$0-1].lastLoc.location = {
       first_line: $$[$0-1].lastLoc.location.first_line,
       last_line: $$[$0-1].lastLoc.location.last_line,
       first_column: $$[$0-1].lastLoc.location.first_column,
       last_column: $$[$0-1].lastLoc.location.last_column - 1
     }
     if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
        $$[$0-1].firstLoc.type = 'database';
     } else {
       delete $$[$0-1].lastLoc.identifierChain;
     }
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions(fn, $$[$0].activePosition);
     }
     this.$ = { function: fn, types: ['UDFREF'] };
   
break;
case 481: case 487: case 488:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions($$[$0-1], $$[$0].activePosition);
     }
     this.$ = { function: $$[$0-1], types: ['UDFREF'] };
   
break;
case 484:

     if ($$[$0].suggestKeywords) {
       this.$ = { types: ['COLREF'], columnReference: $$[$0], suggestKeywords: $$[$0].suggestKeywords };
     } else {
       this.$ = { types: ['COLREF'], columnReference: $$[$0] };
     }
   
break;
case 485: case 486:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: $$[$0-1], types: ['UDFREF'] }
     }
   
break;
case 491:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }]
     }
   
break;
case 492:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = $$[$0-3];
   
break;
case 494: case 496:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0], location: _$[$0] }]
     }
   
break;
case 495: case 497:

     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: $$[$0], location: _$[$0] }])
     }
   
break;
case 498:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0-2], location: _$[$0-2] }].concat($$[$0].expressions)
     }
   
break;
case 499:

     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: $$[$0-2], location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 500:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: { text: '' }, location: _$[$0] }])
     }
   
break;
case 501:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: { text: '' }, location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 502:

     parser.suggestValueExpressionKeywords($$[$0-3].expressions[$$[$0-3].expressions.length - 1].expression);
     this.$ = {
       activePosition: $$[$0-3].activePosition,
       expressions: $$[$0-3].expressions.concat($$[$0].expressions)
     }
   
break;
case 503:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 504:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 505:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 506:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-3] }, { expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 514: case 515:

     return parser.yy.result;
   
break;
case 516:

     parser.prepareNewStatement();
   
break;
case 518: case 520: case 522:

     parser.addStatementLocation(_$[$0]);
   
break;
case 521: case 523:

     parser.addStatementLocation(_$[$0-3]);
   
break;
case 527:

     parser.suggestDdlAndDmlKeywords();
   
break;
case 656: case 659: case 747:
this.$ = '';
break;
case 671: case 675:

     parser.yy.correlatedSubQuery = false;
   
break;
case 673: case 678:

     parser.suggestKeywords(['EXISTS']);
   
break;
case 677:

     parser.suggestKeywords(['NOT EXISTS']);
   
break;
case 688: case 690: case 691: case 693:

     parser.suggestKeywords(['<', '<=', '<>', '=', '>', '>=']);
   
break;
case 689: case 692:

     parser.suggestKeywords(['VALUES']);
   
break;
case 722: case 748:

     parser.addTableLocation(_$[$0], [ { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0] } ] };
   
break;
case 723: case 749:

     parser.addDatabaseLocation(_$[$0-2], [ { name: $$[$0-2] } ]);
     parser.addTableLocation(_$[$0], [ { name: $$[$0-2] }, { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0-2] }, { name: $$[$0] } ] };
   
break;
case 725: case 730:

     parser.suggestDatabases();
     this.$ = { identifierChain: [{ name: $$[$0-2] }] };
   
break;
case 726: case 751:

     parser.suggestTablesOrColumns($$[$0-2]);
   
break;
case 727:
this.$ = [{ name: $$[$0] }];
break;
case 728:
this.$ = [{ name: $$[$0-2] }, { name: $$[$0-1] }];
break;
case 729:

     parser.suggestDatabases({ appendDot: true });
   
break;
case 750:

     parser.suggestTables();
     parser.suggestDatabases({ prependDot: true });
   
break;
case 753:
this.$ = { identifierChain: $$[$0-1].identifierChain, alias: $$[$0] };
break;
case 756:

     parser.yy.locations[parser.yy.locations.length - 1].type = 'column';
   
break;
case 757: case 922:

     parser.addAsteriskLocation(_$[$0], $$[$0-2].concat({ asterisk: true }));
   
break;
case 759:

     this.$ = [ $$[$0].identifier ];
     parser.yy.firstChainLocation = parser.addUnknownLocation($$[$0].location, [ $$[$0].identifier ]);
   
break;
case 760:

     if (parser.yy.firstChainLocation) {
       parser.yy.firstChainLocation.firstInChain = true;
       delete parser.yy.firstChainLocation;
     }
     $$[$0-2].push($$[$0].identifier);
     parser.addUnknownLocation($$[$0].location, $$[$0-2].concat());
   
break;
case 761:

     parser.suggestColumns({
       identifierChain: $$[$0-2]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 762:

     parser.suggestColumns({
       identifierChain: $$[$0-4]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 763:
this.$ = [ $$[$0].identifier ];
break;
case 764:

     $$[$0-2].push($$[$0].identifier);
   
break;
case 766:

     parser.suggestColumns({ identifierChain: $$[$0-2] });
   
break;
case 767:

     parser.suggestColumns({ identifierChain: $$[$0-4] });
   
break;
case 769:
this.$ = { identifier: { name: $$[$0] }, location: _$[$0] };
break;
case 790: case 791:

     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 792: case 817:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 793:

     // verifyType($$[$0], 'NUMBER');
     this.$ = $$[$0];
     $$[$0].types = ['NUMBER'];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 794: case 795: case 796:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 797:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 798:

     this.$ = { types: [ 'BOOLEAN' ] };
     // clear correlated flag after completed sub-query (set by lexer)
     parser.yy.correlatedSubQuery = false;
   
break;
case 800: case 801: case 802: case 803:

     parser.addColRefToVariableIfExists($$[$0-2], $$[$0]);
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 804: case 805: case 806: case 807: case 837: case 895: case 896:
this.$ = { types: [ 'BOOLEAN' ] };
break;
case 808:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 809:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 810: case 811:

     // verifyType($$[$0-2], 'BOOLEAN');
     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 812: case 813: case 814:

     // verifyType($$[$0-2], 'NUMBER');
     // verifyType($$[$0], 'NUMBER');
     this.$ = { types: [ 'NUMBER' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 815:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 816:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 818:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 820:

     parser.suggestKeywords(['BETWEEN', 'EXISTS', 'IN', 'LIKE', 'REGEXP', 'RLIKE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 821: case 823:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
break;
case 822:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 824:

     parser.suggestFunctions({ types: [ 'BOOLEAN' ] });
     parser.suggestColumns({ types: [ 'BOOLEAN' ] });
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 825:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0].suggestFilters };
break;
case 826:

     parser.suggestFunctions();
     parser.suggestColumns();
     this.$ = { types: [ 'T' ] };
   
break;
case 827:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 828:

     parser.suggestFunctions({ types: [ 'NUMBER' ] });
     parser.suggestColumns({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ] };
   
break;
case 829:

     parser.suggestKeywords(['FALSE', 'NOT NULL', 'NOT TRUE', 'NOT FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 830:

     parser.suggestKeywords(['FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 831:

     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 832: case 833: case 834:

     parser.suggestKeywords(['NOT']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 835:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-3] ? 'IS NOT DISTINCT FROM' : 'IS DISTINCT FROM');
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 836:

     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 838:

     this.$ = $$[$0-1];
   
break;
case 839:

     parser.valueExpressionSuggest();
     this.$ = { types: ['T'], typeSet: true };
   
break;
case 840:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 841: case 842: case 843:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 844: case 845: case 846: case 847:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0]);
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 848: case 850:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 849:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ] , typeSet: true, endsWithLessThanOrEqual: true };
   
break;
case 851:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, endsWithLessThanOrEqual: $$[$0-1] === '<='  };
   
break;
case 852: case 853: case 854: case 855:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 856:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-3]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 857:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 858: case 859:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
break;
case 860: case 861:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
break;
case 862:

     if ($$[$0-2].types[0] === $$[$0].types[0] && !$$[$0-5].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
   
break;
case 863:

     if ($$[$0-5].types[0] === $$[$0].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 864:

     if ($$[$0-5].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 865:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 866: case 872:

     parser.suggestValueExpressionKeywords($$[$0-1], ['AND']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 867:

     parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 868:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-4].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
   
break;
case 869:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 870:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 871:

     parser.valueExpressionSuggest($$[$0-4], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-4]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 873:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 874: case 876: case 878: case 880:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, suggestFilters: true };
   
break;
case 875: case 879:

     parser.addColRefIfExists($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 877: case 881:

     parser.addColRefIfExists($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 882: case 883:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 884: case 885: case 886:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 887: case 888: case 889:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 890: case 891: case 892:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 893:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 894:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
break;
case 897:

     parser.valueExpressionSuggest(undefined, $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 898:

     parser.valueExpressionSuggest(undefined, $$[$0-1] + ' ' + $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 900:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 902:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 903:

      this.$ = $$[$0];
      this.$.suggestFilters = $$[$0-1].suggestFilters;
    
break;
case 904:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 906: case 908:

     $$[$0].position = 1;
   
break;
case 907:

     $$[$0].position = $$[$0-2].position + 1;
     this.$ = $$[$0];
   
break;
case 909:

     $$[$0-2].position += 1;
   
break;
case 910:

     $$[$0-2].position = 1;
   
break;
case 911:

     $$[$0-4].position += 1;
   
break;
case 912:

     parser.valueExpressionSuggest();
     $$[$0-2].position += 1;
   
break;
case 913:

     parser.valueExpressionSuggest();
     $$[$0-4].position += 1;
   
break;
case 914:

     parser.suggestValueExpressionKeywords($$[$0-3]);
   
break;
case 915: case 916:

     parser.valueExpressionSuggest();
     this.$ = { cursorAtStart : true, position: 1 };
   
break;
case 917: case 918:

     parser.valueExpressionSuggest();
     this.$ = { position: 2 };
   
break;
case 921:

     var lastLoc = parser.yy.locations[parser.yy.locations.length - 1];
     if (lastLoc.type !== 'variable') {
       lastLoc.type = 'column';
     }
     // used for function references with db prefix
     var firstLoc = parser.yy.locations[parser.yy.locations.length - $$[$0].length];
     this.$ = { chain: $$[$0], firstLoc: firstLoc, lastLoc: lastLoc }
   
break;
case 928:

     parser.suggestValues($$[$0]);
   
break;
case 929:
this.$ = { types: [ 'NUMBER' ], text: $$[$0] };
break;
case 935: case 937: case 938:
this.$ = $$[$0-1] + $$[$0];
break;
case 936: case 939:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 940:
this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 941:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: "'" + $$[$0] + "'" }
     } else {
       this.$ = { types: [ 'STRING' ] }
     }
   
break;
case 942:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: '"' + $$[$0] + '"' }
     } else {
       this.$ = { types: [ 'STRING' ], text: '"' + $$[$0] + '"' }
     }
   
break;
case 943:
this.$ = { types: [ 'BOOLEAN' ], text: $$[$0] };
break;
case 944:

    this.$ = { partialQuote: '\'', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 945:

    this.$ = { partialQuote: '"', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 952:

     this.$ = $$[$0];

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         this.$.suggestJoins = {
           prependJoin: true,
           tables: tables
         };
       }
      }
   
break;
case 959:

     this.$ = {
       primary: $$[$0-1]
     }
     if ($$[$0-1].identifierChain) {
       if ($$[$0]) {
         $$[$0-1].alias = $$[$0].alias
         parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
       }
       parser.addTablePrimary($$[$0-1]);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     } else if ($$[$0].suggestKeywords) {
       keywords = $$[$0].suggestKeywords;
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 960:

     this.$ = {
       primary: $$[$0-1]
     };

     if ($$[$0]) {
       this.$.primary.alias = $$[$0].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 961:

     if ($$[$0]) {
       parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }
   
break;
case 962:

     if ($$[$0]) {
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias);
     }
   
break;
case 972:

     parser.pushQueryState();
   
break;
case 973:

     parser.popQueryState();
   
break;
case 975:

     if ($$[$0-1]) {
       $$[$0-2].alias = $$[$0-1].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0-1].alias });
       parser.addSubqueryAliasLocation($$[$0-1].location, $$[$0-1].alias, $$[$0-2].identifierChain);
     }
     this.$ = $$[$0-2];
   
break;
case 978:

     var subQuery = parser.getSubQuery($$[$0]);
     subQuery.columns.forEach(function (column) {
       parser.expandIdentifierChain({ wrapper: column });
       delete column.linked;
     });
     parser.popQueryState(subQuery);
     this.$ = subQuery;
   
break;
case 995: case 996: case 997: case 998:
this.$ = { alias: $$[$0], location: _$[$0] };
break;
case 1005: case 1006:

     if (parser.yy.result.suggestFunctions) {
       parser.suggestAggregateFunctions();
     }
   
break;
case 1007:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords([{ value: 'PARTITION BY', weight: 2 }, { value: 'ORDER BY', weight: 1 }]);
     } else if (!$$[$0-2]) {
       parser.suggestKeywords(['PARTITION BY']);
     }
   
break;
case 1008:

      if (!$$[$0-1]) {
        parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ORDER BY', weight: 2 }]);
      } else {
        parser.suggestValueExpressionKeywords($$[$0-3]);
      }
    
break;
case 1012:

     parser.suggestKeywords(['BY']);
   
break;
case 1017:

      // Only allowed in last order by
      delete parser.yy.result.suggestAnalyticFunctions;
    
break;
case 1018:

      var keywords = [];
      if ($$[$0-2].suggestKeywords) {
        keywords = parser.createWeightedKeywords($$[$0-2].suggestKeywords, 2);
      }
      if (!$$[$0]) {
        keywords = keywords.concat([{ value: 'RANGE BETWEEN', weight: 1 }, { value: 'ROWS BETWEEN', weight: 1 }]);
      }
      parser.suggestKeywords(keywords);
    
break;
case 1024:

     parser.suggestKeywords(['BETWEEN']);
   
break;
case 1025:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED PRECEDING']);
     } else if (!$$[$0-1]) {
       parser.suggestKeywords(['AND']);
     }
   
break;
case 1030:

    lexer.popState();
  
break;
case 1031:

    lexer.begin('hdfs');
  
break;
case 1033:

      parser.suggestHdfs({ path: $$[$0-3] });
    
break;
case 1034:

     parser.suggestHdfs({ path: $$[$0-2] });
   
break;
case 1035:

      parser.suggestHdfs({ path: $$[$0-1] });
    
break;
case 1036:

     parser.suggestHdfs({ path: '' });
   
break;
case 1037:

      parser.suggestHdfs({ path: '' });
    
break;
case 1043:

     parser.suggestKeywords(['PRECEDING']);
   
break;
case 1044: case 1049:

     parser.suggestKeywords(['ROW']);
   
break;
case 1048:

     parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED FOLLOWING']);
   
break;
case 1050:

     parser.suggestKeywords(['FOLLOWING']);
   
break;
case 1054:
this.$ = { inValueEdit: true };
break;
case 1055:
this.$ = { inValueEdit: true, cursorAtStart: true };
break;
case 1056: case 1057: case 1058:

     this.$ = { suggestKeywords: ['NOT'] }
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1062: case 1063: case 1064:

     parser.suggestFunctions({ types: [ 'STRING' ] });
     parser.suggestColumns({ types: [ 'STRING' ] });
     this.$ = { types: ['BOOLEAN'] }
   
break;
case 1065:

     this.$ = parser.findCaseType($$[$0-1])
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1066:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1067:
this.$ = parser.findCaseType($$[$0-1]);
break;
case 1068:

     parser.suggestValueExpressionKeywords($$[$0-1], ['END']);
     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1069:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1070:
this.$ = parser.findCaseType($$[$0-2]);
break;
case 1071:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1072:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-2]);
   
break;
case 1073:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     this.$.suggestFilters = $$[$0-1].suggestFilters
   
break;
case 1074:

     parser.valueExpressionSuggest();
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1075:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1076:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = $$[$0-1];
   
break;
case 1077:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ] };
   
break;
case 1080:

     this.$ = { caseTypes: [ $$[$0] ], lastType: $$[$0] }
     parser.extractExpressionText(this.$, $$[$0]);
   
break;
case 1081:

     $$[$0-1].caseTypes.push($$[$0]);
     this.$ = { caseTypes: $$[$0-1].caseTypes, lastType: $$[$0] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1085:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
   
break;
case 1087:

     this.$ = $$[$0]
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1088:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0].suggestFilters };
break;
case 1089:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1090:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0-2].suggestFilters };
break;
case 1091: case 1092:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0].suggestFilters };
break;
case 1093:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1094:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [$$[$0]] };
   
break;
case 1095:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1096:

      parser.valueExpressionSuggest();
      parser.suggestKeywords(['WHEN']);
      this.$ = { caseTypes: [{ types: ['T'] }] };
    
break;
case 1097: case 1099:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1098:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1100:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [$$[$0]], suggestFilters: true };
   
break;
case 1101:

     parser.suggestValueExpressionKeywords($$[$0-1], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1102:

     parser.suggestValueExpressionKeywords($$[$0-2], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1103: case 1104: case 1105: case 1106:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
}
},
table: [o($V0,$V1,{287:1,234:2}),{1:[3]},o($V2,$V3,{288:3,292:4,25:5,94:7,26:8,27:9,28:10,135:11,136:12,4:$V4,83:$V5,211:$V6,295:$V7}),{289:[1,16],293:[1,17]},o($V2,[2,518]),o($V2,[2,524]),o($V2,[2,525]),o($V2,[2,526]),o($V2,[2,16]),o($V2,[2,17]),o($V2,[2,18]),{10:[1,19],136:18,211:$V6},o($V8,$V9,{137:20,229:21,231:22,233:$Va}),{29:24,36:[1,27],37:[1,28],38:[1,29],41:[1,25],89:[1,26]},{30:32,124:$Vb,141:30,143:31,198:$Vc,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg},o([10,105,106,118,123,124,198,224,259,260,261,262,263,264,265,266,267,268,269,271,272,273,299,300,301,303,304,305,308,311,315,321,324,325,342,348,349,350],$Vh,{212:41,217:$Vi,218:$Vj}),{1:[2,513]},o($V0,$V1,{234:44}),o($V8,$V9,{229:21,231:22,137:45,233:$Va}),{83:$V5,94:46,135:11,136:12,211:$V6},o($V8,[2,204]),o($V8,[2,394],{231:47,233:$Va}),o($Vk,[2,396]),o([211,217,218],$V1,{234:48}),{30:49,124:$Vb,198:$Vc,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg},{30:51,42:50,124:$Vb,198:$Vc,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg},{30:51,42:52,124:$Vb,198:$Vc,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg},o($Vl,[2,27]),o($Vl,[2,28]),o($Vl,[2,29]),o([10,211],[2,213],{14:[1,53]}),o($Vm,[2,215]),{93:[1,54]},o($Vn,[2,745]),{311:[1,56],358:[1,55]},o($Vn,[2,536]),o($Vn,[2,537]),o($Vn,[2,538]),o($Vn,[2,533]),o($Vn,[2,534]),o($Vn,[2,535]),{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:59,197:89,198:$Vc,213:57,221:58,224:$Vt,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},o($VU,[2,356]),o($VU,[2,357]),o($V2,$V3,{292:4,25:5,94:7,26:8,27:9,28:10,135:11,136:12,288:115,4:$V4,83:$V5,211:$V6,295:$V7}),o($V8,[2,202]),{12:[1,116]},o($Vk,[2,397]),{211:$Vh,212:117,217:$Vi,218:$Vj},{31:118,33:[1,119]},{4:[1,131],33:[1,135],43:120,47:121,48:122,53:123,54:124,55:[1,126],57:[1,127],60:[1,125],63:128,64:129,71:[1,130],75:[1,133],86:$VV,88:[1,132],335:$VW},o($VX,[2,722],{305:[1,137]}),{33:[1,142],55:[1,141],64:139,86:$VV,90:138,93:[1,140]},{30:32,124:$Vb,143:143,198:$Vc,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg},{10:[1,144]},{311:[1,145]},o($Vn,[2,747]),o($Vk,[2,345],{214:146,147:148,14:[1,147],148:[1,149]}),o($VY,[2,362]),o($VY,$VZ,{282:33,298:37,223:150,413:164,30:165,15:166,357:171,361:172,16:$V_,93:$V$,105:$V01,119:$V11,120:$V21,124:$Vb,198:$Vc,224:$V31,299:$Vd,300:$Ve,301:$Vf,304:$V41,309:$V51,310:$V61,311:$Vg,312:$V71,317:$V81,321:$VN,329:$V91,332:$Va1,333:$Vb1,334:$Vc1,338:$Vd1,339:$Ve1,342:$VQ}),o($VY,[2,378]),o($Vf1,[2,789]),{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:173,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:174,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:175,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:176,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},{10:$Vg1,410:177},{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:179,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:181,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,353:$Vh1,357:97,361:98,402:74,414:180,424:82,426:90,428:95,429:96,430:99,478:182,480:183},o($Vf1,[2,478],{276:185,10:$Vi1}),{10:$Vi1,276:187},o($Vf1,[2,476]),o($Vf1,[2,477]),o($Vf1,[2,479]),o($Vj1,[2,921],{305:[1,188]}),{10:[2,458]},{10:[2,459]},{10:[2,460]},{10:[2,461]},o($Vf1,[2,507],{240:189,242:190,284:$Vk1}),{242:192,284:$Vk1},o($Vf1,[2,415]),o($Vf1,[2,927]),o($Vl1,[2,759]),o($Vm1,[2,423]),o($Vm1,[2,424]),o($Vm1,[2,425]),{10:[1,193]},{10:[1,194]},o($Vf1,[2,929]),o($Vf1,[2,930]),o([10,12,14,16,56,93,105,118,119,120,123,124,148,156,171,184,185,186,187,188,189,190,191,196,198,202,209,210,224,233,235,289,293,299,300,301,304,305,309,310,311,312,313,314,316,317,319,320,321,322,323,326,329,330,332,333,334,337,338,339,341,342,343,344,345,346,347,352,353,412],[2,769]),{10:[1,195]},{10:[1,196]},{10:[1,197]},o($Vf1,[2,932]),o($Vf1,[2,933]),o($Vf1,[2,941]),o($Vf1,[2,942]),o($Vf1,[2,943]),{10:[2,434]},{10:[2,435]},{10:[2,436]},{10:[2,437]},{10:[2,438]},{10:[2,439]},{10:[2,440]},{10:[2,441]},o($Vf1,[2,934],{305:[1,198]}),{349:[1,199],350:[1,200]},{349:[1,201]},{342:[1,203],358:[1,202]},{321:[1,205],358:[1,204]},o($Vf1,[2,946]),o($Vf1,[2,947]),o($V2,[2,519]),o($V8,$V9,{229:21,231:22,137:206,233:$Va}),{136:207,211:$V6},o($V2,[2,19]),{34:208,35:[1,209],39:[1,210],40:[1,211]},o($V2,[2,32]),o($V2,[2,39]),o($Vl,[2,105],{49:212,62:[1,213]}),o($V2,[2,41]),{33:[1,217],55:[1,214],57:[1,215],63:216},{61:[1,218]},{56:[1,220],62:[1,219]},{58:[1,221]},o($V2,[2,48]),o($V2,[2,50]),{10:[2,674],58:[1,222],72:223,271:[1,224]},o($Vn1,[2,109]),o($Vn1,[2,110]),{58:[1,227],62:[1,226],76:225,271:$Vo1,335:$Vp1},{10:[1,229]},{35:$Vq1,81:$Vr1,82:$Vs1,84:$Vt1,85:$Vu1},{85:[1,235]},{30:236,124:$Vb,198:$Vc,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg},o($V2,[2,111]),o($V2,[2,118]),{83:$V5,94:237,135:11,136:12,211:$V6},{56:[1,238]},{85:$Vu1},o($Vm,[2,216]),o($Vv1,$Vw1,{145:239,441:240}),o($Vn,[2,746]),o($Vk,[2,346]),{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:59,197:89,198:$Vc,221:241,224:$Vt,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},o($Vx1,[2,406],{219:242,226:243,228:244,235:[1,245]}),{10:$Vg1,30:51,42:253,124:$Vb,149:246,152:247,177:249,198:$Vc,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg,410:254,431:248,433:250,435:251,436:252},o($VY,[2,377]),o($Vy1,[2,948],{409:255,105:[1,256]}),{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:257,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:258,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:259,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:260,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},{312:[1,262],329:[1,261],333:$Vb1,338:$Vd1,339:$Ve1,413:263},{10:[1,264]},{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:265,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:266,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:267,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:268,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:269,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:270,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},o($Vf1,[2,815]),o($Vz1,[2,995]),o($Vz1,[2,996]),{15:272,30:271,124:$Vb,198:$Vc,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg,321:$VN,342:$VQ,357:171,361:172},{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:273,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:274,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:275,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},o($VA1,[2,661]),o($VA1,[2,662]),o($VB1,[2,790],{413:164,16:$V_,119:$V11,120:$V21,224:$V31,304:$V41,310:$V61,317:$V81,329:$V91,332:$Va1,333:$Vb1,338:$Vd1,339:$Ve1}),o($VB1,[2,791],{413:164,16:$V_,119:$V11,120:$V21,224:$V31,304:$V41,310:$V61,317:$V81,329:$V91,332:$Va1,333:$Vb1,338:$Vd1,339:$Ve1}),o($VB1,[2,792],{413:164,16:$V_,119:$V11,120:$V21,224:$V31,304:$V41,310:$V61,317:$V81,329:$V91,332:$Va1,333:$Vb1,338:$Vd1,339:$Ve1}),o($VC1,[2,793],{413:164}),o($Vf1,[2,798]),o($Vv1,$Vw1,{441:240,410:254,145:276,436:277,10:$Vg1}),{12:[1,278],16:$V_,105:$V01,119:$V11,120:$V21,224:$V31,304:$V41,309:$V51,310:$V61,312:$V71,317:$V81,329:$V91,332:$Va1,333:$Vb1,334:$Vc1,338:$Vd1,339:$Ve1,413:164},o($Vf1,[2,817]),{16:$V_,105:$V01,119:$V11,120:$V21,224:$V31,304:$V41,309:$V51,310:$V61,312:$V71,317:$V81,329:$V91,332:$Va1,333:$Vb1,334:$Vc1,338:$Vd1,339:$Ve1,353:$Vh1,413:164,414:279,478:182,480:183},{322:[1,281],323:[1,280],353:$Vh1,480:282},o($VD1,[2,1080]),{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:283,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},o($Vf1,[2,474]),{10:$Vo,12:[1,284],17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:286,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,257:285,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},o($Vf1,[2,475]),{30:91,50:288,124:$Vb,198:$Vc,224:[1,287],282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg},o($Vf1,[2,413]),o($Vf1,[2,508]),{10:[1,291],30:289,124:$Vb,198:$Vc,282:33,285:290,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg},o($Vf1,[2,414]),{10:$Vo,12:[1,292],17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:286,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,257:293,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},{10:$Vo,12:[1,295],17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:294,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},o([10,12,105,106,118,123,124,198,259,260,261,262,263,264,265,266,267,268,269,271,272,273,299,300,301,303,304,305,308,311,315,321,324,325,342,348,349,350],$Vh,{212:296,217:$Vi,218:$Vj}),o($VE1,$Vh,{212:299,12:[1,298],217:$Vi,218:$Vj,224:[1,297]}),o($VE1,$Vh,{212:300,12:[1,301],217:$Vi,218:$Vj}),o($Vf1,[2,935],{349:[1,302],350:[1,303]}),o($Vf1,[2,937]),{349:[1,304]},o($Vf1,[2,938]),{342:[1,305]},o($VF1,[2,656]),{321:[1,306]},o($VF1,[2,659]),o($V8,[2,203]),o($Vk,[2,402]),{9:307,10:$VG1},{15:309,321:$VN,342:$VQ,357:171,361:172},{10:[2,30]},{10:[2,31]},{30:91,50:310,124:$Vb,198:$Vc,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg},o($Vl,[2,106]),{56:[1,311]},{58:[1,312]},o($V2,[2,49]),{35:$Vq1,81:$Vr1,82:$Vs1,84:$Vt1},o($V2,[2,44]),{30:91,50:313,124:$Vb,198:$Vc,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg},{30:314,124:$Vb,198:$Vc,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg},{10:$VH1,59:315},{10:$VH1,59:317},{10:[1,319],73:318},{105:[1,320]},{54:321,335:$VW},{30:91,50:322,124:$Vb,198:$Vc,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg},{10:[1,324],78:323},{324:[1,325]},{30:91,50:328,124:$Vb,198:$Vc,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg,376:326,396:327},{20:329,21:[1,330],22:[1,331],23:[1,332],24:[1,333]},{15:334,321:$VN,342:$VQ,357:171,361:172},{15:335,321:$VN,342:$VQ,357:171,361:172},{9:336,10:$VG1},{9:337,10:$VG1},{10:$Vp1,76:338,271:$Vo1},o($VX,[2,723]),o($V2,[2,119]),{30:339,124:$Vb,198:$Vc,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg},{12:[1,340]},{83:$V5,94:348,135:11,136:12,211:$V6,443:341,445:342,447:343,449:344,451:345,453:346,455:347},o($VY,[2,363]),o($Vk,[2,358]),o($VI1,[2,235],{154:349,155:350,156:[1,351]}),o($Vx1,[2,407]),{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:353,197:89,198:$Vc,236:352,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},o([12,156,171,196,202,233,235,289,293],[2,225],{14:[1,354]}),o($VJ1,[2,228]),o($VJ1,[2,950]),o($VJ1,[2,952],{174:355,176:356,184:$VK1,185:$VL1,186:$VM1,187:$VN1,188:$VO1,189:$VP1,190:$VQ1,191:$VR1}),o($VJ1,[2,953]),o($VS1,$VZ,{282:33,298:37,30:165,15:166,357:171,361:172,223:365,93:$V$,124:$Vb,198:$Vc,299:$Vd,300:$Ve,301:$Vf,311:$Vg,321:$VN,342:$VQ}),o($VS1,$VZ,{282:33,298:37,30:165,15:166,357:171,361:172,223:366,93:$V$,124:$Vb,198:$Vc,299:$Vd,300:$Ve,301:$Vf,311:$Vg,321:$VN,342:$VQ}),o($VT1,[2,964]),o($VT1,[2,966]),{106:[1,367],218:[1,370],325:[1,369],348:[1,368]},o($Vy1,[2,949]),o($VU1,[2,800],{413:164,224:$V31,304:$V41,310:$V61,329:$V91,332:$Va1,333:$Vb1,338:$Vd1,339:$Ve1}),o($VU1,[2,801],{413:164,224:$V31,304:$V41,310:$V61,329:$V91,332:$Va1,333:$Vb1,338:$Vd1,339:$Ve1}),o($VU1,[2,802],{413:164,224:$V31,304:$V41,310:$V61,329:$V91,332:$Va1,333:$Vb1,338:$Vd1,339:$Ve1}),o($VU1,[2,803],{413:164,224:$V31,304:$V41,310:$V61,329:$V91,332:$Va1,333:$Vb1,338:$Vd1,339:$Ve1}),{10:[1,371]},{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:372,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},o($Vf1,[2,816]),o($Vv1,$Vw1,{282:33,298:37,274:61,275:69,270:70,238:71,17:72,402:74,239:79,241:80,243:81,424:82,50:83,250:84,251:85,252:86,197:89,426:90,30:91,256:92,428:95,429:96,357:97,361:98,430:99,441:240,145:373,411:374,166:375,10:$Vo,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,198:$Vc,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,271:$VF,272:$VG,273:$VH,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT}),{16:$V_,105:$V01,119:$V11,120:$V21,224:$V31,304:$V41,309:$V51,310:$V61,312:$V71,317:$V81,329:$V91,332:$Va1,333:$Vb1,334:$Vc1,338:$Vd1,339:$Ve1,412:[1,376],413:164},o($VV1,[2,810],{413:164,16:$V_,105:$V01,119:$V11,120:$V21,224:$V31,304:$V41,310:$V61,312:$V71,317:$V81,329:$V91,332:$Va1,333:$Vb1,338:$Vd1,339:$Ve1}),o($VV1,[2,811],{413:164,16:$V_,105:$V01,119:$V11,120:$V21,224:$V31,304:$V41,310:$V61,312:$V71,317:$V81,329:$V91,332:$Va1,333:$Vb1,338:$Vd1,339:$Ve1}),o($VC1,[2,812],{413:164,329:$V91,332:$Va1,333:$Vb1,338:$Vd1,339:$Ve1}),o($VC1,[2,813],{413:164,329:$V91,332:$Va1,333:$Vb1,338:$Vd1,339:$Ve1}),o($VC1,[2,814],{413:164,329:$V91,332:$Va1,333:$Vb1,338:$Vd1,339:$Ve1}),o($Vz1,[2,997]),o($Vz1,[2,998]),o($VC1,[2,1056],{413:164}),o($VC1,[2,1057],{413:164}),o($VC1,[2,1058],{413:164}),{12:[1,377]},{12:$VZ,15:166,30:165,93:$V$,124:$Vb,198:$Vc,223:378,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg,321:$VN,342:$VQ,357:171,361:172},o($Vf1,[2,799]),o($Vf1,[2,818]),o($Vf1,[2,1065]),{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:379,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},o($VD1,[2,1081]),{16:$V_,105:$V01,119:$V11,120:$V21,224:$V31,304:$V41,309:$V51,310:$V61,312:$V71,317:$V81,329:$V91,332:$Va1,333:$Vb1,334:$Vc1,338:$Vd1,339:$Ve1,345:[1,380],413:164},o($Vf1,[2,489]),{12:[1,381],14:$VW1},o($VX1,[2,494],{413:164,16:$V_,105:$V01,119:$V11,120:$V21,224:$V31,304:$V41,309:$V51,310:$V61,312:$V71,317:$V81,329:$V91,332:$Va1,333:$Vb1,334:$Vc1,338:$Vd1,339:$Ve1}),o($Vj1,[2,922]),o($Vl1,[2,760]),o($Vf1,[2,510]),o($Vf1,[2,511]),o($VY1,[2,1009],{457:383,461:384,335:[1,385]}),{284:[2,453]},{12:[1,386],14:$VW1},{16:$V_,93:[1,387],105:$V01,119:$V11,120:$V21,224:$V31,304:$V41,309:$V51,310:$V61,312:$V71,317:$V81,329:$V91,332:$Va1,333:$Vb1,334:$Vc1,338:$Vd1,339:$Ve1,413:164},o($Vf1,[2,463]),{10:$Vo,12:[1,388],17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:286,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,257:389,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},{12:[1,390]},o($Vm1,[2,443]),{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:286,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,257:391,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:392,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},o($Vm1,[2,449]),o($Vf1,[2,936]),{349:[1,393]},o($Vf1,[2,939]),o($VF1,[2,655]),o($VF1,[2,658]),o($V2,[2,24]),{11:394,13:395,15:396,321:$VN,342:$VQ,357:171,361:172},o($V2,[2,25]),{51:397,108:398,109:399,110:400,111:401,112:402,113:403,114:404,118:$VZ1,123:$V_1,124:$V$1,313:$V02,314:$V12,316:$V22,319:$V32,320:$V42,326:$V52,330:$V62,343:$V72,344:$V82,346:$V92,347:$Va2,352:$Vb2},{54:420,335:$VW},{10:$VH1,59:421},{56:[1,422]},o($V2,[2,46]),o($V2,[2,47]),{30:91,50:425,96:423,99:424,124:$Vb,198:$Vc,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg},o($V2,[2,72]),o($V2,[2,73]),{54:427,134:426,335:$VW},{324:[1,428]},o($V2,[2,107],{77:429,87:[1,430]}),o($V2,[2,80]),o($V2,[2,81]),{30:91,50:432,124:$Vb,132:431,198:$Vc,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg},o([10,335],[2,671]),{12:[1,433],14:[1,434]},o($VX1,[2,734]),{16:[1,435]},o($V2,[2,89]),o($V2,[2,12]),o($V2,[2,13]),o($V2,[2,14]),o($V2,[2,15]),o($V2,[2,90]),o($V2,[2,91],{83:[1,436]}),o($V2,[2,93]),o($V2,[2,98]),{10:[1,438],18:437},o($V2,[2,120]),o($Vm,[2,221]),{12:[2,978]},{12:[2,980]},{12:[2,982]},{12:[2,984]},{12:[2,986]},{12:[2,988]},{12:[2,990]},{12:[2,992]},o($Vc2,[2,264],{169:439,170:440,171:[1,441]}),o($VI1,[2,236]),{157:[1,442]},o($Vx1,[2,408]),o($Vx1,[2,411],{413:164,16:$V_,105:$V01,119:$V11,120:$V21,224:$V31,304:$V41,309:$V51,310:$V61,312:$V71,317:$V81,329:$V91,332:$Va1,333:$Vb1,334:$Vc1,338:$Vd1,339:$Ve1}),{10:$Vg1,30:51,42:253,124:$Vb,152:443,177:249,198:$Vc,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg,410:254,431:248,433:250,435:251,436:252},o($VJ1,[2,956],{176:444,184:$VK1,185:$VL1,186:$VM1,187:$VN1,188:$VO1,189:$VP1,190:$VQ1,191:$VR1}),{10:$Vg1,30:51,42:253,124:$Vb,177:445,198:$Vc,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg,410:254,435:251,436:252},{185:[1,446]},{185:[1,447],187:[1,448]},{185:[1,449]},o($Vd2,[2,289]),{185:[1,451],187:[1,452],188:[1,450],190:[1,453]},{185:[1,454]},{185:[1,456],187:[1,457],188:[1,455],190:[1,458]},{185:[1,459]},o($VS1,[2,959]),o($VS1,[2,960]),o($Vf1,[2,794]),o($Vf1,[2,795]),o($Vf1,[2,796]),{148:[1,460]},o($Vv1,$Vw1,{282:33,298:37,274:61,275:69,270:70,238:71,17:72,402:74,239:79,241:80,243:81,424:82,50:83,250:84,251:85,252:86,197:89,426:90,30:91,256:92,428:95,429:96,357:97,361:98,430:99,441:240,166:375,145:461,411:462,10:$Vo,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,198:$Vc,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,271:$VF,272:$VG,273:$VH,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT}),{16:$V_,105:$V01,119:$V11,120:$V21,224:$V31,304:$V41,309:$V51,310:$V61,312:$V71,317:$V81,329:$V91,332:$Va1,333:$Vb1,334:$Vc1,338:$Vd1,339:$Ve1,412:[1,463],413:164},{12:[1,464]},{12:[1,465],14:$Ve2},o($Vf2,[2,906],{413:164,16:$V_,105:$V01,119:$V11,120:$V21,224:$V31,304:$V41,309:$V51,310:$V61,312:$V71,317:$V81,329:$V91,332:$Va1,333:$Vb1,334:$Vc1,338:$Vd1,339:$Ve1}),{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:467,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},o($Vg2,[2,974]),{12:[1,468]},{16:$V_,105:$V01,119:$V11,120:$V21,224:$V31,304:$V41,309:$V51,310:$V61,312:$V71,317:$V81,323:[1,469],329:$V91,332:$Va1,333:$Vb1,334:$Vc1,338:$Vd1,339:$Ve1,413:164},{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:470,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},o($Vf1,[2,490]),{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:471,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},{12:[2,1015],201:473,202:$Vh2,458:472},o($VY1,[2,1010]),{157:[1,475]},{284:[2,454]},{108:476,313:$V02,314:$V12,316:$V22,319:$V32,320:$V42,326:$V52,330:$V62,343:$V72,344:$V82,346:$V92,347:$Va2,352:$Vb2},o($Vm1,[2,429]),{12:[1,477],14:$VW1},o($Vm1,[2,442]),{12:[1,478],14:$VW1},{12:[1,479],16:$V_,105:$V01,119:$V11,120:$V21,224:$V31,304:$V41,309:$V51,310:$V61,312:$V71,317:$V81,329:$V91,332:$Va1,333:$Vb1,334:$Vc1,338:$Vd1,339:$Ve1,413:164},o($Vf1,[2,940]),{12:[1,480],14:[1,481]},o($VX1,[2,6]),{16:[1,482]},o($V2,$Vi2,{52:483,102:484,103:485,105:$Vj2,106:$Vk2,107:$Vl2}),o($Vm2,[2,154]),o($Vm2,[2,155]),o($Vm2,[2,156]),o($Vm2,[2,157]),o($Vm2,[2,158]),o($Vm2,[2,159]),o($Vm2,[2,160]),o($Vm2,[2,772]),o($Vm2,[2,773]),o($Vm2,$Vn2,{407:489,10:$Vo2}),o($Vm2,[2,786],{408:491,10:[1,492]}),o($Vm2,[2,776]),o($Vm2,[2,777]),o($Vm2,[2,778]),o($Vm2,[2,779]),o($Vm2,[2,780]),o($Vm2,[2,781]),o($Vm2,[2,782]),o($Vm2,$Vn2,{407:493,10:$Vo2}),{119:[1,494]},{119:[1,495]},{119:[1,496]},o($V2,[2,42]),o($V2,[2,43]),{30:91,50:497,124:$Vb,198:$Vc,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg},{12:[1,498],14:[1,499]},o($VX1,[2,128]),{51:500,108:398,109:399,110:400,111:401,112:402,113:403,114:404,118:$VZ1,123:$V_1,124:$V$1,313:$V02,314:$V12,316:$V22,319:$V32,320:$V42,326:$V52,330:$V62,343:$V72,344:$V82,346:$V92,347:$Va2,352:$Vb2},{12:[1,501],54:502,335:$VW},o($Vp2,[2,200]),{10:[2,675]},o($V2,[2,79]),o($V2,[2,108]),{12:[1,503],14:[1,504]},o($VX1,[2,193]),o([12,33,55,57,87,289,293,335],[2,685]),{30:91,50:328,124:$Vb,198:$Vc,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg,396:505},{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:506,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},{84:[1,507]},o($V2,[2,99]),{15:509,19:508,321:$VN,342:$VQ,357:171,361:172},o($Vq2,[2,327],{200:510,201:511,202:$Vh2}),o($Vc2,[2,265]),{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:512,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,158:513,166:514,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},o($VJ1,[2,229]),{10:$Vg1,30:51,42:253,124:$Vb,177:515,198:$Vc,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg,410:254,435:251,436:252},o($Vr2,$Vs2,{178:516,192:$Vt2}),o($Vd2,[2,285]),o($Vd2,[2,286]),{185:[1,518]},o($Vd2,[2,288]),{185:[1,519]},o($Vd2,[2,291]),{185:[1,520]},{185:[1,521]},o($Vd2,[2,294]),{185:[1,522]},o($Vd2,[2,296]),{185:[1,523]},{185:[1,524]},o($Vd2,[2,299]),{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:525,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},{12:[1,526]},{12:[1,527],14:$Ve2},{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:528,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},o($Vf1,[2,806]),o($Vf1,[2,807]),{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:529,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},o([12,14,93,124,148,156,171,184,185,186,187,188,189,190,191,196,198,202,209,210,233,235,289,293,299,300,301,309,311,312,321,322,323,334,337,341,342,345,353,412],[2,809],{413:164,16:$V_,105:$V01,119:$V11,120:$V21,224:$V31,304:$V41,310:$V61,317:$V81,329:$V91,332:$Va1,333:$Vb1,338:$Vd1,339:$Ve1}),o($Vg2,[2,975]),o($Vf1,[2,1066]),o($VD1,[2,1087],{413:164,16:$V_,105:$V01,119:$V11,120:$V21,224:$V31,304:$V41,309:$V51,310:$V61,312:$V71,317:$V81,329:$V91,332:$Va1,333:$Vb1,334:$Vc1,338:$Vd1,339:$Ve1}),o($VX1,[2,495],{413:164,16:$V_,105:$V01,119:$V11,120:$V21,224:$V31,304:$V41,309:$V51,310:$V61,312:$V71,317:$V81,329:$V91,332:$Va1,333:$Vb1,334:$Vc1,338:$Vd1,339:$Ve1}),{12:[1,530]},{12:[2,1020],337:[1,535],341:[1,534],462:531,464:532,465:533},{157:[1,536]},{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:375,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,411:537,424:82,426:90,428:95,429:96,430:99},{12:[1,538]},o($Vm1,[2,430]),o($Vm1,[2,444]),o($Vm1,[2,448]),o($V2,[2,5]),{13:539,15:396,321:$VN,342:$VQ,357:171,361:172},{17:540,197:89,305:$VK,321:$VN,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,424:82,426:90,428:95,429:96,430:99},o($V2,[2,40]),o([12,14,289,293],[2,143],{103:541,105:$Vj2,106:$Vk2,107:$Vl2}),o($Vu2,[2,144]),{106:[1,542]},o($Vu2,[2,151]),o($Vu2,[2,152]),o($Vm2,[2,774]),{349:[1,543]},o($Vm2,[2,775]),{349:[1,544]},o($Vm2,[2,783]),{51:545,108:398,109:399,110:400,111:401,112:402,113:403,114:404,118:$VZ1,120:[1,546],123:$V_1,124:$V$1,313:$V02,314:$V12,316:$V22,319:$V32,320:$V42,326:$V52,330:$V62,343:$V72,344:$V82,346:$V92,347:$Va2,352:$Vb2},{108:547,120:[1,548],313:$V02,314:$V12,316:$V22,319:$V32,320:$V42,326:$V52,330:$V62,343:$V72,344:$V82,346:$V92,347:$Va2,352:$Vb2},{30:552,120:[1,550],124:$Vb,125:549,127:551,198:$Vc,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg},o($V2,[2,45]),o($V2,[2,126]),{30:91,50:425,99:553,124:$Vb,198:$Vc,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg},o($VX1,$Vi2,{102:484,103:485,52:554,105:$Vj2,106:$Vk2,107:$Vl2}),o($V2,[2,199]),o($Vp2,[2,201]),o($V2,[2,191]),{30:91,50:555,124:$Vb,198:$Vc,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg},o($VX1,[2,735]),o($VX1,[2,740],{413:164,16:$V_,105:$V01,119:$V11,120:$V21,224:$V31,304:$V41,309:$V51,310:$V61,312:$V71,317:$V81,329:$V91,332:$Va1,333:$Vb1,334:$Vc1,338:$Vd1,339:$Ve1}),{9:556,10:$VG1},{12:[1,557],14:[1,558]},o($VX1,[2,10]),o($Vk,[2,320],{194:559,195:560,196:[1,561]}),o($Vq2,[2,328]),o($Vc2,[2,266],{413:164,16:$V_,105:$V01,119:$V11,120:$V21,224:$V31,304:$V41,309:$V51,310:$V61,312:$V71,317:$V81,329:$V91,332:$Va1,333:$Vb1,334:$Vc1,338:$Vd1,339:$Ve1}),o($VI1,[2,237],{14:[1,562]}),o($Vv2,[2,252],{413:164,16:$V_,105:$V01,119:$V11,120:$V21,224:$V31,304:$V41,309:$V51,310:$V61,312:$V71,317:$V81,329:$V91,332:$Va1,333:$Vb1,334:$Vc1,338:$Vd1,339:$Ve1}),o($Vr2,$Vs2,{178:563,192:$Vt2}),o($Vr2,[2,272]),{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:564,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},o($Vd2,[2,287]),o($Vd2,[2,290]),o($Vd2,[2,292]),o($Vd2,[2,293]),o($Vd2,[2,295]),o($Vd2,[2,297]),o($Vd2,[2,298]),o($VC1,[2,797],{413:164}),o($Vf1,[2,804]),o($Vf1,[2,805]),o($VB1,[2,808],{413:164,16:$V_,119:$V11,120:$V21,224:$V31,304:$V41,310:$V61,317:$V81,329:$V91,332:$Va1,333:$Vb1,338:$Vd1,339:$Ve1}),o($Vf2,[2,907],{413:164,16:$V_,105:$V01,119:$V11,120:$V21,224:$V31,304:$V41,309:$V51,310:$V61,312:$V71,317:$V81,329:$V91,332:$Va1,333:$Vb1,334:$Vc1,338:$Vd1,339:$Ve1}),o($Vf1,[2,1004]),{12:[2,1016]},{12:[2,1021]},{312:[1,565],469:[1,566]},o($Vw2,[2,1038]),o($Vw2,[2,1039]),{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:569,197:89,198:$Vc,203:567,206:568,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},o($VY1,[2,1011],{14:$Ve2}),o($Vf1,[2,462]),o($VX1,[2,7]),o($VX1,[2,8]),o($Vu2,[2,145]),o($Vu2,[2,150]),{12:[1,570]},{12:[1,571],14:[1,572]},{120:[1,573]},o($Vm2,[2,165]),{14:[1,574]},o($Vm2,[2,169]),{14:[1,576],120:[1,575]},o($Vm2,[2,175]),o($Vx2,[2,177]),{130:[1,577]},o($VX1,[2,129]),o($VX1,[2,138]),o($VX1,[2,194]),o($V2,[2,92]),o($V2,[2,9]),{15:578,321:$VN,342:$VQ,357:171,361:172},o($Vk,[2,382]),o($Vk,[2,321]),{197:579,198:[1,580],305:$VK,349:$VS,350:$VT,428:95,429:96},{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:581,197:89,198:$Vc,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},o($Vr2,[2,273]),o($Vr2,[2,315],{413:164,16:$V_,105:$V01,119:$V11,120:$V21,224:$V31,304:$V41,309:$V51,310:$V61,312:$V71,317:$V81,329:$V91,332:$Va1,333:$Vb1,334:$Vc1,338:$Vd1,339:$Ve1}),o($Vy2,$Vz2,{466:582}),o($Vy2,$Vz2,{466:583}),o([12,196,233,289,293,337,341],[2,329],{14:[1,584]}),o($VA2,[2,332]),o($VA2,[2,342],{413:164,208:585,16:$V_,105:$V01,119:$V11,120:$V21,209:[1,586],210:[1,587],224:$V31,304:$V41,309:$V51,310:$V61,312:$V71,317:$V81,329:$V91,332:$Va1,333:$Vb1,334:$Vc1,338:$Vd1,339:$Ve1}),o($Vm2,[2,785]),o($Vm2,[2,787]),{349:[1,588]},o($Vm2,[2,164]),{51:589,108:398,109:399,110:400,111:401,112:402,113:403,114:404,118:$VZ1,123:$V_1,124:$V$1,313:$V02,314:$V12,316:$V22,319:$V32,320:$V42,326:$V52,330:$V62,343:$V72,344:$V82,346:$V92,347:$Va2,352:$Vb2},o($Vm2,[2,174]),{30:552,124:$Vb,127:590,198:$Vc,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,311:$Vg},{51:591,108:398,109:399,110:400,111:401,112:402,113:403,114:404,118:$VZ1,123:$V_1,124:$V$1,313:$V02,314:$V12,316:$V22,319:$V32,320:$V42,326:$V52,330:$V62,343:$V72,344:$V82,346:$V92,347:$Va2,352:$Vb2},o($VX1,[2,11]),o($Vk,[2,322],{14:[1,592]}),o($Vk,[2,324],{14:[1,593]}),o($Vv2,[2,253],{413:164,16:$V_,105:$V01,119:$V11,120:$V21,224:$V31,304:$V41,309:$V51,310:$V61,312:$V71,317:$V81,329:$V91,332:$Va1,333:$Vb1,334:$Vc1,338:$Vd1,339:$Ve1}),o($VB2,$VC2,{467:594,477:595,318:$VD2,349:$VE2,469:$VF2}),o($VB2,$VC2,{477:595,467:599,318:$VD2,349:$VE2,469:$VF2}),{10:$Vo,17:72,30:91,50:83,105:$Vp,106:$Vq,118:$Vr,123:$Vs,124:$Vb,166:569,197:89,198:$Vc,206:600,238:71,239:79,241:80,243:81,250:84,251:85,252:86,256:92,259:$Vu,260:$Vv,261:$Vw,262:$Vx,263:$Vy,264:$Vz,265:$VA,266:$VB,267:$VC,268:$VD,269:$VE,270:70,271:$VF,272:$VG,273:$VH,274:61,275:69,282:33,298:37,299:$Vd,300:$Ve,301:$Vf,303:$VI,304:$VJ,305:$VK,308:$VL,311:$Vg,315:$VM,321:$VN,324:$VO,325:$VP,342:$VQ,348:$VR,349:$VS,350:$VT,357:97,361:98,402:74,424:82,426:90,428:95,429:96,430:99},o($VA2,[2,339]),o($VA2,[2,343]),o($VA2,[2,344]),{12:[1,601]},{120:[1,602]},o($Vx2,[2,178]),{131:[1,603]},{197:604,305:$VK,349:$VS,350:$VT,428:95,429:96},{198:[1,605]},{12:$VG2,309:$VH2,468:606},{336:[1,608]},{340:[1,609]},o($VI2,[2,1051]),o($VI2,[2,1052]),{12:$VG2,309:$VH2,468:610},o($VA2,[2,333]),o($Vm2,[2,788]),o($Vm2,[2,168]),o($Vx2,[2,184]),o($Vk,[2,323]),o($Vk,[2,325]),{12:[2,1022]},{318:[1,611],349:$VE2,469:$VF2,477:612},o($VB2,[2,1041]),o($VB2,[2,1042]),{12:[2,1023]},{340:[1,613]},{327:[1,614]},{12:[2,1046]},{12:[2,1047]}],
defaultActions: {16:[2,513],75:[2,458],76:[2,459],77:[2,460],78:[2,461],100:[2,434],101:[2,435],102:[2,436],103:[2,437],104:[2,438],105:[2,439],106:[2,440],107:[2,441],210:[2,30],211:[2,31],292:[2,453],341:[2,978],342:[2,980],343:[2,982],344:[2,984],345:[2,986],346:[2,988],347:[2,990],348:[2,992],386:[2,454],428:[2,675],531:[2,1016],532:[2,1021],606:[2,1022],610:[2,1023],613:[2,1046],614:[2,1047]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
/**
 * @param {string} input
 *
 * @return {AutocompleteParseResult}
 */
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: lexer.yylloc,
                    ruleId: stack.slice(stack.length - 2, stack.length).join('_'),
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


SqlParseSupport.initSyntaxParser(parser);/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true,"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* skip whitespace */ 
break;
case 1: /* skip comments */ 
break;
case 2: /* skip comments */ 
break;
case 3: parser.yy.partialCursor = false; parser.yy.cursorFound = yy_.yylloc; return 5; 
break;
case 4: parser.yy.partialCursor = true; parser.yy.cursorFound = yy_.yylloc; return 354; 
break;
case 5: this.popState(); return 412; 
break;
case 6: return 71; 
break;
case 7: return 217; 
break;
case 8: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('ALTER', yy_.yylloc, yy.lexer.upcomingInput()); return 4; 
break;
case 9: return 309; 
break;
case 10: return 93; 
break;
case 11: return 209; 
break;
case 12: this.begin('between'); return 312; 
break;
case 13: return 313; 
break;
case 14: return 314; 
break;
case 15: return 157; 
break;
case 16: return 369; 
break;
case 17: return 315; 
break;
case 18: return 88; 
break;
case 19: return 316; 
break;
case 20: return 62; 
break;
case 21: return 58; 
break;
case 22: return 'COMMENT'; 
break;
case 23: parser.determineCase(yy_.yytext); return 'CREATE'; 
break;
case 24: return 184; 
break;
case 25: return 318; 
break;
case 26: return 36; 
break;
case 27: return 39; 
break;
case 28: return 319; 
break;
case 29: return 210; 
break;
case 30: return 218; 
break;
case 31: return 310; 
break;
case 32: return 320; 
break;
case 33: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('DROP', yy_.yylloc, yy.lexer.upcomingInput()); return 75; 
break;
case 34: return 322; 
break;
case 35: return 323; 
break;
case 36: parser.yy.correlatedSubQuery = true; return 324; 
break;
case 37: return 325; 
break;
case 38: return 81; 
break;
case 39: return 326; 
break;
case 40: return 327; 
break;
case 41: parser.determineCase(yy_.yytext); return 148; 
break;
case 42: return 186; 
break;
case 43: return 156; 
break;
case 44: return 171; 
break;
case 45: return 271; 
break;
case 46: return 329; 
break;
case 47: return 188; 
break;
case 48: return 'INSERT'; 
break;
case 49: return 330; 
break;
case 50: return 331; 
break;
case 51: return 332; 
break;
case 52: return 185; 
break;
case 53: return 189; 
break;
case 54: return 333; 
break;
case 55: return 196; 
break;
case 56: return 35; 
break;
case 57: return 37; 
break;
case 58: return 105; 
break;
case 59: return 106; 
break;
case 60: return 192; 
break;
case 61: return 300; 
break;
case 62: return 334; 
break;
case 63: return 202; 
break;
case 64: return 187; 
break;
case 65: return 335; 
break;
case 66: return 61; 
break;
case 67: return 336; 
break;
case 68: return 40; 
break;
case 69: return 87; 
break;
case 70: return 337; 
break;
case 71: return 60; 
break;
case 72: return 338; 
break;
case 73: return 55; 
break;
case 74: return 57; 
break;
case 75: return 191; 
break;
case 76: return 339; 
break;
case 77: return 340; 
break;
case 78: return 299; 
break;
case 79: return 341; 
break;
case 80: return 38; 
break;
case 81: return 'SCHEMAS'; 
break;
case 82: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SELECT', yy_.yylloc); return 211; 
break;
case 83: return 190; 
break;
case 84: return 82; 
break;
case 85: return 84; 
break;
case 86: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SET', yy_.yylloc); return 33; 
break;
case 87: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SHOW', yy_.yylloc); return 'SHOW'; 
break;
case 88: return 343; 
break;
case 89: return 344; 
break;
case 90: return 41; 
break;
case 91: return 'TABLES'; 
break;
case 92: return 85; 
break;
case 93: return 345; 
break;
case 94: return 346; 
break;
case 95: return 347; 
break;
case 96: return 56; 
break;
case 97: return 348; 
break;
case 98: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('TRUNCATE', yy_.yylloc, yy.lexer.upcomingInput()); return 272; 
break;
case 99: return 469; 
break;
case 100: return 233; 
break;
case 101: return 86; 
break;
case 102: parser.determineCase(yy_.yytext); return 'UPDATE'; 
break;
case 103: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('USE', yy_.yylloc); return 'USE'; 
break;
case 104: return 351; 
break;
case 105: return 352; 
break;
case 106: return 89; 
break;
case 107: return 353; 
break;
case 108: return 235; 
break;
case 109: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('WITH', yy_.yylloc); return 83; 
break;
case 110: return 284; 
break;
case 111: return 299; 
break;
case 112: yy.lexer.unput('('); yy_.yytext = 'avg'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 259; 
break;
case 113: yy.lexer.unput('('); yy_.yytext = 'cast'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 273; 
break;
case 114: yy.lexer.unput('('); yy_.yytext = 'count'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 267; 
break;
case 115: yy.lexer.unput('('); yy_.yytext = 'max'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 260; 
break;
case 116: yy.lexer.unput('('); yy_.yytext = 'min'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 261; 
break;
case 117: yy.lexer.unput('('); yy_.yytext = 'stddev_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 262; 
break;
case 118: yy.lexer.unput('('); yy_.yytext = 'stddev_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 263; 
break;
case 119: yy.lexer.unput('('); yy_.yytext = 'sum'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 268; 
break;
case 120: yy.lexer.unput('('); yy_.yytext = 'var_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 264; 
break;
case 121: yy.lexer.unput('('); yy_.yytext = 'var_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 265; 
break;
case 122: yy.lexer.unput('('); yy_.yytext = 'variance'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 266; 
break;
case 123: yy.lexer.unput('('); yy_.yytext = 'cume_dist'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 269; 
break;
case 124: yy.lexer.unput('('); yy_.yytext = 'dense_rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 269; 
break;
case 125: yy.lexer.unput('('); yy_.yytext = 'first_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 269; 
break;
case 126: yy.lexer.unput('('); yy_.yytext = 'lag'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 269; 
break;
case 127: yy.lexer.unput('('); yy_.yytext = 'last_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 269; 
break;
case 128: yy.lexer.unput('('); yy_.yytext = 'lead'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 269; 
break;
case 129: yy.lexer.unput('('); yy_.yytext = 'rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 269; 
break;
case 130: yy.lexer.unput('('); yy_.yytext = 'row_number'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 269; 
break;
case 131: return 349; 
break;
case 132: return 349; 
break;
case 133: return 350; 
break;
case 134: return 301; 
break;
case 135: parser.yy.cursorFound = true; return 5; 
break;
case 136: parser.yy.cursorFound = true; return 354; 
break;
case 137: return 328; 
break;
case 138: parser.addFileLocation(yy_.yylloc, yy_.yytext); return 474; 
break;
case 139: this.popState(); return 475; 
break;
case 140: return 289; 
break;
case 141: return 309; 
break;
case 142: return 334; 
break;
case 143: return 16; 
break;
case 144: return 119; 
break;
case 145: return 120; 
break;
case 146: return 317; 
break;
case 147: return 317; 
break;
case 148: return 317; 
break;
case 149: return 317; 
break;
case 150: return 317; 
break;
case 151: return 304; 
break;
case 152: return 224; 
break;
case 153: return 310; 
break;
case 154: return 310; 
break;
case 155: return 310; 
break;
case 156: return 310; 
break;
case 157: return 310; 
break;
case 158: return 310; 
break;
case 159: return 14; 
break;
case 160: return 305; 
break;
case 161: return 130; 
break;
case 162: return 293; 
break;
case 163: return 308; 
break;
case 164: return 303; 
break;
case 165: return 10; 
break;
case 166: return 12; 
break;
case 167: return 306; 
break;
case 168: return 307; 
break;
case 169: return 198; 
break;
case 170: this.begin('backtickedValue'); return 311; 
break;
case 171:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '`')) {
                                               return 360;
                                             }
                                             return 358;
                                           
break;
case 172: this.popState(); return 311; 
break;
case 173: this.begin('singleQuotedValue'); return 342; 
break;
case 174:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '\'')) {
                                               return 360;
                                             }
                                             return 358;
                                           
break;
case 175: this.popState(); return 342; 
break;
case 176: this.begin('doubleQuotedValue'); return 321; 
break;
case 177:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '"')) {
                                               return 360;
                                             }
                                             return 358;
                                           
break;
case 178: this.popState(); return 321; 
break;
case 179: return 289; 
break;
case 180: /* To prevent console logging of unknown chars */ 
break;
case 181: 
break;
case 182: 
break;
case 183: 
break;
case 184: 
break;
case 185: 
break;
case 186:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s)/i,/^(?:--.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:AND)/i,/^(?:ADD)/i,/^(?:ALL)/i,/^(?:ALTER)/i,/^(?:AND)/i,/^(?:AS)/i,/^(?:ASC)/i,/^(?:BETWEEN)/i,/^(?:BIGINT)/i,/^(?:BOOLEAN)/i,/^(?:BY)/i,/^(?:CASCADE)/i,/^(?:CASE)/i,/^(?:CHANGE)/i,/^(?:CHAR)/i,/^(?:COLUMN)/i,/^(?:COLUMNS)/i,/^(?:COMMENT)/i,/^(?:CREATE)/i,/^(?:CROSS)/i,/^(?:CURRENT)/i,/^(?:DATABASE)/i,/^(?:DBPROPERTIES)/i,/^(?:DECIMAL)/i,/^(?:DESC)/i,/^(?:DISTINCT)/i,/^(?:DIV)/i,/^(?:DOUBLE)/i,/^(?:DROP)/i,/^(?:ELSE)/i,/^(?:END)/i,/^(?:EXISTS)/i,/^(?:FALSE)/i,/^(?:FILEFORMAT)/i,/^(?:FLOAT)/i,/^(?:FOLLOWING)/i,/^(?:FROM)/i,/^(?:FULL)/i,/^(?:GROUP)/i,/^(?:HAVING)/i,/^(?:IF)/i,/^(?:IN)/i,/^(?:INNER)/i,/^(?:INSERT)/i,/^(?:INT)/i,/^(?:INTO)/i,/^(?:IS)/i,/^(?:JOIN)/i,/^(?:LEFT)/i,/^(?:LIKE)/i,/^(?:LIMIT)/i,/^(?:LOCATION)/i,/^(?:NAMESPACE)/i,/^(?:NOT)/i,/^(?:NULL)/i,/^(?:ON)/i,/^(?:OPTION)/i,/^(?:OR)/i,/^(?:ORDER)/i,/^(?:OUTER)/i,/^(?:PARTITION)/i,/^(?:PARTITIONS)/i,/^(?:PRECEDING)/i,/^(?:PROPERTIES)/i,/^(?:PURGE)/i,/^(?:RANGE)/i,/^(?:RECOVER)/i,/^(?:REGEXP)/i,/^(?:RENAME)/i,/^(?:REPLACE)/i,/^(?:RIGHT)/i,/^(?:RLIKE)/i,/^(?:ROW)/i,/^(?:ROLE)/i,/^(?:ROWS)/i,/^(?:SCHEMA)/i,/^(?:SCHEMAS)/i,/^(?:SELECT)/i,/^(?:SEMI)/i,/^(?:SERDE)/i,/^(?:SERDEPROPERTIES)/i,/^(?:SET)/i,/^(?:SHOW)/i,/^(?:SMALLINT)/i,/^(?:STRING)/i,/^(?:TABLE)/i,/^(?:TABLES)/i,/^(?:TBLPROPERTIES)/i,/^(?:THEN)/i,/^(?:TIMESTAMP)/i,/^(?:TINYINT)/i,/^(?:TO)/i,/^(?:TRUE)/i,/^(?:TRUNCATE)/i,/^(?:UNBOUNDED)/i,/^(?:UNION)/i,/^(?:UNSET)/i,/^(?:UPDATE)/i,/^(?:USE)/i,/^(?:VALUES)/i,/^(?:VARCHAR)/i,/^(?:VIEW)/i,/^(?:WHEN)/i,/^(?:WHERE)/i,/^(?:WITH)/i,/^(?:OVER)/i,/^(?:ROLE)/i,/^(?:AVG\s*\()/i,/^(?:CAST\s*\()/i,/^(?:COUNT\s*\()/i,/^(?:MAX\s*\()/i,/^(?:MIN\s*\()/i,/^(?:STDDEV_POP\s*\()/i,/^(?:STDDEV_SAMP\s*\()/i,/^(?:SUM\s*\()/i,/^(?:VAR_POP\s*\()/i,/^(?:VAR_SAMP\s*\()/i,/^(?:VARIANCE\s*\()/i,/^(?:CUME_DIST\s*\()/i,/^(?:DENSE_RANK\s*\()/i,/^(?:FIRST_VALUE\s*\()/i,/^(?:LAG\s*\()/i,/^(?:LAST_VALUE\s*\()/i,/^(?:LEAD\s*\()/i,/^(?:RANK\s*\()/i,/^(?:ROW_NUMBER\s*\()/i,/^(?:[0-9]+)/i,/^(?:[0-9]+(?:[YSL]|BD)?)/i,/^(?:[0-9]+E)/i,/^(?:[A-Za-z0-9_]+)/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:\s+['"])/i,/^(?:[^'"\u2020\u2021]+)/i,/^(?:['"])/i,/^(?:$)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<>)/i,/^(?:<=>)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\+)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\|)/i,/^(?:\^)/i,/^(?:&)/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:;)/i,/^(?:~)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\$\{[^}]*\})/i,/^(?:`)/i,/^(?:[^`]+)/i,/^(?:`)/i,/^(?:')/i,/^(?:(?:\\\\|\\[']|[^'])+)/i,/^(?:')/i,/^(?:")/i,/^(?:(?:\\\\|\\["]|[^"])+)/i,/^(?:")/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"hdfs":{"rules":[135,136,137,138,139,140,182],"inclusive":false},"doubleQuotedValue":{"rules":[177,178,185],"inclusive":false},"singleQuotedValue":{"rules":[174,175,184],"inclusive":false},"backtickedValue":{"rules":[171,172,183],"inclusive":false},"between":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,173,176,179,180,181,186],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,173,176,179,180,186],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
export default sparksqlSyntaxParser;
