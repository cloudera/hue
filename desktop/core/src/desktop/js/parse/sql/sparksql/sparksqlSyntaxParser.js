// Licensed to Cloudera, Inc. under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  Cloudera, Inc. licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import SqlParseSupport from 'parse/sql/sparksql/sqlParseSupport';

var sparksqlSyntaxParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[4,9,18,23,25,114,302,339,423,499,503,650],$V1=[2,887],$V2=[499,503],$V3=[2,888],$V4=[1,27],$V5=[1,28],$V6=[1,30],$V7=[1,31],$V8=[1,32],$V9=[1,36],$Va=[1,34],$Vb=[1,35],$Vc=[1,37],$Vd=[1,33],$Ve=[31,499,503],$Vf=[2,764],$Vg=[1,45],$Vh=[120,159,160,233],$Vi=[1,56],$Vj=[1,57],$Vk=[1,67],$Vl=[1,69],$Vm=[1,70],$Vn=[1,71],$Vo=[1,72],$Vp=[1,68],$Vq=[1,73],$Vr=[1,74],$Vs=[1,75],$Vt=[1,76],$Vu=[1,65],$Vv=[1,64],$Vw=[1,63],$Vx=[1,81],$Vy=[1,82],$Vz=[2,202],$VA=[41,42,43,44,45,131,132,133,134,135,324,326,411,506,516],$VB=[2,726],$VC=[1,95],$VD=[1,96],$VE=[31,445,499,503],$VF=[41,42,43,44,45,131,132,133,134,135,411,506,516],$VG=[2,1042],$VH=[1,106],$VI=[120,233],$VJ=[41,42,43,44,45,131,132,133,134,135,411,483,506,516],$VK=[2,210],$VL=[1,113],$VM=[4,18,29,31,33,41,42,43,44,45,65,67,87,89,92,103,114,116,117,119,127,131,132,133,134,135,138,195,237,245,257,262,269,312,348,370,384,397,398,399,400,401,402,403,404,405,409,411,415,423,445,447,499,503,506,516,521,531,537],$VN=[4,18,29,31,33,35,41,42,43,44,45,65,67,87,88,89,92,103,114,116,117,119,127,131,132,133,134,135,138,162,180,181,182,184,190,195,196,197,198,199,200,201,202,203,204,205,206,207,209,211,212,213,214,215,216,217,218,219,237,245,257,262,269,297,312,348,362,370,384,397,398,399,400,401,402,403,404,405,409,411,415,421,422,423,436,445,447,499,503,506,509,510,514,515,516,517,519,521,522,523,528,529,530,531,533,534,535,536,537,538,541,587],$VO=[4,18,29,31,33,35,41,42,43,44,45,65,67,87,88,89,92,103,114,116,117,119,127,131,132,133,134,135,138,143,162,180,181,182,184,190,195,196,197,198,199,200,201,202,203,204,205,206,207,209,211,212,213,214,215,216,217,218,219,237,245,257,262,269,297,312,348,362,370,384,397,398,399,400,401,402,403,404,405,409,411,415,421,422,423,436,445,447,499,503,506,509,510,514,515,516,517,519,521,522,523,525,528,529,530,531,533,534,535,536,537,538,539,540,541,587],$VP=[2,1038],$VQ=[1,118],$VR=[29,33,423],$VS=[1,157],$VT=[1,146],$VU=[1,187],$VV=[1,154],$VW=[1,156],$VX=[1,152],$VY=[1,139],$VZ=[1,179],$V_=[1,180],$V$=[1,181],$V01=[1,182],$V11=[1,183],$V21=[1,184],$V31=[1,185],$V41=[1,186],$V51=[1,172],$V61=[1,173],$V71=[1,166],$V81=[1,155],$V91=[1,167],$Va1=[1,142],$Vb1=[1,144],$Vc1=[1,188],$Vd1=[1,143],$Ve1=[1,147],$Vf1=[1,191],$Vg1=[1,145],$Vh1=[1,193],$Vi1=[1,141],$Vj1=[1,190],$Vk1=[1,192],$Vl1=[1,189],$Vm1=[25,29,31,41,42,43,44,45,131,132,133,134,135,143,180,184,292,411,423,436,471,472,473,474,475,476,477,478,479,480,481,483,484,506,508,509,510,513,516,518,521,524,525,530,537,539,540],$Vn1=[1,215],$Vo1=[1,213],$Vp1=[1,221],$Vq1=[2,277],$Vr1=[1,231],$Vs1=[67,116,127,138,195,237,257,262,269,499,503],$Vt1=[2,1050],$Vu1=[2,423],$Vv1=[1,249],$Vw1=[114,237,257,269,312,423],$Vx1=[31,33,362,445,499,503],$Vy1=[2,1350],$Vz1=[1,262],$VA1=[1,277],$VB1=[1,269],$VC1=[1,263],$VD1=[1,264],$VE1=[1,278],$VF1=[1,272],$VG1=[1,271],$VH1=[1,270],$VI1=[1,273],$VJ1=[1,268],$VK1=[1,265],$VL1=[1,267],$VM1=[1,261],$VN1=[1,266],$VO1=[1,280],$VP1=[1,279],$VQ1=[31,33,35,41,42,43,44,45,127,131,132,133,134,135,162,181,182,245,362,370,384,397,398,399,400,401,402,403,404,409,411,415,421,422,436,445,447,499,503,506,509,514,515,516,517,519,521,522,523,528,529,530,533,534,535,536,537,538,541,587],$VR1=[1,288],$VS1=[1,294],$VT1=[1,296],$VU1=[29,31,33,35,41,42,43,44,45,127,131,132,133,134,135,162,181,182,245,362,370,384,397,398,399,400,401,402,403,404,409,411,415,421,422,436,445,447,499,503,506,509,514,515,516,517,519,521,522,523,528,529,530,533,534,535,536,537,538,541,587],$VV1=[1,301],$VW1=[29,31,33,35,41,42,43,44,45,127,131,132,133,134,135,162,181,182,245,362,370,384,397,398,399,400,401,402,403,404,409,411,415,421,422,436,445,447,499,503,506,509,510,514,515,516,517,519,521,522,523,528,529,530,533,534,535,536,537,538,541,587],$VX1=[31,33,35,41,42,43,44,45,127,131,132,133,134,135,162,181,182,245,362,370,384,397,398,399,400,401,402,403,404,409,411,415,421,422,436,445,447,494,499,503,506,509,514,515,516,517,519,521,522,523,528,529,530,533,534,535,536,537,538,541,587],$VY1=[41,42,43,44,45,94,131,132,133,134,135,411,506,516],$VZ1=[1,339],$V_1=[1,338],$V$1=[1,340],$V02=[1,341],$V12=[1,342],$V22=[1,355],$V32=[2,393],$V42=[31,33,67,114,116,127,138,182,257,262,269,499,503],$V52=[31,33],$V62=[1,391],$V72=[1,389],$V82=[1,390],$V92=[1,368],$Va2=[1,369],$Vb2=[1,370],$Vc2=[1,371],$Vd2=[1,372],$Ve2=[1,373],$Vf2=[1,374],$Vg2=[1,375],$Vh2=[1,376],$Vi2=[1,377],$Vj2=[1,378],$Vk2=[1,379],$Vl2=[1,380],$Vm2=[1,381],$Vn2=[1,382],$Vo2=[1,383],$Vp2=[1,384],$Vq2=[1,385],$Vr2=[1,386],$Vs2=[1,387],$Vt2=[1,388],$Vu2=[1,392],$Vv2=[1,404],$Vw2=[114,312,423],$Vx2=[2,388],$Vy2=[1,407],$Vz2=[1,409],$VA2=[1,411],$VB2=[1,412],$VC2=[1,410],$VD2=[1,413],$VE2=[67,114,116,127,257,312,423,499,503],$VF2=[1,417],$VG2=[114,423],$VH2=[2,1328],$VI2=[31,370,384,409,415,445,499,503],$VJ2=[292,430,525,539],$VK2=[31,33,362,370,384,397,398,399,400,401,402,403,404,405,409,415,445,447,499,503],$VL2=[31,33,35,41,42,43,44,45,67,114,116,127,131,132,133,134,135,138,182,195,237,257,262,264,269,312,362,370,384,397,398,399,400,401,402,403,404,405,409,411,415,423,445,447,499,503,506,521,537],$VM2=[31,33,41,42,43,44,45,127,131,132,133,134,135,162,362,370,384,397,398,399,400,401,402,403,404,409,411,415,421,422,445,447,499,503,506,514,516,517,521,522,523,530,533,536,537,538,541,587],$VN2=[31,33,35,41,42,43,44,45,127,131,132,133,134,135,162,181,182,362,370,384,397,398,399,400,401,402,403,404,409,411,415,421,422,436,445,447,499,503,506,509,514,515,516,517,519,521,522,523,530,533,536,537,538,541,587],$VO2=[522,523,541],$VP2=[25,29,41,42,43,44,45,131,132,133,134,135,143,180,184,292,411,471,472,473,474,475,476,477,478,479,480,481,483,484,506,508,509,510,513,516,518,521,524,525,530,537,539,540],$VQ2=[31,33,35,41,42,43,44,45,67,114,116,127,131,132,133,134,135,138,162,181,182,184,195,237,245,257,262,264,269,287,288,291,292,312,362,370,384,397,398,399,400,401,402,403,404,405,409,411,415,421,422,423,436,445,447,499,503,506,509,514,515,516,517,519,521,522,523,528,529,530,533,534,535,536,537,538,541,587],$VR2=[31,33,35,41,42,43,44,45,67,114,116,127,131,132,133,134,135,138,162,181,182,195,237,245,257,262,264,269,312,362,370,384,397,398,399,400,401,402,403,404,405,409,411,415,421,422,423,436,445,447,499,503,506,509,514,515,516,517,519,521,522,523,528,529,530,533,534,535,536,537,538,541,587],$VS2=[1,490],$VT2=[1,509],$VU2=[1,510],$VV2=[1,511],$VW2=[1,512],$VX2=[1,513],$VY2=[2,320],$VZ2=[1,522],$V_2=[29,41,42,43,44,45,131,132,133,134,135,411,506,516],$V$2=[67,127,499,503],$V03=[31,33,182,195,499,503],$V13=[2,1140],$V23=[1,532],$V33=[1,540],$V43=[1,541],$V53=[1,542],$V63=[1,543],$V73=[1,544],$V83=[1,545],$V93=[1,550],$Va3=[67,114,116,127,312,423,499,503],$Vb3=[2,396],$Vc3=[1,554],$Vd3=[67,114,116,127,138,195,257,260,262,269,312,423,499,503],$Ve3=[31,384,409,415,445,499,503],$Vf3=[31,33,370,384,409,415,445,447,499,503],$Vg3=[1,582],$Vh3=[1,585],$Vi3=[1,583],$Vj3=[1,587],$Vk3=[1,584],$Vl3=[1,586],$Vm3=[1,589],$Vn3=[1,588],$Vo3=[31,33,370,384,397,398,399,400,401,402,403,404,405,409,415,445,447,499,503],$Vp3=[31,33,41,42,43,44,45,127,131,132,133,134,135,370,384,397,398,399,400,401,402,403,404,405,409,411,415,445,447,499,503,506,516,521,537],$Vq3=[31,33,35,41,42,43,44,45,127,131,132,133,134,135,162,181,182,362,370,384,397,398,399,400,401,402,403,404,409,411,415,421,422,445,447,499,503,506,514,516,517,519,521,522,523,530,533,536,537,538,541,587],$Vr3=[31,33,41,42,43,44,45,127,131,132,133,134,135,162,362,370,384,397,398,399,400,401,402,403,404,409,411,415,421,422,445,447,499,503,506,514,516,521,522,523,533,536,537,538,541,587],$Vs3=[1,607],$Vt3=[31,415],$Vu3=[114,116,127,195,499,503],$Vv3=[2,399],$Vw3=[1,648],$Vx3=[31,33,88,182,195,499,503],$Vy3=[33,499,503],$Vz3=[67,114,116,127,138,195,262,312,423,499,503],$VA3=[67,114,116,127,184,257,288,291,292,312,423,499,503],$VB3=[31,409,415,445,499,503],$VC3=[1,700],$VD3=[31,33,415],$VE3=[31,33,35,41,42,43,44,45,127,131,132,133,134,135,162,181,182,245,362,370,384,397,398,399,400,401,402,403,404,405,409,411,415,421,422,436,445,447,499,503,506,509,514,515,516,517,519,521,522,523,528,529,530,533,534,535,536,537,538,541,587],$VF3=[1,708],$VG3=[31,531],$VH3=[1,727],$VI3=[2,268],$VJ3=[2,176],$VK3=[1,739],$VL3=[67,116,127,138,195,257,269,499,503],$VM3=[33,182],$VN3=[67,114,116,127,184,257,291,292,312,423,499,503],$VO3=[31,409,445,499,503],$VP3=[31,33,370,384,397,398,399,400,401,402,403,404,409,415,445,447,499,503],$VQ3=[2,685],$VR3=[1,766],$VS3=[67,116,127,195,257,269,499,503],$VT3=[67,114,116,127,257,291,292,312,423,499,503],$VU3=[31,33,384,409,415,445,499,503],$VV3=[517,642],$VW3=[67,114,116,127,257,292,312,423,499,503],$VX3=[31,143,514,520,642],$VY3=[2,1386],$VZ3=[31,33,409,445,499,503,533,536],$V_3=[2,713],$V$3=[1,855],$V04=[1,856],$V14=[521,537],$V24=[116,127,499,503],$V34=[31,514],$V44=[2,1396],$V54=[1,875],$V64=[1,874],$V74=[1,876],$V84=[127,499,503],$V94=[2,1401],$Va4=[1,892],$Vb4=[526,532],$Vc4=[2,161];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"DataDefinition_EDIT":3,"ALTER":4,"CURSOR":5,"AlterDatabase_EDIT":6,"AlterTable_EDIT":7,"AlterView_EDIT":8,"CREATE":9,"OptionalOrReplace":10,"OptionalTemporary":11,"OrReplace_EDIT":12,"Temporary_EDIT":13,"CreateDatabase_EDIT":14,"CreateFunction_EDIT":15,"CreateTable_EDIT":16,"CreateView_EDIT":17,"DROP":18,"DropDatabaseStatement_EDIT":19,"DropFunctionStatement_EDIT":20,"DropTableStatement_EDIT":21,"DropViewStatement_EDIT":22,"MSCK":23,"Msck_EDIT":24,"TRUNCATE":25,"TruncateTableStatement_EDIT":26,"UseStatement_EDIT":27,"ParenthesizedPropertyAssignmentList":28,"(":29,"PropertyAssignmentList":30,")":31,"PropertyAssignment":32,",":33,"QuotedValue":34,"=":35,"UnsignedValueSpecification":36,"RegularIdentifier":37,"ParenthesizedPropertyList":38,"PropertyList":39,"FileFormat":40,"CSV":41,"JSON":42,"ORC":43,"PARQUET":44,"TEXTFILE":45,"DataDefinition":46,"AlterDatabase":47,"AlterTable":48,"AlterView":49,"CreateDatabase":50,"CreateFunction":51,"CreateTable":52,"CreateView":53,"DropDatabaseStatement":54,"DropFunctionStatement":55,"DropTableStatement":56,"DropViewStatement":57,"Msck":58,"TruncateTableStatement":59,"UseStatement":60,"DatabaseNamespaceOrSchema":61,"RegularOrBacktickedIdentifier":62,"AlterDatabaseSetOperations":63,"AlterDatabaseSetOperations_EDIT":64,"SET":65,"DbPropertiesOrProperties":66,"LOCATION":67,"DATABASE":68,"NAMESPACE":69,"SCHEMA":70,"DBPROPERTIES":71,"PROPERTIES":72,"TABLE":73,"SchemaQualifiedTableIdentifier":74,"AlterTableOperations":75,"OptionalAlterTableOperations":76,"SchemaQualifiedTableIdentifier_EDIT":77,"AlterTableOperations_EDIT":78,"AlterAddOperations":79,"AlterOrChange":80,"OptionalColumn":81,"ColumnIdentifier":82,"ColumnDataType":83,"OptionalComment":84,"AlterDropOperations":85,"PartitionSpec":86,"RENAME":87,"TO":88,"REPLACE":89,"COLUMNS":90,"ParenthesizedColumnSpecificationList":91,"RECOVER":92,"PARTITIONS":93,"COLUMN":94,"AlterSetOperations":95,"AlterSetTblPropertiesOperations":96,"AlterAddOperations_EDIT":97,"ColumnDataType_EDIT":98,"AlterDropOperations_EDIT":99,"ParenthesizedColumnSpecificationList_EDIT":100,"AlterSetOperations_EDIT":101,"AlterSetTblPropertiesOperations_EDIT":102,"ADD":103,"OptionalIfNotExists":104,"ParenthesizedPartitionList":105,"IfNotExists_EDIT":106,"OptionalIfExists":107,"OptionalPurge":108,"ParenthesizedColumnIdentifierList":109,"IfExists_EDIT":110,"ParenthesizedColumnIdentifierList_EDIT":111,"FILEFORMAT":112,"SERDE":113,"WITH":114,"SERDEPROPERTIES":115,"TBLPROPERTIES":116,"UNSET":117,"PURGE":118,"CHANGE":119,"VIEW":120,"AlterViewOperations":121,"OptionalAlterViewOperations":122,"AlterViewOperations_EDIT":123,"AsQuerySpecification":124,"AsQuerySpecification_EDIT":125,"OptionalAsQuerySpecification":126,"AS":127,"QuerySpecification":128,"QuerySpecification_EDIT":129,"NonReservedKeyword":130,"JDBC":131,"TXT":132,"ROLE":133,"OPTION":134,"STRUCT":135,"OptionalClusteredBy":136,"ClusteredBy":137,"CLUSTERED":138,"BY":139,"ParenthesizedColumnList":140,"OptionalSortedBy":141,"INTO":142,"UNSIGNED_INTEGER":143,"BUCKETS":144,"ClusteredBy_EDIT":145,"ParenthesizedColumnList_EDIT":146,"OptionalSortedBy_EDIT":147,"SORTED":148,"ParenthesizedSortList":149,"ParenthesizedSortList_EDIT":150,"SortList":151,"SortList_EDIT":152,"RightParenthesisOrError":153,"SortIdentifier":154,"SortIdentifier_EDIT":155,"OptionalAscOrDesc":156,"ColumnIdentifier_EDIT":157,"AnyCursor":158,"TEMPORARY":159,"GLOBAL":160,"OrReplace":161,"OR":162,"OptionalParenthesizedColumnSpecificationList":163,"ColumnSpecificationList":164,"ColumnSpecificationList_EDIT":165,"ColumnSpecification":166,"ColumnSpecification_EDIT":167,"PrimitiveType":168,"ArrayType":169,"MapType":170,"StructType":171,"ArrayType_INVALID":172,"MapType_INVALID":173,"StructType_INVALID":174,"IntervalType":175,"ArrayType_EDIT":176,"MapType_EDIT":177,"StructType_EDIT":178,"IntervalType_EDIT":179,"ARRAY":180,"<":181,">":182,"GreaterThanOrError":183,"MAP":184,"StructDefinitionList":185,"StructDefinitionList_EDIT":186,"StructDefinition":187,"StructDefinition_EDIT":188,"Commas":189,":":190,"ColumnIdentifierList":191,"ColumnIdentifierList_EDIT":192,"PartitionList":193,"Comment":194,"COMMENT":195,"BYTE":196,"SHORT":197,"INTEGER":198,"LONG":199,"REAL":200,"DATE":201,"BINARY":202,"NUMERIC":203,"DEC":204,"BIGINT":205,"BOOLEAN":206,"CHAR":207,"OptionalTypeLength":208,"DECIMAL":209,"OptionalTypePrecision":210,"DOUBLE":211,"FLOAT":212,"INT":213,"SMALLINT":214,"STRING":215,"TIMESTAMP":216,"TINYINT":217,"VARCHAR":218,"INTERVAL":219,"IntervalUnit":220,"DAY":221,"YEAR":222,"HOUR":223,"MINUTE":224,"MONTH":225,"SECOND":226,"DatabaseOrSchema":227,"OptionalLocation":228,"OptionalWithDbProperties":229,"Location":230,"WithDbProperties_EDIT":231,"WithDbProperties":232,"FUNCTION":233,"OptionalResourceLocation":234,"ResourceLocation_EDIT":235,"ResourceLocation":236,"USING":237,"JarFileOrArchive":238,"ARCHIVE":239,"FILE":240,"JAR":241,"CreateTableOptions":242,"EXTERNAL":243,"CreateTableOptions_EDIT":244,"LIKE":245,"DataSource":246,"OptionalRowFormat":247,"OptionalStoredAs":248,"OptionalTblProperties":249,"OptionalOptions":250,"OptionalPartitionedBy":251,"RowFormat_EDIT":252,"StoredAs_EDIT":253,"PartitionedBy_EDIT":254,"OptionalExternal":255,"StoredAs":256,"STORED":257,"TblProperties":258,"Options":259,"OPTIONS":260,"PartitionedBy":261,"PARTITIONED":262,"RowFormatSpec":263,"WithSerdeProperties":264,"DelimitedRowFormat":265,"CreateViewLeftPart":266,"CreateViewLeftPart_EDIT":267,"RowFormat":268,"ROW":269,"FORMAT":270,"RowFormatSpec_EDIT":271,"DelimitedRowFormat_EDIT":272,"DELIMITED":273,"OptionalFieldsTerminatedBy":274,"OptionalCollectionItemsTerminatedBy":275,"OptionalMapKeysTerminatedBy":276,"OptionalLinesTerminatedBy":277,"OptionalNullDefinedAs":278,"OptionalFieldsTerminatedBy_EDIT":279,"OptionalCollectionItemsTerminatedBy_EDIT":280,"OptionalMapKeysTerminatedBy_EDIT":281,"OptionalLinesTerminatedBy_EDIT":282,"OptionalNullDefinedAs_EDIT":283,"FIELDS":284,"TERMINATED":285,"SingleQuotedValue":286,"ESCAPED":287,"COLLECTION":288,"ITEMS":289,"KEYS":290,"LINES":291,"NULL":292,"DEFINED":293,"OptionalWithSerdeproperties":294,"WithSerdeproperties":295,"WithSerdeproperties_EDIT":296,"OptionalCascadeOrRestrict":297,"OptionalIfExists_EDIT":298,"SchemaQualifiedIdentifier":299,"SchemaQualifiedIdentifier_EDIT":300,"DataManipulation_EDIT":301,"INSERT":302,"OptionalInsertOptions":303,"InsertOverwriteDirectory_EDIT":304,"InsertTableStatement_EDIT":305,"LoadDataStatement_EDIT":306,"OVERWRITE":307,"LOCAL":308,"ValuesClauseOrQuerySpecification":309,"ValuesClause":310,"ValuesClauseOrQuerySpecification_EDIT":311,"VALUES":312,"ValuesList":313,"ParenthesizedRowValuesList":314,"InValueList":315,"DataManipulation":316,"InsertOverwriteDirectory":317,"InsertTableStatement":318,"LoadDataStatement":319,"DirectoryWithOrWithoutPath":320,"OptionalSparkFormatOrHiveFormat":321,"DirectoryWithOrWithoutPath_EDIT":322,"SparkFormatOrHiveFormat_EDIT":323,"DIRECTORY_PATH":324,"DirectoryHdfsPathRight":325,"DIRECTORY":326,"DirectoryHdfsPathRight_EDIT":327,"OptionalLocal":328,"OptionalHdfsPath":329,"PushHdfsLexerState":330,"HdfsPath":331,"PopLexerState":332,"HDFS_PATH":333,"HDFS_END_QUOTE":334,"PARTIAL_CURSOR":335,"OptionalPartitionSpec":336,"OptionalParenthesizedColumnList":337,"PartitionSpec_EDIT":338,"LOAD":339,"DATA":340,"INPATH":341,"OptionalOverwrite":342,"HdfsPath_EDIT":343,"REPAIR":344,"OptionalAddDropSyncPartitions":345,"AddDropSyncPartitions_EDIT":346,"AddDropOrSync":347,"SYNC":348,"CommonTableExpression":349,"SelectStatement":350,"OptionalUnions":351,"SelectStatement_EDIT":352,"OptionalUnions_EDIT":353,"CommonTableExpression_EDIT":354,"WithQueries":355,"WithQueries_EDIT":356,"WithQuery":357,"WithQuery_EDIT":358,"TableSubQueryInner":359,"TableSubQueryInner_EDIT":360,"FromClause":361,"FROM":362,"TableReferenceList":363,"FromClause_EDIT":364,"TableReferenceList_EDIT":365,"TableReference":366,"TableReference_EDIT":367,"OptionalGroupByClause":368,"GroupByClause":369,"GROUP":370,"GroupByColumnList":371,"GroupByClause_EDIT":372,"GroupByColumnList_EDIT":373,"ColumnGroupingSets":374,"ColumnReference":375,"ColumnGroupingSets_EDIT":376,"ColumnGroupingSet_EDIT":377,"ColumnReference_EDIT":378,"ValueExpression":379,"ValueExpression_EDIT":380,"GroupByColumnListPartTwo_EDIT":381,"OptionalHavingClause":382,"HavingClause":383,"HAVING":384,"HavingClause_EDIT":385,"OptionalJoins":386,"Joins":387,"Joins_INVALID":388,"JoinType":389,"TablePrimary":390,"OptionalJoinCondition":391,"Join_EDIT":392,"JoinType_EDIT":393,"TablePrimary_EDIT":394,"JoinCondition_EDIT":395,"Joins_EDIT":396,"CROSS":397,"JOIN":398,"FULL":399,"OUTER":400,"INNER":401,"LEFT":402,"SEMI":403,"RIGHT":404,"ON":405,"UsingColList":406,"OptionalLimitClause":407,"LimitClause":408,"LIMIT":409,"UnsignedNumericLiteral":410,"VARIABLE_REFERENCE":411,"LimitClause_EDIT":412,"OptionalOrderByClause":413,"OrderByClause":414,"ORDER":415,"OrderByColumnList":416,"OrderByClause_EDIT":417,"OrderByColumnList_EDIT":418,"OrderByIdentifier":419,"OrderByIdentifier_EDIT":420,"ASC":421,"DESC":422,"SELECT":423,"OptionalAllOrDistinct":424,"SelectList":425,"TableExpression":426,"SelectList_EDIT":427,"TableExpression_EDIT":428,"ALL":429,"DISTINCT":430,"OptionalSelectConditions":431,"OptionalSelectConditions_EDIT":432,"SelectSpecification":433,"SelectSpecification_EDIT":434,"OptionalCorrelationName":435,"*":436,"OptionalCorrelationName_EDIT":437,"OptionalWhereClause":438,"WhereClause_EDIT":439,"WhereClause":440,"Unions":441,"Unions_EDIT":442,"UnionClause":443,"UnionClause_EDIT":444,"UNION":445,"NewStatement":446,"WHERE":447,"SearchCondition":448,"SearchCondition_EDIT":449,"UserDefinedFunction":450,"AggregateFunction":451,"OptionalOverClause":452,"AnalyticFunction":453,"OverClause":454,"CastFunction":455,"UserDefinedFunction_EDIT":456,"AggregateFunction_EDIT":457,"OptionalOverClause_EDIT":458,"AnalyticFunction_EDIT":459,"OverClause_EDIT":460,"CastFunction_EDIT":461,"OtherAggregateFunction":462,"CountFunction":463,"SumFunction":464,"OtherAggregateFunction_EDIT":465,"CountFunction_EDIT":466,"SumFunction_EDIT":467,"OtherAggregateFunction_Type":468,"UdfArgumentList":469,"UdfArgumentList_EDIT":470,"AVG":471,"MAX":472,"MIN":473,"STDDEV_POP":474,"STDDEV_SAMP":475,"VAR_POP":476,"VAR_SAMP":477,"VARIANCE":478,"COUNT":479,"SUM":480,"ANALYTIC":481,"ArbitraryFunctionName":482,"IF":483,"CAST":484,"NonParenthesizedValueExpressionPrimary":485,"ColumnOrArbitraryFunctionRef":486,"ArbitraryFunctionRightPart":487,"NonParenthesizedValueExpressionPrimary_EDIT":488,"ArbitraryFunctionRightPart_EDIT":489,"UnsignedValueSpecification_EDIT":490,"ColumnOrArbitraryFunctionRef_EDIT":491,"ArbitraryFunction":492,"ArbitraryFunction_EDIT":493,"OVER":494,"WindowExpression":495,"WindowExpression_EDIT":496,"SqlSyntax":497,"SqlStatements":498,"EOF":499,"SqlAutocomplete":500,"SqlStatements_EDIT":501,"SqlStatement":502,";":503,"SqlStatement_EDIT":504,"SetSpecification_EDIT":505,"REGULAR_IDENTIFIER":506,"NonStartingToken":507,"!":508,"-":509,".":510,"[":511,"]":512,"~":513,"AND":514,"ARITHMETIC_OPERATOR":515,"BACKTICK":516,"BETWEEN":517,"CASE":518,"COMPARISON_OPERATOR":519,"CURRENT":520,"DOUBLE_QUOTE":521,"ELSE":522,"END":523,"EXISTS":524,"FALSE":525,"FOLLOWING":526,"HDFS_START_QUOTE":527,"IN":528,"IS":529,"NOT":530,"PARTITION":531,"PRECEDING":532,"RANGE":533,"REGEXP":534,"RLIKE":535,"ROWS":536,"SINGLE_QUOTE":537,"THEN":538,"TRUE":539,"UNSIGNED_INTEGER_E":540,"WHEN":541,"FromOrIn":542,"VALUE":543,"SingleQuotedValue_EDIT":544,"PARTIAL_VALUE":545,"DoubleQuotedValue":546,"DoubleQuotedValue_EDIT":547,"QuotedValue_EDIT":548,"OptionalFromDatabase":549,"DatabaseIdentifier":550,"OptionalFromDatabase_EDIT":551,"DatabaseIdentifier_EDIT":552,"OptionalCascade":553,"CASCADE":554,"OptionalIfNotExists_EDIT":555,"OptionalInDatabase":556,"OptionalPartitionSpec_EDIT":557,"PartitionSpecList":558,"PartitionSpecList_EDIT":559,"RangePartitionSpec":560,"RangePartitionComparisonOperator":561,"RangePartitionSpec_EDIT":562,"ConfigurationName":563,"PartialBacktickedOrAnyCursor":564,"PartialBacktickedIdentifier":565,"PartialBacktickedOrCursor":566,"PartialBacktickedOrPartialCursor":567,"OptionalParenthesizedColumnList_EDIT":568,"ColumnList":569,"ColumnList_EDIT":570,"ParenthesizedSimpleValueList":571,"SimpleValueList":572,"PartitionExpression":573,"PartitionExpression_EDIT":574,"RegularOrBackTickedSchemaQualifiedName":575,"RegularOrBackTickedSchemaQualifiedName_EDIT":576,"LocalOrSchemaQualifiedName":577,"LocalOrSchemaQualifiedName_EDIT":578,"BasicIdentifierChain":579,"BasicIdentifierChain_EDIT":580,"DerivedColumnChain":581,"DerivedColumnChain_EDIT":582,"PartialBacktickedIdentifierOrPartialCursor":583,"OptionalNot":584,"TableSubQuery":585,"ValueExpressionList":586,"BETWEEN_AND":587,"LikeRightPart":588,"CaseRightPart":589,"TableSubQuery_EDIT":590,"ValueExpressionInSecondPart_EDIT":591,"LikeRightPart_EDIT":592,"CaseRightPart_EDIT":593,"EndOrError":594,"ValueExpressionList_EDIT":595,"SignedInteger":596,"+":597,"UnsignedLiteral":598,"UnsignedLiteral_EDIT":599,"GeneralLiteral":600,"GeneralLiteral_EDIT":601,"ExactNumericLiteral":602,"ApproximateNumericLiteral":603,"TruthValue":604,"TablePrimaryOrJoinedTable":605,"TablePrimaryOrJoinedTable_EDIT":606,"JoinedTable":607,"JoinedTable_EDIT":608,"TableOrQueryName":609,"DerivedTable":610,"TableOrQueryName_EDIT":611,"DerivedTable_EDIT":612,"OptionalOnColumn":613,"OptionalOnColumn_EDIT":614,"PushQueryState":615,"PopQueryState":616,"SubQuery":617,"SubQuery_EDIT":618,"QueryExpression":619,"QueryExpression_EDIT":620,"QueryExpressionBody":621,"QueryExpressionBody_EDIT":622,"NonJoinQueryExpression":623,"NonJoinQueryExpression_EDIT":624,"NonJoinQueryTerm":625,"NonJoinQueryTerm_EDIT":626,"NonJoinQueryPrimary":627,"NonJoinQueryPrimary_EDIT":628,"SimpleTable":629,"SimpleTable_EDIT":630,"OptionalPartitionBy":631,"OptionalOrderByAndWindow":632,"PartitionBy_EDIT":633,"OptionalOrderByAndWindow_EDIT":634,"PartitionBy":635,"OptionalWindowSpec":636,"WindowSpec_EDIT":637,"WindowSpec":638,"RowsOrRange":639,"OptionalCurrentOrPreceding":640,"OptionalAndFollowing":641,"UNBOUNDED":642,"OptionalCurrentOrPreceding_EDIT":643,"OptionalAndFollowing_EDIT":644,"IntegerOrUnbounded":645,"CaseWhenThenList":646,"CaseWhenThenList_EDIT":647,"CaseWhenThenListPartTwo":648,"CaseWhenThenListPartTwo_EDIT":649,"USE":650,"$accept":0,"$end":1},
terminals_: {2:"error",4:"ALTER",5:"CURSOR",9:"CREATE",18:"DROP",23:"MSCK",25:"TRUNCATE",29:"(",31:")",33:",",35:"=",41:"CSV",42:"JSON",43:"ORC",44:"PARQUET",45:"TEXTFILE",65:"SET",67:"LOCATION",68:"DATABASE",69:"NAMESPACE",70:"SCHEMA",71:"DBPROPERTIES",72:"PROPERTIES",73:"TABLE",87:"RENAME",88:"TO",89:"REPLACE",90:"COLUMNS",92:"RECOVER",93:"PARTITIONS",94:"COLUMN",103:"ADD",112:"FILEFORMAT",113:"SERDE",114:"WITH",115:"SERDEPROPERTIES",116:"TBLPROPERTIES",117:"UNSET",118:"PURGE",119:"CHANGE",120:"VIEW",127:"AS",131:"JDBC",132:"TXT",133:"ROLE",134:"OPTION",135:"STRUCT",138:"CLUSTERED",139:"BY",142:"INTO",143:"UNSIGNED_INTEGER",144:"BUCKETS",148:"SORTED",157:"ColumnIdentifier_EDIT",159:"TEMPORARY",160:"GLOBAL",162:"OR",180:"ARRAY",181:"<",182:">",183:"GreaterThanOrError",184:"MAP",190:":",195:"COMMENT",196:"BYTE",197:"SHORT",198:"INTEGER",199:"LONG",200:"REAL",201:"DATE",202:"BINARY",203:"NUMERIC",204:"DEC",205:"BIGINT",206:"BOOLEAN",207:"CHAR",209:"DECIMAL",211:"DOUBLE",212:"FLOAT",213:"INT",214:"SMALLINT",215:"STRING",216:"TIMESTAMP",217:"TINYINT",218:"VARCHAR",219:"INTERVAL",221:"DAY",222:"YEAR",223:"HOUR",224:"MINUTE",225:"MONTH",226:"SECOND",233:"FUNCTION",237:"USING",239:"ARCHIVE",240:"FILE",241:"JAR",243:"EXTERNAL",245:"LIKE",257:"STORED",260:"OPTIONS",262:"PARTITIONED",264:"WithSerdeProperties",269:"ROW",270:"FORMAT",273:"DELIMITED",284:"FIELDS",285:"TERMINATED",287:"ESCAPED",288:"COLLECTION",289:"ITEMS",290:"KEYS",291:"LINES",292:"NULL",293:"DEFINED",297:"OptionalCascadeOrRestrict",302:"INSERT",307:"OVERWRITE",308:"LOCAL",312:"VALUES",324:"DIRECTORY_PATH",326:"DIRECTORY",333:"HDFS_PATH",334:"HDFS_END_QUOTE",335:"PARTIAL_CURSOR",339:"LOAD",340:"DATA",341:"INPATH",344:"REPAIR",348:"SYNC",362:"FROM",370:"GROUP",384:"HAVING",397:"CROSS",398:"JOIN",399:"FULL",400:"OUTER",401:"INNER",402:"LEFT",403:"SEMI",404:"RIGHT",405:"ON",409:"LIMIT",411:"VARIABLE_REFERENCE",415:"ORDER",421:"ASC",422:"DESC",423:"SELECT",429:"ALL",430:"DISTINCT",436:"*",445:"UNION",447:"WHERE",471:"AVG",472:"MAX",473:"MIN",474:"STDDEV_POP",475:"STDDEV_SAMP",476:"VAR_POP",477:"VAR_SAMP",478:"VARIANCE",479:"COUNT",480:"SUM",481:"ANALYTIC",483:"IF",484:"CAST",494:"OVER",499:"EOF",503:";",505:"SetSpecification_EDIT",506:"REGULAR_IDENTIFIER",508:"!",509:"-",510:".",511:"[",512:"]",513:"~",514:"AND",515:"ARITHMETIC_OPERATOR",516:"BACKTICK",517:"BETWEEN",518:"CASE",519:"COMPARISON_OPERATOR",520:"CURRENT",521:"DOUBLE_QUOTE",522:"ELSE",523:"END",524:"EXISTS",525:"FALSE",526:"FOLLOWING",527:"HDFS_START_QUOTE",528:"IN",529:"IS",530:"NOT",531:"PARTITION",532:"PRECEDING",533:"RANGE",534:"REGEXP",535:"RLIKE",536:"ROWS",537:"SINGLE_QUOTE",538:"THEN",539:"TRUE",540:"UNSIGNED_INTEGER_E",541:"WHEN",543:"VALUE",545:"PARTIAL_VALUE",554:"CASCADE",587:"BETWEEN_AND",597:"+",642:"UNBOUNDED",650:"USE"},
productions_: [0,[3,2],[3,1],[3,1],[3,1],[3,4],[3,2],[3,3],[3,1],[3,1],[3,1],[3,1],[3,2],[3,1],[3,1],[3,1],[3,1],[3,2],[3,1],[3,2],[3,1],[3,1],[28,3],[30,1],[30,3],[32,3],[32,3],[32,2],[32,2],[32,3],[32,2],[32,3],[32,2],[38,3],[39,1],[39,3],[40,1],[40,1],[40,1],[40,1],[40,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[47,4],[6,3],[6,4],[6,4],[6,4],[63,3],[63,3],[64,2],[61,1],[61,1],[61,1],[66,1],[66,1],[48,4],[7,4],[7,4],[7,5],[7,4],[76,0],[76,1],[75,1],[75,5],[75,1],[75,4],[75,4],[75,2],[75,5],[75,3],[75,3],[75,1],[75,2],[75,1],[78,1],[78,3],[78,5],[78,6],[78,5],[78,5],[78,1],[78,2],[78,3],[78,4],[78,3],[78,4],[78,2],[78,2],[78,3],[78,4],[78,2],[78,3],[78,1],[78,2],[78,1],[79,3],[79,3],[97,3],[97,2],[97,4],[97,3],[97,3],[85,4],[85,3],[85,3],[99,3],[99,2],[99,5],[99,4],[99,5],[99,3],[99,3],[95,3],[95,3],[95,3],[95,6],[95,3],[101,2],[101,3],[101,4],[101,5],[96,3],[96,4],[102,2],[102,4],[102,3],[102,5],[102,4],[81,0],[81,1],[108,0],[108,1],[80,1],[80,1],[49,4],[8,4],[8,4],[8,5],[8,4],[122,0],[122,1],[121,1],[121,1],[121,3],[123,1],[123,2],[123,1],[123,2],[126,0],[126,1],[124,2],[125,2],[125,2],[130,1],[130,1],[130,1],[130,1],[130,1],[130,1],[130,1],[130,1],[130,1],[130,1],[136,0],[136,1],[137,7],[145,2],[145,4],[145,7],[145,5],[145,7],[145,7],[145,4],[141,0],[141,3],[147,2],[147,3],[149,3],[150,3],[151,1],[151,3],[152,1],[152,3],[152,3],[152,5],[154,2],[155,3],[155,2],[155,2],[11,0],[11,1],[11,2],[13,2],[10,0],[10,1],[161,2],[12,2],[163,0],[163,1],[91,3],[100,3],[164,1],[164,3],[165,1],[165,3],[165,3],[165,5],[165,2],[165,4],[165,4],[165,6],[166,3],[167,3],[167,3],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[98,1],[98,1],[98,1],[98,1],[169,4],[172,3],[176,4],[176,4],[170,6],[173,3],[177,6],[177,4],[177,6],[177,5],[171,4],[174,3],[178,4],[185,1],[185,3],[186,1],[186,2],[186,3],[186,3],[186,5],[187,4],[188,5],[188,4],[188,4],[188,4],[188,3],[188,3],[109,3],[111,3],[191,1],[191,3],[192,1],[192,3],[192,3],[192,5],[105,3],[193,1],[193,2],[84,0],[84,1],[194,2],[168,1],[168,1],[168,1],[168,1],[168,1],[168,1],[168,1],[168,1],[168,1],[168,1],[168,1],[168,2],[168,2],[168,1],[168,1],[168,1],[168,1],[168,1],[168,1],[168,1],[168,2],[175,2],[175,4],[179,2],[179,4],[220,1],[220,1],[220,1],[220,1],[220,1],[220,1],[50,7],[14,4],[14,3],[14,8],[14,7],[14,8],[14,8],[14,8],[14,7],[228,0],[228,1],[230,2],[229,0],[229,1],[232,3],[231,2],[51,9],[15,5],[15,6],[15,5],[15,7],[15,10],[15,9],[15,10],[15,10],[15,9],[15,9],[234,0],[234,1],[236,3],[235,2],[238,1],[238,1],[238,1],[52,4],[52,5],[16,3],[16,4],[16,3],[16,5],[16,4],[16,5],[16,4],[16,6],[16,5],[16,4],[16,5],[242,9],[242,11],[242,10],[244,1],[244,11],[244,3],[244,3],[244,4],[244,5],[244,10],[244,9],[244,9],[244,10],[244,4],[244,12],[244,11],[244,11],[244,11],[244,10],[244,10],[244,10],[244,10],[244,10],[255,0],[255,1],[246,1],[246,1],[246,1],[246,1],[246,1],[248,0],[248,1],[256,3],[253,2],[253,3],[249,0],[249,1],[258,2],[250,0],[250,1],[259,2],[251,0],[251,1],[261,3],[261,5],[254,2],[263,3],[263,1],[263,2],[53,6],[17,1],[17,5],[17,6],[17,2],[17,2],[17,6],[17,5],[17,6],[17,6],[17,7],[266,5],[267,6],[267,5],[267,5],[267,5],[247,0],[247,1],[268,3],[252,2],[252,3],[252,3],[271,1],[265,6],[272,6],[272,6],[272,6],[272,6],[272,6],[274,0],[274,4],[274,7],[279,2],[279,3],[279,6],[275,0],[275,5],[280,2],[280,3],[280,4],[276,0],[276,5],[281,2],[281,3],[281,4],[277,0],[277,4],[282,2],[282,3],[278,0],[278,4],[283,2],[283,3],[294,0],[294,1],[295,3],[296,2],[296,3],[54,5],[19,3],[19,3],[19,4],[19,5],[19,5],[19,6],[55,5],[20,3],[20,5],[20,6],[20,4],[20,5],[20,5],[56,4],[21,3],[21,4],[21,4],[21,5],[21,4],[57,4],[22,4],[22,5],[22,3],[22,4],[22,4],[301,3],[301,1],[301,1],[301,1],[303,0],[303,1],[303,1],[303,2],[303,2],[303,1],[303,2],[309,1],[309,1],[311,1],[310,2],[313,1],[313,3],[314,3],[316,1],[316,1],[316,1],[317,5],[304,3],[304,5],[304,4],[304,6],[304,5],[304,5],[320,2],[320,1],[322,2],[321,2],[321,3],[323,2],[323,2],[323,2],[328,0],[328,1],[329,0],[329,3],[325,2],[327,4],[327,3],[327,2],[327,2],[327,1],[318,6],[305,5],[305,6],[305,5],[305,6],[305,5],[305,6],[305,6],[305,7],[305,7],[305,6],[319,10],[306,2],[306,4],[306,6],[306,7],[306,8],[306,9],[306,10],[306,11],[306,10],[306,10],[342,0],[342,1],[58,5],[24,3],[24,4],[24,4],[24,5],[24,6],[345,0],[345,2],[346,2],[347,1],[347,1],[347,1],[128,3],[128,5],[128,2],[129,4],[129,3],[129,3],[129,1],[129,4],[129,3],[129,2],[129,2],[349,2],[354,2],[355,1],[355,3],[356,1],[356,3],[356,3],[356,5],[357,5],[358,2],[358,5],[358,5],[361,2],[364,2],[364,2],[363,1],[363,3],[365,1],[365,3],[365,3],[365,5],[365,3],[368,0],[368,1],[369,3],[372,3],[372,3],[372,2],[374,0],[374,1],[374,3],[374,3],[376,1],[376,3],[376,3],[376,5],[376,3],[377,1],[377,1],[371,1],[371,3],[373,1],[373,2],[373,3],[373,3],[373,3],[373,4],[373,5],[381,1],[381,2],[381,1],[382,0],[382,1],[383,2],[385,2],[385,2],[386,0],[386,1],[386,1],[387,3],[387,4],[388,1],[388,2],[392,3],[392,1],[392,3],[392,3],[392,3],[396,1],[396,2],[396,2],[396,3],[389,2],[389,2],[389,3],[389,2],[389,1],[389,3],[389,2],[389,3],[389,3],[389,2],[389,3],[389,2],[389,3],[389,3],[389,2],[393,2],[393,3],[393,3],[393,2],[393,3],[393,3],[393,3],[393,3],[393,2],[393,3],[393,3],[393,3],[393,3],[393,2],[391,0],[391,2],[406,1],[406,3],[395,2],[395,2],[407,0],[407,1],[408,2],[408,4],[408,2],[408,4],[412,2],[413,0],[413,1],[414,3],[417,3],[417,2],[416,1],[416,3],[418,1],[418,2],[418,3],[418,4],[418,5],[419,2],[420,2],[420,2],[156,0],[156,1],[156,1],[350,3],[350,4],[352,3],[352,3],[352,4],[352,4],[352,4],[352,5],[352,6],[352,4],[424,0],[424,1],[424,1],[426,2],[428,2],[428,4],[428,3],[425,1],[425,3],[427,1],[427,2],[427,3],[427,3],[427,3],[427,4],[427,3],[427,3],[427,4],[427,4],[427,4],[427,5],[427,5],[433,2],[433,1],[434,2],[434,3],[434,2],[431,5],[432,5],[432,5],[432,5],[432,5],[432,5],[432,6],[432,6],[432,6],[432,6],[432,6],[351,0],[351,1],[353,1],[441,1],[441,2],[442,1],[442,2],[442,2],[442,3],[443,4],[444,3],[444,4],[444,4],[438,0],[438,1],[440,2],[439,2],[439,2],[448,1],[449,1],[450,2],[450,2],[450,1],[456,1],[456,2],[456,1],[456,2],[456,2],[456,2],[456,1],[451,1],[451,1],[451,1],[457,1],[457,1],[457,1],[462,4],[462,5],[465,5],[465,6],[465,5],[468,1],[468,1],[468,1],[468,1],[468,1],[468,1],[468,1],[468,1],[463,4],[463,3],[463,5],[466,5],[466,6],[466,5],[464,5],[464,3],[467,5],[467,6],[467,5],[453,3],[453,4],[459,4],[459,5],[459,4],[482,1],[482,1],[482,1],[482,1],[455,6],[455,3],[461,6],[461,5],[461,4],[461,6],[461,5],[461,4],[461,6],[461,5],[461,6],[461,5],[485,2],[485,2],[485,1],[485,1],[485,1],[485,1],[488,2],[488,2],[488,1],[488,1],[488,1],[492,2],[492,2],[493,2],[493,2],[487,2],[487,3],[489,3],[489,4],[489,3],[469,1],[469,3],[470,1],[470,3],[470,3],[470,5],[470,3],[470,5],[470,4],[470,3],[470,2],[470,2],[470,4],[452,0],[452,1],[458,1],[454,2],[454,2],[460,2],[497,3],[500,3],[500,3],[446,0],[498,0],[498,1],[498,4],[501,1],[501,4],[501,4],[501,7],[502,1],[502,1],[502,1],[504,1],[504,2],[504,1],[504,1],[504,1],[504,1],[37,1],[37,1],[37,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[507,1],[189,1],[189,2],[158,1],[158,1],[542,1],[542,1],[227,1],[227,1],[286,3],[286,2],[544,2],[546,3],[546,2],[547,2],[34,1],[34,1],[548,1],[548,1],[549,0],[549,2],[551,2],[553,0],[553,1],[107,0],[107,2],[110,1],[298,2],[104,0],[104,3],[106,1],[555,2],[555,3],[556,0],[556,2],[556,2],[336,0],[336,1],[557,1],[86,4],[338,4],[560,5],[562,2],[562,3],[562,4],[562,5],[562,5],[562,5],[561,1],[561,1],[561,1],[561,1],[563,1],[563,1],[564,1],[564,1],[566,1],[566,1],[567,1],[567,1],[565,2],[153,1],[153,1],[337,0],[337,1],[568,1],[140,3],[146,3],[146,3],[569,1],[569,3],[570,3],[570,5],[571,3],[572,1],[572,3],[74,1],[74,3],[77,1],[77,3],[77,3],[299,1],[299,3],[300,1],[300,3],[300,3],[550,1],[552,1],[558,1],[558,3],[559,1],[559,3],[559,3],[559,5],[573,3],[574,3],[574,3],[574,3],[574,1],[62,1],[62,3],[62,2],[575,1],[575,3],[576,1],[576,3],[577,1],[577,2],[578,1],[578,2],[375,1],[375,3],[378,1],[579,1],[579,3],[580,3],[580,5],[581,1],[581,3],[582,1],[582,3],[582,5],[582,3],[82,1],[583,1],[583,1],[208,0],[208,3],[210,0],[210,3],[210,5],[379,1],[379,2],[379,2],[379,2],[379,2],[379,4],[379,4],[379,4],[379,6],[379,2],[379,3],[379,3],[379,3],[379,3],[379,3],[379,6],[379,6],[379,5],[379,5],[379,6],[379,5],[379,3],[379,3],[379,3],[379,3],[379,3],[379,2],[379,3],[379,2],[379,3],[380,1],[380,3],[380,2],[380,2],[380,2],[380,2],[380,2],[380,2],[380,2],[380,2],[380,3],[380,4],[380,5],[380,4],[380,4],[380,4],[380,6],[380,6],[380,2],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,4],[380,3],[380,6],[380,6],[380,5],[380,5],[380,6],[380,6],[380,6],[380,6],[380,5],[380,4],[380,5],[380,5],[380,5],[380,5],[380,4],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,3],[380,2],[380,3],[380,2],[380,3],[380,2],[380,3],[380,2],[380,3],[380,3],[380,4],[380,3],[380,3],[380,3],[586,1],[586,3],[595,1],[595,3],[595,3],[595,5],[595,3],[595,5],[595,4],[595,3],[595,2],[595,2],[595,4],[315,1],[315,3],[486,1],[486,3],[491,1],[596,1],[596,2],[596,2],[36,1],[490,1],[598,1],[598,1],[599,1],[410,1],[410,1],[602,1],[602,2],[602,3],[602,2],[603,2],[603,3],[603,4],[600,1],[600,1],[600,1],[601,1],[601,1],[604,1],[604,1],[584,0],[584,1],[366,1],[367,1],[605,1],[605,1],[606,1],[606,1],[607,2],[608,2],[608,2],[390,2],[390,2],[394,2],[394,2],[394,2],[609,1],[611,1],[610,1],[612,1],[613,0],[613,2],[614,2],[614,2],[615,0],[616,0],[585,3],[585,4],[590,3],[590,3],[359,2],[360,3],[617,1],[618,1],[619,1],[620,1],[621,1],[622,1],[623,1],[624,1],[625,1],[626,1],[627,1],[628,1],[629,1],[630,1],[435,0],[435,1],[435,1],[435,2],[435,2],[437,1],[437,1],[437,2],[437,2],[437,2],[495,4],[496,4],[496,4],[496,5],[496,7],[631,0],[631,1],[635,3],[633,2],[633,3],[633,3],[632,0],[632,2],[634,1],[634,3],[634,2],[636,0],[636,1],[638,5],[638,5],[637,2],[637,6],[637,5],[637,5],[637,5],[637,4],[332,0],[330,0],[331,3],[343,5],[343,4],[343,3],[343,3],[343,2],[639,1],[639,1],[640,0],[640,2],[640,2],[643,2],[643,2],[641,0],[641,3],[641,3],[644,2],[644,3],[644,3],[645,1],[645,1],[591,3],[591,3],[591,3],[588,2],[588,2],[588,2],[592,2],[592,2],[592,2],[592,2],[592,2],[592,2],[589,2],[589,4],[593,2],[593,4],[593,4],[593,3],[593,4],[593,3],[593,4],[593,4],[593,3],[593,4],[593,3],[594,1],[594,1],[646,1],[646,2],[647,1],[647,2],[647,3],[647,3],[647,2],[648,4],[649,2],[649,3],[649,4],[649,4],[649,3],[649,3],[649,4],[649,2],[649,3],[649,2],[649,3],[649,3],[649,4],[649,3],[649,4],[649,4],[649,5],[649,4],[649,3],[59,4],[26,4],[26,4],[26,5],[26,4],[60,2],[27,2],[27,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

     parser.suggestKeywords(['DATABASE', 'NAMESPACE', 'SCHEMA', 'TABLE', 'VIEW']);
   
break;
case 5:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords([
         'DATABASE', 'EXTERNAL TABLE', 'FUNCTION', 'GLOBAL TEMPORARY VIEW', 'OR REPLACE', 'SCHEMA', 'TABLE', 'TEMPORARY FUNCTION', 'TEMPORARY VIEW', 'VIEW']);
     } else if ($$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords(['FUNCTION', 'GLOBAL TEMPORARY VIEW', 'TEMPORARY FUNCTION', 'TEMPORARY VIEW', 'VIEW']);
     } else if ($$[$0-1]) {
       parser.suggestKeywords(['FUNCTION', 'VIEW']);
     }
   
break;
case 12:

     parser.suggestKeywords(['DATABASE', 'FUNCTION', 'SCHEMA', 'TABLE', 'TEMPORARY FUNCTION', 'VIEW']);
   
break;
case 17:

     parser.suggestKeywords(['REPAIR TABLE']);
   
break;
case 19: case 347: case 562:

     parser.suggestKeywords(['TABLE']);
   
break;
case 55:

     parser.addDatabaseLocation(_$[$0-1], [ { name: $$[$0-1] } ]);
   
break;
case 56: case 57: case 1101: case 1469:

     parser.suggestDatabases();
   
break;
case 58:

     parser.addDatabaseLocation(_$[$0-1], [ { name: $$[$0-1] } ]);
     parser.suggestKeywords(['SET DBPROPERTIES', 'SET LOCATION', 'SET PROPERTIES']);
   
break;
case 59:

      parser.addDatabaseLocation(_$[$0-1], [ { name: $$[$0-1] } ]);
    
break;
case 62:

     parser.suggestKeywords(['DBPROPERTIES', 'LOCATION', 'PROPERTIES']);
   
break;
case 68: case 72: case 147: case 151: case 557: case 558: case 561: case 565: case 1463: case 1467:

     parser.addTablePrimary($$[$0-1]);
   
break;
case 69: case 554: case 1092:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 71:

     parser.addTablePrimary($$[$0-2]);
     if (!$$[$0]) {
       parser.suggestKeywords([ 'ADD', 'ADD COLUMNS', 'ADD IF NOT EXISTS', 'ALTER', 'ALTER COLUMN', 'CHANGE',
         'CHANGE COLUMN', 'DROP', 'DROP COLUMN', 'DROP COLUMNS', 'DROP IF EXISTS', 'PARTITION', 'RECOVER PARTITIONS',
         'RENAME COLUMN', 'RENAME TO', 'REPLACE COLUMNS', 'SET', 'SET FILEFORMAT', 'SET LOCATION', 'SET SERDE',
         'SET SERDEPROPERTIES', 'SET TBLPROPERTIES', 'UNSET TBLPROPERTIES']);
     }
   
break;
case 88:

     if (!$$[$0-1]) {
        parser.suggestKeywords(['COLUMN']);
     }
     parser.suggestColumns();
   
break;
case 89: case 246:

     parser.suggestKeywords(parser.getTypeKeywords());
   
break;
case 90:

     if (!$$[$0]) {
       parser.suggestKeywords(['COMMENT']);
     }
   
break;
case 92:

     if (!$$[$0-3]) {
        parser.suggestKeywords(['COLUMN']);
     }
     parser.suggestColumns();
   
break;
case 94:

     parser.suggestKeywords([
       'REPLACE COLUMNS', 'RENAME TO', 'SET', 'SET FILEFORMAT', 'SET LOCATION', 'SET SERDE', 'SET SERDEPROPERTIES']);
   
break;
case 95: case 102: case 160:

     parser.suggestKeywords(['TO']);
   
break;
case 96:

     parser.suggestKeywords(['PARTITION']);
   
break;
case 97: case 103:

     parser.suggestKeywords(['COLUMNS']);
   
break;
case 99: case 569:

     parser.suggestKeywords(['PARTITIONS']);
   
break;
case 100:

     parser.suggestKeywords(['COLUMN', 'TO']);
   
break;
case 101: case 123: case 201: case 270: case 271: case 272: case 273: case 621: case 1082: case 1085: case 1086: case 1111: case 1112: case 1133: case 1136:

     parser.suggestColumns();
   
break;
case 110:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['COLUMNS', 'IF NOT EXISTS']);
     }
   
break;
case 112:

     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 118:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['COLUMN', 'COLUMNS', 'IF EXISTS', 'PARTITION'])
     } else {
       parser.suggestKeywords(['PARTITION']);
     }
   
break;
case 120:

     if (!$$[$0-3]) {
       parser.suggestKeywords(['IF EXISTS'])
     }
   
break;
case 122:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['PURGE'])
     }
   
break;
case 130:

     parser.suggestKeywords(['FILEFORMAT', 'LOCATION', 'SERDE', 'SERDEPROPERTIES', 'TBLPROPERTIES']);
   
break;
case 131: case 392:

     parser.suggestFileFormats();
   
break;
case 132:

     parser.suggestKeywords(['WITH SERDEPROPERTIES']);
   
break;
case 133: case 463: case 464:

     parser.suggestKeywords(['SERDEPROPERTIES']);
   
break;
case 136: case 158:

     parser.suggestKeywords(['TBLPROPERTIES']);
   
break;
case 137: case 474:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 139: case 475: case 483:

     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 148:

     parser.suggestTables({ onlyViews: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 149: case 490:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyViews = true;
     }
   
break;
case 150:

     parser.addTablePrimary($$[$0-2]);
     if (!$$[$0]) {
       parser.suggestKeywords(['AS SELECT', 'RENAME TO', 'SET TBLPROPERTIES', 'UNSET TBLPROPERTIES']);
     }
   
break;
case 164: case 594: case 899: case 1333:

     parser.suggestKeywords(['SELECT']);
   
break;
case 179: case 188: case 403: case 440: case 441: case 446: case 451: case 455: case 1368:

     parser.suggestKeywords(['BY']);
   
break;
case 182:

     if (!$$[$0-1]) {
       parser.suggestKeywords([{ value: 'INTO', weight: 1 }, { value: 'SORTED BY', weight: 2 }]);
     } else {
       parser.suggestKeywords(['INTO']);
     }
   
break;
case 183:

     parser.suggestKeywords(['BUCKETS']);
   
break;
case 199: case 220: case 222:

     parser.checkForKeywords($$[$0-1]);
   
break;
case 205:

     parser.suggestKeywords(['TEMPORARY']);
   
break;
case 209:

     parser.suggestKeywords(['REPLACE']);
   
break;
case 212: case 575: case 745: case 861: case 864: case 1023: case 1026: case 1114: case 1155: case 1330:
this.$ = $$[$0-1];
break;
case 214: case 586:
this.$ = [$$[$0]];
break;
case 215:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 221: case 223:

     parser.checkForKeywords($$[$0-3]);
   
break;
case 224:

     this.$ = $$[$0-2];
     this.$.type = $$[$0-1];
     var keywords = [];
     if (!$$[$0]) {
       keywords.push('COMMENT');
     }
     if (!$$[$0] && $$[$0-1] && $$[$0-1].suggestKeywords) {
       keywords = keywords.concat($$[$0-1].suggestKeywords);
     }
     if (keywords.length) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 225: case 241: case 247: case 248: case 261: case 264:

     parser.suggestKeywords(parser.getColumnDataTypeKeywords());
   
break;
case 260: case 263:

     parser.suggestKeywords(['COMMENT']);
   
break;
case 301:

     if ($$[$0].toUpperCase() == 'MINUTE') {
       this.$ = { suggestKeywords: ['TO SECOND'] };
     } else if ($$[$0].toUpperCase() == 'HOUR') {
       this.$ = { suggestKeywords: ['TO SECOND', 'TO MINUTE'] };
     } else if ($$[$0].toUpperCase() == 'DAY') {
       this.$ = { suggestKeywords: ['TO HOUR', 'TO SECOND', 'TO MINUTE'] };
     } else if ($$[$0].toUpperCase() == 'YEAR') {
       this.$ = { suggestKeywords: ['TO MONTH'] };
     }
   
break;
case 303:

     parser.suggestKeywords(['SECOND', 'MINUTE', 'HOUR', 'DAY', 'MONTH', 'YEAR']);
   
break;
case 304:

     if ($$[$0-2].toUpperCase() == 'MINUTE') {
       this.$ = { suggestKeywords: ['SECOND'] };
     } else if ($$[$0-2].toUpperCase() == 'HOUR') {
       this.$ = { suggestKeywords: ['SECOND', 'MINUTE'] };
     } else if ($$[$0-2].toUpperCase() == 'DAY') {
       this.$ = { suggestKeywords: ['HOUR', 'SECOND', 'MINUTE'] };
     } else if ($$[$0-2].toUpperCase() == 'YEAR') {
       this.$ = { suggestKeywords: ['MONTH'] };
     }
   
break;
case 312: case 329:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 314: case 335:

     if (!$$[$0-5]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 316:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'COMMENT', weight: 3 }, { value: 'LOCATION', weight: 2 }, { value: 'WITH DBPROPERTIES', weight: 1 }],
       [true, true, true]);
     if (keywords.length) {
       parser.suggestKeywords(keywords);
     }
   
break;
case 317:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-1], $$[$0]],
       [{ value: 'LOCATION', weight: 2 }, { value: 'WITH DBPROPERTIES', weight: 1 }],
       [true, true]);
     if (keywords.length) {
       parser.suggestKeywords(keywords);
     }
   
break;
case 318:

     if (!$$[$0]) {
       parser.suggestKeywords(["WITH DBPROPERTIES"]);
     }
   
break;
case 326:

     parser.suggestKeywords(['DBPROPERTIES']);
   
break;
case 328:

     if (!$$[$0-2] && !$$[$0-3]) {
       parser.suggestKeywords([{ value: 'OR REPLACE', weight: 2 }, { value: 'TEMPORARY', weight: 1 }])
     } else if (!$$[$0-2] && $$[$0-3]) {
       parser.suggestKeywords(['TEMPORARY']);
     }
   
break;
case 331: case 391: case 459: case 593:

     parser.suggestKeywords(['AS']);
   
break;
case 332:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['USING']);
     }
   
break;
case 334:

     if (!$$[$0-7] && !$$[$0-8]) {
       parser.suggestKeywords([{ value: 'OR REPLACE', weight: 2 }, { value: 'TEMPORARY', weight: 1 }])
     } else if (!$$[$0-7] && $$[$0-8]) {
       parser.suggestKeywords(['TEMPORARY']);
     }
   
break;
case 341:

     parser.suggestKeywords(['ARCHIVE', 'FILE', 'JAR']);
   
break;
case 348: case 350:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
     parser.suggestDatabases({ appendDot: true });
   
break;
case 352: case 354:

       if (!$$[$0-2]) {
         parser.suggestKeywords(['IF NOT EXISTS']);
       }
     
break;
case 361:

     if (parser.yy.result.suggestTables) {
       delete parser.yy.result.suggestTables
     }
   
break;
case 362:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-2], $$[$0-3], $$[$0-4], $$[$0-5], $$[$0-6], $$[$0-7], $$[$0-8], undefined, undefined],
       [{ value: 'TBLPROPERTIES', weight: 2 },
        { value: 'LOCATION', weight: 3 },
        { value: 'STORED AS', weight: 4 },
        { value: 'ROW FORMAT', weight: 5 },
        { value: 'CLUSTERED BY', weight: 6 },
        { value: 'PARTITIONED BY', weight: 7 },
        { value: 'COMMENT', weight: 8 },
        { value: 'USING', weight: 9 },
        { value: 'LIKE', weight: 9 }]);

     if ($$[$0-5] && $$[$0-5].suggestKeywords && !$$[$0-4] && !$$[$0-3] && !$$[$0-2]) {
       keywords = keywords.concat($$[$0-5].suggestKeywords);
     }
     if (!$$[$0]) {
       keywords.push({ value: 'AS', weight: 1 });
     }
     if (keywords.length) {
       parser.suggestKeywords(keywords);
     }
   
break;
case 363:

     parser.suggestDatabases({ appendDot: true });
     parser.suggestTables();
   
break;
case 365:

     parser.suggestKeywords(['USING']);
   
break;
case 366: case 371: case 526:

     parser.suggestKeywords(parser.getDataSourceKeywords());
   
break;
case 367:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-1], $$[$0-2], $$[$0-3], $$[$0-4]],
       [{ value: 'LOCATION', weight: 1 },
        { value: 'TBLPROPERTIES', weight: 2 },
        { value: 'STORED AS', weight: 3 },
        { value: 'ROW FORMAT', weight: 4 }]);
     if ($$[$0-4] && $$[$0-4].suggestKeywords && !$$[$0-3] && !$$[$0-2] && !$$[$0-1]) {
       keywords = keywords.concat($$[$0-4].suggestKeywords);
     }
     if (keywords.length) {
       parser.suggestKeywords(keywords);
     }
   
break;
case 372:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-2], $$[$0-3], $$[$0-4], $$[$0-5], $$[$0-6], $$[$0-7]],
       [{ value: 'TBLPROPERTIES', weight: 2 },
        { value: 'COMMENT', weight: 3 },
        { value: 'LOCATION', weight: 4 },
        { value: 'CLUSTERED BY', weight: 5 },
        { value: 'PARTITIONED BY', weight: 6 },
        { value: 'OPTIONS', weight: 7 }]);
     if (!$$[$0]) {
       keywords.push({ value: 'AS', weight: 1 });
     }
     if (keywords.length) {
       parser.suggestKeywords(keywords);
     }
   
break;
case 411:

     parser.checkForKeywords($$[$0-1]);
     parser.suggestDatabases({ appendDot: true });
   
break;
case 412:

     if (parser.yy.result.suggestTables) {
       delete parser.yy.result.suggestTables;
     }
   
break;
case 413:

     parser.suggestKeywords(parser.getKeywordsForOptionalsLR(
       [undefined, $$[$0-1], $$[$0-2]],
       [{ value: 'AS', weight: 1 },
        { value: 'TBLPROPERTIES', weight: 2 },
        { value: 'COMMENT', weight: 3 }]));
   
break;
case 417:

     parser.checkForKeywords($$[$0-6]);
   
break;
case 418:

     if (!$$[$0]) {
       this.$ = { suggestKeywords: ['IF NOT EXISTS'] };
     }
   
break;
case 419:

     if (!$$[$0-3] && !$$[$0-4]) {
       parser.yy.suggestKeywords(['OR REPLACE', 'GLOBAL TEMPORARY', 'TEMPORARY']);
     } else if (!$$[$0-4]) {
       parser.yy.suggestKeywords(['GLOBAL TEMPORARY', 'TEMPORARY']);
     }
   
break;
case 425:

     this.$ = $$[$0]
   
break;
case 426:

     parser.suggestKeywords(['FORMAT']);
   
break;
case 427:

     parser.suggestKeywords(['DELIMITED', 'SERDE']);
   
break;
case 430:

     if (!$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$ = { suggestKeywords: [{ value: 'FIELDS TERMINATED BY', weight: 5 }, { value: 'COLLECTION ITEMS TERMINATED BY', weight: 4 }, { value: 'MAP KEYS TERMINATED BY', weight: 3 }, { value: 'LINES TERMINATED BY', weight: 2 }, { value: 'NULL DEFINED AS', weight: 1 }]};
     } else if ($$[$0-4] && $$[$0-4].suggestKeywords && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$ = { suggestKeywords: parser.createWeightedKeywords($$[$0-4].suggestKeywords, 5).concat([{ value: 'COLLECTION ITEMS TERMINATED BY', weight: 4 }, { value: 'MAP KEYS TERMINATED BY', weight: 3 }, { value: 'LINES TERMINATED BY', weight: 2 }, { value: 'NULL DEFINED AS', weight: 1 }]) };
     } else if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$ = { suggestKeywords: [{ value: 'COLLECTION ITEMS TERMINATED BY', weight: 4 }, { value: 'MAP KEYS TERMINATED BY', weight: 3 }, { value: 'LINES TERMINATED BY', weight: 2 }, { value: 'NULL DEFINED AS', weight: 1 }] };
     } else if (!$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$ = { suggestKeywords: [{ value: 'MAP KEYS TERMINATED BY', weight: 3 }, { value: 'LINES TERMINATED BY', weight: 2 }, { value: 'NULL DEFINED AS', weight: 1 }] };
     } else if (!$$[$0-1] && !$$[$0]) {
       this.$ = { suggestKeywords: [{ value: 'LINES TERMINATED BY', weight: 2 }, { value: 'NULL DEFINED AS', weight: 1 }] };
     } else if (!$$[$0]) {
       this.$ = { suggestKeywords: [{ value: 'NULL DEFINED AS', weight: 1 }] };
     }
   
break;
case 437:
this.$ = { suggestKeywords: ['ESCAPED BY'] };
break;
case 439: case 445: case 450: case 454:

     parser.suggestKeywords(['TERMINATED BY']);
   
break;
case 444:

     parser.suggestKeywords(['ITEMS TERMINATED BY']);
   
break;
case 449:

     parser.suggestKeywords(['KEYS TERMINATED BY']);
   
break;
case 458:

     parser.suggestKeywords(['DEFINED AS']);
   
break;
case 468:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestDatabases();
   
break;
case 469:

     parser.suggestKeywords(['CASCADE', 'RESTRICT']);
   
break;
case 471:

     if (!$$[$0-3]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 473:

     parser.suggestKeywords(['FUNCTION']);
   
break;
case 479: case 485: case 489:

     parser.addTablePrimary($$[$0]);
   
break;
case 481:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestTables({ onlyTables: true });
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 482: case 564: case 1465:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyTables = true;
     }
   
break;
case 486:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestTables({ onlyViews: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 487:

     parser.addTablePrimary($$[$0]);
     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 491:

     var keywords = $$[$0-1].tableKeywords || [];
     if ($$[$0-1].directoryKeywords) {
       keywords = keywords.concat($$[$0-1].directoryKeywords);
     }
     if (keywords.length) {
       parser.suggestKeywords(keywords);
     }
     if ($$[$0-1].suggestTables) {
       parser.suggestTables({ tablesOnly: true });
       parser.suggestDatabases({ appendDot: true });
     }
   
break;
case 495:
this.$ = { suggestTables: true, tableKeywords: ['INTO', 'INTO TABLE', 'OVERWRITE', 'OVERWRITE TABLE', 'TABLE'], directoryKeywords: ['OVERWRITE DIRECTORY', 'OVERWRITE LOCAL DIRECTORY'] };
break;
case 496:
this.$ = { suggestTables: true, tableKeywords: ['TABLE'] };
break;
case 497:
this.$ = { suggestTables: true, tableKeywords: ['TABLE'], directoryKeywords: ['DIRECTORY', 'LOCAL DIRECTORY'] };
break;
case 498: case 499: case 500:
this.$ = { suggestTables: true };
break;
case 501:
this.$ = { directoryKeywords: ['DIRECTORY'] };
break;
case 514:

     var keywords = $$[$0-1] && $$[$0-1].suggestKeywords || [];
     keywords.push('SELECT');
     keywords.push('VALUES');
     parser.suggestKeywords(keywords);
   
break;
case 516:

     parser.checkForKeywords($$[$0-2]);
   
break;
case 521:

     parser.suggestHdfs($$[$0]);
   
break;
case 522:

     if (!$$[$0-1] && !$$[$0]) {
       this.$ = { suggestKeywords: ['ROW FORMAT', 'STORED AS', 'USING'] }
     } else if ($$[$0-1] && !$$[$0]) {
       if ($$[$0-1].suggestKeywords) {
         $$[$0-1].suggestKeywords.push('STORED AS');
       } else {
         this.$ = { suggestKeywords: ['STORED AS'] }
       }
     }
   
break;
case 523:

     if (!$$[$0]) {
       this.$ = { suggestKeywords: ['OPTIONS'] }
     }
   
break;
case 532:
this.$ = { path: $$[$0-3] };
break;
case 533:
this.$ = { path: $$[$0-2] };
break;
case 534:
this.$ = { path: $$[$0-1] };
break;
case 535: case 536:
this.$ = { path: '' };
break;
case 538: case 544:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.tablesOnly = true;
     }
   
break;
case 539:

     if (!$$[$0-1] && !$$[$0-2]) {
       parser.suggestKeywords(['PARTITION', 'SELECT', 'VALUES']);
     } else {
       parser.suggestKeywords(['SELECT', 'VALUES']);
     }
   
break;
case 540: case 542:

     parser.addTablePrimary($$[$0-2]);
   
break;
case 541: case 543:

     parser.addTablePrimary($$[$0-3]);
   
break;
case 545:

     if ($$[$0-5].tableKeywords) {
       parser.suggestKeywords($$[$0-5].tableKeywords);
     }
   
break;
case 546:

     if (!$$[$0-3] && !$$[$0-2]) {
       parser.suggestKeywords(['PARTITION']);
     }
   
break;
case 549:

     parser.suggestKeywords(['DATA LOCAL INPATH', 'DATA INPATH']);
   
break;
case 550:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['INPATH', 'LOCAL INPATH']);
     } else {
       parser.suggestKeywords(['INPATH']);
     }
   
break;
case 552:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['OVERWRITE INTO TABLE', 'INTO TABLE']);
     } else {
       parser.suggestKeywords(['INTO TABLE']);
     }
   
break;
case 553:

     parser.suggestKeywords([ 'TABLE' ]);
   
break;
case 556: case 1466:

     parser.addTablePrimary($$[$0-2]);
     if (!$$[$0-1]) {
       parser.suggestKeywords(['PARTITION']);
     }
   
break;
case 563: case 1464:

     parser.suggestTables({ onlyTables: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 566:

     parser.addTablePrimary($$[$0-2]);
     if (!$$[$0-1]) {
       parser.suggestKeywords(['ADD PARTITIONS', 'DROP PARTITIONS', 'SYNC PARTITIONS']);
     }
   
break;
case 574: case 747:
this.$ = $$[$0-2];
break;
case 576:

     parser.addCommonTableExpressions($$[$0-3]);
   
break;
case 577: case 578: case 589:

     parser.addCommonTableExpressions($$[$0-2]);
   
break;
case 584: case 600: case 624: case 700: case 704: case 742: case 752: case 779: case 1255: case 1257: case 1312: case 1367: case 1442:
this.$ = $$[$0];
break;
case 587:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 591:

     parser.addCommonTableExpressions($$[$0-4]);
   
break;
case 592:

     parser.addCteAliasLocation(_$[$0-4], $$[$0-4]);
     $$[$0-1].alias = $$[$0-4];
     this.$ = $$[$0-1];
   
break;
case 596:

     this.$ = { tableReferenceList : $$[$0] }
   
break;
case 597: case 605:

       parser.suggestTables();
       parser.suggestDatabases({ appendDot: true });
   
break;
case 608:

     this.$ = { valueExpression: $$[$0] };
   
break;
case 609: case 711:

     parser.suggestSelectListAliases();
   
break;
case 610:

     parser.valueExpressionSuggest();
     parser.suggestSelectListAliases();
     parser.suggestGroupBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 611:

     parser.suggestKeywords(['BY']);
     parser.suggestGroupBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 626: case 627: case 633: case 634: case 1110: case 1326: case 1369:

     parser.valueExpressionSuggest();
   
break;
case 638:

     parser.valueExpressionSuggest();
     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 639:

     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 643:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-2];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
        parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 644:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-3];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
       parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 645:
this.$ = { joinType: $$[$0] };
break;
case 646:
this.$ = { joinType: $$[$0-1] };
break;
case 647:

     if ($$[$0-2].suggestKeywords) {
       parser.suggestKeywords($$[$0-2].suggestKeywords);
     }
   
break;
case 648:

     if ($$[$0].suggestKeywords) {
       parser.suggestKeywords($$[$0].suggestKeywords);
     }
   
break;
case 651:

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         parser.suggestJoins({
           prependJoin: false,
           joinType: $$[$0-2],
           tables: tables
         })
       }
     }
     parser.suggestTables();
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 656:
this.$ = 'CROSS JOIN';
break;
case 657:
this.$ = 'FULL JOIN';
break;
case 658:
this.$ = 'FULL OUTER JOIN';
break;
case 659:
this.$ = 'INNER JOIN';
break;
case 660:
this.$ = 'JOIN';
break;
case 661:
this.$ = 'LEFT INNER JOIN';
break;
case 662:
this.$ = 'LEFT JOIN';
break;
case 663:
this.$ = 'LEFT OUTER JOIN';
break;
case 664:
this.$ = 'LEFT SEMI JOIN';
break;
case 665:
this.$ = 'OUTER JOIN';
break;
case 666: case 668:
this.$ = 'RIGHT OUTER JOIN';
break;
case 667:
this.$ = 'RIGHT JOIN';
break;
case 669:
this.$ = 'RIGHT SEMI JOIN';
break;
case 670:
this.$ = 'SEMI JOIN';
break;
case 671: case 673: case 674: case 676: case 677: case 678: case 679: case 681: case 682: case 683: case 684:
this.$ = { suggestKeywords: ['JOIN'] };
break;
case 672: case 675: case 680:
this.$ = { suggestKeywords: ['OUTER'] };
break;
case 685:
this.$ = { noJoinCondition: true, suggestKeywords: ['ON'] };
break;
case 686:
this.$ = { valueExpression: $$[$0] };
break;
case 690:

     parser.valueExpressionSuggest();
     parser.suggestJoinConditions({ prependOn: false });
   
break;
case 697:

     parser.suggestKeywords([{ value: '10', weight: 10000 }, { value: '100', weight: 10000 }, { value: '1000', weight: 10000 }, { value: '5000', weight: 10000 }, { value: '10000', weight: 10000 }])
   
break;
case 701:

     if ($$[$0].emptyOrderBy) {
       parser.suggestOrderBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 702:

     parser.suggestKeywords(['BY']);
     parser.suggestOrderBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 706:

     this.$ = { emptyOrderBy: false }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 707: case 708: case 709:
this.$ = { emptyOrderBy: false };
break;
case 710:
this.$ = parser.mergeSuggestKeywords($$[$0]);
break;
case 712:

     this.$ = { emptyOrderBy: true }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 713:
this.$ = { suggestKeywords: ['ASC', 'DESC'] };;
break;
case 716:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     this.$ = { selectList: $$[$0] };
   
break;
case 717:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     this.$ = { selectList: $$[$0-1], tableExpression: $$[$0] }
   
break;
case 718:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     if ($$[$0].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-1]) {
         keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
       }
       parser.suggestKeywords(keywords);
     } else {
       parser.checkForSelectListKeywords($$[$0]);
     }
     if ($$[$0].suggestFunctions) {
       parser.suggestFunctions();
     }
     if ($$[$0].suggestColumns) {
       parser.suggestColumns({ identifierChain: [], source: 'select' });
     }
     if ($$[$0].suggestTables) {
       parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     }
     if ($$[$0].suggestDatabases) {
       parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
     }
     if ($$[$0].suggestAggregateFunctions && (!$$[$0-1] || $$[$0-1] === 'ALL')) {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
   
break;
case 719:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-1] || $$[$0-1] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-1]) {
       keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 720:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
   
break;
case 721:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.selectListNoTableSuggest($$[$0-1], $$[$0-2]);
     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'select';
     }
   
break;
case 722:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2] || $$[$0-2] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-2]) {
       keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 723:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]), _$[$0-2]);
     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 724:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]), _$[$0-3]);
     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 725:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.checkForSelectListKeywords($$[$0-1]);
     var keywords = ['FROM'];
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.suggestTables({ prependFrom: true });
     parser.suggestDatabases({ prependFrom: true, appendDot: true });
   
break;
case 729: case 730:

     parser.addClauseLocation('whereClause', _$[$0-1], $$[$0].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0].limitClausePreceding || _$[$0-1], $$[$0].limitClauseLocation);
   
break;
case 731:

     var keywords = [];

     parser.addClauseLocation('whereClause', _$[$0-3], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-2].limitClausePreceding || _$[$0-3], $$[$0-2].limitClauseLocation);

     if ($$[$0-3]) {
       if (typeof $$[$0-3].tableReferenceList.hasJoinCondition !== 'undefined' && !$$[$0-3].tableReferenceList.hasJoinCondition) {
         keywords.push({ value: 'ON', weight: 3 });
       }
       if ($$[$0-3].suggestKeywords) {
         keywords = parser.createWeightedKeywords($$[$0-3].suggestKeywords, 3);
       }
       if ($$[$0-3].tableReferenceList.suggestJoinConditions) {
         parser.suggestJoinConditions($$[$0-3].tableReferenceList.suggestJoinConditions);
       }
       if ($$[$0-3].tableReferenceList.suggestJoins) {
         parser.suggestJoins($$[$0-3].tableReferenceList.suggestJoins);
       }
       if ($$[$0-3].tableReferenceList.suggestKeywords) {
         keywords = keywords.concat(parser.createWeightedKeywords($$[$0-3].tableReferenceList.suggestKeywords, 3));
       }

       // Lower the weights for 'TABLESAMPLE'
       keywords.forEach(function (keyword) {
         if (keyword.value === 'TABLESAMPLE') {
           keyword.weight = 1.1;
         }
       });

       if ($$[$0-3].tableReferenceList.types) {
         var veKeywords = parser.getValueExpressionKeywords($$[$0-3].tableReferenceList);
         keywords = keywords.concat(veKeywords.suggestKeywords);
         if (veKeywords.suggestColRefKeywords) {
           parser.suggestColRefKeywords(veKeywords.suggestColRefKeywords);
           parser.addColRefIfExists($$[$0-3].tableReferenceList);
         }
       }
     }

     if ($$[$0-1].empty && $$[$0] && $$[$0].joinType.toUpperCase() === 'JOIN') {
       keywords = keywords.concat(['FULL', 'FULL OUTER', 'INNER', 'LEFT', 'LEFT OUTER', 'RIGHT', 'RIGHT OUTER']);
       parser.suggestKeywords(keywords);
       return;
     }

     if ($$[$0-1].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].suggestFilters) {
       parser.suggestFilters($$[$0-1].suggestFilters);
     }
     if ($$[$0-1].suggestGroupBys) {
       parser.suggestGroupBys($$[$0-1].suggestGroupBys);
     }
     if ($$[$0-1].suggestOrderBys) {
       parser.suggestOrderBys($$[$0-1].suggestOrderBys);
     }

     if ($$[$0-1].empty) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }

     keywords = keywords.concat([
       { value: 'FULL JOIN', weight: 1 },
       { value: 'FULL OUTER JOIN', weight: 1 },
       { value: 'INNER JOIN', weight: 1 },
       { value: 'JOIN', weight: 1 },
       { value: 'LEFT JOIN', weight: 1 },
       { value: 'LEFT OUTER JOIN', weight: 1 },
       { value: 'RIGHT JOIN', weight: 1 },
       { value: 'RIGHT OUTER JOIN', weight: 1 }
     ]);
     parser.suggestKeywords(keywords);
  
break;
case 732:

     // A couple of things are going on here:
     // - If there are no SelectConditions (WHERE, GROUP BY, etc.) we should suggest complete join options
     // - If there's an OptionalJoin at the end, i.e. 'SELECT * FROM foo | JOIN ...' we should suggest
     //   different join types
     // - The FromClause could end with a valueExpression, in which case we should suggest keywords like '='
     //   or 'AND' based on type

     if (!$$[$0-1]) {
       parser.addClauseLocation('whereClause', _$[$0-2]);
       parser.addClauseLocation('limitClause', _$[$0-2]);
       return;
     }
     parser.addClauseLocation('whereClause', _$[$0-2], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-1].limitClausePreceding || _$[$0-2], $$[$0-1].limitClauseLocation);
     var keywords = [];

     if ($$[$0-1].suggestColRefKeywords) {
       parser.suggestColRefKeywords($$[$0-1].suggestColRefKeywords);
       parser.addColRefIfExists($$[$0-1]);
     }

     if ($$[$0-1].suggestKeywords && $$[$0-1].suggestKeywords.length) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].cursorAtEnd) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 733:
this.$ = [ $$[$0] ];
break;
case 734:

     $$[$0-2].push($$[$0]);
   
break;
case 736: case 737:

     this.$ = { cursorAtStart : true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 739:

     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 740:

     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 741:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestTables: true, suggestDatabases: true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 743: case 744: case 746:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true,  };
   
break;
case 748:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
       this.$ = { valueExpression: $$[$0-1], alias: $$[$0].alias };
       if (!parser.yy.selectListAliases) {
         parser.yy.selectListAliases = [];
       }
       parser.yy.selectListAliases.push($$[$0-1].function && $$[$0-1].types && $$[$0-1].types.length && $$[$0-1].types[0] === 'UDFREF' ? { name: $$[$0].alias, udfRef: $$[$0-1].function, types: $$[$0-1].types } : { name: $$[$0].alias, types: $$[$0-1].types || ['T'] });
     } else {
       this.$ = { valueExpression: $$[$0-1] }
     }
   
break;
case 749:

     parser.addAsteriskLocation(_$[$0], [{ asterisk: true }]);
     this.$ = { asterisk: true }
   
break;
case 750:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
     }
   
break;
case 751:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.addColumnAliasLocation(_$[$0], $$[$0], _$[$0-2]);
     this.$ = { suggestAggregateFunctions: true };
   
break;
case 753:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'WHERE', weight: 7 }, { value: 'GROUP BY', weight: 6 }, { value: 'HAVING', weight: 5 }, { value: 'ORDER BY', weight: 4 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true, true]);

     if (keywords.length > 0) {
       this.$ = { suggestKeywords: keywords, empty: !$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0] };
     } else {
       this.$ = {};
     }

     this.$.whereClauseLocation = $$[$0-4] ? _$[$0-4] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;

     if (!$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestFilters = { prefix: 'WHERE', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestGroupBys = { prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-1] && !$$[$0]) {
       this.$.suggestOrderBys = { prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
   
break;
case 754:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'where';
     }
   
break;
case 755:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'group by';
     }
   
break;
case 757:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'order by';
     }
   
break;
case 759:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'GROUP BY', weight: 8 }, { value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true]);
     if ($$[$0-5].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-5].suggestKeywords, 1));
     }
     this.$ = parser.getValueExpressionKeywords($$[$0-5], keywords);
     this.$.cursorAtEnd = !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if ($$[$0-5].columnReference) {
       this.$.columnReference = $$[$0-5].columnReference;
     }
     if (!$$[$0-3]) {
       parser.suggestGroupBys({ prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 760:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true]);
     if ($$[$0-4].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-4].suggestKeywords, 8));
     }
     if ($$[$0-4].valueExpression) {
       this.$ = parser.getValueExpressionKeywords($$[$0-4].valueExpression, keywords);
       if ($$[$0-4].valueExpression.columnReference) {
         this.$.columnReference = $$[$0-4].valueExpression.columnReference;
       }
     } else {
       this.$ = { suggestKeywords: keywords };
     }
     this.$.cursorAtEnd = !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 761:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-1], $$[$0]],
       [{ value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true]);
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0-1] && !$$[$0] };
     if (!$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-3], _$[$0-3]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 762:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0]],
       [{ value: 'LIMIT', weight: 3 }],
       [true]);
     if ($$[$0-2].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-2].suggestKeywords, 4));
     }
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0] };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 763:

     this.$ = { suggestKeywords: [], cursorAtEnd: true };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = _$[$0-1];
   
break;
case 774:

     parser.suggestKeywords(['ALL', 'DISTINCT', 'SELECT']);
   
break;
case 775:

     parser.suggestKeywords(['ALL', 'DISTINCT']);
   
break;
case 780:

     if ($$[$0].suggestFilters) {
       parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 781:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS', 'NOT EXISTS']);
     parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 784:

     if (!$$[$0]) {
       $$[$0-1].suggestKeywords = ['OVER'];
     }
   
break;
case 791:

     parser.suggestKeywords(['OVER']);
   
break;
case 800:

     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 801: case 819:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 802:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       if ($$[$0-4].toLowerCase() === 'group_concat') {
         keywords.push('ALL');
       } else {
         keywords.push('DISTINCT');
       }
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 803: case 817:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 804:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords(true);
       if (!$$[$0-2]) {
         if ($$[$0-4].toLowerCase() === 'group_concat') {
           keywords.push('ALL');
         } else {
           keywords.push('DISTINCT');
         }
       }
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
       parser.suggestKeywords(keywords);
     }
     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], $$[$0-1].activePosition);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 813:

     parser.addFunctionArgumentLocations($$[$0-3], [{
       expression: { text: $$[$0-1] },
       location: _$[$0-1]
     }]);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] }
   
break;
case 814: case 820:

     this.$ = { function: $$[$0-2], types: ['UDFREF'] }
   
break;
case 815:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] }
   
break;
case 816:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 818:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-2]) {
         keywords.push('DISTINCT');
       }
       parser.suggestKeywords(keywords);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 821:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 822:

     parser.suggestValueExpressionKeywords($$[$0-2]);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 823:

     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 824:

    this.$ = { function: $$[$0-2], types: ['UDFREF'] }
  
break;
case 825:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     this.$ = {
       function: $$[$0-3],
       expression: $$[$0-1].expressions[$$[$0-1].expressions.length - 1].expression,
       types: ['UDFREF']
     }
   
break;
case 826:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-3], 1);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 827:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-2].expressions);
     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 828:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     parser.applyArgumentTypesToSuggestions($$[$0-3], $$[$0-1].activePosition);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 833:

     var expression = $$[$0-3];
     parser.extractExpressionText(expression, $$[$0-3], $$[$0-2], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-5], [{
       expression: expression,
       location: {
         first_line: _$[$0-3].first_line,
         last_line: _$[$0-1].last_line,
         first_column: _$[$0-3].first_column,
         last_column: _$[$0-1].last_column
       }
     }]);
     this.$ = { types: [ $$[$0-1].toUpperCase() ] }
   
break;
case 834: case 839: case 840: case 1261:
this.$ = { types: [ 'T' ] };
break;
case 835:

     parser.valueExpressionSuggest();
     this.$ = { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 836: case 837:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ] };
   
break;
case 838:
this.$ = { types: [ $$[$0-1].toUpperCase() ] };
break;
case 841:

     parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'AS', weight: 2 }]);
     this.$ =  { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 842:

     parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'AS', weight: 2 }]);
     this.$ = { types: [ 'T' ] };
   
break;
case 843: case 844:

     parser.suggestKeywords(parser.getTypeKeywords());
     this.$ = { types: [ 'T' ] };
   
break;
case 845:

     // We need to handle arbitrary UDFs here instead of inside UserDefinedFunction or there will be a conflict
     // with columnReference for functions like: db.udf(foo)
     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     if ($$[$0-1].lastLoc && $$[$0-1].lastLoc.location) {
       $$[$0-1].lastLoc.type = 'function';
       $$[$0-1].lastLoc.function = fn;
       $$[$0-1].lastLoc.location = {
         first_line: $$[$0-1].lastLoc.location.first_line,
         last_line: $$[$0-1].lastLoc.location.last_line,
         first_column: $$[$0-1].lastLoc.location.first_column,
         last_column: $$[$0-1].lastLoc.location.last_column - 1
       }
       if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
          $$[$0-1].firstLoc.type = 'database';
       } else {
         delete $$[$0-1].lastLoc.identifierChain;
       }
     }
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: fn, expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: fn, types: ['UDFREF'] }
     }
   
break;
case 846:

    parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
    if ($$[$0].expressions && $$[$0].expressions.length) {
      this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
    } else {
      this.$ = { function: $$[$0-1], types: ['UDFREF'] }
    }
  
break;
case 849:
this.$ = { types: ['COLREF'], columnReference: $$[$0].chain };
break;
case 850:
this.$ = { types: [ 'NULL' ], text: $$[$0] };
break;
case 851:

     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     $$[$0-1].lastLoc.type = 'function';
     $$[$0-1].lastLoc.function = fn;
     $$[$0-1].lastLoc.location = {
       first_line: $$[$0-1].lastLoc.location.first_line,
       last_line: $$[$0-1].lastLoc.location.last_line,
       first_column: $$[$0-1].lastLoc.location.first_column,
       last_column: $$[$0-1].lastLoc.location.last_column - 1
     }
     if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
        $$[$0-1].firstLoc.type = 'database';
     } else {
       delete $$[$0-1].lastLoc.identifierChain;
     }
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions(fn, $$[$0].activePosition);
     }
     this.$ = { function: fn, types: ['UDFREF'] };
   
break;
case 852: case 858: case 859:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions($$[$0-1], $$[$0].activePosition);
     }
     this.$ = { function: $$[$0-1], types: ['UDFREF'] };
   
break;
case 855:

     if ($$[$0].suggestKeywords) {
       this.$ = { types: ['COLREF'], columnReference: $$[$0], suggestKeywords: $$[$0].suggestKeywords };
     } else {
       this.$ = { types: ['COLREF'], columnReference: $$[$0] };
     }
   
break;
case 856: case 857:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: $$[$0-1], types: ['UDFREF'] }
     }
   
break;
case 862:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }]
     }
   
break;
case 863:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = $$[$0-3];
   
break;
case 865: case 867:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0], location: _$[$0] }]
     }
   
break;
case 866: case 868:

     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: $$[$0], location: _$[$0] }])
     }
   
break;
case 869:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0-2], location: _$[$0-2] }].concat($$[$0].expressions)
     }
   
break;
case 870:

     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: $$[$0-2], location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 871:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: { text: '' }, location: _$[$0] }])
     }
   
break;
case 872:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: { text: '' }, location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 873:

     parser.suggestValueExpressionKeywords($$[$0-3].expressions[$$[$0-3].expressions.length - 1].expression);
     this.$ = {
       activePosition: $$[$0-3].activePosition,
       expressions: $$[$0-3].expressions.concat($$[$0].expressions)
     }
   
break;
case 874:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 875:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 876:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 877:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-3] }, { expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 885: case 886:

     return parser.yy.result;
   
break;
case 887:

     parser.prepareNewStatement();
   
break;
case 889: case 891: case 893:

     parser.addStatementLocation(_$[$0]);
   
break;
case 892: case 894:

     parser.addStatementLocation(_$[$0-3]);
   
break;
case 898:

     parser.suggestDdlAndDmlKeywords();
   
break;
case 1024: case 1027: case 1115:
this.$ = '';
break;
case 1039: case 1043:

     parser.yy.correlatedSubQuery = false;
   
break;
case 1041: case 1046:

     parser.suggestKeywords(['EXISTS']);
   
break;
case 1045:

     parser.suggestKeywords(['NOT EXISTS']);
   
break;
case 1056: case 1058: case 1059: case 1061:

     parser.suggestKeywords(['<', '<=', '<>', '=', '>', '>=']);
   
break;
case 1057: case 1060:

     parser.suggestKeywords(['VALUES']);
   
break;
case 1090: case 1116:

     parser.addTableLocation(_$[$0], [ { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0] } ] };
   
break;
case 1091: case 1117:

     parser.addDatabaseLocation(_$[$0-2], [ { name: $$[$0-2] } ]);
     parser.addTableLocation(_$[$0], [ { name: $$[$0-2] }, { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0-2] }, { name: $$[$0] } ] };
   
break;
case 1093: case 1098:

     parser.suggestDatabases();
     this.$ = { identifierChain: [{ name: $$[$0-2] }] };
   
break;
case 1094: case 1119:

     parser.suggestTablesOrColumns($$[$0-2]);
   
break;
case 1095:
this.$ = [{ name: $$[$0] }];
break;
case 1096:
this.$ = [{ name: $$[$0-2] }, { name: $$[$0-1] }];
break;
case 1097:

     parser.suggestDatabases({ appendDot: true });
   
break;
case 1118:

     parser.suggestTables();
     parser.suggestDatabases({ prependDot: true });
   
break;
case 1121:
this.$ = { identifierChain: $$[$0-1].identifierChain, alias: $$[$0] };
break;
case 1124:

     parser.yy.locations[parser.yy.locations.length - 1].type = 'column';
   
break;
case 1125: case 1278:

     parser.addAsteriskLocation(_$[$0], $$[$0-2].concat({ asterisk: true }));
   
break;
case 1127:

     this.$ = [ $$[$0].identifier ];
     parser.yy.firstChainLocation = parser.addUnknownLocation($$[$0].location, [ $$[$0].identifier ]);
   
break;
case 1128:

     if (parser.yy.firstChainLocation) {
       parser.yy.firstChainLocation.firstInChain = true;
       delete parser.yy.firstChainLocation;
     }
     $$[$0-2].push($$[$0].identifier);
     parser.addUnknownLocation($$[$0].location, $$[$0-2].concat());
   
break;
case 1129:

     parser.suggestColumns({
       identifierChain: $$[$0-2]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 1130:

     parser.suggestColumns({
       identifierChain: $$[$0-4]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 1131:
this.$ = [ $$[$0].identifier ];
break;
case 1132:

     $$[$0-2].push($$[$0].identifier);
   
break;
case 1134:

     parser.suggestColumns({ identifierChain: $$[$0-2] });
   
break;
case 1135:

     parser.suggestColumns({ identifierChain: $$[$0-4] });
   
break;
case 1137:
this.$ = { identifier: { name: $$[$0] }, location: _$[$0] };
break;
case 1146: case 1147:

     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1148: case 1173:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1149:

     // verifyType($$[$0], 'NUMBER');
     this.$ = $$[$0];
     $$[$0].types = ['NUMBER'];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1150: case 1151: case 1152:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1153:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1154:

     this.$ = { types: [ 'BOOLEAN' ] };
     // clear correlated flag after completed sub-query (set by lexer)
     parser.yy.correlatedSubQuery = false;
   
break;
case 1156: case 1157: case 1158: case 1159:

     parser.addColRefToVariableIfExists($$[$0-2], $$[$0]);
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1160: case 1161: case 1162: case 1163: case 1193: case 1251: case 1252:
this.$ = { types: [ 'BOOLEAN' ] };
break;
case 1164:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1165:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1166: case 1167:

     // verifyType($$[$0-2], 'BOOLEAN');
     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1168: case 1169: case 1170:

     // verifyType($$[$0-2], 'NUMBER');
     // verifyType($$[$0], 'NUMBER');
     this.$ = { types: [ 'NUMBER' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1171:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1172:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1174:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1176:

     parser.suggestKeywords(['BETWEEN', 'EXISTS', 'IN', 'LIKE', 'REGEXP', 'RLIKE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1177: case 1179:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
break;
case 1178:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1180:

     parser.suggestFunctions({ types: [ 'BOOLEAN' ] });
     parser.suggestColumns({ types: [ 'BOOLEAN' ] });
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1181:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0].suggestFilters };
break;
case 1182:

     parser.suggestFunctions();
     parser.suggestColumns();
     this.$ = { types: [ 'T' ] };
   
break;
case 1183:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 1184:

     parser.suggestFunctions({ types: [ 'NUMBER' ] });
     parser.suggestColumns({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ] };
   
break;
case 1185:

     parser.suggestKeywords(['FALSE', 'NOT NULL', 'NOT TRUE', 'NOT FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1186:

     parser.suggestKeywords(['FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1187:

     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1188: case 1189: case 1190:

     parser.suggestKeywords(['NOT']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1191:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-3] ? 'IS NOT DISTINCT FROM' : 'IS DISTINCT FROM');
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1192:

     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 1194:

     this.$ = $$[$0-1];
   
break;
case 1195:

     parser.valueExpressionSuggest();
     this.$ = { types: ['T'], typeSet: true };
   
break;
case 1196:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1197: case 1198: case 1199:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1200: case 1201: case 1202: case 1203:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0]);
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 1204: case 1206:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1205:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ] , typeSet: true, endsWithLessThanOrEqual: true };
   
break;
case 1207:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, endsWithLessThanOrEqual: $$[$0-1] === '<='  };
   
break;
case 1208: case 1209: case 1210: case 1211:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 1212:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-3]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1213:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1214: case 1215:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
break;
case 1216: case 1217:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
break;
case 1218:

     if ($$[$0-2].types[0] === $$[$0].types[0] && !$$[$0-5].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
   
break;
case 1219:

     if ($$[$0-5].types[0] === $$[$0].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 1220:

     if ($$[$0-5].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 1221:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1222: case 1228:

     parser.suggestValueExpressionKeywords($$[$0-1], ['AND']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1223:

     parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1224:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-4].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
   
break;
case 1225:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 1226:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 1227:

     parser.valueExpressionSuggest($$[$0-4], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-4]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1229:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1230: case 1232: case 1234: case 1236:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, suggestFilters: true };
   
break;
case 1231: case 1235:

     parser.addColRefIfExists($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 1233: case 1237:

     parser.addColRefIfExists($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 1238: case 1239:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 1240: case 1241: case 1242:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 1243: case 1244: case 1245:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 1246: case 1247: case 1248:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 1249:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1250:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
break;
case 1253:

     parser.valueExpressionSuggest(undefined, $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1254:

     parser.valueExpressionSuggest(undefined, $$[$0-1] + ' ' + $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1256:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1258:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1259:

      this.$ = $$[$0];
      this.$.suggestFilters = $$[$0-1].suggestFilters;
    
break;
case 1260:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1262: case 1264:

     $$[$0].position = 1;
   
break;
case 1263:

     $$[$0].position = $$[$0-2].position + 1;
     this.$ = $$[$0];
   
break;
case 1265:

     $$[$0-2].position += 1;
   
break;
case 1266:

     $$[$0-2].position = 1;
   
break;
case 1267:

     $$[$0-4].position += 1;
   
break;
case 1268:

     parser.valueExpressionSuggest();
     $$[$0-2].position += 1;
   
break;
case 1269:

     parser.valueExpressionSuggest();
     $$[$0-4].position += 1;
   
break;
case 1270:

     parser.suggestValueExpressionKeywords($$[$0-3]);
   
break;
case 1271: case 1272:

     parser.valueExpressionSuggest();
     this.$ = { cursorAtStart : true, position: 1 };
   
break;
case 1273: case 1274:

     parser.valueExpressionSuggest();
     this.$ = { position: 2 };
   
break;
case 1277:

     var lastLoc = parser.yy.locations[parser.yy.locations.length - 1];
     if (lastLoc.type !== 'variable') {
       lastLoc.type = 'column';
     }
     // used for function references with db prefix
     var firstLoc = parser.yy.locations[parser.yy.locations.length - $$[$0].length];
     this.$ = { chain: $$[$0], firstLoc: firstLoc, lastLoc: lastLoc }
   
break;
case 1284:

     parser.suggestValues($$[$0]);
   
break;
case 1285:
this.$ = { types: [ 'NUMBER' ], text: $$[$0] };
break;
case 1291: case 1293: case 1294:
this.$ = $$[$0-1] + $$[$0];
break;
case 1292: case 1295:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 1296:
this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 1297:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: "'" + $$[$0] + "'" }
     } else {
       this.$ = { types: [ 'STRING' ] }
     }
   
break;
case 1298:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: '"' + $$[$0] + '"' }
     } else {
       this.$ = { types: [ 'STRING' ], text: '"' + $$[$0] + '"' }
     }
   
break;
case 1299:
this.$ = { types: [ 'BOOLEAN' ], text: $$[$0] };
break;
case 1300:

    this.$ = { partialQuote: '\'', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 1301:

    this.$ = { partialQuote: '"', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 1308:

     this.$ = $$[$0];

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         this.$.suggestJoins = {
           prependJoin: true,
           tables: tables
         };
       }
      }
   
break;
case 1315:

     this.$ = {
       primary: $$[$0-1]
     }
     if ($$[$0-1].identifierChain) {
       if ($$[$0]) {
         $$[$0-1].alias = $$[$0].alias
         parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
       }
       parser.addTablePrimary($$[$0-1]);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     } else if ($$[$0].suggestKeywords) {
       keywords = $$[$0].suggestKeywords;
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 1316:

     this.$ = {
       primary: $$[$0-1]
     };

     if ($$[$0]) {
       this.$.primary.alias = $$[$0].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 1317:

     if ($$[$0]) {
       parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }
   
break;
case 1318:

     if ($$[$0]) {
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias);
     }
   
break;
case 1328:

     parser.pushQueryState();
   
break;
case 1329:

     parser.popQueryState();
   
break;
case 1331:

     if ($$[$0-1]) {
       $$[$0-2].alias = $$[$0-1].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0-1].alias });
       parser.addSubqueryAliasLocation($$[$0-1].location, $$[$0-1].alias, $$[$0-2].identifierChain);
     }
     this.$ = $$[$0-2];
   
break;
case 1334:

     var subQuery = parser.getSubQuery($$[$0]);
     subQuery.columns.forEach(function (column) {
       parser.expandIdentifierChain({ wrapper: column });
       delete column.linked;
     });
     parser.popQueryState(subQuery);
     this.$ = subQuery;
   
break;
case 1351: case 1352: case 1353: case 1354:
this.$ = { alias: $$[$0], location: _$[$0] };
break;
case 1361: case 1362:

     if (parser.yy.result.suggestFunctions) {
       parser.suggestAggregateFunctions();
     }
   
break;
case 1363:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords([{ value: 'PARTITION BY', weight: 2 }, { value: 'ORDER BY', weight: 1 }]);
     } else if (!$$[$0-2]) {
       parser.suggestKeywords(['PARTITION BY']);
     }
   
break;
case 1364:

      if (!$$[$0-1]) {
        parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ORDER BY', weight: 2 }]);
      } else {
        parser.suggestValueExpressionKeywords($$[$0-3]);
      }
    
break;
case 1373:

      // Only allowed in last order by
      delete parser.yy.result.suggestAnalyticFunctions;
    
break;
case 1374:

      var keywords = [];
      if ($$[$0-2].suggestKeywords) {
        keywords = parser.createWeightedKeywords($$[$0-2].suggestKeywords, 2);
      }
      if (!$$[$0]) {
        keywords = keywords.concat([{ value: 'RANGE BETWEEN', weight: 1 }, { value: 'ROWS BETWEEN', weight: 1 }]);
      }
      parser.suggestKeywords(keywords);
    
break;
case 1380:

     parser.suggestKeywords(['BETWEEN']);
   
break;
case 1381:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED PRECEDING']);
     } else if (!$$[$0-1]) {
       parser.suggestKeywords(['AND']);
     }
   
break;
case 1386:

    lexer.popState();
  
break;
case 1387:

    lexer.begin('hdfs');
  
break;
case 1389:

      parser.suggestHdfs({ path: $$[$0-3] });
    
break;
case 1390:

     parser.suggestHdfs({ path: $$[$0-2] });
   
break;
case 1391:

      parser.suggestHdfs({ path: $$[$0-1] });
    
break;
case 1392:

     parser.suggestHdfs({ path: '' });
   
break;
case 1393:

      parser.suggestHdfs({ path: '' });
    
break;
case 1399:

     parser.suggestKeywords(['PRECEDING']);
   
break;
case 1400: case 1405:

     parser.suggestKeywords(['ROW']);
   
break;
case 1404:

     parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED FOLLOWING']);
   
break;
case 1406:

     parser.suggestKeywords(['FOLLOWING']);
   
break;
case 1410:
this.$ = { inValueEdit: true };
break;
case 1411:
this.$ = { inValueEdit: true, cursorAtStart: true };
break;
case 1412: case 1413: case 1414:

     this.$ = { suggestKeywords: ['NOT'] }
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1418: case 1419: case 1420:

     parser.suggestFunctions({ types: [ 'STRING' ] });
     parser.suggestColumns({ types: [ 'STRING' ] });
     this.$ = { types: ['BOOLEAN'] }
   
break;
case 1421:

     this.$ = parser.findCaseType($$[$0-1])
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1422:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1423:
this.$ = parser.findCaseType($$[$0-1]);
break;
case 1424:

     parser.suggestValueExpressionKeywords($$[$0-1], ['END']);
     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1425:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1426:
this.$ = parser.findCaseType($$[$0-2]);
break;
case 1427:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1428:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-2]);
   
break;
case 1429:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     this.$.suggestFilters = $$[$0-1].suggestFilters
   
break;
case 1430:

     parser.valueExpressionSuggest();
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1431:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1432:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = $$[$0-1];
   
break;
case 1433:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ] };
   
break;
case 1436:

     this.$ = { caseTypes: [ $$[$0] ], lastType: $$[$0] }
     parser.extractExpressionText(this.$, $$[$0]);
   
break;
case 1437:

     $$[$0-1].caseTypes.push($$[$0]);
     this.$ = { caseTypes: $$[$0-1].caseTypes, lastType: $$[$0] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1441:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
   
break;
case 1443:

     this.$ = $$[$0]
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1444:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0].suggestFilters };
break;
case 1445:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1446:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0-2].suggestFilters };
break;
case 1447: case 1448:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0].suggestFilters };
break;
case 1449:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1450:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [$$[$0]] };
   
break;
case 1451:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1452:

      parser.valueExpressionSuggest();
      parser.suggestKeywords(['WHEN']);
      this.$ = { caseTypes: [{ types: ['T'] }] };
    
break;
case 1453: case 1455:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1454:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1456:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [$$[$0]], suggestFilters: true };
   
break;
case 1457:

     parser.suggestValueExpressionKeywords($$[$0-1], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1458:

     parser.suggestValueExpressionKeywords($$[$0-2], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1459: case 1460: case 1461: case 1462:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1468:

     if (! parser.yy.cursorFound) {
       parser.yy.result.useDatabase = $$[$0];
     }
   
break;
case 1470:

     parser.yy.result.useDatabase = $$[$0-1];
     if ($$[$0-1] === atob('aHVlX2F1dG9jb21wbGV0ZV9wYXJzZXI=')) {
       console.warn(atob('Q2xvdWRlcmEgMjAxNi0yMDIyIC0gSm9oYW4gQWhsZW4='));
     }
   
break;
}
},
table: [o($V0,$V1,{497:1,446:2}),{1:[3]},o($V2,$V3,{498:3,502:4,46:5,316:6,128:7,47:8,48:9,49:10,50:11,51:12,52:13,53:14,54:15,55:16,56:17,57:18,58:19,59:20,60:21,317:22,318:23,319:24,349:25,350:26,266:29,4:$V4,9:$V5,18:$V6,23:$V7,25:$V8,114:$V9,302:$Va,339:$Vb,423:$Vc,650:$Vd}),{499:[1,38],503:[1,39]},o($V2,[2,889]),o($V2,[2,895]),o($V2,[2,896]),o($V2,[2,897]),o($V2,[2,41]),o($V2,[2,42]),o($V2,[2,43]),o($V2,[2,44]),o($V2,[2,45]),o($V2,[2,46]),o($V2,[2,47]),o($V2,[2,48]),o($V2,[2,49]),o($V2,[2,50]),o($V2,[2,51]),o($V2,[2,52]),o($V2,[2,53]),o($V2,[2,54]),o($V2,[2,509]),o($V2,[2,510]),o($V2,[2,511]),{29:[1,41],350:40,423:$Vc},o($Ve,$Vf,{351:42,441:43,443:44,445:$Vg}),{61:46,68:[1,49],69:[1,50],70:[1,51],73:[1,47],120:[1,48]},o($Vh,[2,206],{227:52,10:53,161:58,68:$Vi,70:$Vj,73:[1,54],162:[1,59],243:[1,55]}),{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:61,74:60,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw},{11:78,68:$Vi,70:$Vj,73:[1,79],120:[1,80],159:$Vx,160:$Vy,227:77,233:$Vz},{344:[1,83]},{73:[1,84]},{37:85,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv},o($VA,[2,495],{303:86,73:[1,89],142:[1,87],307:[1,88]}),{340:[1,90]},{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:93,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,355:91,357:92,411:$Vu,506:$Vv,516:$Vw},o([25,29,41,42,43,44,45,131,132,133,134,135,143,180,184,292,411,436,471,472,473,474,475,476,477,478,479,480,481,483,484,506,508,509,510,513,516,518,521,524,525,530,537,539,540],$VB,{424:94,429:$VC,430:$VD}),{1:[2,884]},o($V0,$V1,{446:97}),o($Ve,$Vf,{441:43,443:44,351:98,445:$Vg}),{114:$V9,128:99,349:25,350:26,423:$Vc},o($Ve,[2,575]),o($Ve,[2,765],{443:100,445:$Vg}),o($VE,[2,767]),o([423,429,430],$V1,{446:101}),{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:102,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw},{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:61,74:103,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw},{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:61,74:104,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw},o($VF,[2,63]),o($VF,[2,64]),o($VF,[2,65]),o($VF,$VG,{104:105,483:$VH}),o($VI,$Vz,{11:107,159:$Vx,160:$Vy}),o($VF,$VG,{104:108,483:$VH}),{73:[1,109]},o($VJ,[2,1021]),o($VJ,[2,1022]),o($Vh,[2,207]),{89:[1,110]},o([116,127,195],$VK,{163:111,91:112,29:$VL}),o($VM,[2,1090],{510:[1,114]}),o($VN,[2,1113]),{516:[1,116],543:[1,115]},o($VO,[2,904]),o($VO,[2,905]),o($VO,[2,906]),o($VO,[2,166]),o($VO,[2,167]),o($VO,[2,168]),o($VO,[2,169]),o($VO,[2,170]),o($VO,[2,171]),o($VO,[2,172]),o($VO,[2,173]),o($VO,[2,174]),o($VO,[2,175]),o($VF,$VP,{107:117,483:$VQ}),{233:[1,119]},o($VF,$VP,{107:120,483:$VQ}),o($VF,$VP,{107:121,483:$VQ}),o($VI,[2,203]),{159:[1,122]},{73:[1,123]},{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:61,74:124,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw},o($V2,[2,1468]),{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:61,74:126,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,320:125,324:[1,127],326:[1,128],411:$Vu,506:$Vv,516:$Vw},o($VA,[2,496],{73:[1,129]}),o($VA,[2,497],{73:[1,130],308:[1,131]}),o($VA,[2,500]),{308:[1,133],328:132,341:[2,527]},o([29,423],[2,584],{33:[1,134]}),o($VR,[2,586]),{127:[1,135]},{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:138,410:168,411:$Vu,425:136,433:137,436:$VY,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},o($Vm1,[2,727]),o($Vm1,[2,728]),o($V2,$V3,{502:4,46:5,316:6,128:7,47:8,48:9,49:10,50:11,51:12,52:13,53:14,54:15,55:16,56:17,57:18,58:19,59:20,60:21,317:22,318:23,319:24,349:25,350:26,266:29,498:194,4:$V4,9:$V5,18:$V6,23:$V7,25:$V8,114:$V9,302:$Va,339:$Vb,423:$Vc,650:$Vd}),o($Ve,[2,573]),{31:[1,195]},o($VE,[2,768]),{423:$VB,424:196,429:$VC,430:$VD},{63:197,65:[1,198]},{4:[1,210],18:[1,212],65:[1,214],75:199,79:200,80:201,85:202,86:203,87:[1,205],89:[1,206],92:[1,204],95:207,96:208,103:[1,209],117:$Vn1,119:[1,211],531:$Vo1},{65:[1,220],87:[1,219],96:217,117:$Vn1,121:216,124:218,127:$Vp1},{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:222,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw},{530:[1,223]},{120:[1,225],233:[1,224]},{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:61,74:227,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,242:226,411:$Vu,506:$Vv,516:$Vw},o($VF,$VG,{104:228,483:$VH}),o($Vh,[2,208]),o([116,127],$Vq1,{84:229,194:230,195:$Vr1}),o($Vs1,[2,211]),{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:234,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,164:232,166:233,411:$Vu,506:$Vv,516:$Vw},{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:235,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw},{516:[1,236]},o($VN,[2,1115]),{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:237,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw},{524:[1,238]},o($VF,$VP,{107:239,483:$VQ}),{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:61,74:240,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw},{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:61,74:241,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw},o($VI,[2,204]),{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:61,74:242,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw},o($V2,$Vt1,{336:243,86:244,531:$Vo1}),o([114,257,312,423],$Vu1,{321:245,247:246,268:248,237:[1,247],269:$Vv1}),o([29,114,312,423],$Vt1,{86:244,336:250,531:$Vo1}),{325:251,333:[1,252]},o($Vw1,[2,520]),o($VA,[2,498]),o($VA,[2,499]),o($VA,[2,501]),{341:[1,253]},{341:[2,528]},{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:93,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,357:254,411:$Vu,506:$Vv,516:$Vw},{29:[1,255]},o($VE,[2,716],{426:256,361:258,33:[1,257],362:[1,259]}),o($Vx1,[2,733]),o($Vx1,$Vy1,{37:62,130:66,435:260,588:274,62:275,34:276,286:281,546:282,35:$Vz1,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,127:$VA1,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,162:$VB1,181:$VC1,182:$VD1,245:$VE1,411:$Vu,436:$VF1,506:$Vv,509:$VG1,514:$VH1,515:$VI1,516:$Vw,517:$VJ1,519:$VK1,521:$Vf1,528:$VL1,529:$VM1,530:$VN1,534:$VO1,535:$VP1,537:$Vj1}),o($Vx1,[2,749]),o($VQ1,[2,1145]),{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:283,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:284,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:285,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:286,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},{29:$VR1,585:287},{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:289,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:291,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,541:$VS1,546:177,579:153,589:290,598:161,600:169,602:174,603:175,604:178,646:292,648:293},o($VQ1,[2,849],{487:295,29:$VT1}),{29:$VT1,487:297},o($VQ1,[2,847]),o($VQ1,[2,848]),o($VQ1,[2,850]),o($VU1,[2,1277],{510:[1,298]}),{29:[2,829]},{29:[2,830]},{29:[2,831]},{29:[2,832]},o($VQ1,[2,878],{452:299,454:300,494:$VV1}),{454:302,494:$VV1},o($VQ1,[2,786]),o($VQ1,[2,1283]),o($VW1,[2,1127]),o($VX1,[2,794]),o($VX1,[2,795]),o($VX1,[2,796]),{29:[1,303]},{29:[1,304]},o($VQ1,[2,1285]),o($VQ1,[2,1286]),o([29,31,33,35,41,42,43,44,45,88,127,131,132,133,134,135,162,180,181,182,184,196,197,198,199,200,201,202,203,204,205,206,207,209,211,212,213,214,215,216,217,218,219,245,362,370,384,397,398,399,400,401,402,403,404,409,411,415,421,422,436,445,447,499,503,506,509,510,514,515,516,517,519,521,522,523,528,529,530,533,534,535,536,537,538,541,587],[2,1137]),{29:[1,305]},{29:[1,306]},{29:[1,307]},o($VQ1,[2,1288]),o($VQ1,[2,1289]),o($VQ1,[2,1297]),o($VQ1,[2,1298]),o($VQ1,[2,1299]),{29:[2,805]},{29:[2,806]},{29:[2,807]},{29:[2,808]},{29:[2,809]},{29:[2,810]},{29:[2,811]},{29:[2,812]},o($VQ1,[2,1290],{510:[1,308]}),{143:[1,309],540:[1,310]},{143:[1,311]},{537:[1,313],543:[1,312]},{521:[1,315],543:[1,314]},o($VQ1,[2,1302]),o($VQ1,[2,1303]),o($V2,[2,890]),o($Ve,$Vf,{441:43,443:44,351:316,445:$Vg}),{350:317,423:$Vc},o($V2,[2,55]),{66:318,67:[1,319],71:[1,320],72:[1,321]},o($V2,[2,68]),o($V2,[2,75]),o($VF,[2,141],{81:322,94:[1,323]}),o($V2,[2,77]),{65:[1,327],87:[1,324],89:[1,325],95:326},{93:[1,328]},{88:[1,330],94:[1,329]},{90:[1,331]},o($V2,[2,84]),o($V2,[2,86]),{29:$VG,90:[1,332],104:333,483:$VH},o($VY1,[2,145]),o($VY1,[2,146]),{90:[1,336],94:[1,335],107:334,483:$VQ,531:$VP},{29:[1,337]},{67:$VZ1,112:$V_1,113:$V$1,115:$V02,116:$V12},{116:[1,343]},o($V2,[2,147]),o($V2,[2,154]),o($V2,[2,155]),{88:[1,344]},{116:$V12},{114:$V9,128:345,349:25,350:26,423:$Vc},o([67,114,499,503],$Vq1,{194:230,84:346,195:$Vr1}),{524:[1,347]},o($VF,$VG,{104:348,483:$VH}),o($VF,$VG,{104:349,483:$VH}),o($V2,[2,345]),o($Vs1,$VK,{91:112,163:351,29:$VL,245:[1,350]}),{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:61,74:227,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,242:352,411:$Vu,506:$Vv,516:$Vw},{116:$V22,127:$V32,249:353,258:354},o($V42,[2,278]),{34:356,286:281,521:$Vf1,537:$Vj1,546:282},{31:[1,357],33:[1,358]},o($V52,[2,214]),{83:359,135:$V62,168:360,169:361,170:362,171:363,172:364,173:365,174:366,175:367,180:$V72,184:$V82,196:$V92,197:$Va2,198:$Vb2,199:$Vc2,200:$Vd2,201:$Ve2,202:$Vf2,203:$Vg2,204:$Vh2,205:$Vi2,206:$Vj2,207:$Vk2,209:$Vl2,211:$Vm2,212:$Vn2,213:$Vo2,214:$Vp2,215:$Vq2,216:$Vr2,217:$Vs2,218:$Vt2,219:$Vu2},o($VM,[2,1091]),o($VN,[2,1114]),{297:[1,393]},o([29,41,42,43,44,45,131,132,133,134,135,411,506,516,531],[2,1039]),{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:395,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,299:394,411:$Vu,506:$Vv,516:$Vw},o($V2,[2,479]),o($V2,[2,485]),o($V2,[2,567],{345:396,347:397,18:[1,399],103:[1,398],348:[1,400]}),o($V2,[2,1463]),o([29,114,312,423,499,503],[2,1051]),{114:$V9,128:403,309:401,310:402,312:$Vv2,349:25,350:26,423:$Vc},o($Vw2,$Vx2,{248:405,256:406,257:$Vy2}),{41:$Vz2,43:$VA2,44:$VB2,131:$VC2,132:$VD2,246:408},o($VE2,[2,424]),{270:[1,414]},o($Vw2,[2,1077],{337:415,140:416,29:$VF2}),o($Vw1,[2,519]),{334:[1,418]},{331:419,527:[1,420]},o($VR,[2,587]),o($VG2,$VH2,{359:421,615:422}),o($VE,[2,717]),{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:138,410:168,411:$Vu,433:423,436:$VY,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},o($VI2,[2,777],{431:424,438:425,440:426,447:[1,427]}),{29:$VR1,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:61,74:435,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,363:428,366:429,390:431,411:$Vu,506:$Vv,516:$Vw,585:436,605:430,607:432,609:433,610:434},o($Vx1,[2,748]),o($VJ2,[2,1304],{584:437,530:[1,438]}),{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:439,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:440,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:441,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:442,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},{245:$VE1,517:[1,444],528:[1,443],534:$VO1,535:$VP1,588:445},{29:[1,446]},{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:447,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:448,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:449,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:450,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:451,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:452,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},o($VQ1,[2,1171]),o($VK2,[2,1351]),o($VK2,[2,1352]),{34:454,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:453,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,286:281,411:$Vu,506:$Vv,516:$Vw,521:$Vf1,537:$Vj1,546:282},{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:455,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:456,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:457,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},o($VL2,[2,1029]),o($VL2,[2,1030]),o($VM2,[2,1146],{588:274,35:$Vz1,181:$VC1,182:$VD1,245:$VE1,436:$VF1,509:$VG1,515:$VI1,519:$VK1,528:$VL1,529:$VM1,534:$VO1,535:$VP1}),o($VM2,[2,1147],{588:274,35:$Vz1,181:$VC1,182:$VD1,245:$VE1,436:$VF1,509:$VG1,515:$VI1,519:$VK1,528:$VL1,529:$VM1,534:$VO1,535:$VP1}),o($VM2,[2,1148],{588:274,35:$Vz1,181:$VC1,182:$VD1,245:$VE1,436:$VF1,509:$VG1,515:$VI1,519:$VK1,528:$VL1,529:$VM1,534:$VO1,535:$VP1}),o($VN2,[2,1149],{588:274}),o($VQ1,[2,1154]),o($VG2,$VH2,{615:422,585:436,359:458,610:459,29:$VR1}),{31:[1,460],35:$Vz1,162:$VB1,181:$VC1,182:$VD1,245:$VE1,436:$VF1,509:$VG1,514:$VH1,515:$VI1,517:$VJ1,519:$VK1,528:$VL1,529:$VM1,530:$VN1,534:$VO1,535:$VP1,588:274},o($VQ1,[2,1173]),{35:$Vz1,162:$VB1,181:$VC1,182:$VD1,245:$VE1,436:$VF1,509:$VG1,514:$VH1,515:$VI1,517:$VJ1,519:$VK1,528:$VL1,529:$VM1,530:$VN1,534:$VO1,535:$VP1,541:$VS1,588:274,589:461,646:292,648:293},{522:[1,463],523:[1,462],541:$VS1,648:464},o($VO2,[2,1436]),{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:465,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},o($VQ1,[2,845]),{25:$VS,29:$VT,31:[1,466],36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:468,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,469:467,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},o($VQ1,[2,846]),{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:470,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,436:[1,469],506:$Vv,516:$Vw},o($VQ1,[2,784]),o($VQ1,[2,879]),{29:[1,473],37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:471,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,495:472,506:$Vv,516:$Vw},o($VQ1,[2,785]),{25:$VS,29:$VT,31:[1,474],36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:468,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,469:475,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},{25:$VS,29:$VT,31:[1,477],36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:476,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},o([25,29,31,41,42,43,44,45,131,132,133,134,135,143,180,184,292,411,471,472,473,474,475,476,477,478,479,480,481,483,484,506,508,509,510,513,516,518,521,524,525,530,537,539,540],$VB,{424:478,429:$VC,430:$VD}),o($VP2,$VB,{424:481,31:[1,480],429:$VC,430:$VD,436:[1,479]}),o($VP2,$VB,{424:482,31:[1,483],429:$VC,430:$VD}),o($VQ1,[2,1291],{143:[1,484],540:[1,485]}),o($VQ1,[2,1293]),{143:[1,486]},o($VQ1,[2,1294]),{537:[1,487]},o($VQ2,[2,1024]),{521:[1,488]},o($VR2,[2,1027]),o($Ve,[2,574]),o($VE,[2,773]),{28:489,29:$VS2},{34:491,286:281,521:$Vf1,537:$Vj1,546:282},{29:[2,66]},{29:[2,67]},{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:492,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw},o($VF,[2,142]),{88:[1,493]},{90:[1,494]},o($V2,[2,85]),{67:$VZ1,112:$V_1,113:$V$1,115:$V02},o($V2,[2,80]),{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:495,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw},{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:496,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw},{29:$VL,91:497},{29:$VL,91:498},{29:[1,500],105:499},{86:501,531:$Vo1},{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:502,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw},{29:[1,504],109:503},{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:507,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw,558:505,573:506},{40:508,41:$VT2,42:$VU2,43:$VV2,44:$VW2,45:$VX2},{34:514,286:281,521:$Vf1,537:$Vj1,546:282},{34:515,286:281,521:$Vf1,537:$Vj1,546:282},{28:516,29:$VS2},{28:517,29:$VS2},{29:$VP,107:518,483:$VQ},{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:519,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw},o($V2,[2,163]),o([114,499,503],$VY2,{228:520,230:521,67:$VZ2}),o($V_2,[2,1043]),{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:523,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw},o($VF,[2,418]),{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:61,74:524,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw},o([67,116,127,138,257,262,269,499,503],$Vq1,{194:230,84:526,195:$Vr1,237:[1,525]}),o($V2,[2,346]),{124:527,127:$Vp1},o($V$2,[2,394]),{28:528,29:$VS2},o($V42,[2,279]),o($Vs1,[2,212]),{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:234,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,166:529,411:$Vu,506:$Vv,516:$Vw},o($V52,$Vq1,{194:230,84:530,195:$Vr1}),o($V03,[2,227]),o($V03,[2,228]),o($V03,[2,229]),o($V03,[2,230]),o($V03,[2,231]),o($V03,[2,232]),o($V03,[2,233]),o($V03,[2,234]),o($V03,[2,280]),o($V03,[2,281]),o($V03,[2,282]),o($V03,[2,283]),o($V03,[2,284]),o($V03,[2,285]),o($V03,[2,286]),o($V03,[2,287]),o($V03,[2,288]),o($V03,[2,289]),o($V03,[2,290]),o($V03,$V13,{208:531,29:$V23}),o($V03,[2,1142],{210:533,29:[1,534]}),o($V03,[2,293]),o($V03,[2,294]),o($V03,[2,295]),o($V03,[2,296]),o($V03,[2,297]),o($V03,[2,298]),o($V03,[2,299]),o($V03,$V13,{208:535,29:$V23}),{181:[1,536]},{181:[1,537]},{181:[1,538]},{220:539,221:$V33,222:$V43,223:$V53,224:$V63,225:$V73,226:$V83},o($V2,[2,465]),o($V2,[2,472]),o($V2,[2,1095],{510:[1,546]}),o($V2,[2,561]),{93:[1,547]},{93:[2,570]},{93:[2,571]},{93:[2,572]},o($V2,[2,512]),o($V2,[2,502]),o($V2,[2,503]),{29:$V93,313:548,314:549},o($Vw2,[2,522]),o($Va3,[2,389]),{127:[1,551]},o($Vw2,$Vb3,{250:552,259:553,260:$Vc3}),o($Vd3,[2,383]),o($Vd3,[2,384]),o($Vd3,[2,385]),o($Vd3,[2,386]),o($Vd3,[2,387]),{113:[1,556],263:555,265:557,273:[1,558]},{114:$V9,128:403,309:559,310:402,312:$Vv2,349:25,350:26,423:$Vc},o($Vw2,[2,1078]),{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:561,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw,569:560},o($Vw1,[2,531]),{142:[2,559],307:[1,563],342:562},{333:[1,564]},{31:[1,565]},{114:$V9,128:573,349:25,350:26,423:$Vc,617:566,619:567,621:568,623:569,625:570,627:571,629:572},o($Vx1,[2,734]),o($VE,[2,729]),o($Ve3,[2,606],{368:574,369:575,370:[1,576]}),o($VI2,[2,778]),{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:578,410:168,411:$Vu,448:577,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},o([31,370,384,409,415,445,447,499,503],[2,596],{33:[1,579]}),o($Vf3,[2,599]),o($Vf3,[2,1306]),o($Vf3,[2,1308],{387:580,389:581,397:$Vg3,398:$Vh3,399:$Vi3,400:$Vj3,401:$Vk3,402:$Vl3,403:$Vm3,404:$Vn3}),o($Vf3,[2,1309]),o($Vo3,$Vy1,{37:62,130:66,62:275,34:276,286:281,546:282,435:590,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,127:$VA1,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw,521:$Vf1,537:$Vj1}),o($Vo3,$Vy1,{37:62,130:66,62:275,34:276,286:281,546:282,435:591,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,127:$VA1,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw,521:$Vf1,537:$Vj1}),o($Vp3,[2,1320]),o($Vp3,[2,1322]),{292:[1,592],430:[1,595],525:[1,594],539:[1,593]},o($VJ2,[2,1305]),o($Vq3,[2,1156],{588:274,245:$VE1,436:$VF1,509:$VG1,515:$VI1,528:$VL1,529:$VM1,534:$VO1,535:$VP1}),o($Vq3,[2,1157],{588:274,245:$VE1,436:$VF1,509:$VG1,515:$VI1,528:$VL1,529:$VM1,534:$VO1,535:$VP1}),o($Vq3,[2,1158],{588:274,245:$VE1,436:$VF1,509:$VG1,515:$VI1,528:$VL1,529:$VM1,534:$VO1,535:$VP1}),o($Vq3,[2,1159],{588:274,245:$VE1,436:$VF1,509:$VG1,515:$VI1,528:$VL1,529:$VM1,534:$VO1,535:$VP1}),{29:[1,596]},{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:597,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},o($VQ1,[2,1172]),o($VG2,$VH2,{37:62,130:66,485:140,486:148,482:149,450:150,36:151,579:153,451:158,453:159,455:160,598:161,82:162,462:163,463:164,464:165,410:168,600:169,62:170,468:171,602:174,603:175,286:176,546:177,604:178,615:422,359:598,586:599,379:600,25:$VS,29:$VT,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,292:$VX,411:$Vu,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,483:$V81,484:$V91,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1}),{35:$Vz1,162:$VB1,181:$VC1,182:$VD1,245:$VE1,436:$VF1,509:$VG1,514:$VH1,515:$VI1,517:$VJ1,519:$VK1,528:$VL1,529:$VM1,530:$VN1,534:$VO1,535:$VP1,587:[1,601],588:274},o($Vr3,[2,1166],{588:274,35:$Vz1,181:$VC1,182:$VD1,245:$VE1,436:$VF1,509:$VG1,515:$VI1,517:$VJ1,519:$VK1,528:$VL1,529:$VM1,530:$VN1,534:$VO1,535:$VP1}),o($Vr3,[2,1167],{588:274,35:$Vz1,181:$VC1,182:$VD1,245:$VE1,436:$VF1,509:$VG1,515:$VI1,517:$VJ1,519:$VK1,528:$VL1,529:$VM1,530:$VN1,534:$VO1,535:$VP1}),o($VN2,[2,1168],{588:274,245:$VE1,528:$VL1,529:$VM1,534:$VO1,535:$VP1}),o($VN2,[2,1169],{588:274,245:$VE1,528:$VL1,529:$VM1,534:$VO1,535:$VP1}),o($VN2,[2,1170],{588:274,245:$VE1,528:$VL1,529:$VM1,534:$VO1,535:$VP1}),o($VK2,[2,1353]),o($VK2,[2,1354]),o($VN2,[2,1412],{588:274}),o($VN2,[2,1413],{588:274}),o($VN2,[2,1414],{588:274}),{31:[1,602]},{31:$Vy1,34:276,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:275,127:$VA1,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,286:281,411:$Vu,435:603,506:$Vv,516:$Vw,521:$Vf1,537:$Vj1,546:282},o($VQ1,[2,1155]),o($VQ1,[2,1174]),o($VQ1,[2,1421]),{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:604,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},o($VO2,[2,1437]),{35:$Vz1,162:$VB1,181:$VC1,182:$VD1,245:$VE1,436:$VF1,509:$VG1,514:$VH1,515:$VI1,517:$VJ1,519:$VK1,528:$VL1,529:$VM1,530:$VN1,534:$VO1,535:$VP1,538:[1,605],588:274},o($VQ1,[2,860]),{31:[1,606],33:$Vs3},o($V52,[2,865],{588:274,35:$Vz1,162:$VB1,181:$VC1,182:$VD1,245:$VE1,436:$VF1,509:$VG1,514:$VH1,515:$VI1,517:$VJ1,519:$VK1,528:$VL1,529:$VM1,530:$VN1,534:$VO1,535:$VP1}),o($VU1,[2,1278]),o($VW1,[2,1128]),o($VQ1,[2,881]),o($VQ1,[2,882]),o($Vt3,[2,1365],{631:608,635:609,531:[1,610]}),{494:[2,824]},{31:[1,611],33:$Vs3},{35:$Vz1,127:[1,612],162:$VB1,181:$VC1,182:$VD1,245:$VE1,436:$VF1,509:$VG1,514:$VH1,515:$VI1,517:$VJ1,519:$VK1,528:$VL1,529:$VM1,530:$VN1,534:$VO1,535:$VP1,588:274},o($VQ1,[2,834]),{25:$VS,29:$VT,31:[1,613],36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:468,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,469:614,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},{31:[1,615]},o($VX1,[2,814]),{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:468,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,469:616,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:617,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},o($VX1,[2,820]),o($VQ1,[2,1292]),{143:[1,618]},o($VQ1,[2,1295]),o($VQ2,[2,1023]),o($VR2,[2,1026]),o($V2,[2,60]),{30:619,32:620,34:621,37:622,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,286:281,411:$Vu,506:$Vv,521:$Vf1,537:$Vj1,546:282},o($V2,[2,61]),{83:623,135:$V62,168:360,169:361,170:362,171:363,172:364,173:365,174:366,175:367,180:$V72,184:$V82,196:$V92,197:$Va2,198:$Vb2,199:$Vc2,200:$Vd2,201:$Ve2,202:$Vf2,203:$Vg2,204:$Vh2,205:$Vi2,206:$Vj2,207:$Vk2,209:$Vl2,211:$Vm2,212:$Vn2,213:$Vo2,214:$Vp2,215:$Vq2,216:$Vr2,217:$Vs2,218:$Vt2,219:$Vu2},{86:624,531:$Vo1},{29:$VL,91:625},{88:[1,626]},o($V2,[2,82]),o($V2,[2,83]),o($V2,[2,108]),o($V2,[2,109]),{86:628,193:627,531:$Vo1},o($V2,[2,143],{108:629,118:[1,630]}),o($V2,[2,116]),o($V2,[2,117]),{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:632,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,191:631,411:$Vu,506:$Vv,516:$Vw},{31:[1,633],33:[1,634]},o($V52,[2,1102]),{35:[1,635]},o($V2,[2,125]),o($Va3,[2,36]),o($Va3,[2,37]),o($Va3,[2,38]),o($Va3,[2,39]),o($Va3,[2,40]),o($V2,[2,126]),o($V2,[2,127],{114:[1,636]}),o($V2,[2,129]),o($V2,[2,134]),{29:[1,638],38:637},o($V2,[2,156]),o($V2,[2,323],{229:639,232:640,114:[1,641]}),o($Vu3,[2,321]),{34:642,286:281,521:$Vf1,537:$Vj1,546:282},{127:[1,643]},{237:[1,644]},{41:$Vz2,43:$VA2,44:$VB2,131:$VC2,132:$VD2,246:645},o([67,116,127,138,257,269,499,503],$Vv3,{251:646,261:647,262:$Vw3}),o($V2,[2,407]),o($V$2,[2,395]),o($V52,[2,215]),o($V52,[2,224]),o($V03,[2,291]),{143:[1,649]},o($V03,[2,292]),{143:[1,650]},o($V03,[2,300]),{83:651,135:$V62,168:360,169:361,170:362,171:363,172:364,173:365,174:366,175:367,180:$V72,182:[1,652],184:$V82,196:$V92,197:$Va2,198:$Vb2,199:$Vc2,200:$Vd2,201:$Ve2,202:$Vf2,203:$Vg2,204:$Vh2,205:$Vi2,206:$Vj2,207:$Vk2,209:$Vl2,211:$Vm2,212:$Vn2,213:$Vo2,214:$Vp2,215:$Vq2,216:$Vr2,217:$Vs2,218:$Vt2,219:$Vu2},{168:653,182:[1,654],196:$V92,197:$Va2,198:$Vb2,199:$Vc2,200:$Vd2,201:$Ve2,202:$Vf2,203:$Vg2,204:$Vh2,205:$Vi2,206:$Vj2,207:$Vk2,209:$Vl2,211:$Vm2,212:$Vn2,213:$Vo2,214:$Vp2,215:$Vq2,216:$Vr2,217:$Vs2,218:$Vt2},{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:658,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,182:[1,656],185:655,187:657,411:$Vu,506:$Vv,516:$Vw},o($V03,[2,301],{88:[1,659]}),o($Vx3,[2,305]),o($Vx3,[2,306]),o($Vx3,[2,307]),o($Vx3,[2,308]),o($Vx3,[2,309]),o($Vx3,[2,310]),{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:660,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw},o($V2,[2,568]),o($V2,[2,505],{33:[1,661]}),o($Vy3,[2,506]),{25:$VS,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,315:662,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:663,486:148,506:$Vv,510:$Vc1,516:$Vw,521:$Vf1,525:$Vh1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},{40:664,41:$VT2,42:$VU2,43:$VV2,44:$VW2,45:$VX2},o($Vw2,[2,523]),o($Vz3,[2,397]),{28:665,29:$VS2},o($VE2,[2,425]),{34:666,286:281,521:$Vf1,537:$Vj1,546:282},o($VE2,[2,405]),o($VA3,[2,436],{274:667,284:[1,668]}),o($V2,[2,537]),{31:[1,669],33:[1,670]},o($V52,[2,1083]),{142:[1,671]},{142:[2,560]},{334:[1,672]},o($VR,[2,592]),{31:[2,1334]},{31:[2,1336]},{31:[2,1338]},{31:[2,1340]},{31:[2,1342]},{31:[2,1344]},{31:[2,1346]},{31:[2,1348]},o($VB3,[2,635],{382:673,383:674,384:[1,675]}),o($Ve3,[2,607]),{139:[1,676]},o($VI2,[2,779]),o($VI2,[2,782],{588:274,35:$Vz1,162:$VB1,181:$VC1,182:$VD1,245:$VE1,436:$VF1,509:$VG1,514:$VH1,515:$VI1,517:$VJ1,519:$VK1,528:$VL1,529:$VM1,530:$VN1,534:$VO1,535:$VP1}),{29:$VR1,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:61,74:435,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,366:677,390:431,411:$Vu,506:$Vv,516:$Vw,585:436,605:430,607:432,609:433,610:434},o($Vf3,[2,1312],{389:678,397:$Vg3,398:$Vh3,399:$Vi3,400:$Vj3,401:$Vk3,402:$Vl3,403:$Vm3,404:$Vn3}),{29:$VR1,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:61,74:435,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,390:679,411:$Vu,506:$Vv,516:$Vw,585:436,609:433,610:434},{398:[1,680]},{398:[1,681],400:[1,682]},{398:[1,683]},o($V_2,[2,660]),{398:[1,685],400:[1,686],401:[1,684],403:[1,687]},{398:[1,688]},{398:[1,690],400:[1,691],401:[1,689],403:[1,692]},{398:[1,693]},o($Vo3,[2,1315]),o($Vo3,[2,1316]),o($VQ1,[2,1150]),o($VQ1,[2,1151]),o($VQ1,[2,1152]),{362:[1,694]},o($VG2,$VH2,{37:62,130:66,485:140,486:148,482:149,450:150,36:151,579:153,451:158,453:159,455:160,598:161,82:162,462:163,463:164,464:165,410:168,600:169,62:170,468:171,602:174,603:175,286:176,546:177,604:178,615:422,379:600,359:695,586:696,25:$VS,29:$VT,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,292:$VX,411:$Vu,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,483:$V81,484:$V91,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1}),{35:$Vz1,162:$VB1,181:$VC1,182:$VD1,245:$VE1,436:$VF1,509:$VG1,514:$VH1,515:$VI1,517:$VJ1,519:$VK1,528:$VL1,529:$VM1,530:$VN1,534:$VO1,535:$VP1,587:[1,697],588:274},{31:[1,698]},{31:[1,699],33:$VC3},o($VD3,[2,1262],{588:274,35:$Vz1,162:$VB1,181:$VC1,182:$VD1,245:$VE1,436:$VF1,509:$VG1,514:$VH1,515:$VI1,517:$VJ1,519:$VK1,528:$VL1,529:$VM1,530:$VN1,534:$VO1,535:$VP1}),{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:701,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},o($VE3,[2,1330]),{31:[1,702]},{35:$Vz1,162:$VB1,181:$VC1,182:$VD1,245:$VE1,436:$VF1,509:$VG1,514:$VH1,515:$VI1,517:$VJ1,519:$VK1,523:[1,703],528:$VL1,529:$VM1,530:$VN1,534:$VO1,535:$VP1,588:274},{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:704,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},o($VQ1,[2,861]),{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:705,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},{31:[2,1371],414:707,415:$VF3,632:706},o($Vt3,[2,1366]),{139:[1,709]},{494:[2,825]},{168:710,196:$V92,197:$Va2,198:$Vb2,199:$Vc2,200:$Vd2,201:$Ve2,202:$Vf2,203:$Vg2,204:$Vh2,205:$Vi2,206:$Vj2,207:$Vk2,209:$Vl2,211:$Vm2,212:$Vn2,213:$Vo2,214:$Vp2,215:$Vq2,216:$Vr2,217:$Vs2,218:$Vt2},o($VX1,[2,800]),{31:[1,711],33:$Vs3},o($VX1,[2,813]),{31:[1,712],33:$Vs3},{31:[1,713],35:$Vz1,162:$VB1,181:$VC1,182:$VD1,245:$VE1,436:$VF1,509:$VG1,514:$VH1,515:$VI1,517:$VJ1,519:$VK1,528:$VL1,529:$VM1,530:$VN1,534:$VO1,535:$VP1,588:274},o($VQ1,[2,1296]),{31:[1,714],33:[1,715]},o($V52,[2,23]),{34:718,35:[1,716],37:717,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,286:281,411:$Vu,506:$Vv,521:$Vf1,537:$Vj1,546:282},{35:[1,719],36:720,37:721,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,286:176,410:168,411:$Vu,506:$Vv,510:$Vc1,521:$Vf1,525:$Vh1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,598:161,600:169,602:174,603:175,604:178},o($V2,$Vq1,{194:230,84:722,195:$Vr1}),o($V2,[2,78]),o($V2,[2,79]),{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:723,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw},{31:[1,724],86:725,531:$Vo1},o($VG3,[2,275]),o($V2,[2,115]),o($V2,[2,144]),{31:[1,726],33:$VH3},o($V52,$VI3),o([29,31,65,87,89,114,118,312,423,499,503,531],[2,1053]),{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:507,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw,573:728},{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:729,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},{115:[1,730]},o($V2,[2,135]),{34:732,39:731,286:281,521:$Vf1,537:$Vj1,546:282},o($V2,[2,311]),o($V2,[2,324]),{71:[1,733]},o($Vu3,[2,322]),{34:734,286:281,521:$Vf1,537:$Vj1,546:282},{41:$Vz2,43:$VA2,44:$VB2,131:$VC2,132:$VD2,246:735},o([67,116,127,138,195,262,499,503],$Vb3,{259:553,250:736,260:$Vc3}),o([67,116,127,257,269,499,503],$VJ3,{136:737,137:738,138:$VK3}),o($VL3,[2,400]),{139:[1,740]},{31:[1,741]},{31:[1,742],33:[1,743]},{182:[1,744]},o($V03,[2,240]),{33:[1,745]},o($V03,[2,244]),{33:[1,747],182:[1,746]},o($V03,[2,250]),o($VM3,[2,252]),{190:[1,748]},{220:749,221:$V33,222:$V43,223:$V53,224:$V63,225:$V73,226:$V83},o($V2,[2,1096]),{29:$V93,314:750},{31:[1,751],33:[1,752]},o($V52,[2,1275]),o($Va3,[2,390]),o($Vz3,[2,398]),o($VE2,[2,406],{264:[1,753]}),o($VN3,[2,442],{275:754,288:[1,755]}),{285:[1,756]},o([114,142,148,312,423],[2,1080]),{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:757,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw},{73:[1,758]},o([142,307],[2,1388]),o($VO3,[2,698],{413:759,414:760,415:$VF3}),o($VB3,[2,636]),{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:761,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,371:762,379:763,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},o($Vf3,[2,600]),{29:$VR1,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:61,74:435,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,390:764,411:$Vu,506:$Vv,516:$Vw,585:436,609:433,610:434},o($VP3,$VQ3,{391:765,405:$VR3}),o($V_2,[2,656]),o($V_2,[2,657]),{398:[1,767]},o($V_2,[2,659]),{398:[1,768]},o($V_2,[2,662]),{398:[1,769]},{398:[1,770]},o($V_2,[2,665]),{398:[1,771]},o($V_2,[2,667]),{398:[1,772]},{398:[1,773]},o($V_2,[2,670]),{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:774,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},{31:[1,775]},{31:[1,776],33:$VC3},{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:777,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},o($VQ1,[2,1162]),o($VQ1,[2,1163]),{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:778,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},o([31,33,41,42,43,44,45,127,131,132,133,134,135,162,362,370,384,397,398,399,400,401,402,403,404,409,411,415,421,422,445,447,499,503,506,514,516,517,521,522,523,533,536,537,538,541,587],[2,1165],{588:274,35:$Vz1,181:$VC1,182:$VD1,245:$VE1,436:$VF1,509:$VG1,515:$VI1,519:$VK1,528:$VL1,529:$VM1,530:$VN1,534:$VO1,535:$VP1}),o($VE3,[2,1331]),o($VQ1,[2,1422]),o($VO2,[2,1443],{588:274,35:$Vz1,162:$VB1,181:$VC1,182:$VD1,245:$VE1,436:$VF1,509:$VG1,514:$VH1,515:$VI1,517:$VJ1,519:$VK1,528:$VL1,529:$VM1,530:$VN1,534:$VO1,535:$VP1}),o($V52,[2,866],{588:274,35:$Vz1,162:$VB1,181:$VC1,182:$VD1,245:$VE1,436:$VF1,509:$VG1,514:$VH1,515:$VI1,517:$VJ1,519:$VK1,528:$VL1,529:$VM1,530:$VN1,534:$VO1,535:$VP1}),{31:[1,779]},{31:[2,1376],533:[1,784],536:[1,783],636:780,638:781,639:782},{139:[1,785]},{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:600,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,586:786,598:161,600:169,602:174,603:175,604:178},{31:[1,787]},o($VX1,[2,801]),o($VX1,[2,815]),o($VX1,[2,819]),o($Vz3,[2,22]),{32:788,34:621,37:622,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,286:281,411:$Vu,506:$Vv,521:$Vf1,537:$Vj1,546:282},{36:789,37:790,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,286:176,410:168,411:$Vu,506:$Vv,510:$Vc1,521:$Vf1,525:$Vh1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,598:161,600:169,602:174,603:175,604:178},o($V52,[2,27]),o($V52,[2,28]),{36:791,37:792,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,286:176,410:168,411:$Vu,506:$Vv,510:$Vc1,521:$Vf1,525:$Vh1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,598:161,600:169,602:174,603:175,604:178},o($V52,[2,30]),o($V52,[2,32]),o($V2,[2,76]),o($V2,[2,81]),o($V2,[2,274]),o($VG3,[2,276]),o($V2,[2,266]),{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:793,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw},o($V52,[2,1103]),o($V52,[2,1108],{588:274,35:$Vz1,162:$VB1,181:$VC1,182:$VD1,245:$VE1,436:$VF1,509:$VG1,514:$VH1,515:$VI1,517:$VJ1,519:$VK1,528:$VL1,529:$VM1,530:$VN1,534:$VO1,535:$VP1}),{28:794,29:$VS2},{31:[1,795],33:[1,796]},o($V52,[2,34]),{28:797,29:$VS2},o($V2,[2,338],{234:798,236:799,237:[1,800]}),o([67,116,257,499,503],$Vu1,{268:248,247:801,269:$Vv1}),o([67,116,127,138,195,499,503],$Vv3,{261:647,251:802,262:$Vw3}),o([67,116,127,257,499,503],$Vu1,{268:248,247:803,269:$Vv1}),o($VS3,[2,177]),{139:[1,804]},{29:[1,806],91:805},o($V03,[2,1141]),o($V03,[2,1143]),{143:[1,807]},o($V03,[2,239]),{83:808,135:$V62,168:360,169:361,170:362,171:363,172:364,173:365,174:366,175:367,180:$V72,184:$V82,196:$V92,197:$Va2,198:$Vb2,199:$Vc2,200:$Vd2,201:$Ve2,202:$Vf2,203:$Vg2,204:$Vh2,205:$Vi2,206:$Vj2,207:$Vk2,209:$Vl2,211:$Vm2,212:$Vn2,213:$Vo2,214:$Vp2,215:$Vq2,216:$Vr2,217:$Vs2,218:$Vt2,219:$Vu2},o($V03,[2,249]),{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:658,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,187:809,411:$Vu,506:$Vv,516:$Vw},{83:810,135:$V62,168:360,169:361,170:362,171:363,172:364,173:365,174:366,175:367,180:$V72,184:$V82,196:$V92,197:$Va2,198:$Vb2,199:$Vc2,200:$Vd2,201:$Ve2,202:$Vf2,203:$Vg2,204:$Vh2,205:$Vi2,206:$Vj2,207:$Vk2,209:$Vl2,211:$Vm2,212:$Vn2,213:$Vo2,214:$Vp2,215:$Vq2,216:$Vr2,217:$Vs2,218:$Vt2,219:$Vu2},o($V03,[2,302]),o($Vy3,[2,507]),o($Vy3,[2,508]),{25:$VS,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:811,486:148,506:$Vv,510:$Vc1,516:$Vw,521:$Vf1,525:$Vh1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},o($VE2,[2,404]),o($VT3,[2,447],{276:812,184:[1,813]}),{289:[1,814]},{139:[1,815]},o($V52,[2,1084]),{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:61,74:816,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,411:$Vu,506:$Vv,516:$Vw},o($VE,[2,691],{407:817,408:818,409:[1,819]}),o($VO3,[2,699]),o($VB3,[2,637],{588:274,35:$Vz1,162:$VB1,181:$VC1,182:$VD1,245:$VE1,436:$VF1,509:$VG1,514:$VH1,515:$VI1,517:$VJ1,519:$VK1,528:$VL1,529:$VM1,530:$VN1,534:$VO1,535:$VP1}),o($Ve3,[2,608],{33:[1,820]}),o($VU3,[2,623],{588:274,35:$Vz1,162:$VB1,181:$VC1,182:$VD1,245:$VE1,436:$VF1,509:$VG1,514:$VH1,515:$VI1,517:$VJ1,519:$VK1,528:$VL1,529:$VM1,530:$VN1,534:$VO1,535:$VP1}),o($VP3,$VQ3,{391:821,405:$VR3}),o($VP3,[2,643]),{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:822,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},o($V_2,[2,658]),o($V_2,[2,661]),o($V_2,[2,663]),o($V_2,[2,664]),o($V_2,[2,666]),o($V_2,[2,668]),o($V_2,[2,669]),o($VN2,[2,1153],{588:274}),o($VQ1,[2,1160]),o($VQ1,[2,1161]),o($VM2,[2,1164],{588:274,35:$Vz1,181:$VC1,182:$VD1,245:$VE1,436:$VF1,509:$VG1,515:$VI1,519:$VK1,528:$VL1,529:$VM1,534:$VO1,535:$VP1}),o($VD3,[2,1263],{588:274,35:$Vz1,162:$VB1,181:$VC1,182:$VD1,245:$VE1,436:$VF1,509:$VG1,514:$VH1,515:$VI1,517:$VJ1,519:$VK1,528:$VL1,529:$VM1,530:$VN1,534:$VO1,535:$VP1}),o($VQ1,[2,1360]),{31:[2,1372]},{31:[2,1377]},{517:[1,823],642:[1,824]},o($VV3,[2,1394]),o($VV3,[2,1395]),{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:827,410:168,411:$Vu,416:825,419:826,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},o($Vt3,[2,1367],{33:$VC3}),o($VQ1,[2,833]),o($V52,[2,24]),o($V52,[2,25]),o($V52,[2,26]),o($V52,[2,29]),o($V52,[2,31]),o($V52,[2,269]),o($V2,[2,128]),o($V2,[2,33]),{34:828,286:281,521:$Vf1,537:$Vj1,546:282},o($V2,[2,325]),o($V2,[2,327]),o($V2,[2,339]),{238:829,239:[1,830],240:[1,831],241:[1,832]},o([67,116,499,503],$Vx2,{256:406,248:833,257:$Vy2}),o([67,116,127,195,499,503],$VJ3,{137:738,136:834,138:$VK3}),o([67,116,127,499,503],$Vx2,{256:406,248:835,257:$Vy2}),{29:$VF2,140:836},o($VL3,[2,401]),{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:838,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,164:232,166:233,191:837,411:$Vu,506:$Vv,516:$Vw},{31:[1,839]},{182:[1,840]},o($VM3,[2,253]),o($VM3,$Vq1,{194:230,84:841,195:$Vr1}),o($V52,[2,1276]),o($VW3,[2,452],{277:842,291:[1,843]}),{290:[1,844]},{285:[1,845]},{286:846,537:$Vj1},o($V2,$Vt1,{86:244,336:847,531:$Vo1}),o($VE,[2,753]),o($VE,[2,692]),{143:$VU,410:848,411:[1,849],510:$Vc1,540:$Vl1,602:174,603:175},{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:850,410:168,411:$Vu,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},o($VP3,[2,644]),o($VP3,[2,686],{588:274,35:$Vz1,162:$VB1,181:$VC1,182:$VD1,245:$VE1,436:$VF1,509:$VG1,514:$VH1,515:$VI1,517:$VJ1,519:$VK1,528:$VL1,529:$VM1,530:$VN1,534:$VO1,535:$VP1}),o($VX3,$VY3,{332:851}),o($VX3,$VY3,{332:852}),o([31,409,445,499,503,533,536],[2,700],{33:[1,853]}),o($VZ3,[2,703]),o($VZ3,$V_3,{588:274,156:854,35:$Vz1,162:$VB1,181:$VC1,182:$VD1,245:$VE1,421:$V$3,422:$V04,436:$VF1,509:$VG1,514:$VH1,515:$VI1,517:$VJ1,519:$VK1,528:$VL1,529:$VM1,530:$VN1,534:$VO1,535:$VP1}),o($V52,[2,35]),{34:857,286:281,521:$Vf1,537:$Vj1,546:282},o($V14,[2,342]),o($V14,[2,343]),o($V14,[2,344]),o([67,499,503],$V32,{258:354,249:858,116:$V22}),o([116,127,195,499,503],$VY2,{230:521,228:859,67:$VZ2}),o($V24,$VY2,{230:521,228:860,67:$VZ2}),{141:861,142:[2,186],148:[1,862]},{31:[1,863],33:$VH3},o($V52,$VI3,{83:359,168:360,169:361,170:362,171:363,172:364,173:365,174:366,175:367,135:$V62,180:$V72,184:$V82,196:$V92,197:$Va2,198:$Vb2,199:$Vc2,200:$Vd2,201:$Ve2,202:$Vf2,203:$Vg2,204:$Vh2,205:$Vi2,206:$Vj2,207:$Vk2,209:$Vl2,211:$Vm2,212:$Vn2,213:$Vo2,214:$Vp2,215:$Vq2,216:$Vr2,217:$Vs2,218:$Vt2,219:$Vu2}),o($V03,[2,1144]),o($V03,[2,243]),o($VM3,[2,259]),o($VE2,[2,456],{278:864,292:[1,865]}),{285:[1,866]},{285:[1,867]},{139:[1,868]},o($VA3,[2,437],{287:[1,869]}),o($V2,[2,548]),o($VE,[2,693],{33:[1,870]}),o($VE,[2,695],{33:[1,871]}),o($VU3,[2,624],{588:274,35:$Vz1,162:$VB1,181:$VC1,182:$VD1,245:$VE1,436:$VF1,509:$VG1,514:$VH1,515:$VI1,517:$VJ1,519:$VK1,528:$VL1,529:$VM1,530:$VN1,534:$VO1,535:$VP1}),o($V34,$V44,{640:872,645:873,143:$V54,520:$V64,642:$V74}),o($V34,$V44,{645:873,640:877,143:$V54,520:$V64,642:$V74}),{25:$VS,29:$VT,36:151,37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:162,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,143:$VU,180:$VV,184:$VW,286:176,292:$VX,379:827,410:168,411:$Vu,419:878,450:150,451:158,453:159,455:160,462:163,463:164,464:165,468:171,471:$VZ,472:$V_,473:$V$,474:$V01,475:$V11,476:$V21,477:$V31,478:$V41,479:$V51,480:$V61,481:$V71,482:149,483:$V81,484:$V91,485:140,486:148,506:$Vv,508:$Va1,509:$Vb1,510:$Vc1,513:$Vd1,516:$Vw,518:$Ve1,521:$Vf1,524:$Vg1,525:$Vh1,530:$Vi1,537:$Vj1,539:$Vk1,540:$Vl1,546:177,579:153,598:161,600:169,602:174,603:175,604:178},o($VZ3,[2,710]),o($VZ3,[2,714]),o($VZ3,[2,715]),o($V2,[2,340]),o($V2,$VY2,{230:521,228:879,67:$VZ2}),o($V24,$Vq1,{194:230,84:880,195:$Vr1}),o($V84,$V32,{258:354,249:881,116:$V22}),{142:[1,882]},{139:[1,883]},o($VL3,[2,402]),o($VE2,[2,430]),{293:[1,884]},{139:[1,885]},{139:[1,886]},{286:887,537:$Vj1},{139:[1,888]},{143:$VU,410:889,510:$Vc1,540:$Vl1,602:174,603:175},{411:[1,890]},{31:$V94,514:$Va4,641:891},{532:[1,893]},{269:[1,894]},o($Vb4,[2,1407]),o($Vb4,[2,1408]),{31:$V94,514:$Va4,641:895},o($VZ3,[2,704]),o($V2,[2,358]),o($V84,$V32,{258:354,249:896,116:$V22}),o($V2,$Vc4,{126:897,124:898,127:$Vp1}),{143:[1,899]},{29:[1,901],149:900},{127:[1,902]},{286:903,537:$Vj1},{286:904,537:$Vj1},o($VN3,[2,443]),{286:905,537:$Vj1},o($VE,[2,694]),o($VE,[2,696]),{31:[2,1378]},{143:$V54,520:[1,906],642:$V74,645:907},o($V34,[2,1397]),o($V34,[2,1398]),{31:[2,1379]},o($V2,$Vc4,{124:898,126:908,127:$Vp1}),o($V2,[2,360]),o($V2,[2,162]),{144:[1,909]},{142:[2,187]},{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:912,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,151:910,154:911,411:$Vu,506:$Vv,516:$Vw},{286:913,537:$Vj1},o($VW3,[2,453]),o($VT3,[2,448]),o($VA3,[2,438]),{269:[1,914]},{526:[1,915]},o($V2,[2,359]),o($VS3,[2,178]),{31:[1,916],33:[1,917]},o($V52,[2,192]),o($V52,$V_3,{156:918,421:$V$3,422:$V04}),o($VE2,[2,457]),{31:[2,1402]},{31:[2,1403]},{142:[2,190]},{37:62,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,62:170,82:912,130:66,131:$Vp,132:$Vq,133:$Vr,134:$Vs,135:$Vt,154:919,411:$Vu,506:$Vv,516:$Vw},o($V52,[2,198]),o($V52,[2,193])],
defaultActions: {38:[2,884],133:[2,528],154:[2,829],155:[2,830],156:[2,831],157:[2,832],179:[2,805],180:[2,806],181:[2,807],182:[2,808],183:[2,809],184:[2,810],185:[2,811],186:[2,812],320:[2,66],321:[2,67],398:[2,570],399:[2,571],400:[2,572],474:[2,824],563:[2,560],566:[2,1334],567:[2,1336],568:[2,1338],569:[2,1340],570:[2,1342],571:[2,1344],572:[2,1346],573:[2,1348],611:[2,825],780:[2,1372],781:[2,1377],891:[2,1378],895:[2,1379],900:[2,187],914:[2,1402],915:[2,1403],916:[2,190]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
/**
 * @param {string} input
 *
 * @return {AutocompleteParseResult}
 */
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: lexer.yylloc,
                    ruleId: stack.slice(stack.length - 2, stack.length).join('_'),
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


SqlParseSupport.initSyntaxParser(parser);/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true,"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* skip whitespace */ 
break;
case 1: /* skip comments */ 
break;
case 2: /* skip comments */ 
break;
case 3: parser.yy.partialCursor = false; parser.yy.cursorFound = yy_.yylloc; return 5; 
break;
case 4: parser.yy.partialCursor = true; parser.yy.cursorFound = yy_.yylloc; return 335; 
break;
case 5: this.popState(); return 587; 
break;
case 6: return 429; 
break;
case 7: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('ALTER', yy_.yylloc, yy.lexer.upcomingInput()); return 4; 
break;
case 8: return 514; 
break;
case 9: return 127; 
break;
case 10: return 421; 
break;
case 11: this.begin('between'); return 517; 
break;
case 12: return 205; 
break;
case 13: return 206; 
break;
case 14: return 139; 
break;
case 15: return 554; 
break;
case 16: return 518; 
break;
case 17: return 207; 
break;
case 18: return 90; 
break;
case 19: return 195; 
break;
case 20: parser.determineCase(yy_.yytext); return 9; 
break;
case 21: return 397; 
break;
case 22: return 520; 
break;
case 23: return 68; 
break;
case 24: return 209; 
break;
case 25: return 422; 
break;
case 26: return 430; 
break;
case 27: return 515; 
break;
case 28: return 211; 
break;
case 29: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('DROP', yy_.yylloc, yy.lexer.upcomingInput()); return 18; 
break;
case 30: return 522; 
break;
case 31: return 523; 
break;
case 32: parser.yy.correlatedSubQuery = true; return 524; 
break;
case 33: return 525; 
break;
case 34: return 212; 
break;
case 35: return 526; 
break;
case 36: parser.determineCase(yy_.yytext); return 362; 
break;
case 37: return 399; 
break;
case 38: return 370; 
break;
case 39: return 384; 
break;
case 40: return 483; 
break;
case 41: return 528; 
break;
case 42: return 401; 
break;
case 43: parser.determineCase(yy_.yytext); return 302; 
break;
case 44: return 213; 
break;
case 45: return 142; 
break;
case 46: return 529; 
break;
case 47: return 398; 
break;
case 48: return 402; 
break;
case 49: return 245; 
break;
case 50: return 409; 
break;
case 51: return 530; 
break;
case 52: return 292; 
break;
case 53: return 405; 
break;
case 54: return 134; 
break;
case 55: return 162; 
break;
case 56: return 415; 
break;
case 57: return 400; 
break;
case 58: return 531; 
break;
case 59: return 532; 
break;
case 60: return 118; 
break;
case 61: return 533; 
break;
case 62: return 534; 
break;
case 63: return 404; 
break;
case 64: return 535; 
break;
case 65: return 269; 
break;
case 66: return 133; 
break;
case 67: return 536; 
break;
case 68: return 70; 
break;
case 69: return 'SCHEMAS'; 
break;
case 70: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SELECT', yy_.yylloc); return 423; 
break;
case 71: return 403; 
break;
case 72: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SET', yy_.yylloc); return 65; 
break;
case 73: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SHOW', yy_.yylloc); return 'SHOW'; 
break;
case 74: return 214; 
break;
case 75: return 215; 
break;
case 76: return 73; 
break;
case 77: return 'TABLES'; 
break;
case 78: return 538; 
break;
case 79: return 216; 
break;
case 80: return 217; 
break;
case 81: return 88; 
break;
case 82: return 539; 
break;
case 83: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('TRUNCATE', yy_.yylloc, yy.lexer.upcomingInput()); return 25; 
break;
case 84: return 642; 
break;
case 85: return 445; 
break;
case 86: parser.determineCase(yy_.yytext); return 'UPDATE'; 
break;
case 87: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('USE', yy_.yylloc); return 650; 
break;
case 88: return 312; 
break;
case 89: return 218; 
break;
case 90: return 120; 
break;
case 91: return 541; 
break;
case 92: return 447; 
break;
case 93: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('WITH', yy_.yylloc); return 114; 
break;
case 94: return 103; 
break;
case 95: return 239; 
break;
case 96: return 202; 
break;
case 97: return 144; 
break;
case 98: return 196; 
break;
case 99: return 119; 
break;
case 100: return 138; 
break;
case 101: return 288; 
break;
case 102: return 94; 
break;
case 103: return 340; 
break;
case 104: return 201; 
break;
case 105: return 221; 
break;
case 106: return 71; 
break;
case 107: return 204; 
break;
case 108: return 293; 
break;
case 109: return 273; 
break;
case 110: return 326; 
break;
case 111: return 287; 
break;
case 112: return 243; 
break;
case 113: return 284; 
break;
case 114: return 240; 
break;
case 115: return 112; 
break;
case 116: return 270; 
break;
case 117: return 233; 
break;
case 118: return 160; 
break;
case 119: return 223; 
break;
case 120: this.begin('hdfs'); return 341; 
break;
case 121: return 198; 
break;
case 122: return 219; 
break;
case 123: return 289; 
break;
case 124: return 241; 
break;
case 125: return 290; 
break;
case 126: return 291; 
break;
case 127: parser.determineCase(yy_.yytext); return 339; 
break;
case 128: return 308; 
break;
case 129: return 67; 
break;
case 130: return 199; 
break;
case 131: return 184; 
break;
case 132: return 224; 
break;
case 133: return 225; 
break;
case 134: return 23; 
break;
case 135: return 69; 
break;
case 136: return 203; 
break;
case 137: return 260; 
break;
case 138: return 307; 
break;
case 139: return 262; 
break;
case 140: return 93; 
break;
case 141: return 72; 
break;
case 142: return 200; 
break;
case 143: return 92; 
break;
case 144: return 87; 
break;
case 145: return 89; 
break;
case 146: return 344; 
break;
case 147: return 'RESTRICT'; 
break;
case 148: return 226; 
break;
case 149: return 113; 
break;
case 150: return 115; 
break;
case 151: return 197; 
break;
case 152: return 148; 
break;
case 153: return 257; 
break;
case 154: return 348; 
break;
case 155: return 116; 
break;
case 156: return 159; 
break;
case 157: return 285; 
break;
case 158: return 117; 
break;
case 159: return 237; 
break;
case 160: return 222; 
break;
case 161: return 41; 
break;
case 162: return 131; 
break;
case 163: return 42; 
break;
case 164: return 43; 
break;
case 165: return 494; 
break;
case 166: return 44; 
break;
case 167: return 133; 
break;
case 168: return 45; 
break;
case 169: return 132; 
break;
case 170: yy.lexer.unput('('); yy_.yytext = 'avg'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 471; 
break;
case 171: yy.lexer.unput('('); yy_.yytext = 'cast'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 484; 
break;
case 172: yy.lexer.unput('('); yy_.yytext = 'count'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 479; 
break;
case 173: yy.lexer.unput('('); yy_.yytext = 'max'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 472; 
break;
case 174: yy.lexer.unput('('); yy_.yytext = 'min'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 473; 
break;
case 175: yy.lexer.unput('('); yy_.yytext = 'stddev_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 474; 
break;
case 176: yy.lexer.unput('('); yy_.yytext = 'stddev_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 475; 
break;
case 177: yy.lexer.unput('('); yy_.yytext = 'sum'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 480; 
break;
case 178: yy.lexer.unput('('); yy_.yytext = 'var_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 476; 
break;
case 179: yy.lexer.unput('('); yy_.yytext = 'var_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 477; 
break;
case 180: yy.lexer.unput('('); yy_.yytext = 'variance'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 478; 
break;
case 181: yy.lexer.unput('('); yy_.yytext = 'cume_dist'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 481; 
break;
case 182: yy.lexer.unput('('); yy_.yytext = 'dense_rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 481; 
break;
case 183: yy.lexer.unput('('); yy_.yytext = 'first_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 481; 
break;
case 184: yy.lexer.unput('('); yy_.yytext = 'lag'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 481; 
break;
case 185: yy.lexer.unput('('); yy_.yytext = 'last_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 481; 
break;
case 186: yy.lexer.unput('('); yy_.yytext = 'lead'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 481; 
break;
case 187: yy.lexer.unput('('); yy_.yytext = 'rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 481; 
break;
case 188: yy.lexer.unput('('); yy_.yytext = 'row_number'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 481; 
break;
case 189: return 143; 
break;
case 190: return 143; 
break;
case 191: return 540; 
break;
case 192: return 506; 
break;
case 193: this.begin('hdfs'); return 324; 
break;
case 194: parser.yy.cursorFound = true; return 5; 
break;
case 195: parser.yy.cursorFound = true; return 335; 
break;
case 196: return 527; 
break;
case 197: parser.addFileLocation(yy_.yylloc, yy_.yytext); return 333; 
break;
case 198: this.popState(); return 334; 
break;
case 199: return 499; 
break;
case 200: return 514; 
break;
case 201: return 162; 
break;
case 202: return 35; 
break;
case 203: return 181; 
break;
case 204: return 182; 
break;
case 205: return 519; 
break;
case 206: return 519; 
break;
case 207: return 519; 
break;
case 208: return 519; 
break;
case 209: return 519; 
break;
case 210: return 509; 
break;
case 211: return 436; 
break;
case 212: return 515; 
break;
case 213: return 515; 
break;
case 214: return 515; 
break;
case 215: return 515; 
break;
case 216: return 515; 
break;
case 217: return 515; 
break;
case 218: return 33; 
break;
case 219: return 510; 
break;
case 220: return 190; 
break;
case 221: return 503; 
break;
case 222: return 513; 
break;
case 223: return 508; 
break;
case 224: return 29; 
break;
case 225: return 31; 
break;
case 226: return 511; 
break;
case 227: return 512; 
break;
case 228: return 411; 
break;
case 229: this.begin('backtickedValue'); return 516; 
break;
case 230:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '`')) {
                                               return 545;
                                             }
                                             return 543;
                                           
break;
case 231: this.popState(); return 516; 
break;
case 232: this.begin('singleQuotedValue'); return 537; 
break;
case 233:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '\'')) {
                                               return 545;
                                             }
                                             return 543;
                                           
break;
case 234: this.popState(); return 537; 
break;
case 235: this.begin('doubleQuotedValue'); return 521; 
break;
case 236:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '"')) {
                                               return 545;
                                             }
                                             return 543;
                                           
break;
case 237: this.popState(); return 521; 
break;
case 238: return 499; 
break;
case 239: /* To prevent console logging of unknown chars */ 
break;
case 240: 
break;
case 241: 
break;
case 242: 
break;
case 243: 
break;
case 244: 
break;
case 245:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s)/i,/^(?:--.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:AND)/i,/^(?:ALL)/i,/^(?:ALTER)/i,/^(?:AND)/i,/^(?:AS)/i,/^(?:ASC)/i,/^(?:BETWEEN)/i,/^(?:BIGINT)/i,/^(?:BOOLEAN)/i,/^(?:BY)/i,/^(?:CASCADE)/i,/^(?:CASE)/i,/^(?:CHAR)/i,/^(?:COLUMNS)/i,/^(?:COMMENT)/i,/^(?:CREATE)/i,/^(?:CROSS)/i,/^(?:CURRENT)/i,/^(?:DATABASE)/i,/^(?:DECIMAL)/i,/^(?:DESC)/i,/^(?:DISTINCT)/i,/^(?:DIV)/i,/^(?:DOUBLE)/i,/^(?:DROP)/i,/^(?:ELSE)/i,/^(?:END)/i,/^(?:EXISTS)/i,/^(?:FALSE)/i,/^(?:FLOAT)/i,/^(?:FOLLOWING)/i,/^(?:FROM)/i,/^(?:FULL)/i,/^(?:GROUP)/i,/^(?:HAVING)/i,/^(?:IF)/i,/^(?:IN)/i,/^(?:INNER)/i,/^(?:INSERT)/i,/^(?:INT)/i,/^(?:INTO)/i,/^(?:IS)/i,/^(?:JOIN)/i,/^(?:LEFT)/i,/^(?:LIKE)/i,/^(?:LIMIT)/i,/^(?:NOT)/i,/^(?:NULL)/i,/^(?:ON)/i,/^(?:OPTION)/i,/^(?:OR)/i,/^(?:ORDER)/i,/^(?:OUTER)/i,/^(?:PARTITION)/i,/^(?:PRECEDING)/i,/^(?:PURGE)/i,/^(?:RANGE)/i,/^(?:REGEXP)/i,/^(?:RIGHT)/i,/^(?:RLIKE)/i,/^(?:ROW)/i,/^(?:ROLE)/i,/^(?:ROWS)/i,/^(?:SCHEMA)/i,/^(?:SCHEMAS)/i,/^(?:SELECT)/i,/^(?:SEMI)/i,/^(?:SET)/i,/^(?:SHOW)/i,/^(?:SMALLINT)/i,/^(?:STRING)/i,/^(?:TABLE)/i,/^(?:TABLES)/i,/^(?:THEN)/i,/^(?:TIMESTAMP)/i,/^(?:TINYINT)/i,/^(?:TO)/i,/^(?:TRUE)/i,/^(?:TRUNCATE)/i,/^(?:UNBOUNDED)/i,/^(?:UNION)/i,/^(?:UPDATE)/i,/^(?:USE)/i,/^(?:VALUES)/i,/^(?:VARCHAR)/i,/^(?:VIEW)/i,/^(?:WHEN)/i,/^(?:WHERE)/i,/^(?:WITH)/i,/^(?:ADD)/i,/^(?:ARCHIVE)/i,/^(?:BINARY)/i,/^(?:BUCKETS)/i,/^(?:BYTE)/i,/^(?:CHANGE)/i,/^(?:CLUSTERED)/i,/^(?:COLLECTION)/i,/^(?:COLUMN)/i,/^(?:DATA)/i,/^(?:DATE)/i,/^(?:DAY)/i,/^(?:DBPROPERTIES)/i,/^(?:DEC)/i,/^(?:DEFINED)/i,/^(?:DELIMITED)/i,/^(?:DIRECTORY)/i,/^(?:ESCAPED)/i,/^(?:EXTERNAL)/i,/^(?:FIELDS)/i,/^(?:FILE)/i,/^(?:FILEFORMAT)/i,/^(?:FORMAT)/i,/^(?:FUNCTION)/i,/^(?:GLOBAL)/i,/^(?:HOUR)/i,/^(?:INPATH)/i,/^(?:INTEGER)/i,/^(?:INTERVAL)/i,/^(?:ITEMS)/i,/^(?:JAR)/i,/^(?:KEYS)/i,/^(?:LINES)/i,/^(?:LOAD)/i,/^(?:LOCAL)/i,/^(?:LOCATION)/i,/^(?:LONG)/i,/^(?:MAP)/i,/^(?:MINUTE)/i,/^(?:MONTH)/i,/^(?:MSCK)/i,/^(?:NAMESPACE)/i,/^(?:NUMERIC)/i,/^(?:OPTIONS)/i,/^(?:OVERWRITE)/i,/^(?:PARTITIONED)/i,/^(?:PARTITIONS)/i,/^(?:PROPERTIES)/i,/^(?:REAL)/i,/^(?:RECOVER)/i,/^(?:RENAME)/i,/^(?:REPLACE)/i,/^(?:REPAIR)/i,/^(?:RESTRICT)/i,/^(?:SECOND)/i,/^(?:SERDE)/i,/^(?:SERDEPROPERTIES)/i,/^(?:SHORT)/i,/^(?:SORTED)/i,/^(?:STORED)/i,/^(?:SYNC)/i,/^(?:TBLPROPERTIES)/i,/^(?:TEMPORARY)/i,/^(?:TERMINATED)/i,/^(?:UNSET)/i,/^(?:USING)/i,/^(?:YEAR)/i,/^(?:CSV)/i,/^(?:JDBC)/i,/^(?:JSON)/i,/^(?:ORC)/i,/^(?:OVER)/i,/^(?:PARQUET)/i,/^(?:ROLE)/i,/^(?:TEXTFILE)/i,/^(?:TXT)/i,/^(?:AVG\s*\()/i,/^(?:CAST\s*\()/i,/^(?:COUNT\s*\()/i,/^(?:MAX\s*\()/i,/^(?:MIN\s*\()/i,/^(?:STDDEV_POP\s*\()/i,/^(?:STDDEV_SAMP\s*\()/i,/^(?:SUM\s*\()/i,/^(?:VAR_POP\s*\()/i,/^(?:VAR_SAMP\s*\()/i,/^(?:VARIANCE\s*\()/i,/^(?:CUME_DIST\s*\()/i,/^(?:DENSE_RANK\s*\()/i,/^(?:FIRST_VALUE\s*\()/i,/^(?:LAG\s*\()/i,/^(?:LAST_VALUE\s*\()/i,/^(?:LEAD\s*\()/i,/^(?:RANK\s*\()/i,/^(?:ROW_NUMBER\s*\()/i,/^(?:[0-9]+)/i,/^(?:[0-9]+(?:[YSL]|BD)?)/i,/^(?:[0-9]+E)/i,/^(?:[A-Za-z0-9_]+)/i,/^(?:DIRECTORY\s+['"])/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:\s+['"])/i,/^(?:[^'"\u2020\u2021]+)/i,/^(?:['"])/i,/^(?:$)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<>)/i,/^(?:<=>)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\+)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\|)/i,/^(?:\^)/i,/^(?:&)/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:;)/i,/^(?:~)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\$\{[^}]*\})/i,/^(?:`)/i,/^(?:[^`]+)/i,/^(?:`)/i,/^(?:')/i,/^(?:(?:\\\\|\\[']|[^'])+)/i,/^(?:')/i,/^(?:")/i,/^(?:(?:\\\\|\\["]|[^"])+)/i,/^(?:")/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"hdfs":{"rules":[194,195,196,197,198,199,241],"inclusive":false},"hdfsv2":{"rules":[],"inclusive":false},"doubleQuotedValue":{"rules":[236,237,244],"inclusive":false},"singleQuotedValue":{"rules":[233,234,243],"inclusive":false},"backtickedValue":{"rules":[230,231,242],"inclusive":false},"between":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,232,235,238,239,240,245],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,232,235,238,239,245],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
export default sparksqlSyntaxParser;
