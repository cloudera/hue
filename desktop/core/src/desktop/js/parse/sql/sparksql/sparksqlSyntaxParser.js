// Licensed to Cloudera, Inc. under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  Cloudera, Inc. licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import SqlParseSupport from 'parse/sql/sparksql/sqlParseSupport';

var sparksqlSyntaxParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[4,9,92,297,376,380,382],$V1=[2,639],$V2=[376,380],$V3=[2,640],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,6],$V9=[17,376,380],$Va=[2,516],$Vb=[1,27],$Vc=[154,160],$Vd=[1,49],$Ve=[1,51],$Vf=[1,52],$Vg=[1,53],$Vh=[1,54],$Vi=[1,50],$Vj=[1,55],$Vk=[1,56],$Vl=[1,57],$Vm=[1,58],$Vn=[1,47],$Vo=[1,46],$Vp=[1,45],$Vq=[2,478],$Vr=[1,60],$Vs=[1,61],$Vt=[17,319,376,380],$Vu=[26,27,28,29,30,109,110,111,112,113,285,385,395],$Vv=[2,794],$Vw=[1,72],$Vx=[26,27,28,29,30,109,110,111,112,113,285,357,385,395],$Vy=[15,19,297],$Vz=[4,15,17,19,21,26,27,28,29,30,42,44,64,65,66,69,80,84,92,94,95,97,105,109,110,111,112,113,131,132,133,136,142,147,159,162,168,179,198,203,205,236,244,258,271,272,273,274,275,276,277,278,279,283,285,289,295,296,310,319,321,376,380,385,388,389,393,394,395,396,397,398,400,401,403,404,405,406,407,410,413,414,415,416,417,419,420,421,422,423,424,425,426,427,428,432,433,488],$VA=[1,91],$VB=[1,99],$VC=[1,101],$VD=[1,132],$VE=[1,84],$VF=[1,124],$VG=[1,125],$VH=[1,126],$VI=[1,127],$VJ=[1,128],$VK=[1,129],$VL=[1,130],$VM=[1,131],$VN=[1,117],$VO=[1,118],$VP=[1,111],$VQ=[1,100],$VR=[1,102],$VS=[1,112],$VT=[1,97],$VU=[1,87],$VV=[1,89],$VW=[1,133],$VX=[1,88],$VY=[1,92],$VZ=[1,136],$V_=[1,90],$V$=[1,138],$V01=[1,86],$V11=[1,135],$V21=[1,137],$V31=[1,134],$V41=[15,17,26,27,28,29,30,109,110,111,112,113,131,136,209,285,297,310,345,346,347,348,349,350,351,352,353,354,355,357,358,359,363,385,387,388,389,392,395,399,405,408,409,416,423,429,430],$V51=[1,160],$V61=[1,158],$V71=[4,15,17,19,26,27,28,29,30,42,44,64,66,69,80,84,94,95,97,105,109,110,111,112,113,147,162,168,179,198,203,205,244,258,271,272,273,274,275,276,277,278,279,283,285,289,319,321,376,380,385,395,405,417,423],$V81=[1,167],$V91=[17,19,236,319,376,380],$Va1=[2,1114],$Vb1=[1,181],$Vc1=[1,196],$Vd1=[1,182],$Ve1=[1,183],$Vf1=[1,188],$Vg1=[1,197],$Vh1=[1,191],$Vi1=[1,190],$Vj1=[1,189],$Vk1=[1,192],$Vl1=[1,187],$Vm1=[1,184],$Vn1=[1,186],$Vo1=[1,180],$Vp1=[1,185],$Vq1=[1,199],$Vr1=[1,198],$Vs1=[17,19,21,26,27,28,29,30,105,109,110,111,112,113,132,133,159,168,236,244,258,271,272,273,274,275,276,277,278,283,285,289,295,296,310,319,321,376,380,385,388,393,394,395,396,401,405,406,407,413,415,416,419,420,421,422,423,426,433,488],$Vt1=[1,207],$Vu1=[1,213],$Vv1=[1,215],$Vw1=[15,17,19,21,26,27,28,29,30,105,109,110,111,112,113,132,133,159,168,236,244,258,271,272,273,274,275,276,277,278,283,285,289,295,296,310,319,321,376,380,385,388,393,394,395,396,401,405,406,407,413,415,416,419,420,421,422,423,426,433,488],$Vx1=[1,220],$Vy1=[15,17,19,21,26,27,28,29,30,105,109,110,111,112,113,132,133,159,168,236,244,258,271,272,273,274,275,276,277,278,283,285,289,295,296,310,319,321,376,380,385,388,389,393,394,395,396,401,405,406,407,413,415,416,419,420,421,422,423,426,433,488],$Vz1=[17,19,21,26,27,28,29,30,105,109,110,111,112,113,132,133,159,168,236,244,258,271,272,273,274,275,276,277,278,283,285,289,295,296,310,319,321,371,376,380,385,388,393,394,395,396,401,405,406,407,413,415,416,419,420,421,422,423,426,433,488],$VA1=[26,27,28,29,30,71,109,110,111,112,113,285,385,395],$VB1=[1,256],$VC1=[2,790],$VD1=[1,259],$VE1=[1,258],$VF1=[1,260],$VG1=[1,261],$VH1=[1,262],$VI1=[2,212],$VJ1=[1,269],$VK1=[44,94,105,147,162,179,198,203,205,376,380],$VL1=[1,276],$VM1=[92,297],$VN1=[2,1092],$VO1=[17,244,258,283,289,319,376,380],$VP1=[304,363,409,429],$VQ1=[17,19,236,244,258,271,272,273,274,275,276,277,278,279,283,289,319,321,376,380],$VR1=[17,19,21,44,92,94,105,133,147,162,179,198,203,205,236,244,258,271,272,273,274,275,276,277,278,279,283,289,319,321,376,380],$VS1=[17,19,26,27,28,29,30,105,109,110,111,112,113,159,236,244,258,271,272,273,274,275,276,277,278,283,285,289,295,296,319,321,376,380,385,393,395,396,405,406,407,416,419,422,423,426,433,488],$VT1=[17,19,21,26,27,28,29,30,105,109,110,111,112,113,132,133,159,236,244,258,271,272,273,274,275,276,277,278,283,285,289,295,296,310,319,321,376,380,385,388,393,394,395,396,401,405,406,407,416,419,422,423,426,433,488],$VU1=[406,407,433],$VV1=[15,26,27,28,29,30,109,110,111,112,113,131,136,209,285,345,346,347,348,349,350,351,352,353,354,355,357,358,359,363,385,387,388,389,392,395,399,405,408,409,416,423,429,430],$VW1=[17,19,21,26,27,28,29,30,44,92,94,105,109,110,111,112,113,132,133,147,159,162,168,179,195,198,203,205,236,244,258,271,272,273,274,275,276,277,278,279,283,285,289,295,296,310,319,321,376,380,385,388,393,394,395,396,401,405,406,407,413,415,416,419,420,421,422,423,426,433,488],$VX1=[17,19,21,26,27,28,29,30,44,92,94,105,109,110,111,112,113,132,133,147,159,162,168,179,198,203,205,236,244,258,271,272,273,274,275,276,277,278,279,283,285,289,295,296,310,319,321,376,380,385,388,393,394,395,396,401,405,406,407,413,415,416,419,420,421,422,423,426,433,488],$VY1=[1,346],$VZ1=[1,366],$V_1=[1,367],$V$1=[1,368],$V02=[1,369],$V12=[1,370],$V22=[2,224],$V32=[1,379],$V42=[17,19,44,92,94,105,133,179,198,203,205,376,380],$V52=[15,26,27,28,29,30,109,110,111,112,113,285,385,395],$V62=[17,258,283,289,319,376,380],$V72=[17,19,244,258,283,289,319,321,376,380],$V82=[1,405],$V92=[1,408],$Va2=[1,406],$Vb2=[1,410],$Vc2=[1,407],$Vd2=[1,409],$Ve2=[1,412],$Vf2=[1,411],$Vg2=[17,19,244,258,271,272,273,274,275,276,277,278,279,283,289,319,321,376,380],$Vh2=[17,19,26,27,28,29,30,105,109,110,111,112,113,244,258,271,272,273,274,275,276,277,278,279,283,285,289,319,321,376,380,385,395,405,423],$Vi2=[17,19,21,26,27,28,29,30,105,109,110,111,112,113,132,133,159,236,244,258,271,272,273,274,275,276,277,278,283,285,289,295,296,319,321,376,380,385,393,395,396,401,405,406,407,416,419,422,423,426,433,488],$Vj2=[17,19,26,27,28,29,30,105,109,110,111,112,113,159,236,244,258,271,272,273,274,275,276,277,278,283,285,289,295,296,319,321,376,380,385,393,395,405,406,407,419,422,423,426,433,488],$Vk2=[1,430],$Vl2=[17,19],$Vm2=[17,289],$Vn2=[1,467],$Vo2=[1,465],$Vp2=[1,466],$Vq2=[1,453],$Vr2=[1,454],$Vs2=[1,455],$Vt2=[1,456],$Vu2=[1,457],$Vv2=[1,458],$Vw2=[1,459],$Vx2=[1,460],$Vy2=[1,461],$Vz2=[1,462],$VA2=[1,463],$VB2=[1,464],$VC2=[44,94,105,376,380],$VD2=[92,94,105,147,376,380],$VE2=[1,490],$VF2=[1,492],$VG2=[1,493],$VH2=[1,491],$VI2=[1,494],$VJ2=[2,295],$VK2=[1,497],$VL2=[17,283,289,319,376,380],$VM2=[1,528],$VN2=[17,19,289],$VO2=[17,19,21,26,27,28,29,30,105,109,110,111,112,113,132,133,159,168,236,244,258,271,272,273,274,275,276,277,278,279,283,285,289,295,296,310,319,321,376,380,385,388,393,394,395,396,401,405,406,407,413,415,416,419,420,421,422,423,426,433,488],$VP2=[1,536],$VQ2=[17,19,61,133,147],$VR2=[2,904],$VS2=[1,547],$VT2=[17,417],$VU2=[1,558],$VV2=[2,203],$VW2=[44,94,105,147,203,205,376,380],$VX2=[44,94,105,147,179,198,201,203,205,376,380],$VY2=[2,299],$VZ2=[1,572],$V_2=[44,94,105,147,179,198,205,376,380],$V$2=[17,283,319,376,380],$V03=[17,19,244,258,271,272,273,274,275,276,277,278,283,289,319,321,376,380],$V13=[2,437],$V23=[1,583],$V33=[2,267],$V43=[1,627],$V53=[44,94,105,198,376,380],$V63=[44,94,105,147,179,198,376,380],$V73=[17,19,258,283,289,319,376,380],$V83=[396,545],$V93=[19,133],$Va3=[2,286],$Vb3=[1,660],$Vc3=[17,209,393,402,545],$Vd3=[2,1150],$Ve3=[17,19,283,319,376,380,419,422],$Vf3=[2,465],$Vg3=[1,675],$Vh3=[1,676],$Vi3=[405,423],$Vj3=[2,289],$Vk3=[1,684],$Vl3=[94,105,376,380],$Vm3=[17,393],$Vn3=[2,1160],$Vo3=[1,700],$Vp3=[1,699],$Vq3=[1,701],$Vr3=[44,105,376,380],$Vs3=[44,94,105,195,198,376,380],$Vt3=[105,376,380],$Vu3=[2,1165],$Vv3=[1,722],$Vw3=[411,418],$Vx3=[2,132];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"DataDefinition_EDIT":3,"ALTER":4,"CURSOR":5,"AlterDatabase_EDIT":6,"AlterTable_EDIT":7,"AlterView_EDIT":8,"CREATE":9,"OptionalOrReplace":10,"OptionalTemporary":11,"CreateDatabase_EDIT":12,"CreateFunction_EDIT":13,"ParenthesizedPropertyAssignmentList":14,"(":15,"PropertyAssignmentList":16,")":17,"PropertyAssignment":18,",":19,"QuotedValue":20,"=":21,"UnsignedValueSpecification":22,"ParenthesizedPropertyList":23,"PropertyList":24,"FileFormat":25,"CSV":26,"JSON":27,"ORC":28,"PARQUET":29,"TEXTFILE":30,"DataDefinition":31,"AlterDatabase":32,"AlterTable":33,"AlterView":34,"CreateDatabase":35,"CreateFunction":36,"CreateTable":37,"DatabaseNamespaceOrSchema":38,"RegularOrBacktickedIdentifier":39,"AlterDatabaseSetOperations":40,"AlterDatabaseSetOperations_EDIT":41,"SET":42,"DbPropertiesOrProperties":43,"LOCATION":44,"DATABASE":45,"NAMESPACE":46,"SCHEMA":47,"DBPROPERTIES":48,"PROPERTIES":49,"TABLE":50,"SchemaQualifiedTableIdentifier":51,"AlterTableOperations":52,"OptionalAlterTableOperations":53,"SchemaQualifiedTableIdentifier_EDIT":54,"AlterTableOperations_EDIT":55,"AlterAddOperations":56,"AlterOrChange":57,"OptionalColumn":58,"ColumnIdentifier":59,"ColumnDataType":60,"OptionalColumnOptions":61,"AlterDropOperations":62,"PartitionSpec":63,"RENAME":64,"TO":65,"REPLACE":66,"COLUMNS":67,"ParenthesizedColumnSpecificationList":68,"RECOVER":69,"PARTITIONS":70,"COLUMN":71,"AlterSetOperations":72,"AlterSetTblPropertiesOperations":73,"AlterAddOperations_EDIT":74,"ColumnDataType_EDIT":75,"AlterDropOperations_EDIT":76,"ParenthesizedColumnSpecificationList_EDIT":77,"AlterSetOperations_EDIT":78,"AlterSetTblPropertiesOperations_EDIT":79,"ADD":80,"OptionalIfNotExists":81,"ParenthesizedPartitionList":82,"IfNotExists_EDIT":83,"DROP":84,"OptionalIfExists":85,"OptionalPurge":86,"ParenthesizedColumnIdentifierList":87,"IfExists_EDIT":88,"ParenthesizedColumnIdentifierList_EDIT":89,"FILEFORMAT":90,"SERDE":91,"WITH":92,"SERDEPROPERTIES":93,"TBLPROPERTIES":94,"UNSET":95,"PURGE":96,"CHANGE":97,"VIEW":98,"AlterViewOperations":99,"OptionalAlterViewOperations":100,"AlterViewOperations_EDIT":101,"AsQuerySpecification":102,"AsQuerySpecification_EDIT":103,"OptionalAsQuerySpecification":104,"AS":105,"QuerySpecification":106,"QuerySpecification_EDIT":107,"NonReservedKeyword":108,"JDBC":109,"TXT":110,"ROLE":111,"OPTION":112,"STRUCT":113,"OptionalParenthesizedColumnSpecificationList":114,"ColumnSpecificationList":115,"ColumnSpecificationList_EDIT":116,"RightParenthesisOrError":117,"ColumnSpecification":118,"ColumnSpecification_EDIT":119,"OptionalComment":120,"PrimitiveType":121,"ArrayType":122,"MapType":123,"StructType":124,"ArrayType_INVALID":125,"MapType_INVALID":126,"StructType_INVALID":127,"ArrayType_EDIT":128,"MapType_EDIT":129,"StructType_EDIT":130,"ARRAY":131,"<":132,">":133,"AnyCursor":134,"GreaterThanOrError":135,"MAP":136,"StructDefinitionList":137,"StructDefinitionList_EDIT":138,"StructDefinition":139,"StructDefinition_EDIT":140,"Commas":141,":":142,"ColumnIdentifierList":143,"ColumnIdentifierList_EDIT":144,"PartitionList":145,"Comment":146,"COMMENT":147,"DatabaseOrSchema":148,"OptionalLocation":149,"OptionalWithDbProperties":150,"Location":151,"WithDbProperties_EDIT":152,"WithDbProperties":153,"FUNCTION":154,"OptionalResourceLocation":155,"OrReplace_EDIT":156,"ResourceLocation_EDIT":157,"OrReplace":158,"OR":159,"TEMPORARY":160,"ResourceLocation":161,"USING":162,"JarFileOrArchive":163,"ARCHIVE":164,"FILE":165,"JAR":166,"CreateTableOptions":167,"LIKE":168,"DataSource":169,"OptionalRowFormat":170,"OptionalStoredAs":171,"OptionalTblProperties":172,"OptionalOptions":173,"OptionalPartitionedBy":174,"OptionalClusteredBy":175,"OptionalExternal":176,"EXTERNAL":177,"RowFormat":178,"ROW":179,"FORMAT":180,"DelimitedRowFormat":181,"RowFormat_EDIT":182,"DelimitedRowFormat_EDIT":183,"DELIMITED":184,"OptionalFieldsTerminatedBy":185,"OptionalLinesTerminatedBy":186,"OptionalFieldsTerminatedBy_EDIT":187,"OptionalLinesTerminatedBy_EDIT":188,"FieldsTerminatedBy":189,"FIELDS":190,"TERMINATED":191,"BY":192,"SingleQuotedValue":193,"LinesTerminatedBy":194,"LINES":195,"LinesTerminatedBy_EDIT":196,"StoredAs":197,"STORED":198,"TblProperties":199,"Options":200,"OPTIONS":201,"PartitionedBy":202,"PARTITIONED":203,"ClusteredBy":204,"CLUSTERED":205,"ParenthesizedColumnList":206,"OptionalSortedBy":207,"INTO":208,"UNSIGNED_INTEGER":209,"BUCKETS":210,"ClusteredBy_EDIT":211,"ParenthesizedColumnList_EDIT":212,"OptionalSortedBy_EDIT":213,"SORTED":214,"ParenthesizedSortList":215,"ParenthesizedSortList_EDIT":216,"SortList":217,"SortList_EDIT":218,"SortIdentifier":219,"SortIdentifier_EDIT":220,"OptionalAscOrDesc":221,"ColumnIdentifier_EDIT":222,"CommonTableExpression":223,"SelectStatement":224,"OptionalUnions":225,"SelectStatement_EDIT":226,"OptionalUnions_EDIT":227,"CommonTableExpression_EDIT":228,"WithQueries":229,"WithQueries_EDIT":230,"WithQuery":231,"WithQuery_EDIT":232,"TableSubQueryInner":233,"TableSubQueryInner_EDIT":234,"FromClause":235,"FROM":236,"TableReferenceList":237,"FromClause_EDIT":238,"TableReferenceList_EDIT":239,"TableReference":240,"TableReference_EDIT":241,"OptionalGroupByClause":242,"GroupByClause":243,"GROUP":244,"GroupByColumnList":245,"GroupByClause_EDIT":246,"GroupByColumnList_EDIT":247,"ColumnGroupingSets":248,"ColumnReference":249,"ColumnGroupingSets_EDIT":250,"ColumnGroupingSet_EDIT":251,"ColumnReference_EDIT":252,"ValueExpression":253,"ValueExpression_EDIT":254,"GroupByColumnListPartTwo_EDIT":255,"OptionalHavingClause":256,"HavingClause":257,"HAVING":258,"HavingClause_EDIT":259,"OptionalJoins":260,"Joins":261,"Joins_INVALID":262,"JoinType":263,"TablePrimary":264,"OptionalJoinCondition":265,"Join_EDIT":266,"JoinType_EDIT":267,"TablePrimary_EDIT":268,"JoinCondition_EDIT":269,"Joins_EDIT":270,"CROSS":271,"JOIN":272,"FULL":273,"OUTER":274,"INNER":275,"LEFT":276,"SEMI":277,"RIGHT":278,"ON":279,"UsingColList":280,"OptionalLimitClause":281,"LimitClause":282,"LIMIT":283,"UnsignedNumericLiteral":284,"VARIABLE_REFERENCE":285,"LimitClause_EDIT":286,"OptionalOrderByClause":287,"OrderByClause":288,"ORDER":289,"OrderByColumnList":290,"OrderByClause_EDIT":291,"OrderByColumnList_EDIT":292,"OrderByIdentifier":293,"OrderByIdentifier_EDIT":294,"ASC":295,"DESC":296,"SELECT":297,"OptionalAllOrDistinct":298,"SelectList":299,"TableExpression":300,"SelectList_EDIT":301,"TableExpression_EDIT":302,"ALL":303,"DISTINCT":304,"OptionalSelectConditions":305,"OptionalSelectConditions_EDIT":306,"SelectSpecification":307,"SelectSpecification_EDIT":308,"OptionalCorrelationName":309,"*":310,"OptionalCorrelationName_EDIT":311,"OptionalWhereClause":312,"WhereClause_EDIT":313,"WhereClause":314,"Unions":315,"Unions_EDIT":316,"UnionClause":317,"UnionClause_EDIT":318,"UNION":319,"NewStatement":320,"WHERE":321,"SearchCondition":322,"SearchCondition_EDIT":323,"UserDefinedFunction":324,"AggregateFunction":325,"OptionalOverClause":326,"AnalyticFunction":327,"OverClause":328,"CastFunction":329,"UserDefinedFunction_EDIT":330,"AggregateFunction_EDIT":331,"OptionalOverClause_EDIT":332,"AnalyticFunction_EDIT":333,"OverClause_EDIT":334,"CastFunction_EDIT":335,"OtherAggregateFunction":336,"CountFunction":337,"SumFunction":338,"OtherAggregateFunction_EDIT":339,"CountFunction_EDIT":340,"SumFunction_EDIT":341,"OtherAggregateFunction_Type":342,"UdfArgumentList":343,"UdfArgumentList_EDIT":344,"AVG":345,"MAX":346,"MIN":347,"STDDEV_POP":348,"STDDEV_SAMP":349,"VAR_POP":350,"VAR_SAMP":351,"VARIANCE":352,"COUNT":353,"SUM":354,"ANALYTIC":355,"ArbitraryFunctionName":356,"IF":357,"TRUNCATE":358,"CAST":359,"NonParenthesizedValueExpressionPrimary":360,"ColumnOrArbitraryFunctionRef":361,"ArbitraryFunctionRightPart":362,"NULL":363,"NonParenthesizedValueExpressionPrimary_EDIT":364,"ArbitraryFunctionRightPart_EDIT":365,"UnsignedValueSpecification_EDIT":366,"ColumnOrArbitraryFunctionRef_EDIT":367,"ArbitraryFunction":368,"RegularIdentifier":369,"ArbitraryFunction_EDIT":370,"OVER":371,"WindowExpression":372,"WindowExpression_EDIT":373,"SqlSyntax":374,"SqlStatements":375,"EOF":376,"SqlAutocomplete":377,"SqlStatements_EDIT":378,"SqlStatement":379,";":380,"SqlStatement_EDIT":381,"DataManipulation":382,"DataManipulation_EDIT":383,"SetSpecification_EDIT":384,"REGULAR_IDENTIFIER":385,"NonStartingToken":386,"!":387,"-":388,".":389,"[":390,"]":391,"~":392,"AND":393,"ARITHMETIC_OPERATOR":394,"BACKTICK":395,"BETWEEN":396,"BIGINT":397,"BOOLEAN":398,"CASE":399,"CHAR":400,"COMPARISON_OPERATOR":401,"CURRENT":402,"DECIMAL":403,"DOUBLE":404,"DOUBLE_QUOTE":405,"ELSE":406,"END":407,"EXISTS":408,"FALSE":409,"FLOAT":410,"FOLLOWING":411,"HDFS_START_QUOTE":412,"IN":413,"INT":414,"IS":415,"NOT":416,"PARTITION":417,"PRECEDING":418,"RANGE":419,"REGEXP":420,"RLIKE":421,"ROWS":422,"SINGLE_QUOTE":423,"SMALLINT":424,"STRING":425,"THEN":426,"TIMESTAMP":427,"TINYINT":428,"TRUE":429,"UNSIGNED_INTEGER_E":430,"VALUES":431,"VARCHAR":432,"WHEN":433,"PARTIAL_CURSOR":434,"FromOrIn":435,"VALUE":436,"SingleQuotedValue_EDIT":437,"PARTIAL_VALUE":438,"DoubleQuotedValue":439,"DoubleQuotedValue_EDIT":440,"QuotedValue_EDIT":441,"OptionalFromDatabase":442,"DatabaseIdentifier":443,"OptionalFromDatabase_EDIT":444,"DatabaseIdentifier_EDIT":445,"OptionalCascade":446,"CASCADE":447,"OptionalIfExists_EDIT":448,"OptionalIfNotExists_EDIT":449,"OptionalInDatabase":450,"OptionalPartitionSpec":451,"OptionalPartitionSpec_EDIT":452,"PartitionSpec_EDIT":453,"PartitionSpecList":454,"PartitionSpecList_EDIT":455,"RangePartitionSpec":456,"RangePartitionComparisonOperator":457,"RangePartitionSpec_EDIT":458,"ConfigurationName":459,"PartialBacktickedOrAnyCursor":460,"PartialBacktickedIdentifier":461,"PartialBacktickedOrCursor":462,"PartialBacktickedOrPartialCursor":463,"OptionalParenthesizedColumnList":464,"OptionalParenthesizedColumnList_EDIT":465,"ColumnList":466,"ColumnList_EDIT":467,"ParenthesizedSimpleValueList":468,"SimpleValueList":469,"SchemaQualifiedIdentifier":470,"SchemaQualifiedIdentifier_EDIT":471,"PartitionExpression":472,"PartitionExpression_EDIT":473,"RegularOrBackTickedSchemaQualifiedName":474,"RegularOrBackTickedSchemaQualifiedName_EDIT":475,"LocalOrSchemaQualifiedName":476,"LocalOrSchemaQualifiedName_EDIT":477,"BasicIdentifierChain":478,"BasicIdentifierChain_EDIT":479,"DerivedColumnChain":480,"DerivedColumnChain_EDIT":481,"PartialBacktickedIdentifierOrPartialCursor":482,"OptionalTypeLength":483,"OptionalTypePrecision":484,"OptionalNot":485,"TableSubQuery":486,"ValueExpressionList":487,"BETWEEN_AND":488,"LikeRightPart":489,"CaseRightPart":490,"TableSubQuery_EDIT":491,"ValueExpressionInSecondPart_EDIT":492,"LikeRightPart_EDIT":493,"CaseRightPart_EDIT":494,"EndOrError":495,"ValueExpressionList_EDIT":496,"InValueList":497,"SignedInteger":498,"+":499,"UnsignedLiteral":500,"UnsignedLiteral_EDIT":501,"GeneralLiteral":502,"GeneralLiteral_EDIT":503,"ExactNumericLiteral":504,"ApproximateNumericLiteral":505,"TruthValue":506,"TablePrimaryOrJoinedTable":507,"TablePrimaryOrJoinedTable_EDIT":508,"JoinedTable":509,"JoinedTable_EDIT":510,"TableOrQueryName":511,"DerivedTable":512,"TableOrQueryName_EDIT":513,"DerivedTable_EDIT":514,"OptionalOnColumn":515,"OptionalOnColumn_EDIT":516,"PushQueryState":517,"PopQueryState":518,"SubQuery":519,"SubQuery_EDIT":520,"QueryExpression":521,"QueryExpression_EDIT":522,"QueryExpressionBody":523,"QueryExpressionBody_EDIT":524,"NonJoinQueryExpression":525,"NonJoinQueryExpression_EDIT":526,"NonJoinQueryTerm":527,"NonJoinQueryTerm_EDIT":528,"NonJoinQueryPrimary":529,"NonJoinQueryPrimary_EDIT":530,"SimpleTable":531,"SimpleTable_EDIT":532,"OptionalPartitionBy":533,"OptionalOrderByAndWindow":534,"PartitionBy_EDIT":535,"OptionalOrderByAndWindow_EDIT":536,"PartitionBy":537,"OptionalWindowSpec":538,"WindowSpec_EDIT":539,"WindowSpec":540,"RowsOrRange":541,"PopLexerState":542,"OptionalCurrentOrPreceding":543,"OptionalAndFollowing":544,"UNBOUNDED":545,"OptionalCurrentOrPreceding_EDIT":546,"OptionalAndFollowing_EDIT":547,"PushHdfsLexerState":548,"HdfsPath":549,"HDFS_PATH":550,"HDFS_END_QUOTE":551,"HdfsPath_EDIT":552,"IntegerOrUnbounded":553,"CaseWhenThenList":554,"CaseWhenThenList_EDIT":555,"CaseWhenThenListPartTwo":556,"CaseWhenThenListPartTwo_EDIT":557,"$accept":0,"$end":1},
terminals_: {2:"error",4:"ALTER",5:"CURSOR",9:"CREATE",15:"(",17:")",19:",",21:"=",26:"CSV",27:"JSON",28:"ORC",29:"PARQUET",30:"TEXTFILE",42:"SET",44:"LOCATION",45:"DATABASE",46:"NAMESPACE",47:"SCHEMA",48:"DBPROPERTIES",49:"PROPERTIES",50:"TABLE",61:"OptionalColumnOptions",64:"RENAME",65:"TO",66:"REPLACE",67:"COLUMNS",69:"RECOVER",70:"PARTITIONS",71:"COLUMN",80:"ADD",84:"DROP",90:"FILEFORMAT",91:"SERDE",92:"WITH",93:"SERDEPROPERTIES",94:"TBLPROPERTIES",95:"UNSET",96:"PURGE",97:"CHANGE",98:"VIEW",105:"AS",109:"JDBC",110:"TXT",111:"ROLE",112:"OPTION",113:"STRUCT",131:"ARRAY",132:"<",133:">",135:"GreaterThanOrError",136:"MAP",142:":",147:"COMMENT",154:"FUNCTION",159:"OR",160:"TEMPORARY",162:"USING",164:"ARCHIVE",165:"FILE",166:"JAR",168:"LIKE",177:"EXTERNAL",179:"ROW",180:"FORMAT",184:"DELIMITED",188:"OptionalLinesTerminatedBy_EDIT",190:"FIELDS",191:"TERMINATED",192:"BY",195:"LINES",198:"STORED",201:"OPTIONS",203:"PARTITIONED",205:"CLUSTERED",208:"INTO",209:"UNSIGNED_INTEGER",210:"BUCKETS",214:"SORTED",222:"ColumnIdentifier_EDIT",236:"FROM",244:"GROUP",258:"HAVING",271:"CROSS",272:"JOIN",273:"FULL",274:"OUTER",275:"INNER",276:"LEFT",277:"SEMI",278:"RIGHT",279:"ON",283:"LIMIT",285:"VARIABLE_REFERENCE",289:"ORDER",295:"ASC",296:"DESC",297:"SELECT",303:"ALL",304:"DISTINCT",310:"*",319:"UNION",321:"WHERE",345:"AVG",346:"MAX",347:"MIN",348:"STDDEV_POP",349:"STDDEV_SAMP",350:"VAR_POP",351:"VAR_SAMP",352:"VARIANCE",353:"COUNT",354:"SUM",355:"ANALYTIC",357:"IF",358:"TRUNCATE",359:"CAST",363:"NULL",371:"OVER",376:"EOF",380:";",382:"DataManipulation",383:"DataManipulation_EDIT",384:"SetSpecification_EDIT",385:"REGULAR_IDENTIFIER",387:"!",388:"-",389:".",390:"[",391:"]",392:"~",393:"AND",394:"ARITHMETIC_OPERATOR",395:"BACKTICK",396:"BETWEEN",397:"BIGINT",398:"BOOLEAN",399:"CASE",400:"CHAR",401:"COMPARISON_OPERATOR",402:"CURRENT",403:"DECIMAL",404:"DOUBLE",405:"DOUBLE_QUOTE",406:"ELSE",407:"END",408:"EXISTS",409:"FALSE",410:"FLOAT",411:"FOLLOWING",412:"HDFS_START_QUOTE",413:"IN",414:"INT",415:"IS",416:"NOT",417:"PARTITION",418:"PRECEDING",419:"RANGE",420:"REGEXP",421:"RLIKE",422:"ROWS",423:"SINGLE_QUOTE",424:"SMALLINT",425:"STRING",426:"THEN",427:"TIMESTAMP",428:"TINYINT",429:"TRUE",430:"UNSIGNED_INTEGER_E",431:"VALUES",432:"VARCHAR",433:"WHEN",434:"PARTIAL_CURSOR",436:"VALUE",438:"PARTIAL_VALUE",447:"CASCADE",488:"BETWEEN_AND",499:"+",545:"UNBOUNDED",550:"HDFS_PATH",551:"HDFS_END_QUOTE"},
productions_: [0,[3,2],[3,1],[3,1],[3,1],[3,4],[3,1],[3,1],[14,3],[16,1],[16,3],[18,3],[23,3],[24,1],[24,3],[25,1],[25,1],[25,1],[25,1],[25,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[32,4],[6,3],[6,4],[6,4],[6,4],[40,3],[40,3],[41,2],[38,1],[38,1],[38,1],[43,1],[43,1],[33,4],[7,4],[7,4],[7,5],[7,4],[53,0],[53,1],[52,1],[52,5],[52,1],[52,4],[52,4],[52,2],[52,5],[52,3],[52,3],[52,1],[52,2],[52,1],[55,1],[55,3],[55,5],[55,6],[55,5],[55,5],[55,1],[55,2],[55,3],[55,4],[55,3],[55,4],[55,2],[55,2],[55,3],[55,4],[55,2],[55,3],[55,1],[55,2],[55,1],[56,3],[56,3],[74,3],[74,2],[74,4],[74,3],[74,3],[62,4],[62,3],[62,3],[76,3],[76,2],[76,5],[76,4],[76,5],[76,3],[76,3],[72,3],[72,3],[72,3],[72,6],[72,3],[78,2],[78,3],[78,4],[78,5],[73,3],[73,4],[79,2],[79,4],[79,3],[79,5],[79,4],[58,0],[58,1],[86,0],[86,1],[57,1],[57,1],[34,4],[8,4],[8,4],[8,5],[8,4],[100,0],[100,1],[99,1],[99,1],[99,3],[101,1],[101,2],[101,1],[101,2],[104,0],[104,1],[102,2],[103,2],[103,2],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[114,0],[114,1],[68,3],[77,3],[115,1],[115,3],[116,1],[116,3],[116,3],[116,5],[116,2],[116,4],[116,4],[116,6],[118,3],[119,3],[119,3],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[75,1],[75,1],[75,1],[122,4],[125,3],[128,4],[128,4],[123,6],[126,3],[129,6],[129,4],[129,6],[129,5],[124,4],[127,3],[130,4],[137,1],[137,3],[138,1],[138,2],[138,3],[138,3],[138,5],[139,4],[140,5],[140,4],[140,4],[140,4],[140,3],[140,3],[87,3],[89,3],[143,1],[143,3],[144,1],[144,3],[144,3],[144,5],[82,3],[145,1],[145,2],[120,0],[120,1],[146,2],[35,7],[12,4],[12,3],[12,8],[12,7],[12,8],[12,8],[12,8],[12,7],[149,0],[149,1],[151,2],[150,0],[150,1],[153,3],[152,2],[36,9],[13,2],[13,5],[13,6],[13,5],[13,7],[13,10],[13,9],[13,10],[13,10],[13,9],[13,9],[10,0],[10,1],[158,2],[156,2],[11,0],[11,1],[155,0],[155,1],[161,3],[157,2],[163,1],[163,1],[163,1],[37,5],[167,8],[167,10],[167,9],[176,0],[176,1],[169,1],[169,1],[169,1],[169,1],[169,1],[170,0],[170,1],[178,3],[182,2],[182,3],[182,3],[181,3],[183,3],[183,3],[185,0],[185,1],[189,4],[187,2],[187,3],[186,0],[186,1],[194,4],[196,2],[196,3],[171,0],[171,1],[197,3],[172,0],[172,1],[199,2],[173,0],[173,1],[200,2],[174,0],[174,1],[202,3],[202,5],[175,0],[175,1],[204,7],[211,2],[211,4],[211,7],[211,5],[211,7],[211,7],[211,4],[207,0],[207,3],[213,2],[213,3],[215,3],[216,3],[217,1],[217,3],[218,1],[218,3],[218,3],[218,5],[219,2],[220,3],[220,2],[220,2],[106,3],[106,5],[106,2],[107,4],[107,3],[107,3],[107,1],[107,4],[107,3],[107,2],[107,2],[223,2],[228,2],[229,1],[229,3],[230,1],[230,3],[230,3],[230,5],[231,5],[232,2],[232,5],[232,5],[235,2],[238,2],[238,2],[237,1],[237,3],[239,1],[239,3],[239,3],[239,5],[239,3],[242,0],[242,1],[243,3],[246,3],[246,3],[246,2],[248,0],[248,1],[248,3],[248,3],[250,1],[250,3],[250,3],[250,5],[250,3],[251,1],[251,1],[245,1],[245,3],[247,1],[247,2],[247,3],[247,3],[247,3],[247,4],[247,5],[255,1],[255,2],[255,1],[256,0],[256,1],[257,2],[259,2],[259,2],[260,0],[260,1],[260,1],[261,3],[261,4],[262,1],[262,2],[266,3],[266,1],[266,3],[266,3],[266,3],[270,1],[270,2],[270,2],[270,3],[263,2],[263,2],[263,3],[263,2],[263,1],[263,3],[263,2],[263,3],[263,3],[263,2],[263,3],[263,2],[263,3],[263,3],[263,2],[267,2],[267,3],[267,3],[267,2],[267,3],[267,3],[267,3],[267,3],[267,2],[267,3],[267,3],[267,3],[267,3],[267,2],[265,0],[265,2],[280,1],[280,3],[269,2],[269,2],[281,0],[281,1],[282,2],[282,4],[282,2],[282,4],[286,2],[287,0],[287,1],[288,3],[291,3],[291,2],[290,1],[290,3],[292,1],[292,2],[292,3],[292,4],[292,5],[293,2],[294,2],[294,2],[221,0],[221,1],[221,1],[224,3],[224,4],[226,3],[226,3],[226,4],[226,4],[226,4],[226,5],[226,6],[226,4],[298,0],[298,1],[298,1],[300,2],[302,2],[302,4],[302,3],[299,1],[299,3],[301,1],[301,2],[301,3],[301,3],[301,3],[301,4],[301,3],[301,3],[301,4],[301,4],[301,4],[301,5],[301,5],[307,2],[307,1],[308,2],[308,3],[308,2],[305,5],[306,5],[306,5],[306,5],[306,5],[306,5],[306,6],[306,6],[306,6],[306,6],[306,6],[225,0],[225,1],[227,1],[315,1],[315,2],[316,1],[316,2],[316,2],[316,3],[317,4],[318,3],[318,4],[318,4],[312,0],[312,1],[314,2],[313,2],[313,2],[322,1],[323,1],[324,2],[324,2],[324,1],[330,1],[330,2],[330,1],[330,2],[330,2],[330,2],[330,1],[325,1],[325,1],[325,1],[331,1],[331,1],[331,1],[336,4],[336,5],[339,5],[339,6],[339,5],[342,1],[342,1],[342,1],[342,1],[342,1],[342,1],[342,1],[342,1],[337,4],[337,3],[337,5],[340,5],[340,6],[340,5],[338,5],[338,3],[341,5],[341,6],[341,5],[327,3],[327,4],[333,4],[333,5],[333,4],[356,1],[356,1],[356,1],[356,1],[329,6],[329,3],[335,6],[335,5],[335,4],[335,6],[335,5],[335,4],[335,6],[335,5],[335,6],[335,5],[360,2],[360,2],[360,1],[360,1],[360,1],[360,1],[364,2],[364,2],[364,1],[364,1],[364,1],[368,2],[368,2],[370,2],[370,2],[362,2],[362,3],[365,3],[365,4],[365,3],[343,1],[343,3],[344,1],[344,3],[344,3],[344,5],[344,3],[344,5],[344,4],[344,3],[344,2],[344,2],[344,4],[326,0],[326,1],[332,1],[328,2],[328,2],[334,2],[374,3],[377,3],[377,3],[320,0],[375,0],[375,1],[375,4],[378,1],[378,4],[378,4],[378,7],[379,1],[379,1],[379,1],[381,1],[381,2],[381,1],[381,1],[381,1],[381,1],[369,1],[369,1],[369,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[386,1],[141,1],[141,2],[134,1],[134,1],[435,1],[435,1],[148,1],[148,1],[193,3],[193,2],[437,2],[439,3],[439,2],[440,2],[20,1],[20,1],[441,1],[441,1],[442,0],[442,2],[444,2],[446,0],[446,1],[85,0],[85,2],[88,1],[448,2],[81,0],[81,3],[83,1],[449,2],[449,3],[450,0],[450,2],[450,2],[451,0],[451,1],[452,1],[63,4],[453,4],[456,5],[458,2],[458,3],[458,4],[458,5],[458,5],[458,5],[457,1],[457,1],[457,1],[457,1],[459,1],[459,1],[460,1],[460,1],[462,1],[462,1],[463,1],[463,1],[461,2],[117,1],[117,1],[464,0],[464,1],[465,1],[206,3],[212,3],[212,3],[466,1],[466,3],[467,3],[467,5],[468,3],[469,1],[469,3],[51,1],[51,3],[54,1],[54,3],[54,3],[470,1],[470,3],[471,1],[471,3],[471,3],[443,1],[445,1],[454,1],[454,3],[455,1],[455,3],[455,3],[455,5],[472,3],[473,3],[473,3],[473,3],[473,1],[39,1],[39,3],[39,2],[474,1],[474,3],[475,1],[475,3],[476,1],[476,2],[477,1],[477,2],[249,1],[249,3],[252,1],[478,1],[478,3],[479,3],[479,5],[480,1],[480,3],[481,1],[481,3],[481,5],[481,3],[59,1],[482,1],[482,1],[121,1],[121,1],[121,2],[121,2],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,2],[483,0],[483,3],[484,0],[484,3],[484,5],[253,1],[253,2],[253,2],[253,2],[253,2],[253,4],[253,4],[253,4],[253,6],[253,2],[253,3],[253,3],[253,3],[253,3],[253,3],[253,6],[253,6],[253,5],[253,5],[253,6],[253,5],[253,3],[253,3],[253,3],[253,3],[253,3],[253,2],[253,3],[253,2],[253,3],[254,1],[254,3],[254,2],[254,2],[254,2],[254,2],[254,2],[254,2],[254,2],[254,2],[254,3],[254,4],[254,5],[254,4],[254,4],[254,4],[254,6],[254,6],[254,2],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,4],[254,3],[254,6],[254,6],[254,5],[254,5],[254,6],[254,6],[254,6],[254,6],[254,5],[254,4],[254,5],[254,5],[254,5],[254,5],[254,4],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,3],[254,2],[254,3],[254,2],[254,3],[254,2],[254,3],[254,2],[254,3],[254,3],[254,4],[254,3],[254,3],[254,3],[487,1],[487,3],[496,1],[496,3],[496,3],[496,5],[496,3],[496,5],[496,4],[496,3],[496,2],[496,2],[496,4],[497,1],[497,3],[361,1],[361,3],[367,1],[498,1],[498,2],[498,2],[22,1],[366,1],[500,1],[500,1],[501,1],[284,1],[284,1],[504,1],[504,2],[504,3],[504,2],[505,2],[505,3],[505,4],[502,1],[502,1],[502,1],[503,1],[503,1],[506,1],[506,1],[485,0],[485,1],[240,1],[241,1],[507,1],[507,1],[508,1],[508,1],[509,2],[510,2],[510,2],[264,2],[264,2],[268,2],[268,2],[268,2],[511,1],[513,1],[512,1],[514,1],[515,0],[515,2],[516,2],[516,2],[517,0],[518,0],[486,3],[486,4],[491,3],[491,3],[233,2],[234,3],[519,1],[520,1],[521,1],[522,1],[523,1],[524,1],[525,1],[526,1],[527,1],[528,1],[529,1],[530,1],[531,1],[532,1],[309,0],[309,1],[309,1],[309,2],[309,2],[311,1],[311,1],[311,2],[311,2],[311,2],[372,4],[373,4],[373,4],[373,5],[373,7],[533,0],[533,1],[537,3],[535,2],[535,3],[535,3],[534,0],[534,2],[536,1],[536,3],[536,2],[538,0],[538,1],[540,5],[540,5],[539,2],[539,6],[539,5],[539,5],[539,5],[539,4],[542,0],[548,0],[549,3],[552,5],[552,4],[552,3],[552,3],[552,2],[541,1],[541,1],[543,0],[543,2],[543,2],[546,2],[546,2],[544,0],[544,3],[544,3],[547,2],[547,3],[547,3],[553,1],[553,1],[492,3],[492,3],[492,3],[489,2],[489,2],[489,2],[493,2],[493,2],[493,2],[493,2],[493,2],[493,2],[490,2],[490,4],[494,2],[494,4],[494,4],[494,3],[494,4],[494,3],[494,4],[494,4],[494,3],[494,4],[494,3],[495,1],[495,1],[554,1],[554,2],[555,1],[555,2],[555,3],[555,3],[555,2],[556,4],[557,2],[557,3],[557,4],[557,4],[557,3],[557,3],[557,4],[557,2],[557,3],[557,2],[557,3],[557,3],[557,4],[557,3],[557,4],[557,4],[557,5],[557,4],[557,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

     parser.suggestKeywords(['DATABASE', 'NAMESPACE', 'SCHEMA', 'TABLE', 'VIEW']);
   
break;
case 5:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords(['DATABASE', 'FUNCTION', 'OR REPLACE', 'SCHEMA', 'TEMPORARY FUNCTION']);
     } else if ($$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords(['FUNCTION', 'TEMPORARY FUNCTION']);
     } else if ($$[$0-1]) {
       parser.suggestKeywords(['FUNCTION']);
     }
   
break;
case 26:

     parser.addDatabaseLocation(_$[$0-1], [ { name: $$[$0-1] } ]);
   
break;
case 27: case 28: case 853:

     parser.suggestDatabases();
   
break;
case 29:

     parser.addDatabaseLocation(_$[$0-1], [ { name: $$[$0-1] } ]);
     parser.suggestKeywords(['SET DBPROPERTIES', 'SET LOCATION', 'SET PROPERTIES']);
   
break;
case 30:

      parser.addDatabaseLocation(_$[$0-1], [ { name: $$[$0-1] } ]);
    
break;
case 33:

     parser.suggestKeywords(['DBPROPERTIES', 'LOCATION', 'PROPERTIES']);
   
break;
case 39: case 43: case 118: case 122:

     parser.addTablePrimary($$[$0-1]);
   
break;
case 40: case 844:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 42:

     parser.addTablePrimary($$[$0-2]);
     if (!$$[$0]) {
       parser.suggestKeywords([ 'ADD', 'ADD COLUMNS', 'ADD IF NOT EXISTS', 'ALTER', 'ALTER COLUMN', 'CHANGE',
         'CHANGE COLUMN', 'DROP', 'DROP COLUMN', 'DROP COLUMNS', 'DROP IF EXISTS', 'PARTITION', 'RECOVER PARTITIONS',
         'RENAME COLUMN', 'RENAME TO', 'REPLACE COLUMNS', 'SET', 'SET FILEFORMAT', 'SET LOCATION', 'SET SERDE',
         'SET SERDEPROPERTIES', 'SET TBLPROPERTIES', 'UNSET TBLPROPERTIES']);
     }
   
break;
case 59:

     if (!$$[$0-1]) {
        parser.suggestKeywords(['COLUMN']);
     }
     parser.suggestColumns();
   
break;
case 60: case 181:

     parser.suggestKeywords(parser.getTypeKeywords());
   
break;
case 61:

     // TODO: Suggest column options
   
break;
case 63:

     if (!$$[$0-3]) {
        parser.suggestKeywords(['COLUMN']);
     }
     parser.suggestColumns();
   
break;
case 65:

     parser.suggestKeywords([
       'REPLACE COLUMNS', 'RENAME TO', 'SET', 'SET FILEFORMAT', 'SET LOCATION', 'SET SERDE', 'SET SERDEPROPERTIES']);
   
break;
case 66: case 73: case 131:

     parser.suggestKeywords(['TO']);
   
break;
case 67:

     parser.suggestKeywords(['PARTITION']);
   
break;
case 68: case 74:

     parser.suggestKeywords(['COLUMNS']);
   
break;
case 70:

     parser.suggestKeywords(['PARTITIONS']);
   
break;
case 71:

     parser.suggestKeywords(['COLUMN', 'TO']);
   
break;
case 72: case 94: case 205: case 206: case 207: case 208: case 324: case 373: case 834: case 837: case 838: case 863: case 864: case 885: case 888:

     parser.suggestColumns();
   
break;
case 81:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['COLUMNS', 'IF NOT EXISTS']);
     }
   
break;
case 83:

     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 89:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['COLUMN', 'COLUMNS', 'IF EXISTS', 'PARTITION'])
     } else {
       parser.suggestKeywords(['PARTITION']);
     }
   
break;
case 91:

     if (!$$[$0-3]) {
       parser.suggestKeywords(['IF EXISTS'])
     }
   
break;
case 93:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['PURGE'])
     }
   
break;
case 101:

     parser.suggestKeywords(['FILEFORMAT', 'LOCATION', 'SERDE', 'SERDEPROPERTIES', 'TBLPROPERTIES']);
   
break;
case 102:

     parser.suggestFileFormats();
   
break;
case 103:

     parser.suggestKeywords(['WITH SERDEPROPERTIES']);
   
break;
case 104:

     parser.suggestKeywords(['SERDEPROPERTIES']);
   
break;
case 107: case 129:

     parser.suggestKeywords(['TBLPROPERTIES']);
   
break;
case 108:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 110:

     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 119:

     parser.suggestTables({ onlyViews: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 120:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyViews = true;
     }
   
break;
case 121:

     parser.addTablePrimary($$[$0-2]);
     if (!$$[$0]) {
       parser.suggestKeywords(['AS SELECT', 'RENAME TO', 'SET TBLPROPERTIES', 'UNSET TBLPROPERTIES']);
     }
   
break;
case 135: case 346: case 651: case 1097:

     parser.suggestKeywords(['SELECT']);
   
break;
case 149: case 327: case 497: case 613: case 616: case 775: case 778: case 866: case 919: case 1094:
this.$ = $$[$0-1];
break;
case 151: case 338:
this.$ = [$$[$0]];
break;
case 152:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 157: case 159: case 322:

     parser.checkForKeywords($$[$0-1]);
   
break;
case 158: case 160:

     parser.checkForKeywords($$[$0-3]);
   
break;
case 161:

     this.$ = $$[$0-2];
     this.$.type = $$[$0-1];
     var keywords = [];
     if (!$$[$0]) {
       this.$.suggestKeywords = ['COMMENT']
     }
   
break;
case 162: case 176: case 182: case 183: case 196: case 199:

     parser.suggestKeywords(parser.getColumnDataTypeKeywords());
   
break;
case 195: case 198:

     parser.suggestKeywords(['COMMENT']);
   
break;
case 216: case 234:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 218: case 240:

     if (!$$[$0-5]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 220:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'COMMENT', weight: 3 }, { value: 'LOCATION', weight: 2 }, { value: 'WITH DBPROPERTIES', weight: 1 }],
       [true, true, true]);
     if (keywords.length) {
       parser.suggestKeywords(keywords);
     }
   
break;
case 221:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-1], $$[$0]],
       [{ value: 'LOCATION', weight: 2 }, { value: 'WITH DBPROPERTIES', weight: 1 }],
       [true, true]);
     if (keywords.length) {
       parser.suggestKeywords(keywords);
     }
   
break;
case 222:

     if (!$$[$0]) {
       parser.suggestKeywords(["WITH DBPROPERTIES"]);
     }
   
break;
case 230:

     parser.suggestKeywords(['DBPROPERTIES']);
   
break;
case 233:

     if (!$$[$0-2] && !$$[$0-3]) {
       parser.suggestKeywords([{ value: 'OR REPLACE', weight: 2 }, { value: 'TEMPORARY', weight: 1 }])
     } else if (!$$[$0-2] && $$[$0-3]) {
       parser.suggestKeywords(['TEMPORARY']);
     }
   
break;
case 236: case 345:

     parser.suggestKeywords(['AS']);
   
break;
case 237:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['USING']);
     }
   
break;
case 239:

     if (!$$[$0-7] && !$$[$0-8]) {
       parser.suggestKeywords([{ value: 'OR REPLACE', weight: 2 }, { value: 'TEMPORARY', weight: 1 }])
     } else if (!$$[$0-7] && $$[$0-8]) {
       parser.suggestKeywords(['TEMPORARY']);
     }
   
break;
case 246:

     parser.suggestKeywords(['REPLACE']);
   
break;
case 252:

     parser.suggestKeywords(['ARCHIVE', 'FILE', 'JAR']);
   
break;
case 270:

     parser.suggestKeywords(['FORMAT']);
   
break;
case 271:

     parser.suggestKeywords(['DELIMITED']);
   
break;
case 273:

     if (!$$[$0-1] && !$$[$0]) {
       this.$ = { suggestKeywords: [{ value: 'FIELDS TERMINATED BY', weight: 2 }, { value: 'LINES TERMINATED BY', weight: 1 }] };
     } else if (!$$[$0]) {
       this.$ = { suggestKeywords: ['LINES TERMINATED BY'] };
     }
   
break;
case 279: case 284:

     parser.suggestKeywords(['TERMINATED BY']);
   
break;
case 280: case 285: case 302: case 311: case 1132:

     parser.suggestKeywords(['BY']);
   
break;
case 305:

     if (!$$[$0-1]) {
       parser.suggestKeywords([{ value: 'INTO', weight: 1 }, { value: 'SORTED BY', weight: 2 }]);
     } else {
       parser.suggestKeywords(['INTO']);
     }
   
break;
case 306:

     parser.suggestKeywords(['BUCKETS']);
   
break;
case 326: case 499:
this.$ = $$[$0-2];
break;
case 328:

     parser.addCommonTableExpressions($$[$0-3]);
   
break;
case 329: case 330: case 341:

     parser.addCommonTableExpressions($$[$0-2]);
   
break;
case 336: case 352: case 376: case 452: case 456: case 494: case 504: case 531: case 1019: case 1021: case 1076: case 1131: case 1206:
this.$ = $$[$0];
break;
case 339:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 343:

     parser.addCommonTableExpressions($$[$0-4]);
   
break;
case 344:

     parser.addCteAliasLocation(_$[$0-4], $$[$0-4]);
     $$[$0-1].alias = $$[$0-4];
     this.$ = $$[$0-1];
   
break;
case 348:

     this.$ = { tableReferenceList : $$[$0] }
   
break;
case 349: case 357:

       parser.suggestTables();
       parser.suggestDatabases({ appendDot: true });
   
break;
case 360:

     this.$ = { valueExpression: $$[$0] };
   
break;
case 361: case 463:

     parser.suggestSelectListAliases();
   
break;
case 362:

     parser.valueExpressionSuggest();
     parser.suggestSelectListAliases();
     parser.suggestGroupBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 363:

     parser.suggestKeywords(['BY']);
     parser.suggestGroupBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 378: case 379: case 385: case 386: case 862: case 1090: case 1133:

     parser.valueExpressionSuggest();
   
break;
case 390:

     parser.valueExpressionSuggest();
     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 391:

     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 395:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-2];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
        parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 396:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-3];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
       parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 397:
this.$ = { joinType: $$[$0] };
break;
case 398:
this.$ = { joinType: $$[$0-1] };
break;
case 399:

     if ($$[$0-2].suggestKeywords) {
       parser.suggestKeywords($$[$0-2].suggestKeywords);
     }
   
break;
case 400:

     if ($$[$0].suggestKeywords) {
       parser.suggestKeywords($$[$0].suggestKeywords);
     }
   
break;
case 403:

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         parser.suggestJoins({
           prependJoin: false,
           joinType: $$[$0-2],
           tables: tables
         })
       }
     }
     parser.suggestTables();
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 408:
this.$ = 'CROSS JOIN';
break;
case 409:
this.$ = 'FULL JOIN';
break;
case 410:
this.$ = 'FULL OUTER JOIN';
break;
case 411:
this.$ = 'INNER JOIN';
break;
case 412:
this.$ = 'JOIN';
break;
case 413:
this.$ = 'LEFT INNER JOIN';
break;
case 414:
this.$ = 'LEFT JOIN';
break;
case 415:
this.$ = 'LEFT OUTER JOIN';
break;
case 416:
this.$ = 'LEFT SEMI JOIN';
break;
case 417:
this.$ = 'OUTER JOIN';
break;
case 418: case 420:
this.$ = 'RIGHT OUTER JOIN';
break;
case 419:
this.$ = 'RIGHT JOIN';
break;
case 421:
this.$ = 'RIGHT SEMI JOIN';
break;
case 422:
this.$ = 'SEMI JOIN';
break;
case 423: case 425: case 426: case 428: case 429: case 430: case 431: case 433: case 434: case 435: case 436:
this.$ = { suggestKeywords: ['JOIN'] };
break;
case 424: case 427: case 432:
this.$ = { suggestKeywords: ['OUTER'] };
break;
case 437:
this.$ = { noJoinCondition: true, suggestKeywords: ['ON'] };
break;
case 438:
this.$ = { valueExpression: $$[$0] };
break;
case 442:

     parser.valueExpressionSuggest();
     parser.suggestJoinConditions({ prependOn: false });
   
break;
case 449:

     parser.suggestKeywords([{ value: '10', weight: 10000 }, { value: '100', weight: 10000 }, { value: '1000', weight: 10000 }, { value: '5000', weight: 10000 }, { value: '10000', weight: 10000 }])
   
break;
case 453:

     if ($$[$0].emptyOrderBy) {
       parser.suggestOrderBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 454:

     parser.suggestKeywords(['BY']);
     parser.suggestOrderBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 458:

     this.$ = { emptyOrderBy: false }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 459: case 460: case 461:
this.$ = { emptyOrderBy: false };
break;
case 462:
this.$ = parser.mergeSuggestKeywords($$[$0]);
break;
case 464:

     this.$ = { emptyOrderBy: true }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 465:
this.$ = { suggestKeywords: ['ASC', 'DESC'] };;
break;
case 468:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     this.$ = { selectList: $$[$0] };
   
break;
case 469:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     this.$ = { selectList: $$[$0-1], tableExpression: $$[$0] }
   
break;
case 470:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     if ($$[$0].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-1]) {
         keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
       }
       parser.suggestKeywords(keywords);
     } else {
       parser.checkForSelectListKeywords($$[$0]);
     }
     if ($$[$0].suggestFunctions) {
       parser.suggestFunctions();
     }
     if ($$[$0].suggestColumns) {
       parser.suggestColumns({ identifierChain: [], source: 'select' });
     }
     if ($$[$0].suggestTables) {
       parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     }
     if ($$[$0].suggestDatabases) {
       parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
     }
     if ($$[$0].suggestAggregateFunctions && (!$$[$0-1] || $$[$0-1] === 'ALL')) {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
   
break;
case 471:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-1] || $$[$0-1] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-1]) {
       keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 472:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
   
break;
case 473:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.selectListNoTableSuggest($$[$0-1], $$[$0-2]);
     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'select';
     }
   
break;
case 474:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2] || $$[$0-2] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-2]) {
       keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 475:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]), _$[$0-2]);
     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 476:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]), _$[$0-3]);
     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 477:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.checkForSelectListKeywords($$[$0-1]);
     var keywords = ['FROM'];
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.suggestTables({ prependFrom: true });
     parser.suggestDatabases({ prependFrom: true, appendDot: true });
   
break;
case 481: case 482:

     parser.addClauseLocation('whereClause', _$[$0-1], $$[$0].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0].limitClausePreceding || _$[$0-1], $$[$0].limitClauseLocation);
   
break;
case 483:

     var keywords = [];

     parser.addClauseLocation('whereClause', _$[$0-3], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-2].limitClausePreceding || _$[$0-3], $$[$0-2].limitClauseLocation);

     if ($$[$0-3]) {
       if (typeof $$[$0-3].tableReferenceList.hasJoinCondition !== 'undefined' && !$$[$0-3].tableReferenceList.hasJoinCondition) {
         keywords.push({ value: 'ON', weight: 3 });
       }
       if ($$[$0-3].suggestKeywords) {
         keywords = parser.createWeightedKeywords($$[$0-3].suggestKeywords, 3);
       }
       if ($$[$0-3].tableReferenceList.suggestJoinConditions) {
         parser.suggestJoinConditions($$[$0-3].tableReferenceList.suggestJoinConditions);
       }
       if ($$[$0-3].tableReferenceList.suggestJoins) {
         parser.suggestJoins($$[$0-3].tableReferenceList.suggestJoins);
       }
       if ($$[$0-3].tableReferenceList.suggestKeywords) {
         keywords = keywords.concat(parser.createWeightedKeywords($$[$0-3].tableReferenceList.suggestKeywords, 3));
       }

       // Lower the weights for 'TABLESAMPLE'
       keywords.forEach(function (keyword) {
         if (keyword.value === 'TABLESAMPLE') {
           keyword.weight = 1.1;
         }
       });

       if ($$[$0-3].tableReferenceList.types) {
         var veKeywords = parser.getValueExpressionKeywords($$[$0-3].tableReferenceList);
         keywords = keywords.concat(veKeywords.suggestKeywords);
         if (veKeywords.suggestColRefKeywords) {
           parser.suggestColRefKeywords(veKeywords.suggestColRefKeywords);
           parser.addColRefIfExists($$[$0-3].tableReferenceList);
         }
       }
     }

     if ($$[$0-1].empty && $$[$0] && $$[$0].joinType.toUpperCase() === 'JOIN') {
       keywords = keywords.concat(['FULL', 'FULL OUTER', 'INNER', 'LEFT', 'LEFT OUTER', 'RIGHT', 'RIGHT OUTER']);
       parser.suggestKeywords(keywords);
       return;
     }

     if ($$[$0-1].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].suggestFilters) {
       parser.suggestFilters($$[$0-1].suggestFilters);
     }
     if ($$[$0-1].suggestGroupBys) {
       parser.suggestGroupBys($$[$0-1].suggestGroupBys);
     }
     if ($$[$0-1].suggestOrderBys) {
       parser.suggestOrderBys($$[$0-1].suggestOrderBys);
     }

     if ($$[$0-1].empty) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }

     keywords = keywords.concat([
       { value: 'FULL JOIN', weight: 1 },
       { value: 'FULL OUTER JOIN', weight: 1 },
       { value: 'INNER JOIN', weight: 1 },
       { value: 'JOIN', weight: 1 },
       { value: 'LEFT JOIN', weight: 1 },
       { value: 'LEFT OUTER JOIN', weight: 1 },
       { value: 'RIGHT JOIN', weight: 1 },
       { value: 'RIGHT OUTER JOIN', weight: 1 }
     ]);
     parser.suggestKeywords(keywords);
  
break;
case 484:

     // A couple of things are going on here:
     // - If there are no SelectConditions (WHERE, GROUP BY, etc.) we should suggest complete join options
     // - If there's an OptionalJoin at the end, i.e. 'SELECT * FROM foo | JOIN ...' we should suggest
     //   different join types
     // - The FromClause could end with a valueExpression, in which case we should suggest keywords like '='
     //   or 'AND' based on type

     if (!$$[$0-1]) {
       parser.addClauseLocation('whereClause', _$[$0-2]);
       parser.addClauseLocation('limitClause', _$[$0-2]);
       return;
     }
     parser.addClauseLocation('whereClause', _$[$0-2], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-1].limitClausePreceding || _$[$0-2], $$[$0-1].limitClauseLocation);
     var keywords = [];

     if ($$[$0-1].suggestColRefKeywords) {
       parser.suggestColRefKeywords($$[$0-1].suggestColRefKeywords);
       parser.addColRefIfExists($$[$0-1]);
     }

     if ($$[$0-1].suggestKeywords && $$[$0-1].suggestKeywords.length) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].cursorAtEnd) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 485:
this.$ = [ $$[$0] ];
break;
case 486:

     $$[$0-2].push($$[$0]);
   
break;
case 488: case 489:

     this.$ = { cursorAtStart : true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 491:

     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 492:

     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 493:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestTables: true, suggestDatabases: true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 495: case 496: case 498:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true,  };
   
break;
case 500:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
       this.$ = { valueExpression: $$[$0-1], alias: $$[$0].alias };
       if (!parser.yy.selectListAliases) {
         parser.yy.selectListAliases = [];
       }
       parser.yy.selectListAliases.push($$[$0-1].function && $$[$0-1].types && $$[$0-1].types.length && $$[$0-1].types[0] === 'UDFREF' ? { name: $$[$0].alias, udfRef: $$[$0-1].function, types: $$[$0-1].types } : { name: $$[$0].alias, types: $$[$0-1].types || ['T'] });
     } else {
       this.$ = { valueExpression: $$[$0-1] }
     }
   
break;
case 501:

     parser.addAsteriskLocation(_$[$0], [{ asterisk: true }]);
     this.$ = { asterisk: true }
   
break;
case 502:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
     }
   
break;
case 503:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.addColumnAliasLocation(_$[$0], $$[$0], _$[$0-2]);
     this.$ = { suggestAggregateFunctions: true };
   
break;
case 505:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'WHERE', weight: 7 }, { value: 'GROUP BY', weight: 6 }, { value: 'HAVING', weight: 5 }, { value: 'ORDER BY', weight: 4 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true, true]);

     if (keywords.length > 0) {
       this.$ = { suggestKeywords: keywords, empty: !$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0] };
     } else {
       this.$ = {};
     }

     this.$.whereClauseLocation = $$[$0-4] ? _$[$0-4] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;

     if (!$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestFilters = { prefix: 'WHERE', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestGroupBys = { prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-1] && !$$[$0]) {
       this.$.suggestOrderBys = { prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
   
break;
case 506:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'where';
     }
   
break;
case 507:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'group by';
     }
   
break;
case 509:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'order by';
     }
   
break;
case 511:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'GROUP BY', weight: 8 }, { value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true]);
     if ($$[$0-5].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-5].suggestKeywords, 1));
     }
     this.$ = parser.getValueExpressionKeywords($$[$0-5], keywords);
     this.$.cursorAtEnd = !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if ($$[$0-5].columnReference) {
       this.$.columnReference = $$[$0-5].columnReference;
     }
     if (!$$[$0-3]) {
       parser.suggestGroupBys({ prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 512:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true]);
     if ($$[$0-4].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-4].suggestKeywords, 8));
     }
     if ($$[$0-4].valueExpression) {
       this.$ = parser.getValueExpressionKeywords($$[$0-4].valueExpression, keywords);
       if ($$[$0-4].valueExpression.columnReference) {
         this.$.columnReference = $$[$0-4].valueExpression.columnReference;
       }
     } else {
       this.$ = { suggestKeywords: keywords };
     }
     this.$.cursorAtEnd = !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 513:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-1], $$[$0]],
       [{ value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true]);
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0-1] && !$$[$0] };
     if (!$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-3], _$[$0-3]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 514:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0]],
       [{ value: 'LIMIT', weight: 3 }],
       [true]);
     if ($$[$0-2].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-2].suggestKeywords, 4));
     }
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0] };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 515:

     this.$ = { suggestKeywords: [], cursorAtEnd: true };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = _$[$0-1];
   
break;
case 526:

     parser.suggestKeywords(['ALL', 'DISTINCT', 'SELECT']);
   
break;
case 527:

     parser.suggestKeywords(['ALL', 'DISTINCT']);
   
break;
case 532:

     if ($$[$0].suggestFilters) {
       parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 533:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS', 'NOT EXISTS']);
     parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 536:

     if (!$$[$0]) {
       $$[$0-1].suggestKeywords = ['OVER'];
     }
   
break;
case 543:

     parser.suggestKeywords(['OVER']);
   
break;
case 552:

     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 553: case 571:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 554:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       if ($$[$0-4].toLowerCase() === 'group_concat') {
         keywords.push('ALL');
       } else {
         keywords.push('DISTINCT');
       }
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 555: case 569:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 556:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords(true);
       if (!$$[$0-2]) {
         if ($$[$0-4].toLowerCase() === 'group_concat') {
           keywords.push('ALL');
         } else {
           keywords.push('DISTINCT');
         }
       }
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
       parser.suggestKeywords(keywords);
     }
     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], $$[$0-1].activePosition);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 565:

     parser.addFunctionArgumentLocations($$[$0-3], [{
       expression: { text: $$[$0-1] },
       location: _$[$0-1]
     }]);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] }
   
break;
case 566: case 572:

     this.$ = { function: $$[$0-2], types: ['UDFREF'] }
   
break;
case 567:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] }
   
break;
case 568:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 570:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-2]) {
         keywords.push('DISTINCT');
       }
       parser.suggestKeywords(keywords);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 573:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 574:

     parser.suggestValueExpressionKeywords($$[$0-2]);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 575:

     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 576:

    this.$ = { function: $$[$0-2], types: ['UDFREF'] }
  
break;
case 577:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     this.$ = {
       function: $$[$0-3],
       expression: $$[$0-1].expressions[$$[$0-1].expressions.length - 1].expression,
       types: ['UDFREF']
     }
   
break;
case 578:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-3], 1);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 579:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-2].expressions);
     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 580:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     parser.applyArgumentTypesToSuggestions($$[$0-3], $$[$0-1].activePosition);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 585:

     var expression = $$[$0-3];
     parser.extractExpressionText(expression, $$[$0-3], $$[$0-2], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-5], [{
       expression: expression,
       location: {
         first_line: _$[$0-3].first_line,
         last_line: _$[$0-1].last_line,
         first_column: _$[$0-3].first_column,
         last_column: _$[$0-1].last_column
       }
     }]);
     this.$ = { types: [ $$[$0-1].toUpperCase() ] }
   
break;
case 586: case 591: case 592: case 1025:
this.$ = { types: [ 'T' ] };
break;
case 587:

     parser.valueExpressionSuggest();
     this.$ = { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 588: case 589:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ] };
   
break;
case 590:
this.$ = { types: [ $$[$0-1].toUpperCase() ] };
break;
case 593:

     parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'AS', weight: 2 }]);
     this.$ =  { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 594:

     parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'AS', weight: 2 }]);
     this.$ = { types: [ 'T' ] };
   
break;
case 595: case 596:

     parser.suggestKeywords(parser.getTypeKeywords());
     this.$ = { types: [ 'T' ] };
   
break;
case 597:

     // We need to handle arbitrary UDFs here instead of inside UserDefinedFunction or there will be a conflict
     // with columnReference for functions like: db.udf(foo)
     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     if ($$[$0-1].lastLoc && $$[$0-1].lastLoc.location) {
       $$[$0-1].lastLoc.type = 'function';
       $$[$0-1].lastLoc.function = fn;
       $$[$0-1].lastLoc.location = {
         first_line: $$[$0-1].lastLoc.location.first_line,
         last_line: $$[$0-1].lastLoc.location.last_line,
         first_column: $$[$0-1].lastLoc.location.first_column,
         last_column: $$[$0-1].lastLoc.location.last_column - 1
       }
       if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
          $$[$0-1].firstLoc.type = 'database';
       } else {
         delete $$[$0-1].lastLoc.identifierChain;
       }
     }
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: fn, expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: fn, types: ['UDFREF'] }
     }
   
break;
case 598:

    parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
    if ($$[$0].expressions && $$[$0].expressions.length) {
      this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
    } else {
      this.$ = { function: $$[$0-1], types: ['UDFREF'] }
    }
  
break;
case 601:
this.$ = { types: ['COLREF'], columnReference: $$[$0].chain };
break;
case 602:
this.$ = { types: [ 'NULL' ], text: $$[$0] };
break;
case 603:

     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     $$[$0-1].lastLoc.type = 'function';
     $$[$0-1].lastLoc.function = fn;
     $$[$0-1].lastLoc.location = {
       first_line: $$[$0-1].lastLoc.location.first_line,
       last_line: $$[$0-1].lastLoc.location.last_line,
       first_column: $$[$0-1].lastLoc.location.first_column,
       last_column: $$[$0-1].lastLoc.location.last_column - 1
     }
     if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
        $$[$0-1].firstLoc.type = 'database';
     } else {
       delete $$[$0-1].lastLoc.identifierChain;
     }
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions(fn, $$[$0].activePosition);
     }
     this.$ = { function: fn, types: ['UDFREF'] };
   
break;
case 604: case 610: case 611:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions($$[$0-1], $$[$0].activePosition);
     }
     this.$ = { function: $$[$0-1], types: ['UDFREF'] };
   
break;
case 607:

     if ($$[$0].suggestKeywords) {
       this.$ = { types: ['COLREF'], columnReference: $$[$0], suggestKeywords: $$[$0].suggestKeywords };
     } else {
       this.$ = { types: ['COLREF'], columnReference: $$[$0] };
     }
   
break;
case 608: case 609:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: $$[$0-1], types: ['UDFREF'] }
     }
   
break;
case 614:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }]
     }
   
break;
case 615:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = $$[$0-3];
   
break;
case 617: case 619:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0], location: _$[$0] }]
     }
   
break;
case 618: case 620:

     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: $$[$0], location: _$[$0] }])
     }
   
break;
case 621:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0-2], location: _$[$0-2] }].concat($$[$0].expressions)
     }
   
break;
case 622:

     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: $$[$0-2], location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 623:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: { text: '' }, location: _$[$0] }])
     }
   
break;
case 624:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: { text: '' }, location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 625:

     parser.suggestValueExpressionKeywords($$[$0-3].expressions[$$[$0-3].expressions.length - 1].expression);
     this.$ = {
       activePosition: $$[$0-3].activePosition,
       expressions: $$[$0-3].expressions.concat($$[$0].expressions)
     }
   
break;
case 626:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 627:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 628:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 629:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-3] }, { expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 637: case 638:

     return parser.yy.result;
   
break;
case 639:

     parser.prepareNewStatement();
   
break;
case 641: case 643: case 645:

     parser.addStatementLocation(_$[$0]);
   
break;
case 644: case 646:

     parser.addStatementLocation(_$[$0-3]);
   
break;
case 650:

     parser.suggestDdlAndDmlKeywords();
   
break;
case 776: case 779: case 867:
this.$ = '';
break;
case 791: case 795:

     parser.yy.correlatedSubQuery = false;
   
break;
case 793: case 798:

     parser.suggestKeywords(['EXISTS']);
   
break;
case 797:

     parser.suggestKeywords(['NOT EXISTS']);
   
break;
case 808: case 810: case 811: case 813:

     parser.suggestKeywords(['<', '<=', '<>', '=', '>', '>=']);
   
break;
case 809: case 812:

     parser.suggestKeywords(['VALUES']);
   
break;
case 842: case 868:

     parser.addTableLocation(_$[$0], [ { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0] } ] };
   
break;
case 843: case 869:

     parser.addDatabaseLocation(_$[$0-2], [ { name: $$[$0-2] } ]);
     parser.addTableLocation(_$[$0], [ { name: $$[$0-2] }, { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0-2] }, { name: $$[$0] } ] };
   
break;
case 845: case 850:

     parser.suggestDatabases();
     this.$ = { identifierChain: [{ name: $$[$0-2] }] };
   
break;
case 846: case 871:

     parser.suggestTablesOrColumns($$[$0-2]);
   
break;
case 847:
this.$ = [{ name: $$[$0] }];
break;
case 848:
this.$ = [{ name: $$[$0-2] }, { name: $$[$0-1] }];
break;
case 849:

     parser.suggestDatabases({ appendDot: true });
   
break;
case 870:

     parser.suggestTables();
     parser.suggestDatabases({ prependDot: true });
   
break;
case 873:
this.$ = { identifierChain: $$[$0-1].identifierChain, alias: $$[$0] };
break;
case 876:

     parser.yy.locations[parser.yy.locations.length - 1].type = 'column';
   
break;
case 877: case 1042:

     parser.addAsteriskLocation(_$[$0], $$[$0-2].concat({ asterisk: true }));
   
break;
case 879:

     this.$ = [ $$[$0].identifier ];
     parser.yy.firstChainLocation = parser.addUnknownLocation($$[$0].location, [ $$[$0].identifier ]);
   
break;
case 880:

     if (parser.yy.firstChainLocation) {
       parser.yy.firstChainLocation.firstInChain = true;
       delete parser.yy.firstChainLocation;
     }
     $$[$0-2].push($$[$0].identifier);
     parser.addUnknownLocation($$[$0].location, $$[$0-2].concat());
   
break;
case 881:

     parser.suggestColumns({
       identifierChain: $$[$0-2]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 882:

     parser.suggestColumns({
       identifierChain: $$[$0-4]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 883:
this.$ = [ $$[$0].identifier ];
break;
case 884:

     $$[$0-2].push($$[$0].identifier);
   
break;
case 886:

     parser.suggestColumns({ identifierChain: $$[$0-2] });
   
break;
case 887:

     parser.suggestColumns({ identifierChain: $$[$0-4] });
   
break;
case 889:
this.$ = { identifier: { name: $$[$0] }, location: _$[$0] };
break;
case 910: case 911:

     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 912: case 937:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 913:

     // verifyType($$[$0], 'NUMBER');
     this.$ = $$[$0];
     $$[$0].types = ['NUMBER'];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 914: case 915: case 916:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 917:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 918:

     this.$ = { types: [ 'BOOLEAN' ] };
     // clear correlated flag after completed sub-query (set by lexer)
     parser.yy.correlatedSubQuery = false;
   
break;
case 920: case 921: case 922: case 923:

     parser.addColRefToVariableIfExists($$[$0-2], $$[$0]);
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 924: case 925: case 926: case 927: case 957: case 1015: case 1016:
this.$ = { types: [ 'BOOLEAN' ] };
break;
case 928:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 929:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 930: case 931:

     // verifyType($$[$0-2], 'BOOLEAN');
     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 932: case 933: case 934:

     // verifyType($$[$0-2], 'NUMBER');
     // verifyType($$[$0], 'NUMBER');
     this.$ = { types: [ 'NUMBER' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 935:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 936:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 938:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 940:

     parser.suggestKeywords(['BETWEEN', 'EXISTS', 'IN', 'LIKE', 'REGEXP', 'RLIKE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 941: case 943:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
break;
case 942:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 944:

     parser.suggestFunctions({ types: [ 'BOOLEAN' ] });
     parser.suggestColumns({ types: [ 'BOOLEAN' ] });
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 945:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0].suggestFilters };
break;
case 946:

     parser.suggestFunctions();
     parser.suggestColumns();
     this.$ = { types: [ 'T' ] };
   
break;
case 947:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 948:

     parser.suggestFunctions({ types: [ 'NUMBER' ] });
     parser.suggestColumns({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ] };
   
break;
case 949:

     parser.suggestKeywords(['FALSE', 'NOT NULL', 'NOT TRUE', 'NOT FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 950:

     parser.suggestKeywords(['FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 951:

     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 952: case 953: case 954:

     parser.suggestKeywords(['NOT']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 955:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-3] ? 'IS NOT DISTINCT FROM' : 'IS DISTINCT FROM');
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 956:

     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 958:

     this.$ = $$[$0-1];
   
break;
case 959:

     parser.valueExpressionSuggest();
     this.$ = { types: ['T'], typeSet: true };
   
break;
case 960:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 961: case 962: case 963:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 964: case 965: case 966: case 967:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0]);
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 968: case 970:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 969:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ] , typeSet: true, endsWithLessThanOrEqual: true };
   
break;
case 971:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, endsWithLessThanOrEqual: $$[$0-1] === '<='  };
   
break;
case 972: case 973: case 974: case 975:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 976:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-3]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 977:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 978: case 979:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
break;
case 980: case 981:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
break;
case 982:

     if ($$[$0-2].types[0] === $$[$0].types[0] && !$$[$0-5].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
   
break;
case 983:

     if ($$[$0-5].types[0] === $$[$0].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 984:

     if ($$[$0-5].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 985:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 986: case 992:

     parser.suggestValueExpressionKeywords($$[$0-1], ['AND']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 987:

     parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 988:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-4].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
   
break;
case 989:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 990:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 991:

     parser.valueExpressionSuggest($$[$0-4], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-4]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 993:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 994: case 996: case 998: case 1000:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, suggestFilters: true };
   
break;
case 995: case 999:

     parser.addColRefIfExists($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 997: case 1001:

     parser.addColRefIfExists($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 1002: case 1003:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 1004: case 1005: case 1006:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 1007: case 1008: case 1009:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 1010: case 1011: case 1012:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 1013:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1014:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
break;
case 1017:

     parser.valueExpressionSuggest(undefined, $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1018:

     parser.valueExpressionSuggest(undefined, $$[$0-1] + ' ' + $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1020:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1022:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1023:

      this.$ = $$[$0];
      this.$.suggestFilters = $$[$0-1].suggestFilters;
    
break;
case 1024:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1026: case 1028:

     $$[$0].position = 1;
   
break;
case 1027:

     $$[$0].position = $$[$0-2].position + 1;
     this.$ = $$[$0];
   
break;
case 1029:

     $$[$0-2].position += 1;
   
break;
case 1030:

     $$[$0-2].position = 1;
   
break;
case 1031:

     $$[$0-4].position += 1;
   
break;
case 1032:

     parser.valueExpressionSuggest();
     $$[$0-2].position += 1;
   
break;
case 1033:

     parser.valueExpressionSuggest();
     $$[$0-4].position += 1;
   
break;
case 1034:

     parser.suggestValueExpressionKeywords($$[$0-3]);
   
break;
case 1035: case 1036:

     parser.valueExpressionSuggest();
     this.$ = { cursorAtStart : true, position: 1 };
   
break;
case 1037: case 1038:

     parser.valueExpressionSuggest();
     this.$ = { position: 2 };
   
break;
case 1041:

     var lastLoc = parser.yy.locations[parser.yy.locations.length - 1];
     if (lastLoc.type !== 'variable') {
       lastLoc.type = 'column';
     }
     // used for function references with db prefix
     var firstLoc = parser.yy.locations[parser.yy.locations.length - $$[$0].length];
     this.$ = { chain: $$[$0], firstLoc: firstLoc, lastLoc: lastLoc }
   
break;
case 1048:

     parser.suggestValues($$[$0]);
   
break;
case 1049:
this.$ = { types: [ 'NUMBER' ], text: $$[$0] };
break;
case 1055: case 1057: case 1058:
this.$ = $$[$0-1] + $$[$0];
break;
case 1056: case 1059:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 1060:
this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 1061:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: "'" + $$[$0] + "'" }
     } else {
       this.$ = { types: [ 'STRING' ] }
     }
   
break;
case 1062:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: '"' + $$[$0] + '"' }
     } else {
       this.$ = { types: [ 'STRING' ], text: '"' + $$[$0] + '"' }
     }
   
break;
case 1063:
this.$ = { types: [ 'BOOLEAN' ], text: $$[$0] };
break;
case 1064:

    this.$ = { partialQuote: '\'', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 1065:

    this.$ = { partialQuote: '"', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 1072:

     this.$ = $$[$0];

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         this.$.suggestJoins = {
           prependJoin: true,
           tables: tables
         };
       }
      }
   
break;
case 1079:

     this.$ = {
       primary: $$[$0-1]
     }
     if ($$[$0-1].identifierChain) {
       if ($$[$0]) {
         $$[$0-1].alias = $$[$0].alias
         parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
       }
       parser.addTablePrimary($$[$0-1]);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     } else if ($$[$0].suggestKeywords) {
       keywords = $$[$0].suggestKeywords;
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 1080:

     this.$ = {
       primary: $$[$0-1]
     };

     if ($$[$0]) {
       this.$.primary.alias = $$[$0].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 1081:

     if ($$[$0]) {
       parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }
   
break;
case 1082:

     if ($$[$0]) {
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias);
     }
   
break;
case 1092:

     parser.pushQueryState();
   
break;
case 1093:

     parser.popQueryState();
   
break;
case 1095:

     if ($$[$0-1]) {
       $$[$0-2].alias = $$[$0-1].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0-1].alias });
       parser.addSubqueryAliasLocation($$[$0-1].location, $$[$0-1].alias, $$[$0-2].identifierChain);
     }
     this.$ = $$[$0-2];
   
break;
case 1098:

     var subQuery = parser.getSubQuery($$[$0]);
     subQuery.columns.forEach(function (column) {
       parser.expandIdentifierChain({ wrapper: column });
       delete column.linked;
     });
     parser.popQueryState(subQuery);
     this.$ = subQuery;
   
break;
case 1115: case 1116: case 1117: case 1118:
this.$ = { alias: $$[$0], location: _$[$0] };
break;
case 1125: case 1126:

     if (parser.yy.result.suggestFunctions) {
       parser.suggestAggregateFunctions();
     }
   
break;
case 1127:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords([{ value: 'PARTITION BY', weight: 2 }, { value: 'ORDER BY', weight: 1 }]);
     } else if (!$$[$0-2]) {
       parser.suggestKeywords(['PARTITION BY']);
     }
   
break;
case 1128:

      if (!$$[$0-1]) {
        parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ORDER BY', weight: 2 }]);
      } else {
        parser.suggestValueExpressionKeywords($$[$0-3]);
      }
    
break;
case 1137:

      // Only allowed in last order by
      delete parser.yy.result.suggestAnalyticFunctions;
    
break;
case 1138:

      var keywords = [];
      if ($$[$0-2].suggestKeywords) {
        keywords = parser.createWeightedKeywords($$[$0-2].suggestKeywords, 2);
      }
      if (!$$[$0]) {
        keywords = keywords.concat([{ value: 'RANGE BETWEEN', weight: 1 }, { value: 'ROWS BETWEEN', weight: 1 }]);
      }
      parser.suggestKeywords(keywords);
    
break;
case 1144:

     parser.suggestKeywords(['BETWEEN']);
   
break;
case 1145:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED PRECEDING']);
     } else if (!$$[$0-1]) {
       parser.suggestKeywords(['AND']);
     }
   
break;
case 1150:

    lexer.popState();
  
break;
case 1151:

    lexer.begin('hdfs');
  
break;
case 1153:

      parser.suggestHdfs({ path: $$[$0-3] });
    
break;
case 1154:

     parser.suggestHdfs({ path: $$[$0-2] });
   
break;
case 1155:

      parser.suggestHdfs({ path: $$[$0-1] });
    
break;
case 1156:

     parser.suggestHdfs({ path: '' });
   
break;
case 1157:

      parser.suggestHdfs({ path: '' });
    
break;
case 1163:

     parser.suggestKeywords(['PRECEDING']);
   
break;
case 1164: case 1169:

     parser.suggestKeywords(['ROW']);
   
break;
case 1168:

     parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED FOLLOWING']);
   
break;
case 1170:

     parser.suggestKeywords(['FOLLOWING']);
   
break;
case 1174:
this.$ = { inValueEdit: true };
break;
case 1175:
this.$ = { inValueEdit: true, cursorAtStart: true };
break;
case 1176: case 1177: case 1178:

     this.$ = { suggestKeywords: ['NOT'] }
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1182: case 1183: case 1184:

     parser.suggestFunctions({ types: [ 'STRING' ] });
     parser.suggestColumns({ types: [ 'STRING' ] });
     this.$ = { types: ['BOOLEAN'] }
   
break;
case 1185:

     this.$ = parser.findCaseType($$[$0-1])
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1186:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1187:
this.$ = parser.findCaseType($$[$0-1]);
break;
case 1188:

     parser.suggestValueExpressionKeywords($$[$0-1], ['END']);
     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1189:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1190:
this.$ = parser.findCaseType($$[$0-2]);
break;
case 1191:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1192:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-2]);
   
break;
case 1193:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     this.$.suggestFilters = $$[$0-1].suggestFilters
   
break;
case 1194:

     parser.valueExpressionSuggest();
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1195:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1196:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = $$[$0-1];
   
break;
case 1197:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ] };
   
break;
case 1200:

     this.$ = { caseTypes: [ $$[$0] ], lastType: $$[$0] }
     parser.extractExpressionText(this.$, $$[$0]);
   
break;
case 1201:

     $$[$0-1].caseTypes.push($$[$0]);
     this.$ = { caseTypes: $$[$0-1].caseTypes, lastType: $$[$0] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1205:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
   
break;
case 1207:

     this.$ = $$[$0]
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1208:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0].suggestFilters };
break;
case 1209:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1210:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0-2].suggestFilters };
break;
case 1211: case 1212:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0].suggestFilters };
break;
case 1213:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1214:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [$$[$0]] };
   
break;
case 1215:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1216:

      parser.valueExpressionSuggest();
      parser.suggestKeywords(['WHEN']);
      this.$ = { caseTypes: [{ types: ['T'] }] };
    
break;
case 1217: case 1219:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1218:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1220:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [$$[$0]], suggestFilters: true };
   
break;
case 1221:

     parser.suggestValueExpressionKeywords($$[$0-1], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1222:

     parser.suggestValueExpressionKeywords($$[$0-2], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1223: case 1224: case 1225: case 1226:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
}
},
table: [o($V0,$V1,{374:1,320:2}),{1:[3]},o($V2,$V3,{375:3,379:4,31:5,106:7,32:8,33:9,34:10,35:11,36:12,37:13,223:14,224:15,4:$V4,9:$V5,92:$V6,297:$V7,382:$V8}),{376:[1,20],380:[1,21]},o($V2,[2,641]),o($V2,[2,647]),o($V2,[2,648]),o($V2,[2,649]),o($V2,[2,20]),o($V2,[2,21]),o($V2,[2,22]),o($V2,[2,23]),o($V2,[2,24]),o($V2,[2,25]),{15:[1,23],224:22,297:$V7},o($V9,$Va,{225:24,315:25,317:26,319:$Vb}),{38:28,45:[1,31],46:[1,32],47:[1,33],50:[1,29],98:[1,30]},o($Vc,[2,243],{148:34,10:35,158:39,45:[1,37],47:[1,38],50:[1,36],159:[1,40]}),{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:43,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,229:41,231:42,285:$Vn,369:44,385:$Vo,395:$Vp},o([15,26,27,28,29,30,109,110,111,112,113,131,136,209,285,310,345,346,347,348,349,350,351,352,353,354,355,357,358,359,363,385,387,388,389,392,395,399,405,408,409,416,423,429,430],$Vq,{298:59,303:$Vr,304:$Vs}),{1:[2,636]},o($V0,$V1,{320:62}),o($V9,$Va,{315:25,317:26,225:63,319:$Vb}),{92:$V6,106:64,223:14,224:15,297:$V7},o($V9,[2,327]),o($V9,[2,517],{317:65,319:$Vb}),o($Vt,[2,519]),o([297,303,304],$V1,{320:66}),{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:67,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,285:$Vn,369:44,385:$Vo,395:$Vp},{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:69,51:68,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,285:$Vn,369:44,385:$Vo,395:$Vp},{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:69,51:70,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,285:$Vn,369:44,385:$Vo,395:$Vp},o($Vu,[2,34]),o($Vu,[2,35]),o($Vu,[2,36]),o($Vu,$Vv,{81:71,357:$Vw}),{11:73,154:[2,247],160:[1,74]},o($Vu,$Vv,{81:75,357:$Vw}),o($Vx,[2,773]),o($Vx,[2,774]),o($Vc,[2,244]),{66:[1,76]},o([15,297],[2,336],{19:[1,77]}),o($Vy,[2,338]),{105:[1,78]},o($Vz,[2,865]),{395:[1,80],436:[1,79]},o($Vz,[2,656]),o($Vz,[2,657]),o($Vz,[2,658]),o($Vz,[2,137]),o($Vz,[2,138]),o($Vz,[2,139]),o($Vz,[2,140]),o($Vz,[2,141]),o($Vz,[2,142]),o($Vz,[2,143]),o($Vz,[2,144]),o($Vz,[2,145]),o($Vz,[2,146]),{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:83,284:113,285:$Vn,299:81,307:82,310:$VE,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},o($V41,[2,479]),o($V41,[2,480]),o($V2,$V3,{379:4,31:5,106:7,32:8,33:9,34:10,35:11,36:12,37:13,223:14,224:15,375:139,4:$V4,9:$V5,92:$V6,297:$V7,382:$V8}),o($V9,[2,325]),{17:[1,140]},o($Vt,[2,520]),{297:$Vq,298:141,303:$Vr,304:$Vs},{40:142,42:[1,143]},{4:[1,155],42:[1,159],52:144,56:145,57:146,62:147,63:148,64:[1,150],66:[1,151],69:[1,149],72:152,73:153,80:[1,154],84:[1,157],95:$V51,97:[1,156],417:$V61},o($V71,[2,842],{389:[1,161]}),{42:[1,166],64:[1,165],73:163,95:$V51,99:162,102:164,105:$V81},{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:168,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,285:$Vn,369:44,385:$Vo,395:$Vp},{416:[1,169]},{154:[1,170]},{154:[2,248]},{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:69,51:171,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,285:$Vn,369:44,385:$Vo,395:$Vp},o($Vc,[2,245]),{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:43,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,231:172,285:$Vn,369:44,385:$Vo,395:$Vp},{15:[1,173]},{395:[1,174]},o($Vz,[2,867]),o($Vt,[2,468],{300:175,235:177,19:[1,176],236:[1,178]}),o($V91,[2,485]),o($V91,$Va1,{369:44,108:48,309:179,489:193,39:194,20:195,193:200,439:201,21:$Vb1,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,105:$Vc1,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,132:$Vd1,133:$Ve1,159:$Vf1,168:$Vg1,285:$Vn,310:$Vh1,385:$Vo,388:$Vi1,393:$Vj1,394:$Vk1,395:$Vp,396:$Vl1,401:$Vm1,405:$VZ,413:$Vn1,415:$Vo1,416:$Vp1,420:$Vq1,421:$Vr1,423:$V11}),o($V91,[2,501]),o($Vs1,[2,909]),{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:202,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:203,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:204,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:205,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},{15:$Vt1,486:206},{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:208,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:210,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,433:$Vu1,439:122,478:98,490:209,500:106,502:114,504:119,505:120,506:123,554:211,556:212},o($Vs1,[2,601],{362:214,15:$Vv1}),{15:$Vv1,362:216},o($Vs1,[2,599]),o($Vs1,[2,600]),o($Vs1,[2,602]),o($Vw1,[2,1041],{389:[1,217]}),{15:[2,581]},{15:[2,582]},{15:[2,583]},{15:[2,584]},o($Vs1,[2,630],{326:218,328:219,371:$Vx1}),{328:221,371:$Vx1},o($Vs1,[2,538]),o($Vs1,[2,1047]),o($Vy1,[2,879]),o($Vz1,[2,546]),o($Vz1,[2,547]),o($Vz1,[2,548]),{15:[1,222]},{15:[1,223]},o($Vs1,[2,1049]),o($Vs1,[2,1050]),o([15,17,19,21,26,27,28,29,30,65,105,109,110,111,112,113,131,132,133,136,159,168,236,244,258,271,272,273,274,275,276,277,278,283,285,289,295,296,310,319,321,376,380,385,388,389,393,394,395,396,397,398,400,401,403,404,405,406,407,410,413,414,415,416,419,420,421,422,423,424,425,426,427,428,432,433,488],[2,889]),{15:[1,224]},{15:[1,225]},{15:[1,226]},o($Vs1,[2,1052]),o($Vs1,[2,1053]),o($Vs1,[2,1061]),o($Vs1,[2,1062]),o($Vs1,[2,1063]),{15:[2,557]},{15:[2,558]},{15:[2,559]},{15:[2,560]},{15:[2,561]},{15:[2,562]},{15:[2,563]},{15:[2,564]},o($Vs1,[2,1054],{389:[1,227]}),{209:[1,228],430:[1,229]},{209:[1,230]},{423:[1,232],436:[1,231]},{405:[1,234],436:[1,233]},o($Vs1,[2,1066]),o($Vs1,[2,1067]),o($V2,[2,642]),o($V9,$Va,{315:25,317:26,225:235,319:$Vb}),{224:236,297:$V7},o($V2,[2,26]),{43:237,44:[1,238],48:[1,239],49:[1,240]},o($V2,[2,39]),o($V2,[2,46]),o($Vu,[2,112],{58:241,71:[1,242]}),o($V2,[2,48]),{42:[1,246],64:[1,243],66:[1,244],72:245},{70:[1,247]},{65:[1,249],71:[1,248]},{67:[1,250]},o($V2,[2,55]),o($V2,[2,57]),{15:$Vv,67:[1,251],81:252,357:$Vw},o($VA1,[2,116]),o($VA1,[2,117]),{67:[1,255],71:[1,254],85:253,357:$VB1,417:$VC1},{15:[1,257]},{44:$VD1,90:$VE1,91:$VF1,93:$VG1,94:$VH1},{94:[1,263]},{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:264,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,285:$Vn,369:44,385:$Vo,395:$Vp},o($V2,[2,118]),o($V2,[2,125]),o($V2,[2,126]),{65:[1,265]},{94:$VH1},{92:$V6,106:266,223:14,224:15,297:$V7},o([44,92,376,380],$VI1,{120:267,146:268,147:$VJ1}),{408:[1,270]},o($Vu,$Vv,{81:271,357:$Vw}),o($VK1,[2,147],{167:272,114:274,68:275,15:$VL1,168:[1,273]}),o($Vy,[2,339]),o($VM1,$VN1,{233:277,517:278}),o($Vz,[2,866]),o($Vt,[2,469]),{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:83,284:113,285:$Vn,307:279,310:$VE,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},o($VO1,[2,529],{305:280,312:281,314:282,321:[1,283]}),{15:$Vt1,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:69,51:291,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,237:284,240:285,264:287,285:$Vn,369:44,385:$Vo,395:$Vp,486:292,507:286,509:288,511:289,512:290},o($V91,[2,500]),o($VP1,[2,1068],{485:293,416:[1,294]}),{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:295,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:296,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:297,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:298,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},{168:$Vg1,396:[1,300],413:[1,299],420:$Vq1,421:$Vr1,489:301},{15:[1,302]},{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:303,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:304,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:305,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:306,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:307,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:308,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},o($Vs1,[2,935]),o($VQ1,[2,1115]),o($VQ1,[2,1116]),{20:310,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:309,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,193:200,285:$Vn,369:44,385:$Vo,395:$Vp,405:$VZ,423:$V11,439:201},{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:311,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:312,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:313,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},o($VR1,[2,781]),o($VR1,[2,782]),o($VS1,[2,910],{489:193,21:$Vb1,132:$Vd1,133:$Ve1,168:$Vg1,310:$Vh1,388:$Vi1,394:$Vk1,401:$Vm1,413:$Vn1,415:$Vo1,420:$Vq1,421:$Vr1}),o($VS1,[2,911],{489:193,21:$Vb1,132:$Vd1,133:$Ve1,168:$Vg1,310:$Vh1,388:$Vi1,394:$Vk1,401:$Vm1,413:$Vn1,415:$Vo1,420:$Vq1,421:$Vr1}),o($VS1,[2,912],{489:193,21:$Vb1,132:$Vd1,133:$Ve1,168:$Vg1,310:$Vh1,388:$Vi1,394:$Vk1,401:$Vm1,413:$Vn1,415:$Vo1,420:$Vq1,421:$Vr1}),o($VT1,[2,913],{489:193}),o($Vs1,[2,918]),o($VM1,$VN1,{517:278,486:292,233:314,512:315,15:$Vt1}),{17:[1,316],21:$Vb1,132:$Vd1,133:$Ve1,159:$Vf1,168:$Vg1,310:$Vh1,388:$Vi1,393:$Vj1,394:$Vk1,396:$Vl1,401:$Vm1,413:$Vn1,415:$Vo1,416:$Vp1,420:$Vq1,421:$Vr1,489:193},o($Vs1,[2,937]),{21:$Vb1,132:$Vd1,133:$Ve1,159:$Vf1,168:$Vg1,310:$Vh1,388:$Vi1,393:$Vj1,394:$Vk1,396:$Vl1,401:$Vm1,413:$Vn1,415:$Vo1,416:$Vp1,420:$Vq1,421:$Vr1,433:$Vu1,489:193,490:317,554:211,556:212},{406:[1,319],407:[1,318],433:$Vu1,556:320},o($VU1,[2,1200]),{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:321,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},o($Vs1,[2,597]),{15:$VA,17:[1,322],22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:324,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,343:323,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},o($Vs1,[2,598]),{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:326,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,285:$Vn,310:[1,325],369:44,385:$Vo,395:$Vp},o($Vs1,[2,536]),o($Vs1,[2,631]),{15:[1,329],26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:327,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,285:$Vn,369:44,372:328,385:$Vo,395:$Vp},o($Vs1,[2,537]),{15:$VA,17:[1,330],22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:324,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,343:331,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},{15:$VA,17:[1,333],22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:332,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},o([15,17,26,27,28,29,30,109,110,111,112,113,131,136,209,285,345,346,347,348,349,350,351,352,353,354,355,357,358,359,363,385,387,388,389,392,395,399,405,408,409,416,423,429,430],$Vq,{298:334,303:$Vr,304:$Vs}),o($VV1,$Vq,{298:337,17:[1,336],303:$Vr,304:$Vs,310:[1,335]}),o($VV1,$Vq,{298:338,17:[1,339],303:$Vr,304:$Vs}),o($Vs1,[2,1055],{209:[1,340],430:[1,341]}),o($Vs1,[2,1057]),{209:[1,342]},o($Vs1,[2,1058]),{423:[1,343]},o($VW1,[2,776]),{405:[1,344]},o($VX1,[2,779]),o($V9,[2,326]),o($Vt,[2,525]),{14:345,15:$VY1},{20:347,193:200,405:$VZ,423:$V11,439:201},{15:[2,37]},{15:[2,38]},{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:348,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,285:$Vn,369:44,385:$Vo,395:$Vp},o($Vu,[2,113]),{65:[1,349]},{67:[1,350]},o($V2,[2,56]),{44:$VD1,90:$VE1,91:$VF1,93:$VG1},o($V2,[2,51]),{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:351,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,285:$Vn,369:44,385:$Vo,395:$Vp},{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:352,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,285:$Vn,369:44,385:$Vo,395:$Vp},{15:$VL1,68:353},{15:$VL1,68:354},{15:[1,356],82:355},{63:357,417:$V61},{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:358,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,285:$Vn,369:44,385:$Vo,395:$Vp},{15:[1,360],87:359},{408:[1,361]},{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:364,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,285:$Vn,369:44,385:$Vo,395:$Vp,454:362,472:363},{25:365,26:$VZ1,27:$V_1,28:$V$1,29:$V02,30:$V12},{20:371,193:200,405:$VZ,423:$V11,439:201},{20:372,193:200,405:$VZ,423:$V11,439:201},{14:373,15:$VY1},{14:374,15:$VY1},{15:$VC1,85:375,357:$VB1},o($V71,[2,843]),{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:376,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,285:$Vn,369:44,385:$Vo,395:$Vp},o($V2,[2,134]),o([92,376,380],$V22,{149:377,151:378,44:$V32}),o($V42,[2,213]),{20:380,193:200,405:$VZ,423:$V11,439:201},o($V52,[2,795]),{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:381,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,285:$Vn,369:44,385:$Vo,395:$Vp},o($V2,[2,256]),{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:69,51:382,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,285:$Vn,369:44,385:$Vo,395:$Vp},o([44,94,105,179,198,203,205,376,380],$VI1,{146:268,120:384,147:$VJ1,162:[1,383]}),o($VK1,[2,148]),{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:387,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,115:385,118:386,285:$Vn,369:44,385:$Vo,395:$Vp},{17:[1,388]},{92:$V6,106:396,223:14,224:15,297:$V7,519:389,521:390,523:391,525:392,527:393,529:394,531:395},o($V91,[2,486]),o($Vt,[2,481]),o($V62,[2,358],{242:397,243:398,244:[1,399]}),o($VO1,[2,530]),{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:401,284:113,285:$Vn,322:400,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},o([17,244,258,283,289,319,321,376,380],[2,348],{19:[1,402]}),o($V72,[2,351]),o($V72,[2,1070]),o($V72,[2,1072],{261:403,263:404,271:$V82,272:$V92,273:$Va2,274:$Vb2,275:$Vc2,276:$Vd2,277:$Ve2,278:$Vf2}),o($V72,[2,1073]),o($Vg2,$Va1,{369:44,108:48,39:194,20:195,193:200,439:201,309:413,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,105:$Vc1,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,285:$Vn,385:$Vo,395:$Vp,405:$VZ,423:$V11}),o($Vg2,$Va1,{369:44,108:48,39:194,20:195,193:200,439:201,309:414,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,105:$Vc1,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,285:$Vn,385:$Vo,395:$Vp,405:$VZ,423:$V11}),o($Vh2,[2,1084]),o($Vh2,[2,1086]),{304:[1,418],363:[1,415],409:[1,417],429:[1,416]},o($VP1,[2,1069]),o($Vi2,[2,920],{489:193,168:$Vg1,310:$Vh1,388:$Vi1,394:$Vk1,413:$Vn1,415:$Vo1,420:$Vq1,421:$Vr1}),o($Vi2,[2,921],{489:193,168:$Vg1,310:$Vh1,388:$Vi1,394:$Vk1,413:$Vn1,415:$Vo1,420:$Vq1,421:$Vr1}),o($Vi2,[2,922],{489:193,168:$Vg1,310:$Vh1,388:$Vi1,394:$Vk1,413:$Vn1,415:$Vo1,420:$Vq1,421:$Vr1}),o($Vi2,[2,923],{489:193,168:$Vg1,310:$Vh1,388:$Vi1,394:$Vk1,413:$Vn1,415:$Vo1,420:$Vq1,421:$Vr1}),{15:[1,419]},{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:420,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},o($Vs1,[2,936]),o($VM1,$VN1,{369:44,108:48,360:85,361:93,356:94,324:95,22:96,478:98,325:103,327:104,329:105,500:106,59:107,336:108,337:109,338:110,284:113,502:114,39:115,342:116,504:119,505:120,193:121,439:122,506:123,517:278,233:421,487:422,253:423,15:$VA,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,209:$VD,285:$Vn,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,357:$VQ,358:$VR,359:$VS,363:$VT,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31}),{21:$Vb1,132:$Vd1,133:$Ve1,159:$Vf1,168:$Vg1,310:$Vh1,388:$Vi1,393:$Vj1,394:$Vk1,396:$Vl1,401:$Vm1,413:$Vn1,415:$Vo1,416:$Vp1,420:$Vq1,421:$Vr1,488:[1,424],489:193},o($Vj2,[2,930],{489:193,21:$Vb1,132:$Vd1,133:$Ve1,168:$Vg1,310:$Vh1,388:$Vi1,394:$Vk1,396:$Vl1,401:$Vm1,413:$Vn1,415:$Vo1,416:$Vp1,420:$Vq1,421:$Vr1}),o($Vj2,[2,931],{489:193,21:$Vb1,132:$Vd1,133:$Ve1,168:$Vg1,310:$Vh1,388:$Vi1,394:$Vk1,396:$Vl1,401:$Vm1,413:$Vn1,415:$Vo1,416:$Vp1,420:$Vq1,421:$Vr1}),o($VT1,[2,932],{489:193,168:$Vg1,413:$Vn1,415:$Vo1,420:$Vq1,421:$Vr1}),o($VT1,[2,933],{489:193,168:$Vg1,413:$Vn1,415:$Vo1,420:$Vq1,421:$Vr1}),o($VT1,[2,934],{489:193,168:$Vg1,413:$Vn1,415:$Vo1,420:$Vq1,421:$Vr1}),o($VQ1,[2,1117]),o($VQ1,[2,1118]),o($VT1,[2,1176],{489:193}),o($VT1,[2,1177],{489:193}),o($VT1,[2,1178],{489:193}),{17:[1,425]},{17:$Va1,20:195,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:194,105:$Vc1,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,193:200,285:$Vn,309:426,369:44,385:$Vo,395:$Vp,405:$VZ,423:$V11,439:201},o($Vs1,[2,919]),o($Vs1,[2,938]),o($Vs1,[2,1185]),{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:427,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},o($VU1,[2,1201]),{21:$Vb1,132:$Vd1,133:$Ve1,159:$Vf1,168:$Vg1,310:$Vh1,388:$Vi1,393:$Vj1,394:$Vk1,396:$Vl1,401:$Vm1,413:$Vn1,415:$Vo1,416:$Vp1,420:$Vq1,421:$Vr1,426:[1,428],489:193},o($Vs1,[2,612]),{17:[1,429],19:$Vk2},o($Vl2,[2,617],{489:193,21:$Vb1,132:$Vd1,133:$Ve1,159:$Vf1,168:$Vg1,310:$Vh1,388:$Vi1,393:$Vj1,394:$Vk1,396:$Vl1,401:$Vm1,413:$Vn1,415:$Vo1,416:$Vp1,420:$Vq1,421:$Vr1}),o($Vw1,[2,1042]),o($Vy1,[2,880]),o($Vs1,[2,633]),o($Vs1,[2,634]),o($Vm2,[2,1129],{533:431,537:432,417:[1,433]}),{371:[2,576]},{17:[1,434],19:$Vk2},{21:$Vb1,105:[1,435],132:$Vd1,133:$Ve1,159:$Vf1,168:$Vg1,310:$Vh1,388:$Vi1,393:$Vj1,394:$Vk1,396:$Vl1,401:$Vm1,413:$Vn1,415:$Vo1,416:$Vp1,420:$Vq1,421:$Vr1,489:193},o($Vs1,[2,586]),{15:$VA,17:[1,436],22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:324,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,343:437,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},{17:[1,438]},o($Vz1,[2,566]),{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:324,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,343:439,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:440,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},o($Vz1,[2,572]),o($Vs1,[2,1056]),{209:[1,441]},o($Vs1,[2,1059]),o($VW1,[2,775]),o($VX1,[2,778]),o($V2,[2,31]),{16:442,18:443,20:444,193:200,405:$VZ,423:$V11,439:201},o($V2,[2,32]),{60:445,113:$Vn2,121:446,122:447,123:448,124:449,125:450,126:451,127:452,131:$Vo2,136:$Vp2,397:$Vq2,398:$Vr2,400:$Vs2,403:$Vt2,404:$Vu2,410:$Vv2,414:$Vw2,424:$Vx2,425:$Vy2,427:$Vz2,428:$VA2,432:$VB2},{63:468,417:$V61},{15:$VL1,68:469},{65:[1,470]},o($V2,[2,53]),o($V2,[2,54]),o($V2,[2,79]),o($V2,[2,80]),{63:472,145:471,417:$V61},o($V2,[2,114],{86:473,96:[1,474]}),o($V2,[2,87]),o($V2,[2,88]),{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:476,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,143:475,285:$Vn,369:44,385:$Vo,395:$Vp},o([15,417],[2,791]),{17:[1,477],19:[1,478]},o($Vl2,[2,854]),{21:[1,479]},o($V2,[2,96]),o($VC2,[2,15]),o($VC2,[2,16]),o($VC2,[2,17]),o($VC2,[2,18]),o($VC2,[2,19]),o($V2,[2,97]),o($V2,[2,98],{92:[1,480]}),o($V2,[2,100]),o($V2,[2,105]),{15:[1,482],23:481},o($V2,[2,127]),o($V2,[2,227],{150:483,153:484,92:[1,485]}),o($VD2,[2,225]),{20:486,193:200,405:$VZ,423:$V11,439:201},o($V42,[2,214]),{105:[1,487]},{162:[1,488]},{26:$VE2,28:$VF2,29:$VG2,109:$VH2,110:$VI2,169:489},o([44,94,105,179,198,205,376,380],$VJ2,{174:495,202:496,203:$VK2}),{17:[1,498],19:[1,499]},o($Vl2,[2,151]),{60:500,113:$Vn2,121:446,122:447,123:448,124:449,125:450,126:451,127:452,131:$Vo2,136:$Vp2,397:$Vq2,398:$Vr2,400:$Vs2,403:$Vt2,404:$Vu2,410:$Vv2,414:$Vw2,424:$Vx2,425:$Vy2,427:$Vz2,428:$VA2,432:$VB2},o($Vy,[2,344]),{17:[2,1098]},{17:[2,1100]},{17:[2,1102]},{17:[2,1104]},{17:[2,1106]},{17:[2,1108]},{17:[2,1110]},{17:[2,1112]},o($VL2,[2,387],{256:501,257:502,258:[1,503]}),o($V62,[2,359]),{192:[1,504]},o($VO1,[2,531]),o($VO1,[2,534],{489:193,21:$Vb1,132:$Vd1,133:$Ve1,159:$Vf1,168:$Vg1,310:$Vh1,388:$Vi1,393:$Vj1,394:$Vk1,396:$Vl1,401:$Vm1,413:$Vn1,415:$Vo1,416:$Vp1,420:$Vq1,421:$Vr1}),{15:$Vt1,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:69,51:291,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,240:505,264:287,285:$Vn,369:44,385:$Vo,395:$Vp,486:292,507:286,509:288,511:289,512:290},o($V72,[2,1076],{263:506,271:$V82,272:$V92,273:$Va2,274:$Vb2,275:$Vc2,276:$Vd2,277:$Ve2,278:$Vf2}),{15:$Vt1,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:69,51:291,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,264:507,285:$Vn,369:44,385:$Vo,395:$Vp,486:292,511:289,512:290},{272:[1,508]},{272:[1,509],274:[1,510]},{272:[1,511]},o($V52,[2,412]),{272:[1,513],274:[1,514],275:[1,512],277:[1,515]},{272:[1,516]},{272:[1,518],274:[1,519],275:[1,517],277:[1,520]},{272:[1,521]},o($Vg2,[2,1079]),o($Vg2,[2,1080]),o($Vs1,[2,914]),o($Vs1,[2,915]),o($Vs1,[2,916]),{236:[1,522]},o($VM1,$VN1,{369:44,108:48,360:85,361:93,356:94,324:95,22:96,478:98,325:103,327:104,329:105,500:106,59:107,336:108,337:109,338:110,284:113,502:114,39:115,342:116,504:119,505:120,193:121,439:122,506:123,517:278,253:423,233:523,487:524,15:$VA,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,209:$VD,285:$Vn,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,357:$VQ,358:$VR,359:$VS,363:$VT,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31}),{21:$Vb1,132:$Vd1,133:$Ve1,159:$Vf1,168:$Vg1,310:$Vh1,388:$Vi1,393:$Vj1,394:$Vk1,396:$Vl1,401:$Vm1,413:$Vn1,415:$Vo1,416:$Vp1,420:$Vq1,421:$Vr1,488:[1,525],489:193},{17:[1,526]},{17:[1,527],19:$VM2},o($VN2,[2,1026],{489:193,21:$Vb1,132:$Vd1,133:$Ve1,159:$Vf1,168:$Vg1,310:$Vh1,388:$Vi1,393:$Vj1,394:$Vk1,396:$Vl1,401:$Vm1,413:$Vn1,415:$Vo1,416:$Vp1,420:$Vq1,421:$Vr1}),{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:529,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},o($VO2,[2,1094]),{17:[1,530]},{21:$Vb1,132:$Vd1,133:$Ve1,159:$Vf1,168:$Vg1,310:$Vh1,388:$Vi1,393:$Vj1,394:$Vk1,396:$Vl1,401:$Vm1,407:[1,531],413:$Vn1,415:$Vo1,416:$Vp1,420:$Vq1,421:$Vr1,489:193},{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:532,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},o($Vs1,[2,613]),{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:533,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},{17:[2,1135],288:535,289:$VP2,534:534},o($Vm2,[2,1130]),{192:[1,537]},{371:[2,577]},{121:538,397:$Vq2,398:$Vr2,400:$Vs2,403:$Vt2,404:$Vu2,410:$Vv2,414:$Vw2,424:$Vx2,425:$Vy2,427:$Vz2,428:$VA2,432:$VB2},o($Vz1,[2,552]),{17:[1,539],19:$Vk2},o($Vz1,[2,565]),{17:[1,540],19:$Vk2},{17:[1,541],21:$Vb1,132:$Vd1,133:$Ve1,159:$Vf1,168:$Vg1,310:$Vh1,388:$Vi1,393:$Vj1,394:$Vk1,396:$Vl1,401:$Vm1,413:$Vn1,415:$Vo1,416:$Vp1,420:$Vq1,421:$Vr1,489:193},o($Vs1,[2,1060]),{17:[1,542],19:[1,543]},o($Vl2,[2,9]),{21:[1,544]},{61:[1,545]},o($VQ2,[2,164]),o($VQ2,[2,165]),o($VQ2,[2,166]),o($VQ2,[2,167]),o($VQ2,[2,168]),o($VQ2,[2,169]),o($VQ2,[2,170]),o($VQ2,[2,892]),o($VQ2,[2,893]),o($VQ2,$VR2,{483:546,15:$VS2}),o($VQ2,[2,906],{484:548,15:[1,549]}),o($VQ2,[2,896]),o($VQ2,[2,897]),o($VQ2,[2,898]),o($VQ2,[2,899]),o($VQ2,[2,900]),o($VQ2,[2,901]),o($VQ2,[2,902]),o($VQ2,$VR2,{483:550,15:$VS2}),{132:[1,551]},{132:[1,552]},{132:[1,553]},o($V2,[2,49]),o($V2,[2,50]),{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:554,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,285:$Vn,369:44,385:$Vo,395:$Vp},{17:[1,555],63:556,417:$V61},o($VT2,[2,210]),o($V2,[2,86]),o($V2,[2,115]),{17:[1,557],19:$VU2},o($Vl2,$VV2),o([17,42,64,66,96,376,380,417],[2,805]),{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:364,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,285:$Vn,369:44,385:$Vo,395:$Vp,472:559},{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:560,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},{93:[1,561]},o($V2,[2,106]),{20:563,24:562,193:200,405:$VZ,423:$V11,439:201},o($V2,[2,215]),o($V2,[2,228]),{48:[1,564]},o($VD2,[2,226]),{20:565,193:200,405:$VZ,423:$V11,439:201},{26:$VE2,28:$VF2,29:$VG2,109:$VH2,110:$VI2,169:566},o($VW2,[2,292],{173:567,200:568,201:[1,569]}),o($VX2,[2,262]),o($VX2,[2,263]),o($VX2,[2,264]),o($VX2,[2,265]),o($VX2,[2,266]),o([44,94,105,179,198,376,380],$VY2,{175:570,204:571,205:$VZ2}),o($V_2,[2,296]),{192:[1,573]},o($VK1,[2,149]),{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:387,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,118:574,285:$Vn,369:44,385:$Vo,395:$Vp},o($Vl2,$VI1,{146:268,120:575,147:$VJ1}),o($V$2,[2,450],{287:576,288:577,289:$VP2}),o($VL2,[2,388]),{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:578,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,245:579,253:580,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},o($V72,[2,352]),{15:$Vt1,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:69,51:291,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,264:581,285:$Vn,369:44,385:$Vo,395:$Vp,486:292,511:289,512:290},o($V03,$V13,{265:582,279:$V23}),o($V52,[2,408]),o($V52,[2,409]),{272:[1,584]},o($V52,[2,411]),{272:[1,585]},o($V52,[2,414]),{272:[1,586]},{272:[1,587]},o($V52,[2,417]),{272:[1,588]},o($V52,[2,419]),{272:[1,589]},{272:[1,590]},o($V52,[2,422]),{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:591,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},{17:[1,592]},{17:[1,593],19:$VM2},{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:594,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},o($Vs1,[2,926]),o($Vs1,[2,927]),{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:595,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},o([17,19,26,27,28,29,30,105,109,110,111,112,113,159,236,244,258,271,272,273,274,275,276,277,278,283,285,289,295,296,319,321,376,380,385,393,395,396,405,406,407,419,422,423,426,433,488],[2,929],{489:193,21:$Vb1,132:$Vd1,133:$Ve1,168:$Vg1,310:$Vh1,388:$Vi1,394:$Vk1,401:$Vm1,413:$Vn1,415:$Vo1,416:$Vp1,420:$Vq1,421:$Vr1}),o($VO2,[2,1095]),o($Vs1,[2,1186]),o($VU1,[2,1207],{489:193,21:$Vb1,132:$Vd1,133:$Ve1,159:$Vf1,168:$Vg1,310:$Vh1,388:$Vi1,393:$Vj1,394:$Vk1,396:$Vl1,401:$Vm1,413:$Vn1,415:$Vo1,416:$Vp1,420:$Vq1,421:$Vr1}),o($Vl2,[2,618],{489:193,21:$Vb1,132:$Vd1,133:$Ve1,159:$Vf1,168:$Vg1,310:$Vh1,388:$Vi1,393:$Vj1,394:$Vk1,396:$Vl1,401:$Vm1,413:$Vn1,415:$Vo1,416:$Vp1,420:$Vq1,421:$Vr1}),{17:[1,596]},{17:[2,1140],419:[1,601],422:[1,600],538:597,540:598,541:599},{192:[1,602]},{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:423,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,487:603,500:106,502:114,504:119,505:120,506:123},{17:[1,604]},o($Vz1,[2,553]),o($Vz1,[2,567]),o($Vz1,[2,571]),o($VW2,[2,8]),{18:605,20:444,193:200,405:$VZ,423:$V11,439:201},{22:606,193:121,209:$VD,284:113,389:$VW,405:$VZ,409:$V$,423:$V11,429:$V21,430:$V31,439:122,500:106,502:114,504:119,505:120,506:123},o($V2,[2,47]),o($VQ2,[2,894]),{209:[1,607]},o($VQ2,[2,895]),{209:[1,608]},o($VQ2,[2,903]),{60:609,113:$Vn2,121:446,122:447,123:448,124:449,125:450,126:451,127:452,131:$Vo2,133:[1,610],136:$Vp2,397:$Vq2,398:$Vr2,400:$Vs2,403:$Vt2,404:$Vu2,410:$Vv2,414:$Vw2,424:$Vx2,425:$Vy2,427:$Vz2,428:$VA2,432:$VB2},{121:611,133:[1,612],397:$Vq2,398:$Vr2,400:$Vs2,403:$Vt2,404:$Vu2,410:$Vv2,414:$Vw2,424:$Vx2,425:$Vy2,427:$Vz2,428:$VA2,432:$VB2},{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:616,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,133:[1,614],137:613,139:615,285:$Vn,369:44,385:$Vo,395:$Vp},o($V2,[2,52]),o($V2,[2,209]),o($VT2,[2,211]),o($V2,[2,201]),{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:617,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,285:$Vn,369:44,385:$Vo,395:$Vp},o($Vl2,[2,855]),o($Vl2,[2,860],{489:193,21:$Vb1,132:$Vd1,133:$Ve1,159:$Vf1,168:$Vg1,310:$Vh1,388:$Vi1,393:$Vj1,394:$Vk1,396:$Vl1,401:$Vm1,413:$Vn1,415:$Vo1,416:$Vp1,420:$Vq1,421:$Vr1}),{14:618,15:$VY1},{17:[1,619],19:[1,620]},o($Vl2,[2,13]),{14:621,15:$VY1},o($V2,[2,249],{155:622,161:623,162:[1,624]}),o([44,94,198,376,380],$V33,{170:625,178:626,179:$V43}),o([44,94,105,147,205,376,380],$VJ2,{202:496,174:628,203:$VK2}),o($VW2,[2,293]),{14:629,15:$VY1},o($V53,$V33,{178:626,170:630,179:$V43}),o($V63,[2,300]),{192:[1,631]},{15:[1,633],68:632},o($Vl2,[2,152]),o($Vl2,[2,161]),o($Vt,[2,443],{281:634,282:635,283:[1,636]}),o($V$2,[2,451]),o($VL2,[2,389],{489:193,21:$Vb1,132:$Vd1,133:$Ve1,159:$Vf1,168:$Vg1,310:$Vh1,388:$Vi1,393:$Vj1,394:$Vk1,396:$Vl1,401:$Vm1,413:$Vn1,415:$Vo1,416:$Vp1,420:$Vq1,421:$Vr1}),o($V62,[2,360],{19:[1,637]}),o($V73,[2,375],{489:193,21:$Vb1,132:$Vd1,133:$Ve1,159:$Vf1,168:$Vg1,310:$Vh1,388:$Vi1,393:$Vj1,394:$Vk1,396:$Vl1,401:$Vm1,413:$Vn1,415:$Vo1,416:$Vp1,420:$Vq1,421:$Vr1}),o($V03,$V13,{265:638,279:$V23}),o($V03,[2,395]),{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:639,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},o($V52,[2,410]),o($V52,[2,413]),o($V52,[2,415]),o($V52,[2,416]),o($V52,[2,418]),o($V52,[2,420]),o($V52,[2,421]),o($VT1,[2,917],{489:193}),o($Vs1,[2,924]),o($Vs1,[2,925]),o($VS1,[2,928],{489:193,21:$Vb1,132:$Vd1,133:$Ve1,168:$Vg1,310:$Vh1,388:$Vi1,394:$Vk1,401:$Vm1,413:$Vn1,415:$Vo1,420:$Vq1,421:$Vr1}),o($VN2,[2,1027],{489:193,21:$Vb1,132:$Vd1,133:$Ve1,159:$Vf1,168:$Vg1,310:$Vh1,388:$Vi1,393:$Vj1,394:$Vk1,396:$Vl1,401:$Vm1,413:$Vn1,415:$Vo1,416:$Vp1,420:$Vq1,421:$Vr1}),o($Vs1,[2,1124]),{17:[2,1136]},{17:[2,1141]},{396:[1,640],545:[1,641]},o($V83,[2,1158]),o($V83,[2,1159]),{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:644,284:113,285:$Vn,290:642,293:643,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},o($Vm2,[2,1131],{19:$VM2}),o($Vs1,[2,585]),o($Vl2,[2,10]),o($Vl2,[2,11]),{17:[1,645]},{17:[1,646],19:[1,647]},{133:[1,648]},o($VQ2,[2,175]),{19:[1,649]},o($VQ2,[2,179]),{19:[1,651],133:[1,650]},o($VQ2,[2,185]),o($V93,[2,187]),{142:[1,652]},o($Vl2,[2,204]),o($V2,[2,99]),o($V2,[2,12]),{20:653,193:200,405:$VZ,423:$V11,439:201},o($V2,[2,229]),o($V2,[2,231]),o($V2,[2,250]),{163:654,164:[1,655],165:[1,656],166:[1,657]},o([44,94,376,380],$Va3,{171:658,197:659,198:$Vb3}),o($V53,[2,268]),{180:[1,661]},o([44,94,105,147,376,380],$VY2,{204:571,175:662,205:$VZ2}),o($VW2,[2,294]),o($VC2,$Va3,{197:659,171:663,198:$Vb3}),{15:[1,665],206:664},o($V_2,[2,297]),{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:667,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,115:385,118:386,143:666,285:$Vn,369:44,385:$Vo,395:$Vp},o($Vt,[2,505]),o($Vt,[2,444]),{209:$VD,284:668,285:[1,669],389:$VW,430:$V31,504:119,505:120},{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:670,284:113,285:$Vn,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},o($V03,[2,396]),o($V03,[2,438],{489:193,21:$Vb1,132:$Vd1,133:$Ve1,159:$Vf1,168:$Vg1,310:$Vh1,388:$Vi1,393:$Vj1,394:$Vk1,396:$Vl1,401:$Vm1,413:$Vn1,415:$Vo1,416:$Vp1,420:$Vq1,421:$Vr1}),o($Vc3,$Vd3,{542:671}),o($Vc3,$Vd3,{542:672}),o([17,283,319,376,380,419,422],[2,452],{19:[1,673]}),o($Ve3,[2,455]),o($Ve3,$Vf3,{489:193,221:674,21:$Vb1,132:$Vd1,133:$Ve1,159:$Vf1,168:$Vg1,295:$Vg3,296:$Vh3,310:$Vh1,388:$Vi1,393:$Vj1,394:$Vk1,396:$Vl1,401:$Vm1,413:$Vn1,415:$Vo1,416:$Vp1,420:$Vq1,421:$Vr1}),o($VQ2,[2,905]),o($VQ2,[2,907]),{209:[1,677]},o($VQ2,[2,174]),{60:678,113:$Vn2,121:446,122:447,123:448,124:449,125:450,126:451,127:452,131:$Vo2,136:$Vp2,397:$Vq2,398:$Vr2,400:$Vs2,403:$Vt2,404:$Vu2,410:$Vv2,414:$Vw2,424:$Vx2,425:$Vy2,427:$Vz2,428:$VA2,432:$VB2},o($VQ2,[2,184]),{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:616,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,139:679,285:$Vn,369:44,385:$Vo,395:$Vp},{60:680,113:$Vn2,121:446,122:447,123:448,124:449,125:450,126:451,127:452,131:$Vo2,136:$Vp2,397:$Vq2,398:$Vr2,400:$Vs2,403:$Vt2,404:$Vu2,410:$Vv2,414:$Vw2,424:$Vx2,425:$Vy2,427:$Vz2,428:$VA2,432:$VB2},o($Vl2,[2,14]),{20:681,193:200,405:$VZ,423:$V11,439:201},o($Vi3,[2,253]),o($Vi3,[2,254]),o($Vi3,[2,255]),o([44,376,380],$Vj3,{172:682,199:683,94:$Vk3}),o($VC2,[2,287]),{105:[1,685]},{181:686,184:[1,687]},o([94,105,147,376,380],$V22,{151:378,149:688,44:$V32}),o($Vl3,$V22,{151:378,149:689,44:$V32}),{207:690,208:[2,309],214:[1,691]},{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:693,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,285:$Vn,369:44,385:$Vo,395:$Vp,466:692},{17:[1,694],19:$VU2},o($Vl2,$VV2,{121:446,122:447,123:448,124:449,125:450,126:451,127:452,60:500,113:$Vn2,131:$Vo2,136:$Vp2,397:$Vq2,398:$Vr2,400:$Vs2,403:$Vt2,404:$Vu2,410:$Vv2,414:$Vw2,424:$Vx2,425:$Vy2,427:$Vz2,428:$VA2,432:$VB2}),o($Vt,[2,445],{19:[1,695]}),o($Vt,[2,447],{19:[1,696]}),o($V73,[2,376],{489:193,21:$Vb1,132:$Vd1,133:$Ve1,159:$Vf1,168:$Vg1,310:$Vh1,388:$Vi1,393:$Vj1,394:$Vk1,396:$Vl1,401:$Vm1,413:$Vn1,415:$Vo1,416:$Vp1,420:$Vq1,421:$Vr1}),o($Vm3,$Vn3,{543:697,553:698,209:$Vo3,402:$Vp3,545:$Vq3}),o($Vm3,$Vn3,{553:698,543:702,209:$Vo3,402:$Vp3,545:$Vq3}),{15:$VA,22:96,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:107,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,131:$VB,136:$VC,193:121,209:$VD,253:644,284:113,285:$Vn,293:703,324:95,325:103,327:104,329:105,336:108,337:109,338:110,342:116,345:$VF,346:$VG,347:$VH,348:$VI,349:$VJ,350:$VK,351:$VL,352:$VM,353:$VN,354:$VO,355:$VP,356:94,357:$VQ,358:$VR,359:$VS,360:85,361:93,363:$VT,369:44,385:$Vo,387:$VU,388:$VV,389:$VW,392:$VX,395:$Vp,399:$VY,405:$VZ,408:$V_,409:$V$,416:$V01,423:$V11,429:$V21,430:$V31,439:122,478:98,500:106,502:114,504:119,505:120,506:123},o($Ve3,[2,462]),o($Ve3,[2,466]),o($Ve3,[2,467]),{17:[1,704]},{133:[1,705]},o($V93,[2,188]),o($V93,$VI1,{146:268,120:706,147:$VJ1}),o($V2,[2,251]),o($V2,$V22,{151:378,149:707,44:$V32}),o($Vr3,[2,290]),{14:708,15:$VY1},{25:709,26:$VZ1,27:$V_1,28:$V$1,29:$V02,30:$V12},o($V53,[2,269]),o($Vs3,[2,276],{185:710,189:711,190:[1,712]}),o($Vl3,$VI1,{146:268,120:713,147:$VJ1}),o($Vt3,$Vj3,{199:683,172:714,94:$Vk3}),{208:[1,715]},{192:[1,716]},{17:[1,717],19:[1,718]},o($Vl2,[2,835]),o($V_2,[2,298]),{209:$VD,284:719,389:$VW,430:$V31,504:119,505:120},{285:[1,720]},{17:$Vu3,393:$Vv3,544:721},{418:[1,723]},{179:[1,724]},o($Vw3,[2,1171]),o($Vw3,[2,1172]),{17:$Vu3,393:$Vv3,544:725},o($Ve3,[2,456]),o($VQ2,[2,908]),o($VQ2,[2,178]),o($V93,[2,194]),o($V2,[2,257]),o($Vr3,[2,291]),o($VC2,[2,288]),o($V53,[2,281],{186:726,194:727,195:[1,728]}),o($Vs3,[2,277]),{191:[1,729]},o($Vt3,$Vj3,{199:683,172:730,94:$Vk3}),o($V2,$Vx3,{104:731,102:732,105:$V81}),{209:[1,733]},{15:[1,735],215:734},o([208,214],[2,832]),{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:736,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,285:$Vn,369:44,385:$Vo,395:$Vp},o($Vt,[2,446]),o($Vt,[2,448]),{17:[2,1142]},{209:$Vo3,402:[1,737],545:$Vq3,553:738},o($Vm3,[2,1161]),o($Vm3,[2,1162]),{17:[2,1143]},o($V53,[2,273]),o($V53,[2,282]),{191:[1,739]},{192:[1,740]},o($V2,$Vx3,{102:732,104:741,105:$V81}),o($V2,[2,259]),o($V2,[2,133]),{210:[1,742]},{208:[2,310]},{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:745,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,217:743,219:744,285:$Vn,369:44,385:$Vo,395:$Vp},o($Vl2,[2,836]),{179:[1,746]},{411:[1,747]},{192:[1,748]},{193:749,423:$V11},o($V2,[2,258]),o($V63,[2,301]),{17:[1,750],19:[1,751]},o($Vl2,[2,315]),o($Vl2,$Vf3,{221:752,295:$Vg3,296:$Vh3}),{17:[2,1166]},{17:[2,1167]},{193:753,423:$V11},o($Vs3,[2,278]),{208:[2,313]},{26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,39:115,59:745,108:48,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,219:754,285:$Vn,369:44,385:$Vo,395:$Vp},o($Vl2,[2,321]),o($V53,[2,283]),o($Vl2,[2,316])],
defaultActions: {20:[2,636],74:[2,248],99:[2,581],100:[2,582],101:[2,583],102:[2,584],124:[2,557],125:[2,558],126:[2,559],127:[2,560],128:[2,561],129:[2,562],130:[2,563],131:[2,564],239:[2,37],240:[2,38],330:[2,576],389:[2,1098],390:[2,1100],391:[2,1102],392:[2,1104],393:[2,1106],394:[2,1108],395:[2,1110],396:[2,1112],434:[2,577],597:[2,1136],598:[2,1141],721:[2,1142],725:[2,1143],734:[2,310],746:[2,1166],747:[2,1167],750:[2,313]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
/**
 * @param {string} input
 *
 * @return {AutocompleteParseResult}
 */
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: lexer.yylloc,
                    ruleId: stack.slice(stack.length - 2, stack.length).join('_'),
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


SqlParseSupport.initSyntaxParser(parser);/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true,"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* skip whitespace */ 
break;
case 1: /* skip comments */ 
break;
case 2: /* skip comments */ 
break;
case 3: parser.yy.partialCursor = false; parser.yy.cursorFound = yy_.yylloc; return 5; 
break;
case 4: parser.yy.partialCursor = true; parser.yy.cursorFound = yy_.yylloc; return 434; 
break;
case 5: this.popState(); return 488; 
break;
case 6: return 80; 
break;
case 7: return 303; 
break;
case 8: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('ALTER', yy_.yylloc, yy.lexer.upcomingInput()); return 4; 
break;
case 9: return 393; 
break;
case 10: return 164; 
break;
case 11: return 105; 
break;
case 12: return 295; 
break;
case 13: this.begin('between'); return 396; 
break;
case 14: return 397; 
break;
case 15: return 398; 
break;
case 16: return 210; 
break;
case 17: return 192; 
break;
case 18: return 447; 
break;
case 19: return 399; 
break;
case 20: return 97; 
break;
case 21: return 400; 
break;
case 22: return 205; 
break;
case 23: return 71; 
break;
case 24: return 67; 
break;
case 25: return 147; 
break;
case 26: parser.determineCase(yy_.yytext); return 9; 
break;
case 27: return 271; 
break;
case 28: return 402; 
break;
case 29: return 45; 
break;
case 30: return 48; 
break;
case 31: return 403; 
break;
case 32: return 184; 
break;
case 33: return 296; 
break;
case 34: return 304; 
break;
case 35: return 394; 
break;
case 36: return 404; 
break;
case 37: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('DROP', yy_.yylloc, yy.lexer.upcomingInput()); return 84; 
break;
case 38: return 406; 
break;
case 39: return 407; 
break;
case 40: parser.yy.correlatedSubQuery = true; return 408; 
break;
case 41: return 177; 
break;
case 42: return 409; 
break;
case 43: return 190; 
break;
case 44: return 165; 
break;
case 45: return 90; 
break;
case 46: return 410; 
break;
case 47: return 411; 
break;
case 48: return 180; 
break;
case 49: parser.determineCase(yy_.yytext); return 236; 
break;
case 50: return 273; 
break;
case 51: return 154; 
break;
case 52: return 244; 
break;
case 53: return 258; 
break;
case 54: return 357; 
break;
case 55: return 413; 
break;
case 56: return 275; 
break;
case 57: return 'INSERT'; 
break;
case 58: return 414; 
break;
case 59: return 208; 
break;
case 60: return 415; 
break;
case 61: return 166; 
break;
case 62: return 272; 
break;
case 63: return 276; 
break;
case 64: return 168; 
break;
case 65: return 283; 
break;
case 66: return 195; 
break;
case 67: return 44; 
break;
case 68: return 46; 
break;
case 69: return 416; 
break;
case 70: return 363; 
break;
case 71: return 279; 
break;
case 72: return 112; 
break;
case 73: return 201; 
break;
case 74: return 159; 
break;
case 75: return 289; 
break;
case 76: return 274; 
break;
case 77: return 417; 
break;
case 78: return 203; 
break;
case 79: return 70; 
break;
case 80: return 418; 
break;
case 81: return 49; 
break;
case 82: return 96; 
break;
case 83: return 419; 
break;
case 84: return 69; 
break;
case 85: return 420; 
break;
case 86: return 64; 
break;
case 87: return 66; 
break;
case 88: return 278; 
break;
case 89: return 421; 
break;
case 90: return 179; 
break;
case 91: return 111; 
break;
case 92: return 422; 
break;
case 93: return 47; 
break;
case 94: return 'SCHEMAS'; 
break;
case 95: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SELECT', yy_.yylloc); return 297; 
break;
case 96: return 277; 
break;
case 97: return 91; 
break;
case 98: return 93; 
break;
case 99: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SET', yy_.yylloc); return 42; 
break;
case 100: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SHOW', yy_.yylloc); return 'SHOW'; 
break;
case 101: return 424; 
break;
case 102: return 214; 
break;
case 103: return 198; 
break;
case 104: return 425; 
break;
case 105: return 50; 
break;
case 106: return 'TABLES'; 
break;
case 107: return 94; 
break;
case 108: return 160; 
break;
case 109: return 191; 
break;
case 110: return 426; 
break;
case 111: return 427; 
break;
case 112: return 428; 
break;
case 113: return 65; 
break;
case 114: return 429; 
break;
case 115: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('TRUNCATE', yy_.yylloc, yy.lexer.upcomingInput()); return 358; 
break;
case 116: return 545; 
break;
case 117: return 319; 
break;
case 118: return 95; 
break;
case 119: parser.determineCase(yy_.yytext); return 'UPDATE'; 
break;
case 120: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('USE', yy_.yylloc); return 'USE'; 
break;
case 121: return 162; 
break;
case 122: return 431; 
break;
case 123: return 432; 
break;
case 124: return 98; 
break;
case 125: return 433; 
break;
case 126: return 321; 
break;
case 127: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('WITH', yy_.yylloc); return 92; 
break;
case 128: return 26; 
break;
case 129: return 109; 
break;
case 130: return 27; 
break;
case 131: return 28; 
break;
case 132: return 371; 
break;
case 133: return 29; 
break;
case 134: return 111; 
break;
case 135: return 30; 
break;
case 136: return 110; 
break;
case 137: yy.lexer.unput('('); yy_.yytext = 'avg'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 345; 
break;
case 138: yy.lexer.unput('('); yy_.yytext = 'cast'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 359; 
break;
case 139: yy.lexer.unput('('); yy_.yytext = 'count'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 353; 
break;
case 140: yy.lexer.unput('('); yy_.yytext = 'max'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 346; 
break;
case 141: yy.lexer.unput('('); yy_.yytext = 'min'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 347; 
break;
case 142: yy.lexer.unput('('); yy_.yytext = 'stddev_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 348; 
break;
case 143: yy.lexer.unput('('); yy_.yytext = 'stddev_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 349; 
break;
case 144: yy.lexer.unput('('); yy_.yytext = 'sum'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 354; 
break;
case 145: yy.lexer.unput('('); yy_.yytext = 'var_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 350; 
break;
case 146: yy.lexer.unput('('); yy_.yytext = 'var_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 351; 
break;
case 147: yy.lexer.unput('('); yy_.yytext = 'variance'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 352; 
break;
case 148: yy.lexer.unput('('); yy_.yytext = 'cume_dist'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 355; 
break;
case 149: yy.lexer.unput('('); yy_.yytext = 'dense_rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 355; 
break;
case 150: yy.lexer.unput('('); yy_.yytext = 'first_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 355; 
break;
case 151: yy.lexer.unput('('); yy_.yytext = 'lag'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 355; 
break;
case 152: yy.lexer.unput('('); yy_.yytext = 'last_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 355; 
break;
case 153: yy.lexer.unput('('); yy_.yytext = 'lead'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 355; 
break;
case 154: yy.lexer.unput('('); yy_.yytext = 'rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 355; 
break;
case 155: yy.lexer.unput('('); yy_.yytext = 'row_number'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 355; 
break;
case 156: return 209; 
break;
case 157: return 209; 
break;
case 158: return 430; 
break;
case 159: return 385; 
break;
case 160: parser.yy.cursorFound = true; return 5; 
break;
case 161: parser.yy.cursorFound = true; return 434; 
break;
case 162: return 412; 
break;
case 163: parser.addFileLocation(yy_.yylloc, yy_.yytext); return 550; 
break;
case 164: this.popState(); return 551; 
break;
case 165: return 376; 
break;
case 166: return 393; 
break;
case 167: return 159; 
break;
case 168: return 21; 
break;
case 169: return 132; 
break;
case 170: return 133; 
break;
case 171: return 401; 
break;
case 172: return 401; 
break;
case 173: return 401; 
break;
case 174: return 401; 
break;
case 175: return 401; 
break;
case 176: return 388; 
break;
case 177: return 310; 
break;
case 178: return 394; 
break;
case 179: return 394; 
break;
case 180: return 394; 
break;
case 181: return 394; 
break;
case 182: return 394; 
break;
case 183: return 394; 
break;
case 184: return 19; 
break;
case 185: return 389; 
break;
case 186: return 142; 
break;
case 187: return 380; 
break;
case 188: return 392; 
break;
case 189: return 387; 
break;
case 190: return 15; 
break;
case 191: return 17; 
break;
case 192: return 390; 
break;
case 193: return 391; 
break;
case 194: return 285; 
break;
case 195: this.begin('backtickedValue'); return 395; 
break;
case 196:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '`')) {
                                               return 438;
                                             }
                                             return 436;
                                           
break;
case 197: this.popState(); return 395; 
break;
case 198: this.begin('singleQuotedValue'); return 423; 
break;
case 199:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '\'')) {
                                               return 438;
                                             }
                                             return 436;
                                           
break;
case 200: this.popState(); return 423; 
break;
case 201: this.begin('doubleQuotedValue'); return 405; 
break;
case 202:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '"')) {
                                               return 438;
                                             }
                                             return 436;
                                           
break;
case 203: this.popState(); return 405; 
break;
case 204: return 376; 
break;
case 205: /* To prevent console logging of unknown chars */ 
break;
case 206: 
break;
case 207: 
break;
case 208: 
break;
case 209: 
break;
case 210: 
break;
case 211:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s)/i,/^(?:--.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:AND)/i,/^(?:ADD)/i,/^(?:ALL)/i,/^(?:ALTER)/i,/^(?:AND)/i,/^(?:ARCHIVE)/i,/^(?:AS)/i,/^(?:ASC)/i,/^(?:BETWEEN)/i,/^(?:BIGINT)/i,/^(?:BOOLEAN)/i,/^(?:BUCKETS)/i,/^(?:BY)/i,/^(?:CASCADE)/i,/^(?:CASE)/i,/^(?:CHANGE)/i,/^(?:CHAR)/i,/^(?:CLUSTERED)/i,/^(?:COLUMN)/i,/^(?:COLUMNS)/i,/^(?:COMMENT)/i,/^(?:CREATE)/i,/^(?:CROSS)/i,/^(?:CURRENT)/i,/^(?:DATABASE)/i,/^(?:DBPROPERTIES)/i,/^(?:DECIMAL)/i,/^(?:DELIMITED)/i,/^(?:DESC)/i,/^(?:DISTINCT)/i,/^(?:DIV)/i,/^(?:DOUBLE)/i,/^(?:DROP)/i,/^(?:ELSE)/i,/^(?:END)/i,/^(?:EXISTS)/i,/^(?:EXTERNAL)/i,/^(?:FALSE)/i,/^(?:FIELDS)/i,/^(?:FILE)/i,/^(?:FILEFORMAT)/i,/^(?:FLOAT)/i,/^(?:FOLLOWING)/i,/^(?:FORMAT)/i,/^(?:FROM)/i,/^(?:FULL)/i,/^(?:FUNCTION)/i,/^(?:GROUP)/i,/^(?:HAVING)/i,/^(?:IF)/i,/^(?:IN)/i,/^(?:INNER)/i,/^(?:INSERT)/i,/^(?:INT)/i,/^(?:INTO)/i,/^(?:IS)/i,/^(?:JAR)/i,/^(?:JOIN)/i,/^(?:LEFT)/i,/^(?:LIKE)/i,/^(?:LIMIT)/i,/^(?:LINES)/i,/^(?:LOCATION)/i,/^(?:NAMESPACE)/i,/^(?:NOT)/i,/^(?:NULL)/i,/^(?:ON)/i,/^(?:OPTION)/i,/^(?:OPTIONS)/i,/^(?:OR)/i,/^(?:ORDER)/i,/^(?:OUTER)/i,/^(?:PARTITION)/i,/^(?:PARTITIONED)/i,/^(?:PARTITIONS)/i,/^(?:PRECEDING)/i,/^(?:PROPERTIES)/i,/^(?:PURGE)/i,/^(?:RANGE)/i,/^(?:RECOVER)/i,/^(?:REGEXP)/i,/^(?:RENAME)/i,/^(?:REPLACE)/i,/^(?:RIGHT)/i,/^(?:RLIKE)/i,/^(?:ROW)/i,/^(?:ROLE)/i,/^(?:ROWS)/i,/^(?:SCHEMA)/i,/^(?:SCHEMAS)/i,/^(?:SELECT)/i,/^(?:SEMI)/i,/^(?:SERDE)/i,/^(?:SERDEPROPERTIES)/i,/^(?:SET)/i,/^(?:SHOW)/i,/^(?:SMALLINT)/i,/^(?:SORTED)/i,/^(?:STORED)/i,/^(?:STRING)/i,/^(?:TABLE)/i,/^(?:TABLES)/i,/^(?:TBLPROPERTIES)/i,/^(?:TEMPORARY)/i,/^(?:TERMINATED)/i,/^(?:THEN)/i,/^(?:TIMESTAMP)/i,/^(?:TINYINT)/i,/^(?:TO)/i,/^(?:TRUE)/i,/^(?:TRUNCATE)/i,/^(?:UNBOUNDED)/i,/^(?:UNION)/i,/^(?:UNSET)/i,/^(?:UPDATE)/i,/^(?:USE)/i,/^(?:USING)/i,/^(?:VALUES)/i,/^(?:VARCHAR)/i,/^(?:VIEW)/i,/^(?:WHEN)/i,/^(?:WHERE)/i,/^(?:WITH)/i,/^(?:CSV)/i,/^(?:JDBC)/i,/^(?:JSON)/i,/^(?:ORC)/i,/^(?:OVER)/i,/^(?:PARQUET)/i,/^(?:ROLE)/i,/^(?:TEXTFILE)/i,/^(?:TXT)/i,/^(?:AVG\s*\()/i,/^(?:CAST\s*\()/i,/^(?:COUNT\s*\()/i,/^(?:MAX\s*\()/i,/^(?:MIN\s*\()/i,/^(?:STDDEV_POP\s*\()/i,/^(?:STDDEV_SAMP\s*\()/i,/^(?:SUM\s*\()/i,/^(?:VAR_POP\s*\()/i,/^(?:VAR_SAMP\s*\()/i,/^(?:VARIANCE\s*\()/i,/^(?:CUME_DIST\s*\()/i,/^(?:DENSE_RANK\s*\()/i,/^(?:FIRST_VALUE\s*\()/i,/^(?:LAG\s*\()/i,/^(?:LAST_VALUE\s*\()/i,/^(?:LEAD\s*\()/i,/^(?:RANK\s*\()/i,/^(?:ROW_NUMBER\s*\()/i,/^(?:[0-9]+)/i,/^(?:[0-9]+(?:[YSL]|BD)?)/i,/^(?:[0-9]+E)/i,/^(?:[A-Za-z0-9_]+)/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:\s+['"])/i,/^(?:[^'"\u2020\u2021]+)/i,/^(?:['"])/i,/^(?:$)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<>)/i,/^(?:<=>)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\+)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\|)/i,/^(?:\^)/i,/^(?:&)/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:;)/i,/^(?:~)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\$\{[^}]*\})/i,/^(?:`)/i,/^(?:[^`]+)/i,/^(?:`)/i,/^(?:')/i,/^(?:(?:\\\\|\\[']|[^'])+)/i,/^(?:')/i,/^(?:")/i,/^(?:(?:\\\\|\\["]|[^"])+)/i,/^(?:")/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"hdfs":{"rules":[160,161,162,163,164,165,207],"inclusive":false},"doubleQuotedValue":{"rules":[202,203,210],"inclusive":false},"singleQuotedValue":{"rules":[199,200,209],"inclusive":false},"backtickedValue":{"rules":[196,197,208],"inclusive":false},"between":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,198,201,204,205,206,211],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,198,201,204,205,211],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
export default sparksqlSyntaxParser;
