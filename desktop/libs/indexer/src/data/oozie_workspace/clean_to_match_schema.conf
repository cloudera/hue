# Licensed to Cloudera, Inc. under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  Cloudera, Inc. licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

<%page args="fields, get_regex"/>

# treat empty strings as if the field wasn't in the tuple unless the type is string
% for field in fields:
  % if field["type"] != "string":
    {
      if {
        conditions : [
          {
            grok {
              expressions : {
                "${field['name']}" : "^()|(NULL)|(\\\\N)$"
              }
              extract : false
            }
          }
        ]
        then : [
          {
            removeFields {
              blacklist : ["literal:${field['name']}"]
            }
          }
        ]
      }
    }
  % endif
%endfor

# require that all kept fields are present
% for field in fields:
  % if field["keep"] and field["required"]:
    {
      if {
        conditions : [
          { equals { "${field['name']}" : [] } }
        ]
        then : [
          { logInfo { format : "Ignoring record because it has no ${field['name']}: {}", args : ["@{}"] } }
          { dropRecord {} }
        ]
      }
    }
  % endif
%endfor

# convert common date formats to solr date format
% for field in fields:
  %if field["type"] == 'date':
    {
      # check that the field exists before running the operation
      if {
        conditions : [
            { equals { "${field['name']}" : [] } }
        ]
        then : []
        else : [
          {
            if {
              conditions : [
                {
                  convertTimestamp {
                    field : ${field['name']}
                    outputFormat : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
                    outputTimezone : UTC
                  } } ]
              then : []
              else : [
              # the built in convertTimestamp options failed, try some custom ones
                {
                  if {
                    conditions : [
                      {
                        convertTimestamp {
                          field : date
                          inputFormats : ["dd/MMM/yyyy HH:mm:ss Z", "dd/MMM/yyyy:HH:mm:ss Z"]
                          outputFormat : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
                          outputTimezone : UTC
                        }
                      }
                    ]
                    then : []
                    else : [
                      # none of the custom dates matched either. Drop the record
                      { logInfo { format : "Ignoring record due to invalid date for ${field['name']}: {}", args : ["@{}"] } }
                      { dropRecord {} }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    }
  %endif
%endfor

# require that all kept fields match their expected type
% for field in fields:
  %if field["keep"]:
    {
      if {
        conditions : [
          {
            grok {
              expressions : {
                "${field['name']}" : "${get_regex(field['type'])}"
              }
              extract : false

            }
          }
        ]
        then : []
        else : [
          %if not field["required"]:
            # if didn't match because the field isn't present then we keep the record
            {
              if {
                conditions : [
                    { equals { "${field['name']}" : [] } }
                ]
                then : []
                else : [
                  { logInfo { format : "Ignoring record due to incorrect type for ${field['name']}: {}", args : ["@{}"] } }
                  { dropRecord {} }
                ]
              }
            }
          %else:
            { logInfo { format : "Ignoring record due to incorrect type for ${field['name']}: {}", args : ["@{}"] } }
            { dropRecord {} }
          %endif
        ]
      }
    }
  %endif
%endfor

# remove excess fields
{
  sanitizeUnknownSolrFields {
    # Location from which to fetch Solr schema
    solrLocator : <%text>${SOLR_LOCATOR}</%text>
  }
}
