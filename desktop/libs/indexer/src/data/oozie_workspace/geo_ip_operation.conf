# Licensed to Cloudera, Inc. under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  Cloudera, Inc. licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

<%page args="field, operation"/>

{
  if{
    conditions : [
      # check if the IP is reserved
      {
        grok {
          dictionaryFiles : ["grok_dictionaries"]

          expressions : {
            # Check if the ip is private. And skip if it is
            ${field['name']}: """((^127\.)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)).*"""
          }
        }
      }
    ]
    then : [
      { logDebug { format : "GeoIP failed - this IP is reserved: {}", args : ["@{}"] } }
    ]
    else : [
    {
      tryRules {
        catchExceptions : true
        throwExceptionIfAllRulesFailed : true
        rules : [
          # try looking up the ip:
          {
            commands : [
                    {
                      geoIP {
                        inputField : "${field['name']}"
                        database : "GeoLite2-City.mmdb"
                      }
                    }

                    # extract parts of the geolocation info from the Jackson JsonNode Java
                    # object contained in the _attachment_body field and store the parts in
                    # the given record output fields:
                    {
                      extractJsonPaths {
                        flatten : false
                        paths : {
                          %for i, component in enumerate(get_kept_args(operation)):
                            "${operation['fields'][i]['name']}" : "${component.name}"
                          %endfor
                        }
                      }
                    }
            ]
          }

          # lookup failed fallback to leaving fields empty:
          {
            commands : [
              { logDebug { format : "GeoIP lookup failed: {}", args : ["@{}"] } }
            ]
          }
        ]
      }
    }
    ]
  }
}
