/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.thriftfs.jobtracker.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Container structure for job counts for a given user
 */
public class ThriftUserJobCounts implements org.apache.thrift.TBase<ThriftUserJobCounts, ThriftUserJobCounts._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftUserJobCounts");

  private static final org.apache.thrift.protocol.TField N_PREP_FIELD_DESC = new org.apache.thrift.protocol.TField("nPrep", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField N_RUNNING_FIELD_DESC = new org.apache.thrift.protocol.TField("nRunning", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField N_SUCCEEDED_FIELD_DESC = new org.apache.thrift.protocol.TField("nSucceeded", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField N_FAILED_FIELD_DESC = new org.apache.thrift.protocol.TField("nFailed", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField N_KILLED_FIELD_DESC = new org.apache.thrift.protocol.TField("nKilled", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftUserJobCountsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftUserJobCountsTupleSchemeFactory());
  }

  public int nPrep; // required
  public int nRunning; // required
  public int nSucceeded; // required
  public int nFailed; // required
  public int nKilled; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    N_PREP((short)1, "nPrep"),
    N_RUNNING((short)2, "nRunning"),
    N_SUCCEEDED((short)3, "nSucceeded"),
    N_FAILED((short)4, "nFailed"),
    N_KILLED((short)5, "nKilled");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // N_PREP
          return N_PREP;
        case 2: // N_RUNNING
          return N_RUNNING;
        case 3: // N_SUCCEEDED
          return N_SUCCEEDED;
        case 4: // N_FAILED
          return N_FAILED;
        case 5: // N_KILLED
          return N_KILLED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NPREP_ISSET_ID = 0;
  private static final int __NRUNNING_ISSET_ID = 1;
  private static final int __NSUCCEEDED_ISSET_ID = 2;
  private static final int __NFAILED_ISSET_ID = 3;
  private static final int __NKILLED_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.N_PREP, new org.apache.thrift.meta_data.FieldMetaData("nPrep", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.N_RUNNING, new org.apache.thrift.meta_data.FieldMetaData("nRunning", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.N_SUCCEEDED, new org.apache.thrift.meta_data.FieldMetaData("nSucceeded", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.N_FAILED, new org.apache.thrift.meta_data.FieldMetaData("nFailed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.N_KILLED, new org.apache.thrift.meta_data.FieldMetaData("nKilled", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftUserJobCounts.class, metaDataMap);
  }

  public ThriftUserJobCounts() {
  }

  public ThriftUserJobCounts(
    int nPrep,
    int nRunning,
    int nSucceeded,
    int nFailed,
    int nKilled)
  {
    this();
    this.nPrep = nPrep;
    setNPrepIsSet(true);
    this.nRunning = nRunning;
    setNRunningIsSet(true);
    this.nSucceeded = nSucceeded;
    setNSucceededIsSet(true);
    this.nFailed = nFailed;
    setNFailedIsSet(true);
    this.nKilled = nKilled;
    setNKilledIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftUserJobCounts(ThriftUserJobCounts other) {
    __isset_bitfield = other.__isset_bitfield;
    this.nPrep = other.nPrep;
    this.nRunning = other.nRunning;
    this.nSucceeded = other.nSucceeded;
    this.nFailed = other.nFailed;
    this.nKilled = other.nKilled;
  }

  public ThriftUserJobCounts deepCopy() {
    return new ThriftUserJobCounts(this);
  }

  @Override
  public void clear() {
    setNPrepIsSet(false);
    this.nPrep = 0;
    setNRunningIsSet(false);
    this.nRunning = 0;
    setNSucceededIsSet(false);
    this.nSucceeded = 0;
    setNFailedIsSet(false);
    this.nFailed = 0;
    setNKilledIsSet(false);
    this.nKilled = 0;
  }

  public int getNPrep() {
    return this.nPrep;
  }

  public ThriftUserJobCounts setNPrep(int nPrep) {
    this.nPrep = nPrep;
    setNPrepIsSet(true);
    return this;
  }

  public void unsetNPrep() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NPREP_ISSET_ID);
  }

  /** Returns true if field nPrep is set (has been assigned a value) and false otherwise */
  public boolean isSetNPrep() {
    return EncodingUtils.testBit(__isset_bitfield, __NPREP_ISSET_ID);
  }

  public void setNPrepIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NPREP_ISSET_ID, value);
  }

  public int getNRunning() {
    return this.nRunning;
  }

  public ThriftUserJobCounts setNRunning(int nRunning) {
    this.nRunning = nRunning;
    setNRunningIsSet(true);
    return this;
  }

  public void unsetNRunning() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NRUNNING_ISSET_ID);
  }

  /** Returns true if field nRunning is set (has been assigned a value) and false otherwise */
  public boolean isSetNRunning() {
    return EncodingUtils.testBit(__isset_bitfield, __NRUNNING_ISSET_ID);
  }

  public void setNRunningIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NRUNNING_ISSET_ID, value);
  }

  public int getNSucceeded() {
    return this.nSucceeded;
  }

  public ThriftUserJobCounts setNSucceeded(int nSucceeded) {
    this.nSucceeded = nSucceeded;
    setNSucceededIsSet(true);
    return this;
  }

  public void unsetNSucceeded() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NSUCCEEDED_ISSET_ID);
  }

  /** Returns true if field nSucceeded is set (has been assigned a value) and false otherwise */
  public boolean isSetNSucceeded() {
    return EncodingUtils.testBit(__isset_bitfield, __NSUCCEEDED_ISSET_ID);
  }

  public void setNSucceededIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NSUCCEEDED_ISSET_ID, value);
  }

  public int getNFailed() {
    return this.nFailed;
  }

  public ThriftUserJobCounts setNFailed(int nFailed) {
    this.nFailed = nFailed;
    setNFailedIsSet(true);
    return this;
  }

  public void unsetNFailed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NFAILED_ISSET_ID);
  }

  /** Returns true if field nFailed is set (has been assigned a value) and false otherwise */
  public boolean isSetNFailed() {
    return EncodingUtils.testBit(__isset_bitfield, __NFAILED_ISSET_ID);
  }

  public void setNFailedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NFAILED_ISSET_ID, value);
  }

  public int getNKilled() {
    return this.nKilled;
  }

  public ThriftUserJobCounts setNKilled(int nKilled) {
    this.nKilled = nKilled;
    setNKilledIsSet(true);
    return this;
  }

  public void unsetNKilled() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NKILLED_ISSET_ID);
  }

  /** Returns true if field nKilled is set (has been assigned a value) and false otherwise */
  public boolean isSetNKilled() {
    return EncodingUtils.testBit(__isset_bitfield, __NKILLED_ISSET_ID);
  }

  public void setNKilledIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NKILLED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case N_PREP:
      if (value == null) {
        unsetNPrep();
      } else {
        setNPrep((Integer)value);
      }
      break;

    case N_RUNNING:
      if (value == null) {
        unsetNRunning();
      } else {
        setNRunning((Integer)value);
      }
      break;

    case N_SUCCEEDED:
      if (value == null) {
        unsetNSucceeded();
      } else {
        setNSucceeded((Integer)value);
      }
      break;

    case N_FAILED:
      if (value == null) {
        unsetNFailed();
      } else {
        setNFailed((Integer)value);
      }
      break;

    case N_KILLED:
      if (value == null) {
        unsetNKilled();
      } else {
        setNKilled((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case N_PREP:
      return Integer.valueOf(getNPrep());

    case N_RUNNING:
      return Integer.valueOf(getNRunning());

    case N_SUCCEEDED:
      return Integer.valueOf(getNSucceeded());

    case N_FAILED:
      return Integer.valueOf(getNFailed());

    case N_KILLED:
      return Integer.valueOf(getNKilled());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case N_PREP:
      return isSetNPrep();
    case N_RUNNING:
      return isSetNRunning();
    case N_SUCCEEDED:
      return isSetNSucceeded();
    case N_FAILED:
      return isSetNFailed();
    case N_KILLED:
      return isSetNKilled();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftUserJobCounts)
      return this.equals((ThriftUserJobCounts)that);
    return false;
  }

  public boolean equals(ThriftUserJobCounts that) {
    if (that == null)
      return false;

    boolean this_present_nPrep = true;
    boolean that_present_nPrep = true;
    if (this_present_nPrep || that_present_nPrep) {
      if (!(this_present_nPrep && that_present_nPrep))
        return false;
      if (this.nPrep != that.nPrep)
        return false;
    }

    boolean this_present_nRunning = true;
    boolean that_present_nRunning = true;
    if (this_present_nRunning || that_present_nRunning) {
      if (!(this_present_nRunning && that_present_nRunning))
        return false;
      if (this.nRunning != that.nRunning)
        return false;
    }

    boolean this_present_nSucceeded = true;
    boolean that_present_nSucceeded = true;
    if (this_present_nSucceeded || that_present_nSucceeded) {
      if (!(this_present_nSucceeded && that_present_nSucceeded))
        return false;
      if (this.nSucceeded != that.nSucceeded)
        return false;
    }

    boolean this_present_nFailed = true;
    boolean that_present_nFailed = true;
    if (this_present_nFailed || that_present_nFailed) {
      if (!(this_present_nFailed && that_present_nFailed))
        return false;
      if (this.nFailed != that.nFailed)
        return false;
    }

    boolean this_present_nKilled = true;
    boolean that_present_nKilled = true;
    if (this_present_nKilled || that_present_nKilled) {
      if (!(this_present_nKilled && that_present_nKilled))
        return false;
      if (this.nKilled != that.nKilled)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ThriftUserJobCounts other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ThriftUserJobCounts typedOther = (ThriftUserJobCounts)other;

    lastComparison = Boolean.valueOf(isSetNPrep()).compareTo(typedOther.isSetNPrep());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNPrep()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nPrep, typedOther.nPrep);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNRunning()).compareTo(typedOther.isSetNRunning());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNRunning()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRunning, typedOther.nRunning);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNSucceeded()).compareTo(typedOther.isSetNSucceeded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNSucceeded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nSucceeded, typedOther.nSucceeded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNFailed()).compareTo(typedOther.isSetNFailed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNFailed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nFailed, typedOther.nFailed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNKilled()).compareTo(typedOther.isSetNKilled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNKilled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nKilled, typedOther.nKilled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftUserJobCounts(");
    boolean first = true;

    sb.append("nPrep:");
    sb.append(this.nPrep);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nRunning:");
    sb.append(this.nRunning);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nSucceeded:");
    sb.append(this.nSucceeded);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nFailed:");
    sb.append(this.nFailed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nKilled:");
    sb.append(this.nKilled);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftUserJobCountsStandardSchemeFactory implements SchemeFactory {
    public ThriftUserJobCountsStandardScheme getScheme() {
      return new ThriftUserJobCountsStandardScheme();
    }
  }

  private static class ThriftUserJobCountsStandardScheme extends StandardScheme<ThriftUserJobCounts> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftUserJobCounts struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // N_PREP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nPrep = iprot.readI32();
              struct.setNPrepIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // N_RUNNING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nRunning = iprot.readI32();
              struct.setNRunningIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // N_SUCCEEDED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nSucceeded = iprot.readI32();
              struct.setNSucceededIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // N_FAILED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nFailed = iprot.readI32();
              struct.setNFailedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // N_KILLED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nKilled = iprot.readI32();
              struct.setNKilledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftUserJobCounts struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(N_PREP_FIELD_DESC);
      oprot.writeI32(struct.nPrep);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(N_RUNNING_FIELD_DESC);
      oprot.writeI32(struct.nRunning);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(N_SUCCEEDED_FIELD_DESC);
      oprot.writeI32(struct.nSucceeded);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(N_FAILED_FIELD_DESC);
      oprot.writeI32(struct.nFailed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(N_KILLED_FIELD_DESC);
      oprot.writeI32(struct.nKilled);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftUserJobCountsTupleSchemeFactory implements SchemeFactory {
    public ThriftUserJobCountsTupleScheme getScheme() {
      return new ThriftUserJobCountsTupleScheme();
    }
  }

  private static class ThriftUserJobCountsTupleScheme extends TupleScheme<ThriftUserJobCounts> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftUserJobCounts struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNPrep()) {
        optionals.set(0);
      }
      if (struct.isSetNRunning()) {
        optionals.set(1);
      }
      if (struct.isSetNSucceeded()) {
        optionals.set(2);
      }
      if (struct.isSetNFailed()) {
        optionals.set(3);
      }
      if (struct.isSetNKilled()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetNPrep()) {
        oprot.writeI32(struct.nPrep);
      }
      if (struct.isSetNRunning()) {
        oprot.writeI32(struct.nRunning);
      }
      if (struct.isSetNSucceeded()) {
        oprot.writeI32(struct.nSucceeded);
      }
      if (struct.isSetNFailed()) {
        oprot.writeI32(struct.nFailed);
      }
      if (struct.isSetNKilled()) {
        oprot.writeI32(struct.nKilled);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftUserJobCounts struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.nPrep = iprot.readI32();
        struct.setNPrepIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nRunning = iprot.readI32();
        struct.setNRunningIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nSucceeded = iprot.readI32();
        struct.setNSucceededIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nFailed = iprot.readI32();
        struct.setNFailedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.nKilled = iprot.readI32();
        struct.setNKilledIsSet(true);
      }
    }
  }

}

