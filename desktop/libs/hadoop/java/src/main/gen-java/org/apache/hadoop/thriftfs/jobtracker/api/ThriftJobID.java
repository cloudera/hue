/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.thriftfs.jobtracker.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Unique identifier for each job
 */
public class ThriftJobID implements org.apache.thrift.TBase<ThriftJobID, ThriftJobID._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftJobID");

  private static final org.apache.thrift.protocol.TField JOB_TRACKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTrackerID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobID", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField AS_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("asString", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftJobIDStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftJobIDTupleSchemeFactory());
  }

  /**
   * Unique id of jobtracker
   */
  public String jobTrackerID; // required
  /**
   * Unique (to JT) job id
   */
  public int jobID; // required
  /**
   * Flattened as a string
   */
  public String asString; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Unique id of jobtracker
     */
    JOB_TRACKER_ID((short)1, "jobTrackerID"),
    /**
     * Unique (to JT) job id
     */
    JOB_ID((short)2, "jobID"),
    /**
     * Flattened as a string
     */
    AS_STRING((short)3, "asString");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOB_TRACKER_ID
          return JOB_TRACKER_ID;
        case 2: // JOB_ID
          return JOB_ID;
        case 3: // AS_STRING
          return AS_STRING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __JOBID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOB_TRACKER_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTrackerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("jobID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AS_STRING, new org.apache.thrift.meta_data.FieldMetaData("asString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftJobID.class, metaDataMap);
  }

  public ThriftJobID() {
  }

  public ThriftJobID(
    String jobTrackerID,
    int jobID,
    String asString)
  {
    this();
    this.jobTrackerID = jobTrackerID;
    this.jobID = jobID;
    setJobIDIsSet(true);
    this.asString = asString;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftJobID(ThriftJobID other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetJobTrackerID()) {
      this.jobTrackerID = other.jobTrackerID;
    }
    this.jobID = other.jobID;
    if (other.isSetAsString()) {
      this.asString = other.asString;
    }
  }

  public ThriftJobID deepCopy() {
    return new ThriftJobID(this);
  }

  @Override
  public void clear() {
    this.jobTrackerID = null;
    setJobIDIsSet(false);
    this.jobID = 0;
    this.asString = null;
  }

  /**
   * Unique id of jobtracker
   */
  public String getJobTrackerID() {
    return this.jobTrackerID;
  }

  /**
   * Unique id of jobtracker
   */
  public ThriftJobID setJobTrackerID(String jobTrackerID) {
    this.jobTrackerID = jobTrackerID;
    return this;
  }

  public void unsetJobTrackerID() {
    this.jobTrackerID = null;
  }

  /** Returns true if field jobTrackerID is set (has been assigned a value) and false otherwise */
  public boolean isSetJobTrackerID() {
    return this.jobTrackerID != null;
  }

  public void setJobTrackerIDIsSet(boolean value) {
    if (!value) {
      this.jobTrackerID = null;
    }
  }

  /**
   * Unique (to JT) job id
   */
  public int getJobID() {
    return this.jobID;
  }

  /**
   * Unique (to JT) job id
   */
  public ThriftJobID setJobID(int jobID) {
    this.jobID = jobID;
    setJobIDIsSet(true);
    return this;
  }

  public void unsetJobID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JOBID_ISSET_ID);
  }

  /** Returns true if field jobID is set (has been assigned a value) and false otherwise */
  public boolean isSetJobID() {
    return EncodingUtils.testBit(__isset_bitfield, __JOBID_ISSET_ID);
  }

  public void setJobIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JOBID_ISSET_ID, value);
  }

  /**
   * Flattened as a string
   */
  public String getAsString() {
    return this.asString;
  }

  /**
   * Flattened as a string
   */
  public ThriftJobID setAsString(String asString) {
    this.asString = asString;
    return this;
  }

  public void unsetAsString() {
    this.asString = null;
  }

  /** Returns true if field asString is set (has been assigned a value) and false otherwise */
  public boolean isSetAsString() {
    return this.asString != null;
  }

  public void setAsStringIsSet(boolean value) {
    if (!value) {
      this.asString = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case JOB_TRACKER_ID:
      if (value == null) {
        unsetJobTrackerID();
      } else {
        setJobTrackerID((String)value);
      }
      break;

    case JOB_ID:
      if (value == null) {
        unsetJobID();
      } else {
        setJobID((Integer)value);
      }
      break;

    case AS_STRING:
      if (value == null) {
        unsetAsString();
      } else {
        setAsString((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case JOB_TRACKER_ID:
      return getJobTrackerID();

    case JOB_ID:
      return Integer.valueOf(getJobID());

    case AS_STRING:
      return getAsString();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case JOB_TRACKER_ID:
      return isSetJobTrackerID();
    case JOB_ID:
      return isSetJobID();
    case AS_STRING:
      return isSetAsString();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftJobID)
      return this.equals((ThriftJobID)that);
    return false;
  }

  public boolean equals(ThriftJobID that) {
    if (that == null)
      return false;

    boolean this_present_jobTrackerID = true && this.isSetJobTrackerID();
    boolean that_present_jobTrackerID = true && that.isSetJobTrackerID();
    if (this_present_jobTrackerID || that_present_jobTrackerID) {
      if (!(this_present_jobTrackerID && that_present_jobTrackerID))
        return false;
      if (!this.jobTrackerID.equals(that.jobTrackerID))
        return false;
    }

    boolean this_present_jobID = true;
    boolean that_present_jobID = true;
    if (this_present_jobID || that_present_jobID) {
      if (!(this_present_jobID && that_present_jobID))
        return false;
      if (this.jobID != that.jobID)
        return false;
    }

    boolean this_present_asString = true && this.isSetAsString();
    boolean that_present_asString = true && that.isSetAsString();
    if (this_present_asString || that_present_asString) {
      if (!(this_present_asString && that_present_asString))
        return false;
      if (!this.asString.equals(that.asString))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ThriftJobID other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ThriftJobID typedOther = (ThriftJobID)other;

    lastComparison = Boolean.valueOf(isSetJobTrackerID()).compareTo(typedOther.isSetJobTrackerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobTrackerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTrackerID, typedOther.jobTrackerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobID()).compareTo(typedOther.isSetJobID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobID, typedOther.jobID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAsString()).compareTo(typedOther.isSetAsString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAsString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asString, typedOther.asString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftJobID(");
    boolean first = true;

    sb.append("jobTrackerID:");
    if (this.jobTrackerID == null) {
      sb.append("null");
    } else {
      sb.append(this.jobTrackerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobID:");
    sb.append(this.jobID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("asString:");
    if (this.asString == null) {
      sb.append("null");
    } else {
      sb.append(this.asString);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftJobIDStandardSchemeFactory implements SchemeFactory {
    public ThriftJobIDStandardScheme getScheme() {
      return new ThriftJobIDStandardScheme();
    }
  }

  private static class ThriftJobIDStandardScheme extends StandardScheme<ThriftJobID> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftJobID struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JOB_TRACKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobTrackerID = iprot.readString();
              struct.setJobTrackerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobID = iprot.readI32();
              struct.setJobIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AS_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.asString = iprot.readString();
              struct.setAsStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftJobID struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.jobTrackerID != null) {
        oprot.writeFieldBegin(JOB_TRACKER_ID_FIELD_DESC);
        oprot.writeString(struct.jobTrackerID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
      oprot.writeI32(struct.jobID);
      oprot.writeFieldEnd();
      if (struct.asString != null) {
        oprot.writeFieldBegin(AS_STRING_FIELD_DESC);
        oprot.writeString(struct.asString);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftJobIDTupleSchemeFactory implements SchemeFactory {
    public ThriftJobIDTupleScheme getScheme() {
      return new ThriftJobIDTupleScheme();
    }
  }

  private static class ThriftJobIDTupleScheme extends TupleScheme<ThriftJobID> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftJobID struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetJobTrackerID()) {
        optionals.set(0);
      }
      if (struct.isSetJobID()) {
        optionals.set(1);
      }
      if (struct.isSetAsString()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetJobTrackerID()) {
        oprot.writeString(struct.jobTrackerID);
      }
      if (struct.isSetJobID()) {
        oprot.writeI32(struct.jobID);
      }
      if (struct.isSetAsString()) {
        oprot.writeString(struct.asString);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftJobID struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.jobTrackerID = iprot.readString();
        struct.setJobTrackerIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.jobID = iprot.readI32();
        struct.setJobIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.asString = iprot.readString();
        struct.setAsStringIsSet(true);
      }
    }
  }

}

