#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import Namenode
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void chmod(RequestContext ctx, string path, i16 perms)'
  print '  void chown(RequestContext ctx, string path, string owner, string group)'
  print '   df(RequestContext ctx)'
  print '  void enterSafeMode(RequestContext ctx)'
  print '   getBlocks(RequestContext ctx, string path, i64 offset, i64 length)'
  print '  i64 getPreferredBlockSize(RequestContext ctx, string path)'
  print '  bool isInSafeMode(RequestContext ctx)'
  print '  void leaveSafeMode(RequestContext ctx)'
  print '   ls(RequestContext ctx, string path)'
  print '  bool mkdirhier(RequestContext ctx, string path, i16 perms)'
  print '  void refreshNodes(RequestContext ctx)'
  print '  bool rename(RequestContext ctx, string path, string newPath)'
  print '  void reportBadBlocks(RequestContext ctx,  blocks)'
  print '  Stat stat(RequestContext ctx, string path)'
  print '  ContentSummary getContentSummary(RequestContext ctx, string Path)'
  print '   multiGetContentSummary(RequestContext ctx,  paths)'
  print '  void setQuota(RequestContext ctx, string path, i64 namespaceQuota, i64 diskspaceQuota)'
  print '  bool setReplication(RequestContext ctx, string path, i16 replication)'
  print '  bool unlink(RequestContext ctx, string path, bool recursive)'
  print '  void utime(RequestContext ctx, string path, i64 atime, i64 mtime)'
  print '  void datanodeUp(string name, string storage, i32 thriftPort)'
  print '  void datanodeDown(string name, string storage, i32 thriftPort)'
  print '  ThriftDelegationToken getDelegationToken(RequestContext ctx, string renewer)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Namenode.Client(protocol)
transport.open()

if cmd == 'chmod':
  if len(args) != 3:
    print 'chmod requires 3 args'
    sys.exit(1)
  pp.pprint(client.chmod(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'chown':
  if len(args) != 4:
    print 'chown requires 4 args'
    sys.exit(1)
  pp.pprint(client.chown(eval(args[0]),args[1],args[2],args[3],))

elif cmd == 'df':
  if len(args) != 1:
    print 'df requires 1 args'
    sys.exit(1)
  pp.pprint(client.df(eval(args[0]),))

elif cmd == 'enterSafeMode':
  if len(args) != 1:
    print 'enterSafeMode requires 1 args'
    sys.exit(1)
  pp.pprint(client.enterSafeMode(eval(args[0]),))

elif cmd == 'getBlocks':
  if len(args) != 4:
    print 'getBlocks requires 4 args'
    sys.exit(1)
  pp.pprint(client.getBlocks(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'getPreferredBlockSize':
  if len(args) != 2:
    print 'getPreferredBlockSize requires 2 args'
    sys.exit(1)
  pp.pprint(client.getPreferredBlockSize(eval(args[0]),args[1],))

elif cmd == 'isInSafeMode':
  if len(args) != 1:
    print 'isInSafeMode requires 1 args'
    sys.exit(1)
  pp.pprint(client.isInSafeMode(eval(args[0]),))

elif cmd == 'leaveSafeMode':
  if len(args) != 1:
    print 'leaveSafeMode requires 1 args'
    sys.exit(1)
  pp.pprint(client.leaveSafeMode(eval(args[0]),))

elif cmd == 'ls':
  if len(args) != 2:
    print 'ls requires 2 args'
    sys.exit(1)
  pp.pprint(client.ls(eval(args[0]),args[1],))

elif cmd == 'mkdirhier':
  if len(args) != 3:
    print 'mkdirhier requires 3 args'
    sys.exit(1)
  pp.pprint(client.mkdirhier(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'refreshNodes':
  if len(args) != 1:
    print 'refreshNodes requires 1 args'
    sys.exit(1)
  pp.pprint(client.refreshNodes(eval(args[0]),))

elif cmd == 'rename':
  if len(args) != 3:
    print 'rename requires 3 args'
    sys.exit(1)
  pp.pprint(client.rename(eval(args[0]),args[1],args[2],))

elif cmd == 'reportBadBlocks':
  if len(args) != 2:
    print 'reportBadBlocks requires 2 args'
    sys.exit(1)
  pp.pprint(client.reportBadBlocks(eval(args[0]),eval(args[1]),))

elif cmd == 'stat':
  if len(args) != 2:
    print 'stat requires 2 args'
    sys.exit(1)
  pp.pprint(client.stat(eval(args[0]),args[1],))

elif cmd == 'getContentSummary':
  if len(args) != 2:
    print 'getContentSummary requires 2 args'
    sys.exit(1)
  pp.pprint(client.getContentSummary(eval(args[0]),args[1],))

elif cmd == 'multiGetContentSummary':
  if len(args) != 2:
    print 'multiGetContentSummary requires 2 args'
    sys.exit(1)
  pp.pprint(client.multiGetContentSummary(eval(args[0]),eval(args[1]),))

elif cmd == 'setQuota':
  if len(args) != 4:
    print 'setQuota requires 4 args'
    sys.exit(1)
  pp.pprint(client.setQuota(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'setReplication':
  if len(args) != 3:
    print 'setReplication requires 3 args'
    sys.exit(1)
  pp.pprint(client.setReplication(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'unlink':
  if len(args) != 3:
    print 'unlink requires 3 args'
    sys.exit(1)
  pp.pprint(client.unlink(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'utime':
  if len(args) != 4:
    print 'utime requires 4 args'
    sys.exit(1)
  pp.pprint(client.utime(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'datanodeUp':
  if len(args) != 3:
    print 'datanodeUp requires 3 args'
    sys.exit(1)
  pp.pprint(client.datanodeUp(args[0],args[1],eval(args[2]),))

elif cmd == 'datanodeDown':
  if len(args) != 3:
    print 'datanodeDown requires 3 args'
    sys.exit(1)
  pp.pprint(client.datanodeDown(args[0],args[1],eval(args[2]),))

elif cmd == 'getDelegationToken':
  if len(args) != 2:
    print 'getDelegationToken requires 2 args'
    sys.exit(1)
  pp.pprint(client.getDelegationToken(eval(args[0]),args[1],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
