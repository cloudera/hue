#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from sentry_policy_service import SentryPolicyService
from sentry_policy_service.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  TCreateSentryRoleResponse create_sentry_role(TCreateSentryRoleRequest request)')
  print('  TDropSentryRoleResponse drop_sentry_role(TDropSentryRoleRequest request)')
  print('  TAlterSentryRoleGrantPrivilegeResponse alter_sentry_role_grant_privilege(TAlterSentryRoleGrantPrivilegeRequest request)')
  print('  TAlterSentryRoleRevokePrivilegeResponse alter_sentry_role_revoke_privilege(TAlterSentryRoleRevokePrivilegeRequest request)')
  print('  TAlterSentryRoleAddGroupsResponse alter_sentry_role_add_groups(TAlterSentryRoleAddGroupsRequest request)')
  print('  TAlterSentryRoleDeleteGroupsResponse alter_sentry_role_delete_groups(TAlterSentryRoleDeleteGroupsRequest request)')
  print('  TListSentryRolesResponse list_sentry_roles_by_group(TListSentryRolesRequest request)')
  print('  TListSentryPrivilegesResponse list_sentry_privileges_by_role(TListSentryPrivilegesRequest request)')
  print('  TListSentryPrivilegesForProviderResponse list_sentry_privileges_for_provider(TListSentryPrivilegesForProviderRequest request)')
  print('  TDropPrivilegesResponse drop_sentry_privilege(TDropPrivilegesRequest request)')
  print('  TRenamePrivilegesResponse rename_sentry_privilege(TRenamePrivilegesRequest request)')
  print('  TListSentryPrivilegesByAuthResponse list_sentry_privileges_by_authorizable(TListSentryPrivilegesByAuthRequest request)')
  print('  TSentryConfigValueResponse get_sentry_config_value(TSentryConfigValueRequest request)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = SentryPolicyService.Client(protocol)
transport.open()

if cmd == 'create_sentry_role':
  if len(args) != 1:
    print('create_sentry_role requires 1 args')
    sys.exit(1)
  pp.pprint(client.create_sentry_role(eval(args[0]),))

elif cmd == 'drop_sentry_role':
  if len(args) != 1:
    print('drop_sentry_role requires 1 args')
    sys.exit(1)
  pp.pprint(client.drop_sentry_role(eval(args[0]),))

elif cmd == 'alter_sentry_role_grant_privilege':
  if len(args) != 1:
    print('alter_sentry_role_grant_privilege requires 1 args')
    sys.exit(1)
  pp.pprint(client.alter_sentry_role_grant_privilege(eval(args[0]),))

elif cmd == 'alter_sentry_role_revoke_privilege':
  if len(args) != 1:
    print('alter_sentry_role_revoke_privilege requires 1 args')
    sys.exit(1)
  pp.pprint(client.alter_sentry_role_revoke_privilege(eval(args[0]),))

elif cmd == 'alter_sentry_role_add_groups':
  if len(args) != 1:
    print('alter_sentry_role_add_groups requires 1 args')
    sys.exit(1)
  pp.pprint(client.alter_sentry_role_add_groups(eval(args[0]),))

elif cmd == 'alter_sentry_role_delete_groups':
  if len(args) != 1:
    print('alter_sentry_role_delete_groups requires 1 args')
    sys.exit(1)
  pp.pprint(client.alter_sentry_role_delete_groups(eval(args[0]),))

elif cmd == 'list_sentry_roles_by_group':
  if len(args) != 1:
    print('list_sentry_roles_by_group requires 1 args')
    sys.exit(1)
  pp.pprint(client.list_sentry_roles_by_group(eval(args[0]),))

elif cmd == 'list_sentry_privileges_by_role':
  if len(args) != 1:
    print('list_sentry_privileges_by_role requires 1 args')
    sys.exit(1)
  pp.pprint(client.list_sentry_privileges_by_role(eval(args[0]),))

elif cmd == 'list_sentry_privileges_for_provider':
  if len(args) != 1:
    print('list_sentry_privileges_for_provider requires 1 args')
    sys.exit(1)
  pp.pprint(client.list_sentry_privileges_for_provider(eval(args[0]),))

elif cmd == 'drop_sentry_privilege':
  if len(args) != 1:
    print('drop_sentry_privilege requires 1 args')
    sys.exit(1)
  pp.pprint(client.drop_sentry_privilege(eval(args[0]),))

elif cmd == 'rename_sentry_privilege':
  if len(args) != 1:
    print('rename_sentry_privilege requires 1 args')
    sys.exit(1)
  pp.pprint(client.rename_sentry_privilege(eval(args[0]),))

elif cmd == 'list_sentry_privileges_by_authorizable':
  if len(args) != 1:
    print('list_sentry_privileges_by_authorizable requires 1 args')
    sys.exit(1)
  pp.pprint(client.list_sentry_privileges_by_authorizable(eval(args[0]),))

elif cmd == 'get_sentry_config_value':
  if len(args) != 1:
    print('get_sentry_config_value requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_sentry_config_value(eval(args[0]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
